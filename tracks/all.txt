WEBVTT

1
00:00:04.299 --> 00:00:05.109
&gt;&gt;Akshay Kannan: Hi, everyone.
Cool, the mic works.

2
00:00:05.109 --> 00:00:07.839
Good afternoon, everyone. Are you guys excited
for the last session of the day?

3
00:00:07.839 --> 00:00:12.619
[ Cheering ].
&gt;&gt;Akshay Kannan: All right. My name is Akshay

4
00:00:12.619 --> 00:00:15.869
Kannan, and I'm a PM on the project.
&gt;&gt;Yuri Dolgov: And I'm Yuri Dolgov, and I'm

5
00:00:15.869 --> 00:00:18.890
software engineer on the project.
&gt;&gt;Akshay Kannan: And today we're going to

6
00:00:18.890 --> 00:00:23.130
talking to you about Google Cloud Print and
the future of printing. So real quick just

7
00:00:23.130 --> 00:00:26.890
to give you an outline of the presentation,
we'll start with an introduction, explain

8
00:00:26.890 --> 00:00:30.560
what Google Cloud Print is. We'll talk about
how you can integrate with our application

9
00:00:30.560 --> 00:00:35.050
both to print from as well as receive print
jobs. We'll talk about some of the formats

10
00:00:35.050 --> 00:00:40.000
we support and finally we'll talk about our
future plans and where we're heading going

11
00:00:40.000 --> 00:00:43.480
forward.
So real quick just to get a show of hands,

12
00:00:43.480 --> 00:00:47.390
how many of you guys in the audience have
heard of Google Cloud Print prior to Google

13
00:00:47.390 --> 00:00:51.969
I/O?
Awesome. Pretty much everyone. Cool.

14
00:00:51.969 --> 00:00:55.660
And how many of you guys have ever printed
something using Google Cloud Print before

15
00:00:55.660 --> 00:00:59.280
coming here?
Awesome. Most of you guys.

16
00:00:59.280 --> 00:01:03.010
And how many of you have ever used our API
before?

17
00:01:03.010 --> 00:01:07.740
All right. A significantly smaller number
of you.

18
00:01:07.740 --> 00:01:11.570
So hopefully this talk will change that and
will give you a better idea of our API as

19
00:01:11.570 --> 00:01:17.580
well as the platform as a whole.
So let's quick things off. So at a very high

20
00:01:17.580 --> 00:01:22.650
level, Google Cloud Print was a Web service
that we at Google created to take the pain

21
00:01:22.650 --> 00:01:26.720
out of printing. We know that setting up a
printer and printing to a printer are some

22
00:01:26.720 --> 00:01:30.100
of the most troublesome things that people
have to deal with everyday with computing,

23
00:01:30.100 --> 00:01:35.050
and we really wanted to make that experience
better. So our high level goal with Cloud

24
00:01:35.050 --> 00:01:38.910
Print was to provide a seamless, driverless
printing experience that worked regardless

25
00:01:38.910 --> 00:01:42.640
of what platform you were on.
Pretty much as long as your device can connect

26
00:01:42.640 --> 00:01:49.640
to the cloud you should be able to print without
running a full driver stack.

27
00:01:49.640 --> 00:01:54.300
So in terms of our motivations and what drove
this, I'm going to take a trip back in time

28
00:01:54.300 --> 00:01:58.820
to 2010, way back in the day when we were
designing Chrome OS and trying to find out

29
00:01:58.820 --> 00:02:05.200
how to solve printing on that platform.
So printing is obviously really, really important

30
00:02:05.200 --> 00:02:10.090
use case on the Chromebook. It's a device
that's designed for content creation, and

31
00:02:10.090 --> 00:02:15.650
people need to print. And so we were considering
different models for how to do this. On one

32
00:02:15.650 --> 00:02:20.450
hand you have your traditional driver model
which you're accustomed to on your Windows,

33
00:02:20.450 --> 00:02:25.070
Mac and Linux machine. This was great because
it was tried and true, but there were a lot

34
00:02:25.070 --> 00:02:28.890
of trade-offs with this.
One major problem we saw is that we'd have

35
00:02:28.890 --> 00:02:33.470
to package every single Chrome OS device that
we sold with a whole bunch of printer drivers

36
00:02:33.470 --> 00:02:39.030
that you may or may not even use. Especially
for an action you perform not too frequently,

37
00:02:39.030 --> 00:02:42.970
it doesn't make sense to have this code sitting
on every single device out there.

38
00:02:42.970 --> 00:02:46.590
I think another problem that we ran into with
drivers is just the fact that we would have

39
00:02:46.590 --> 00:02:50.810
to keep them continuously updated. If you
got a new printer and it didn't have the drivers

40
00:02:50.810 --> 00:02:54.280
that you needed on that device, you would
be dependent on Google or on your printer

41
00:02:54.280 --> 00:02:58.720
manufacturer to release drivers that were
specific to your model, and that was just

42
00:02:58.720 --> 00:03:02.770
a huge pain point and we didn't want to deal
with having this constant baggage on every

43
00:03:02.770 --> 00:03:08.069
Chromebook that we'd have to keep updated.
I think third of all, and most importantly,

44
00:03:08.069 --> 00:03:11.750
Google has a lot of platforms that are important
on the cloud. We have Chrome, we have Chrome

45
00:03:11.750 --> 00:03:16.319
OS, we have Android. And we didn't want to
just come up with a solution for one platform.

46
00:03:16.319 --> 00:03:19.900
We wanted to come up with a solution that
would scale to a whole bunch of platforms.

47
00:03:19.900 --> 00:03:24.380
And that was the beauty with Cloud Print is
because what we had was a Web service, we

48
00:03:24.380 --> 00:03:27.540
were able to build something server side which
supported all the different platforms that

49
00:03:27.540 --> 00:03:31.580
Google has.
And this is a comic I like. It's an excerpt

50
00:03:31.580 --> 00:03:35.970
from The Oatmeal, which sort of gives you
an idea of some of the pain points you run

51
00:03:35.970 --> 00:03:41.060
into with traditional driver installations,
and this is exactly what we want to avoid

52
00:03:41.060 --> 00:03:46.840
with Google Cloud Print.
So this cool 3D diagram gives you sort of

53
00:03:46.840 --> 00:03:51.590
a high level overview of how our system works
and what exactly it does.

54
00:03:51.590 --> 00:03:57.239
There are a variety of devices you can print
from. Some examples just given here are your

55
00:03:57.239 --> 00:04:01.989
tablet, your Chromebook, your Android phone,
your iPhone, your -- or even your traditional

56
00:04:01.989 --> 00:04:06.180
Mac or PC.
Your print jobs are sent to Google Cloud Print.

57
00:04:06.180 --> 00:04:10.099
You can and them over any format and then
we convert them into the format they need

58
00:04:10.099 --> 00:04:15.180
to be in for the destination printer.
So here are three examples of devices we can

59
00:04:15.180 --> 00:04:20.299
send print jobs to. Arrow A is pointing to
a printer that is shared through Google Cloud

60
00:04:20.299 --> 00:04:26.629
Print through an intermediary laptop acting
as a connector. We'll explain more of that

61
00:04:26.629 --> 00:04:28.979
later.
Arrow B is pointing to a cloud-ready printer.

62
00:04:28.979 --> 00:04:33.229
These are printers that talk directly to the
Google Cloud Print service from within their

63
00:04:33.229 --> 00:04:36.349
firmware. We have one of these printers up
front and will actually be doing some live

64
00:04:36.349 --> 00:04:41.749
printing for you later.
And then Arrow C, which is basically you're

65
00:04:41.749 --> 00:04:45.349
printing to an enterprise server, which could
be managing thousands of printers. And we

66
00:04:45.349 --> 00:04:49.939
actually use a server very much like this
inside of Google to manage all of our printers

67
00:04:49.939 --> 00:04:55.620
with employees.
So the great thing with Google Cloud Print,

68
00:04:55.620 --> 00:04:59.020
and one of the reasons that -- I guess the
beauty of the platform and why we find it

69
00:04:59.020 --> 00:05:04.539
so powerful is it allows you to do all kinds
of things that you could never really imagine

70
00:05:04.539 --> 00:05:10.279
doing before with local printing.
So for one thing as an application developer,

71
00:05:10.279 --> 00:05:14.889
to add printing functionality with your app
is as easy as three lines of code. Yuri is

72
00:05:14.889 --> 00:05:18.669
going to be guiding you through that at a
later portion of the presentation. But we've

73
00:05:18.669 --> 00:05:23.050
really made it really, really easy for you
as developers to plug into the platform and

74
00:05:23.050 --> 00:05:27.870
integrate with Google Cloud Print.
Another advantage you have is because with

75
00:05:27.870 --> 00:05:33.099
Cloud Print all your print jobs go through
the cloud, you can print not just to printers,

76
00:05:33.099 --> 00:05:36.900
but actually to any device or application
which is connected to the cloud.

77
00:05:36.900 --> 00:05:40.999
And we've built a lot of really interesting
products around this, which we'll be explaining

78
00:05:40.999 --> 00:05:46.219
more later in the presentation as well.
Finally -- and this feature is something we

79
00:05:46.219 --> 00:05:51.020
feel that is really powerful is that we've
made it dirt simple to share printers with

80
00:05:51.020 --> 00:05:55.059
people. I don't know how many of you guys
have ever tried to share a local printer with

81
00:05:55.059 --> 00:06:00.580
someone, but it's not exactly a really fun
process. You can either do it through network

82
00:06:00.580 --> 00:06:05.400
sharing and set up your computer as a server
or you can pass someone a USB cable in which

83
00:06:05.400 --> 00:06:09.270
case they have to plug it in, go through a
bunch of driver installs and by the time they'll

84
00:06:09.270 --> 00:06:14.759
get printing it will take forever.
So we've made sharing ridiculously easy, and

85
00:06:14.759 --> 00:06:18.749
I'm actually going to show you a demo of that
real quick.

86
00:06:18.749 --> 00:06:22.469
So the great thing with Cloud Print is we've
made sharing a printer as easy as sharing

87
00:06:22.469 --> 00:06:25.430
a doc.
So here you can see the Cloud Print management

88
00:06:25.430 --> 00:06:31.589
page in Google Chrome. This is just google.com/cloudprint.
You can see I have three printers. The printer

89
00:06:31.589 --> 00:06:34.789
that I have selected is actually the printer
in the front of the room. This is our demo

90
00:06:34.789 --> 00:06:40.129
printer. And if I want to share this printer
with Yuri, all I have to do is click the green

91
00:06:40.129 --> 00:06:45.240
share button and you see a sharing dialogue
just like the one in Docs. I type in Yuri's

92
00:06:45.240 --> 00:06:52.240
Gmail account, I hit enter and I hit share
and that's it. I've just shared this printer

93
00:06:53.939 --> 00:06:57.319
with Yuri and it was as easy as sharing a
doc with him.

94
00:06:57.319 --> 00:07:02.159
So because your printers are associated with
your Google account it allows us to make sharing

95
00:07:02.159 --> 00:07:07.869
really simple and seamless.
And I guess as a fourth point also with Google

96
00:07:07.869 --> 00:07:13.300
Cloud Print, because all your print jobs go
through the cloud, we're completely OS, device

97
00:07:13.300 --> 00:07:18.339
and browser agnostic, so your printing experience
is going to be virtually identical whether

98
00:07:18.339 --> 00:07:23.439
you're on your Android phone or whether you're
on your Windows PC. You're gonna see the same

99
00:07:23.439 --> 00:07:28.349
print options, see more or less the same dialogue,
and we've done this to provide a consistent

100
00:07:28.349 --> 00:07:32.069
experience regardless of what platform you're
on.

101
00:07:32.069 --> 00:07:34.899
So I've given you a high level overview of
the platform and now I'm going to hand it

102
00:07:34.899 --> 00:07:39.680
out to Yuri and he will explain how to integrate
with Cloud Print from within your apps.

103
00:07:39.680 --> 00:07:45.089
&gt;&gt;Yuri Dolgov: Hey, guys. I'm going to guide
you through engineering part of our presentation.

104
00:07:45.089 --> 00:07:51.300
And I want to start with the limitations of
existing printing solutions on different platforms.

105
00:07:51.300 --> 00:07:55.830
With Web platform nowadays you can pretty
much build whatever application you can think

106
00:07:55.830 --> 00:08:01.509
of, but when it comes to something as printing,
and still there are many people who care about

107
00:08:01.509 --> 00:08:07.330
getting their document printed, you are faced
with a whole bunch of different problems.

108
00:08:07.330 --> 00:08:12.129
Pages look different on different Web browsers,
so you have to worry about making them look

109
00:08:12.129 --> 00:08:16.379
the same on every single browser you basically
create your application for.

110
00:08:16.379 --> 00:08:20.779
If you have mobile version of your Web application,
it's even worse because usually the mobile

111
00:08:20.779 --> 00:08:25.819
version is different from desktop and you
might want to have printed version looks the

112
00:08:25.819 --> 00:08:30.899
same as on desktop.
With mobile devices it's even worse. For every

113
00:08:30.899 --> 00:08:35.039
single new platform you put your variation
to, you have to come up with different printing

114
00:08:35.039 --> 00:08:38.120
solution.
And for some platforms you don't even have

115
00:08:38.120 --> 00:08:43.810
standard solutions, you have to invent them
on your own, and that's what we are trying

116
00:08:43.810 --> 00:08:50.790
to solve with Cloud Print.
With Cloud Print we want to provide you with

117
00:08:50.790 --> 00:08:57.790
the same seamless printing experience on every
single platform. Same API, same content type

118
00:08:58.790 --> 00:09:03.319
of the documents, everything is the same on
every single platform.

119
00:09:03.319 --> 00:09:10.319
I want to start to use example of Web integration,
how you integrate Cloud Print in your existing

120
00:09:11.930 --> 00:09:15.870
Web application.
For Web we have very simple, yet very powerful

121
00:09:15.870 --> 00:09:20.310
way. It's gadget based.
So basically first thing you need to do is

122
00:09:20.310 --> 00:09:27.310
just load gadget code from this URL on to
your page. And gadget cross-name is called

123
00:09:28.300 --> 00:09:34.750
print gadget. It has only one static method,
which is create default print button, which

124
00:09:34.750 --> 00:09:41.649
creates default button, which looks like this.
And if you create instance of this gadget

125
00:09:41.649 --> 00:09:47.300
you can also use those methods listed before.
First of them is set on close callback, which

126
00:09:47.300 --> 00:09:50.300
is pretty trivial, allows you to set on close
callback.

127
00:09:50.300 --> 00:09:55.060
You can set any function that is going to
be called when print dialogue is closed.

128
00:09:55.060 --> 00:09:59.240
The next one is set print button. There it
is.

129
00:09:59.240 --> 00:10:04.569
And that one allows you to set whatever HTML
element you want to attach to bring the gadget

130
00:10:04.569 --> 00:10:07.519
to.
You can use either button generated by this

131
00:10:07.519 --> 00:10:14.370
method or you can use your own DOM, it doesn't
matter. Whenever a user clicks on the DOM

132
00:10:14.370 --> 00:10:18.339
element, a print dialogue is going to pop
out.

133
00:10:18.339 --> 00:10:23.899
Next -- and the main method of this gadget
is set print document, which allows you to

134
00:10:23.899 --> 00:10:30.310
set documents that is going to be printed.
First parameter of that is content type, content

135
00:10:30.310 --> 00:10:35.550
type of document you want to print. Second
one is title of the print job. Third one is

136
00:10:35.550 --> 00:10:42.170
going to be used to identify the job by the
user in print queue.

137
00:10:42.170 --> 00:10:49.170
Third one, and the main, is content of the
document. And content can be both binary or

138
00:10:49.860 --> 00:10:55.920
Base64 encoded. Though Base64 encoded version
is a little bit larger than binary version,

139
00:10:55.920 --> 00:10:59.220
you might still want to prefer that in some
cases, especially if you have some kind of

140
00:10:59.220 --> 00:11:05.800
Native-to-JavaScript breach, and in this case
you might face jobs of early string terminations

141
00:11:05.800 --> 00:11:12.579
or stuff like that. So you might sacrifice
a slice and still use Base64 encoded version

142
00:11:12.579 --> 00:11:15.740
of the document.
And if you decide to use Base64 encoded version

143
00:11:15.740 --> 00:11:21.019
of the document you will need to set force
parameter, which is optional content in the

144
00:11:21.019 --> 00:11:26.889
colon. And in this case you will need to parse
Base64 string.

145
00:11:26.889 --> 00:11:30.250
If you want to have more control on opening
and closing print dialogue, you might want

146
00:11:30.250 --> 00:11:36.149
to use two other -- two methods below. It's
open print dialogue and close print dialogue

147
00:11:36.149 --> 00:11:43.149
which allows you to open and close print dialogue.
And you might want to use it if you want to

148
00:11:43.240 --> 00:11:48.839
open print dialogue on some custom action
like print -- document was uploaded or -- and

149
00:11:48.839 --> 00:11:55.660
conversion was done or registration finished,
stuff like that, so any custom events.

150
00:11:55.660 --> 00:12:02.660
I want to go and show you how you do it in
an existing application. This is just fragment

151
00:12:04.110 --> 00:12:10.019
of code.
Let's say (indiscernible). It goes like here.

152
00:12:10.019 --> 00:12:15.360
So the first thing you need to do is load
gadget code, as I said. The next thing, in

153
00:12:15.360 --> 00:12:19.149
this example we use on print function, which
is going to be called whenever a user wants

154
00:12:19.149 --> 00:12:24.220
to print a document. The third thing we do
in this function is create a Cloud Print gadget

155
00:12:24.220 --> 00:12:27.250
instance.
The next thing we set print document you want

156
00:12:27.250 --> 00:12:32.589
to print. In this case we use the application
PDF content type, but we can use many others

157
00:12:32.589 --> 00:12:39.069
and we will tell you more about that later.
And we said print job title, like my print

158
00:12:39.069 --> 00:12:44.310
job title, something.
And this is Base64 encoded content of PDF.

159
00:12:44.310 --> 00:12:49.870
And since this is Base64 encoded, we need
to set force parameter to Base64.

160
00:12:49.870 --> 00:12:56.610
And then we just open print dialogue, and
that's it, we are done.

161
00:12:56.610 --> 00:13:02.129
And one more thing I want to mention is that
this code you'll work exactly the same way

162
00:13:02.129 --> 00:13:08.170
on any browser, including mobile browsers.
So you only implement it once and -- well,

163
00:13:08.170 --> 00:13:14.069
we'll do everything for you. We'll open different
type of dialogues on different browsers, depending

164
00:13:14.069 --> 00:13:21.069
on -- well, optimize them for those.
Yeah. And we want to show you how Box integrated

165
00:13:25.339 --> 00:13:32.339
with us. They basically took almost no time
to do that. I hope you know what Box is, all

166
00:13:33.370 --> 00:13:40.370
right? It's file sharing, file storing service.
I have my Box account opened here and I have

167
00:13:44.720 --> 00:13:51.720
only one document and I want to print it with
Cloud Print. So I see it send to Google Cloud

168
00:13:51.819 --> 00:13:58.620
Print and here I see print dialogue. As you
can see I have invitation to accept a new

169
00:13:58.620 --> 00:14:02.910
printer. The printer is actually shared with
me a few minutes ago. I will go ahead and

170
00:14:02.910 --> 00:14:08.420
accept this printer.
There we go, printer is accepted, and now

171
00:14:08.420 --> 00:14:15.420
we're going to use it to print this document.
You see the document was immediately sent

172
00:14:17.829 --> 00:14:23.230
to the printer and it's going to be printed
like in a few seconds.

173
00:14:23.230 --> 00:14:30.139
So it's super easy to integrate Web application
on Cloud Print and it's even easier to integrate

174
00:14:30.139 --> 00:14:35.399
Android application with Cloud Print.
In order to do that you will need to include

175
00:14:35.399 --> 00:14:42.399
Cloud Print intent code into your application,
and you can get this code on this URL --

176
00:14:44.629 --> 00:14:49.860
[ Applause ].
&gt;&gt;Akshay Kannan: Sorry to interrupt. To make

177
00:14:49.860 --> 00:14:55.009
matters even more interesting, this printer
is connected using a mobile network, so -- yeah,

178
00:14:55.009 --> 00:14:57.410
everything seems to be connected.
[Laughter].

179
00:14:57.410 --> 00:15:02.420
&gt;&gt;Yuri Dolgov: Okay. I will continue this
Android integration.

180
00:15:02.420 --> 00:15:07.709
On Android, the integration is even simpler
than on the Web. All we need to do is just

181
00:15:07.709 --> 00:15:13.769
add Cloud Print intent into your application,
and you can get a code of this intent on this

182
00:15:13.769 --> 00:15:18.829
URL.
And the intent class name is cloud print dialogue.

183
00:15:18.829 --> 00:15:24.149
And all we need to do is just illustrate this
intent, subdate it and type up the documents

184
00:15:24.149 --> 00:15:30.249
you want to print, set titles of the document
you want to print and start the intent.

185
00:15:30.249 --> 00:15:35.329
Since it's so that simple I want to go ahead
and show you how to do it in a real application.

186
00:15:35.329 --> 00:15:42.329
In my case application is not that real. This
is Danny Web browser. Thank you.

187
00:15:42.649 --> 00:15:48.370
So it's Danny Web browser, and there is only
three URL elements, URL box, which is basically

188
00:15:48.370 --> 00:15:52.379
a box where you can type URL you want to go
to. Go button, which you need to click in

189
00:15:52.379 --> 00:15:59.379
order to go to this URL. And Web view, which
is -- well, which contains content of the

190
00:16:00.199 --> 00:16:05.079
Web page.
So you will see codes there. It's very simple.

191
00:16:05.079 --> 00:16:12.079
I don't want to spend too much time on that.
The only non-trivial part here is that we

192
00:16:12.379 --> 00:16:16.410
have functionality to get HTML content on
the Web page, and in order to do that we need

193
00:16:16.410 --> 00:16:21.209
to have JavaScript-to-Java bridge because
-- well, this is the only way you can access

194
00:16:21.209 --> 00:16:27.480
Web view content.
Anyways, I'm going to compile and start this

195
00:16:27.480 --> 00:16:34.480
application.
There we go. So this is, as I said, very simple

196
00:16:38.519 --> 00:16:43.329
browser. You can open the page, you can navigate,
do stuff like that.

197
00:16:43.329 --> 00:16:49.160
Let's go ahead and integrate this Cloud Print.
What we need to do is just add the URL element.

198
00:16:49.160 --> 00:16:56.160
You can click in order to open print dialogue.
In this case it's a button and I have it already

199
00:17:00.339 --> 00:17:07.339
in my layout XML file, so I don't want to
spend time implementing, write it once again.

200
00:17:08.150 --> 00:17:15.100
And they have (indiscernible) already. I will
go ahead and explain line by line what we

201
00:17:15.100 --> 00:17:18.080
have here.
First thing we do is create print intent.

202
00:17:18.080 --> 00:17:25.080
Then we find print button in the UI and set
on click listener.

203
00:17:26.130 --> 00:17:32.620
So in on click listener what we do is just
get content of the Web page, set it as document

204
00:17:32.620 --> 00:17:39.170
to be printed, along with content type, which
in this case that's HTML, set title of the

205
00:17:39.170 --> 00:17:43.250
print job and start the activity. That's pretty
much it.

206
00:17:43.250 --> 00:17:50.250
Let's look how it works.
So it should start in a second. Here we go.

207
00:17:57.250 --> 00:18:04.250
The connection is a bit slow. Here you see
a new button print. We'll go ahead and click

208
00:18:11.710 --> 00:18:18.490
this button.
This will open print dialogue and you can

209
00:18:18.490 --> 00:18:25.490
select printer you want to print to. Let's
use the same printer again.

210
00:18:25.710 --> 00:18:29.100
Print. And it should be instantly sent to
printer.

211
00:18:29.100 --> 00:18:32.250
No?
&gt;&gt;Akshay Kannan: There we go.

212
00:18:32.250 --> 00:18:39.250
&gt;&gt;Yuri Dolgov: Okay. Worked this time again.
Okay. It's going to be printed in a few seconds,

213
00:18:42.310 --> 00:18:47.830
so I'm going to continue with -- yeah, with
my presentation.

214
00:18:47.830 --> 00:18:54.830
In some cases those two integrations might
not -- oh, by the way, yeah, you can get the

215
00:18:55.300 --> 00:19:01.430
code of this presentation from here. It's
completely open. You can check how it looks

216
00:19:01.430 --> 00:19:06.610
in details.
So in some cases those two integrations might

217
00:19:06.610 --> 00:19:09.970
not be enough for you. For example, you are
working with some other platform or you want

218
00:19:09.970 --> 00:19:15.660
to have some more flexibility, doesn't matter.
We still have open APIs that you can use.

219
00:19:15.660 --> 00:19:20.610
And there are three main API codes that you
need to know if you want to send a job to

220
00:19:20.610 --> 00:19:24.420
Cloud Print. First one is search. It allows
you to search for all the printers available

221
00:19:24.420 --> 00:19:30.030
for the user. You can do some filter and some
searches, like some filter -- like filter

222
00:19:30.030 --> 00:19:36.060
in by (indiscernible) or by status for those
printers, but after all the goal is to provide

223
00:19:36.060 --> 00:19:41.210
user a list of printers available for them.
Once user selects the printer they want to

224
00:19:41.210 --> 00:19:46.050
print to, you need to do another code, printer
code, which will return capabilities of the

225
00:19:46.050 --> 00:19:51.290
printer. And you will need to show those capabilities
to the users so that they could select how

226
00:19:51.290 --> 00:19:56.010
they want to print the job. Once capabilities
are selected, you would need to do the third

227
00:19:56.010 --> 00:20:02.680
one, third call, which is the certainly the
main one. That will submit a print job to

228
00:20:02.680 --> 00:20:09.680
printer, printer is given printer ID, title
of the job, capabilities, content type, if

229
00:20:14.450 --> 00:20:18.820
-- if content of the job is Base 64 encoder,
so you will need to set up a content task

230
00:20:18.820 --> 00:20:25.370
for encoding as well and content itself. So
it's super easy again and with that I'm going

231
00:20:25.370 --> 00:20:29.930
to hand it back to Akshay.
&gt;&gt;Akshay Kannan: Sounds good.

232
00:20:29.930 --> 00:20:32.740
So we have showed how you can integrate with
that --

233
00:20:32.740 --> 00:20:35.790
[ Applause ]
&gt;&gt;Yuri Dolgov: Thank you.

234
00:20:35.790 --> 00:20:41.440
&gt;&gt;Akshay Kannan: So we have showed you how
we can integrate with Cloud Print, you can

235
00:20:41.440 --> 00:20:47.610
use our Web widget, Android widget, or HTTP
API directly, we have really tried to make

236
00:20:47.610 --> 00:20:53.970
it easy to bring that functionality into your
app. That's printing from a lot of places,

237
00:20:53.970 --> 00:20:58.940
but we actually also support printing to a
lot of places, printing to anywhere. We have

238
00:20:58.940 --> 00:21:03.270
over 20 million printers that are registered
with Google Cloud Print as of today and that

239
00:21:03.270 --> 00:21:10.270
number is continuing to grow, so our main
type of printers are -- at least for the best

240
00:21:10.750 --> 00:21:15.740
user experience, we recommend what we call
cloud ready printers. These are printers that

241
00:21:15.740 --> 00:21:21.520
connect directly to the Web from within the
firmware themselves. We have over 70 cloud

242
00:21:21.520 --> 00:21:27.120
ready printer models that are available from
a wide variety of retailers and manufacturers,

243
00:21:27.120 --> 00:21:31.630
and we've -- in particular printers the list
that we have here on our slide deck of HP,

244
00:21:31.630 --> 00:21:37.490
Canon, Kodak, Epson, Fuji Xerox and Samsung,
are just the manufacturers who have printers

245
00:21:37.490 --> 00:21:42.520
that are currently available. We are working
with a much larger list of manufacturers over

246
00:21:42.520 --> 00:21:47.760
time to expand this out. So basically it will
be hard at some point to buy a printer that's

247
00:21:47.760 --> 00:21:51.670
not cloud ready.
We also have a full list of printers on our

248
00:21:51.670 --> 00:21:58.420
Web site, g.co/cloudprint where you can check
out what printers are available. And which

249
00:21:58.420 --> 00:22:03.790
ones are cloud ready. I know a lot of you
also probably don't want to buy a new printer.

250
00:22:03.790 --> 00:22:08.200
You just use Google Cloud Print, and the good
news is that you don't have to. We support

251
00:22:08.200 --> 00:22:12.300
what's called the Chrome connector, which
allows you to take any local printer that's

252
00:22:12.300 --> 00:22:16.470
connected to your printer running Chrome and
use that printer as a print server.

253
00:22:16.470 --> 00:22:20.270
So how this works it's let's say that you
have Google Chrome running on your Windows

254
00:22:20.270 --> 00:22:24.650
PC at home. You can USB your printer into
there, set it up as a local printer. And then

255
00:22:24.650 --> 00:22:29.530
from within Chrome settings, you can register
-- in fact here's a screen shot from the settings

256
00:22:29.530 --> 00:22:33.890
dialogue, you just click the add printers
button right there, and it's simply a one-click

257
00:22:33.890 --> 00:22:36.150
process.
Your local printers will automatically get

258
00:22:36.150 --> 00:22:40.850
added to your Google Cloud Print account with
the account that you are logged in with. So

259
00:22:40.850 --> 00:22:45.390
we do make it easy to set up printers that
are not cloud ready. The only caveat here

260
00:22:45.390 --> 00:22:49.730
is that you do need to keep your computer
running in order for jobs to be printed out.

261
00:22:49.730 --> 00:22:54.720
That being said, if you submit a print job
to a computer that's turned off, it gets queued,

262
00:22:54.720 --> 00:22:58.000
so next time you turn it on your job will
get released and printed out from the printer

263
00:22:58.000 --> 00:23:02.360
that's connected to it.
Also we don't just support printer to printers,

264
00:23:02.360 --> 00:23:07.470
as I mentioned earlier. But we really support
printing to anywhere. You can print to -- currently

265
00:23:07.470 --> 00:23:11.960
every Google Cloud Print dialogue has the
option save to Google drive, which will take

266
00:23:11.960 --> 00:23:15.660
whatever you are printing, convert it to a
PDF, and save it in your Google drive account

267
00:23:15.660 --> 00:23:19.560
or you can even print to a FedEx office, which
is a partnership we recently launched this

268
00:23:19.560 --> 00:23:24.680
year which allows you to print your document
and get a retrieval code, which you can use

269
00:23:24.680 --> 00:23:29.570
to basically print out and pay for your job
at any local Fed-Ex office location within

270
00:23:29.570 --> 00:23:33.000
the U.S.
Finally, another little exciting feature that

271
00:23:33.000 --> 00:23:38.020
we have is the ability to print to your mobile
phone. So if you have Chrome for mobile installed

272
00:23:38.020 --> 00:23:43.390
on Android or iOS and you are signed into
sync, what we do is we actually register your

273
00:23:43.390 --> 00:23:48.340
phone as a Google Cloud Print device in your
dialogue. So what you will be able to do -- whenever

274
00:23:48.340 --> 00:23:51.990
you are printing from Cloud Print, if you
are using the same account that you have set

275
00:23:51.990 --> 00:23:56.520
up your phone with, you will see your phone
as a destination that you can print to. And

276
00:23:56.520 --> 00:24:00.690
what we do is we just push an Android push
notification that the job is available and

277
00:24:00.690 --> 00:24:05.240
it gets downloaded to your phone.
So this is already available today and you

278
00:24:05.240 --> 00:24:11.320
guys can try it out.
Finally, in terms of printing to anywhere,

279
00:24:11.320 --> 00:24:16.210
we also -- like most of our product -- have
a fully open API that you can use as developers

280
00:24:16.210 --> 00:24:21.760
to receive print jobs. So we have an XMPP
interface, which you can connect to in order

281
00:24:21.760 --> 00:24:27.610
to receive print job notifications. And we
also have a full set of HTTPS interfaces that

282
00:24:27.610 --> 00:24:32.370
you can connect to to basically fetch the
job, set job status. And I'll delve into the

283
00:24:32.370 --> 00:24:35.670
details in the next slide.
Cloud ready printers such as the one you can

284
00:24:35.670 --> 00:24:40.690
see on stage have already implemented this
in firmware. So it's real easy to implement

285
00:24:40.690 --> 00:24:45.390
whether you are working with low-level hardware
or building an application. Yeah, really,

286
00:24:45.390 --> 00:24:52.390
any application or device can implement this.
And so we leave the possibilities of integration

287
00:24:52.510 --> 00:24:56.780
up to the developer. And a lot of this really
allows you to use your imagination for what

288
00:24:56.780 --> 00:25:01.740
you can print to. Some examples we just thought
of are you could print to your Kindle. You

289
00:25:01.740 --> 00:25:04.900
could build an application that would allow
you to print documents for reading on the

290
00:25:04.900 --> 00:25:09.010
go. You could technically build an application
that would even allow you to print to a smart

291
00:25:09.010 --> 00:25:16.010
Web connected TV. And if monkeys were cloud
connected, then you could even print to a

292
00:25:16.270 --> 00:25:22.880
monkey with a typewriter. That one might require
more imagination than the others.

293
00:25:22.880 --> 00:25:27.850
So just to go into the details of our API,
there's two API calls you really call about

294
00:25:27.850 --> 00:25:33.370
with our job retrieval. There's our fetch
API, which takes in a printer ID as an argument,

295
00:25:33.370 --> 00:25:38.040
so you would call to fetch API when you receive
an XMPP ping that a job is available. And

296
00:25:38.040 --> 00:25:42.630
what the fetch API does is it returns a JSON
list of the jobs that are available to be

297
00:25:42.630 --> 00:25:49.630
printed. In this JSON object for each job,
we have two parameters that are important,

298
00:25:50.160 --> 00:25:54.350
the fie URL parameter and the ticketURL parameter.
The fileURL parameter, which is the one right

299
00:25:54.350 --> 00:26:01.170
here, is basically a URL that you can use
to download the file. So the cool thing about

300
00:26:01.170 --> 00:26:06.590
this URL is that -- you can -- you can dynamically
change the format of the file by specifying

301
00:26:06.590 --> 00:26:11.190
a different accept header when you are fetching
this URL. So for example, if you want to fetch

302
00:26:11.190 --> 00:26:17.150
the job as a PDF, you set your accept header
to be application PDF, then we will convert

303
00:26:17.150 --> 00:26:19.900
the document to a PDF server site and send
it to your printer.

304
00:26:19.900 --> 00:26:25.950
If you want to fetch it -- the other main
format is PWG Raster, which is a simple Raster

305
00:26:25.950 --> 00:26:30.740
based image format. If you want to fetch that,
you just set your accept header to PWG Raster

306
00:26:30.740 --> 00:26:34.760
and we will stream the file to you in that
format.

307
00:26:34.760 --> 00:26:40.640
And then finally ticketURL is basically your
print ticket that contains a list of the filled

308
00:26:40.640 --> 00:26:46.330
options of exactly what the user specified.
For example, portrait or landscape or whatever

309
00:26:46.330 --> 00:26:52.160
other capabilities you have exposed from your
printer that are configurable.

310
00:26:52.160 --> 00:26:56.080
Our second API, which is important is our
control API, which allows you to basically

311
00:26:56.080 --> 00:27:01.410
update the status of the job as you're printing
it. So by default, whenever you print a job,

312
00:27:01.410 --> 00:27:05.920
we set the status of that job to be queued.
And over time as you are printing that -- so

313
00:27:05.920 --> 00:27:09.360
for example, when you start to fetch, you
can set the job, move the status from queued

314
00:27:09.360 --> 00:27:12.480
to be in progress, and then when you are done
printing the job, you can move the status

315
00:27:12.480 --> 00:27:15.220
to done.
If something goes wrong, you can also set

316
00:27:15.220 --> 00:27:22.220
the status to error, and specify an error
of coded message string. Finally we do take

317
00:27:22.730 --> 00:27:28.380
security and privacy really seriously with
Google Cloud Print and one example of how

318
00:27:28.380 --> 00:27:33.890
we do this is we have a secure data access
model, such that every item within our system,

319
00:27:33.890 --> 00:27:37.300
whether it's a printer, whether it's a print
job is (indiscernible), so that you can only

320
00:27:37.300 --> 00:27:43.260
print to that if you have explicit permissions
as your account to send a print job there.

321
00:27:43.260 --> 00:27:47.720
So all of the APIs that we mentioned earlier
are authenticated so you have to be logged

322
00:27:47.720 --> 00:27:52.380
in as a user who has explicit privileges to
access that. So we earlier said that you could

323
00:27:52.380 --> 00:27:56.910
print to anything, but that was a lie because
we have security restrictions in place.

324
00:27:56.910 --> 00:28:02.950
Finally, we also support so -- so this is
actually I'll start with the problem here

325
00:28:02.950 --> 00:28:08.730
is when you are dealing with printer registrations,
registration is an API that's difficult to

326
00:28:08.730 --> 00:28:14.330
make an authenticated call because it requires
the printer to somehow authenticate as you

327
00:28:14.330 --> 00:28:20.130
before it can register itself with the system.
That's a hard problem, because -- the biggest

328
00:28:20.130 --> 00:28:24.600
concern for is it's a security issue because
you could have printers when you are typing

329
00:28:24.600 --> 00:28:28.660
credentials into the printer that could store
them locally unencrypted on the device, make

330
00:28:28.660 --> 00:28:33.230
it vulnerable to attackers who could steal
your Google account from the printer. And

331
00:28:33.230 --> 00:28:37.090
then also I think on another folder also the
UI problem of not all printers -- not all

332
00:28:37.090 --> 00:28:40.950
printers support text entry on their device.
So we've solved this using what we call the

333
00:28:40.950 --> 00:28:45.390
anonymous registration flow. This allows the
printer to basically make an unauthenticated

334
00:28:45.390 --> 00:28:51.540
registration call to our servers, which anonymously
registers the printer to Google Cloud Print.

335
00:28:51.540 --> 00:28:56.850
In order to actually complete the registration
process, we have returned a URL to the printer,

336
00:28:56.850 --> 00:29:00.350
which the printer can then print out and give
to the user and the user can visit that URL

337
00:29:00.350 --> 00:29:04.750
on their Web browser and complete the registration
process from there. We know that this is secure

338
00:29:04.750 --> 00:29:10.140
because you are only entering your credentials
into a Google log-in page and not into a third

339
00:29:10.140 --> 00:29:15.180
party interface. And then finally there's
also robot accounts, which are special accounts

340
00:29:15.180 --> 00:29:19.890
that we create just for printers in our system
when the registration happens. The nice thing

341
00:29:19.890 --> 00:29:25.310
with robot accounts is that they are sandboxed,
so they are only given restricted access to

342
00:29:25.310 --> 00:29:28.350
Google Cloud Print and can't access other
things in your Google account that you wouldn't

343
00:29:28.350 --> 00:29:35.350
want them to. Finally, all of our interfaces
use HTTPS and we strongly encourage you as

344
00:29:35.390 --> 00:29:39.960
developers to also use the HTTPS versions
of our API.

345
00:29:39.960 --> 00:29:46.960
Finally, regarding privacy, another problem
that we've dealt with is spam invitations.

346
00:29:46.970 --> 00:29:52.320
So, for example, if I shared -- I could technically
share 100 printers with Yuri and completely

347
00:29:52.320 --> 00:29:57.040
spam his account. Another possible attack
is that I could share a printer, which looks

348
00:29:57.040 --> 00:30:00.620
like one of Yuri's printers to him, and he
could end up printing to that and I could

349
00:30:00.620 --> 00:30:04.620
steal all of his data as a result. So one
thing to prevent this is we have implemented

350
00:30:04.620 --> 00:30:09.120
printer sharing invitations.
So this, as you saw earlier, requires Yuri

351
00:30:09.120 --> 00:30:14.470
to explicitly accept my printer sharing invitation
before he can print to a printer. As part

352
00:30:14.470 --> 00:30:17.720
of that invite process, he sees exactly who
I am and the name of the printer that I'm

353
00:30:17.720 --> 00:30:22.470
sharing with him, so this prevents you from
getting spammed with printers and also prevents

354
00:30:22.470 --> 00:30:26.360
you from printing to printers unless you are
absolutely sure that you have accepted an

355
00:30:26.360 --> 00:30:32.230
invitation and that you know who sent you
that invite. And then finally regarding print

356
00:30:32.230 --> 00:30:37.610
job content retention, we delete for jobs
as soon as the status is set to done. If the

357
00:30:37.610 --> 00:30:42.250
status is never set to done, then after 30
days, we delete print job content from our

358
00:30:42.250 --> 00:30:48.640
servers. We don't store them long term.
Finally, we've talked about how you can print

359
00:30:48.640 --> 00:30:53.220
from anywhere, how you can print to pretty
much anywhere, and I'm going to go into another

360
00:30:53.220 --> 00:30:56.860
part of our presentation which is how you
can print anything.

361
00:30:56.860 --> 00:31:01.680
We do support a very, you know, Google Cloud
Print was developed with sort of developers

362
00:31:01.680 --> 00:31:06.330
in mind. And client platforms in mind. And
we realized that when you are generating documents

363
00:31:06.330 --> 00:31:10.290
client side, you don't want to be bound to
a particular format that you have to generate.

364
00:31:10.290 --> 00:31:14.130
You want to have the flexibility to generate
your content in whatever formant you want

365
00:31:14.130 --> 00:31:17.780
and then send it server side where we can
do the necessary conversion.

366
00:31:17.780 --> 00:31:21.740
So for this reason, our API accepts virtually
any format as input for your print job. So

367
00:31:21.740 --> 00:31:28.740
you can send us pdfs, stand image formats,
most standard document formats, Google docs,

368
00:31:28.930 --> 00:31:34.060
Microsoft Office documents, HTML documents
or even URLs which we can fetch server side

369
00:31:34.060 --> 00:31:40.210
and NET Frame. On our side, we make our best
effort to convert this document into either

370
00:31:40.210 --> 00:31:47.210
PDF or PWG Raster. Another thing that's interesting,
if you don't care about conversion, then our

371
00:31:48.030 --> 00:31:52.380
platform -- if the input and output formats
are identical, we will actually do no conversion

372
00:31:52.380 --> 00:31:54.730
whatsoever and simply pass the file through
our system.

373
00:31:54.730 --> 00:31:58.890
This could be really useful if you wanted
to do something like make a 3D Cloud Printer

374
00:31:58.890 --> 00:32:02.750
that used a special format, as long as the
format that you in which you are submitting

375
00:32:02.750 --> 00:32:06.800
the job and receiving the job in are the same,
our system will just pass the job content

376
00:32:06.800 --> 00:32:09.860
right through.
It's also particularly useful for sending

377
00:32:09.860 --> 00:32:13.810
-- if you want to encrypt content and before
you send it to us, decrypt it after you receive

378
00:32:13.810 --> 00:32:18.400
it, you could send us a custom encrypted format,
which we would pass directly through without

379
00:32:18.400 --> 00:32:25.220
doing any conversion on whatsoever.
Then, finally, one format that I wanted to

380
00:32:25.220 --> 00:32:30.570
focus on that I think is particularly powerful
is HTML. It's a format that's easy to create

381
00:32:30.570 --> 00:32:37.190
client side and sent to us on the server side.
The other great thing about HTML is there's

382
00:32:37.190 --> 00:32:42.660
no direct page content that's here or I guess
page layout information. So it allows us server

383
00:32:42.660 --> 00:32:48.370
side to intelligently flow the HTML, depending
on what media size of paper that you are printing

384
00:32:48.370 --> 00:32:51.600
to. So, for example, if you are in the U.S.
and you are printing to an 8 and a half by

385
00:32:51.600 --> 00:32:57.110
11 page, we will flow the HTML text and images
for an 8 and a half by 11 paper and generate

386
00:32:57.110 --> 00:33:02.590
the appropriate PDF server side. If you are
in some other and country and using A4, then

387
00:33:02.590 --> 00:33:06.460
we would flow the HTML content for an A4 and
send that to you, so as an application you

388
00:33:06.460 --> 00:33:11.630
wouldn't even have to worry about the media
size of the destination printer that you are

389
00:33:11.630 --> 00:33:17.310
sending content to.
So I'm now going to just spend a little bit

390
00:33:17.310 --> 00:33:21.740
of time talking about our future work and
where we're heading going forward with Google

391
00:33:21.740 --> 00:33:26.300
Cloud Print.
So -- so one huge challenge for us has been

392
00:33:26.300 --> 00:33:31.040
handling printer capabilities. There's -- they
can be kind of a nightmare to deal with. There's

393
00:33:31.040 --> 00:33:38.040
a lot -- basically with printer capabilities,
the two main formats are XPS and PPD. And

394
00:33:38.960 --> 00:33:43.000
the thing that makes them interesting as well,
there are standards. Printer manufacturers

395
00:33:43.000 --> 00:33:47.950
only have to write capabilities such that
they'll work with their particular driver.

396
00:33:47.950 --> 00:33:52.180
So for this reason, there can be a lot of
ways to specify the same option. Even an option

397
00:33:52.180 --> 00:33:58.000
as simple as portrait or landscape specified
differently on different platforms. So we

398
00:33:58.000 --> 00:34:01.880
really -- what we want to do is rather than
just reading strings, we want to be a able

399
00:34:01.880 --> 00:34:06.980
to intelligently understand these capabilities,
make sense of them, produce good options UI

400
00:34:06.980 --> 00:34:12.210
around them, and also even surface some of
this functionality to developers. So that

401
00:34:12.210 --> 00:34:15.060
as an application developer, you can know
about the printer that you are sending jobs

402
00:34:15.060 --> 00:34:20.070
to at a high level without having to parse
these capabilities yourself. So that's one

403
00:34:20.070 --> 00:34:25.080
of our big goals going forward is to more
intelligently understand these different capabilities

404
00:34:25.080 --> 00:34:28.850
and be able to semantically parse them on
our side.

405
00:34:28.850 --> 00:34:34.210
Real quick here, you can see our server's
JSON representation or an excerpt from our

406
00:34:34.210 --> 00:34:41.210
server's JSON representation of an XPS capability,
we will see an idea of what that's like. Another

407
00:34:43.690 --> 00:34:48.870
big goal that we're working towards are making
public and commercial printers that you can

408
00:34:48.870 --> 00:34:53.540
print to ubiquitous. We really like the concept
of being able to print even without owning

409
00:34:53.540 --> 00:35:00.440
a printer, no matter where you are. We did
launch a partnership with the Fed-Ex office,

410
00:35:00.440 --> 00:35:05.190
as I mentioned earlier, which makes this possible.
Another thing, if you guys are on the first

411
00:35:05.190 --> 00:35:09.690
floor of Moscone, we do have a Cloud Print
station, which we have set up, to allow you

412
00:35:09.690 --> 00:35:14.130
to print to public printers. You can print
to these printers simply by tapping an NFC

413
00:35:14.130 --> 00:35:20.030
tag or scanning a QR code, it gives you -- instantly
adds the printer to your Google account and

414
00:35:20.030 --> 00:35:24.560
allows you to start sending print jobs to
it.

415
00:35:24.560 --> 00:35:29.970
And then, finally, one of our biggest and
most exciting goals and moving forward is

416
00:35:29.970 --> 00:35:35.400
we want Cloud Print to be tightly integrated
with other Google properties. So you can come

417
00:35:35.400 --> 00:35:40.340
to expect the same consistent printing experience,
regardless of what Google platform you are

418
00:35:40.340 --> 00:35:42.520
using.
One feature that I'm about to give you a sneak

419
00:35:42.520 --> 00:35:47.330
preview of is some of the work that we've
been doing in Google Chrome to tightly integrate

420
00:35:47.330 --> 00:35:51.870
Cloud Print with the local printing experience
in Chrome and just make that seamless. So

421
00:35:51.870 --> 00:35:58.380
real quick, I'm going to grab the laptop and
open up the -- this is the Canary channel

422
00:35:58.380 --> 00:36:05.250
of Chrome, it's updated nightly. This is a
pretty risky demonstration. So what we're

423
00:36:05.250 --> 00:36:10.360
going to do is we're going to try printing
our own API documentation using the new Cloud

424
00:36:10.360 --> 00:36:14.710
Print dialogue that we're working on. So I'm
just going to hit command P. It's going to

425
00:36:14.710 --> 00:36:19.940
open the dialogue that you all know and love,
except there's a slight difference. And that

426
00:36:19.940 --> 00:36:23.380
is -- I don't know if you guys can notice,
the destination pane is slightly different

427
00:36:23.380 --> 00:36:27.750
from what you are used to. And by the way,
this is all available on dev channel today,

428
00:36:27.750 --> 00:36:32.020
so you guys can check this out for yourselves.
So what's going to happen here is I'm going

429
00:36:32.020 --> 00:36:37.940
to click change, this pops up something different
from the usual drop-down. It actually pops

430
00:36:37.940 --> 00:36:42.350
down a screen where your local printers and
your Cloud Printers are integrated side by

431
00:36:42.350 --> 00:36:44.940
side.
What's happened is because I'm signed into

432
00:36:44.940 --> 00:36:50.540
Chrome as cloudprint.user@gmail.com, I'm able
to see my Google Cloud Print printers.

433
00:36:50.540 --> 00:36:54.130
You with see from within the Chrome dialogue,
I can see save to Google drive, I can see

434
00:36:54.130 --> 00:36:58.870
print to Fed-Ex office and I can see the printer
that's been shared with me, which is the Cloud

435
00:36:58.870 --> 00:37:02.440
Print demo printer. This guy up front. So
what I'm going to do is for the sake of this

436
00:37:02.440 --> 00:37:06.440
demo, I'm going to choose the Cloud Print
demo printer. I'm going to hit print. And

437
00:37:06.440 --> 00:37:10.660
what happens is this document is posted to
the Cloud Print service and then sent to the

438
00:37:10.660 --> 00:37:15.440
printer, which should be printing it out any
second. So this is our integration in Chrome

439
00:37:15.440 --> 00:37:20.070
and it's -- you know, we've tried to make
it as seamless as possible, basically as easy

440
00:37:20.070 --> 00:37:24.100
to print to Cloud Print as it is to print
to a local printer. And this is just one of

441
00:37:24.100 --> 00:37:28.160
the many integrations that you will see across
Google properties going forward, so we are

442
00:37:28.160 --> 00:37:34.280
really excited for that. So actually, once
this prints out, that concludes the end of

443
00:37:34.280 --> 00:37:40.380
our presentation. Thank you so much for coming.
We're going to leave the remaining 20 minutes

444
00:37:40.380 --> 00:37:47.380
for Q and A. So -- so -- so fire away.
[ Applause ]

445
00:37:48.440 --> 00:37:55.440
&gt;&gt;Akshay Kannan: All right. We will start
the right side of the room.

446
00:37:57.170 --> 00:38:04.170
&gt;&gt;&gt; Hi. I had one question. On the Android
apps and on the Web. Is there a way to -- to

447
00:38:05.230 --> 00:38:09.530
take away some of the options in the printing,
especially the number of copies that are printed?

448
00:38:09.530 --> 00:38:14.220
My app requires that the user be able to print
something only once. So is there a way to

449
00:38:14.220 --> 00:38:16.940
suppress the number of copies that you can
print?

450
00:38:16.940 --> 00:38:21.990
&gt;&gt;Akshay Kannan: So the question was whether
it's possible to restrict certain options

451
00:38:21.990 --> 00:38:28.210
within the Android dialogue and within other
dialogues to not show options such as copies.

452
00:38:28.210 --> 00:38:33.310
Actually --
&gt;&gt;Yuri Dolgov: No, there is not such a way.

453
00:38:33.310 --> 00:38:37.710
But, yeah, this is nice suggestion. We'll
-- we'll discuss it.

454
00:38:37.710 --> 00:38:43.770
&gt;&gt;&gt; Is there a way to actually suppress it
using the HTTPS protocols? I mean, I don't

455
00:38:43.770 --> 00:38:45.970
--
&gt;&gt;Yuri Dolgov: If you create your own, your

456
00:38:45.970 --> 00:38:50.100
custom print dialogue, you can suppress whatever
you want. But in this case, you have to parse

457
00:38:50.100 --> 00:38:52.140
capabilities yourself.
&gt;&gt;&gt; Yeah, that's fine.

458
00:38:52.140 --> 00:38:57.920
&gt;&gt;Akshay Kannan: So you can do it using the
HTTPS API and basically not show certain options

459
00:38:57.920 --> 00:39:02.100
in your UI.
&gt;&gt;&gt; Thanks.

460
00:39:02.100 --> 00:39:06.210
&gt;&gt;&gt; You mentioned that you have millions of
Cloud Print printers on your system now. Can

461
00:39:06.210 --> 00:39:10.350
you speak a little bit about the infrastructure
required for that? Do you have millions of

462
00:39:10.350 --> 00:39:15.520
TCP connections that are open, using UDP or
how does that work?

463
00:39:15.520 --> 00:39:21.730
&gt;&gt;Akshay Kannan: For our cloud ready printers
we are using XMPP to handle the notifications

464
00:39:21.730 --> 00:39:26.040
between us and those printers.
There isn't necessarily a one-to-one correspondence

465
00:39:26.040 --> 00:39:30.280
of XMPP connections to printers. Because a
lot of times with the Chrome connector, with

466
00:39:30.280 --> 00:39:34.860
Cloud Print servers, you have multiple printers
which can be associated with a single connection.

467
00:39:34.860 --> 00:39:40.340
So -- so what it is, for cloud ready printers,
we have one XMPP connection for each of those

468
00:39:40.340 --> 00:39:44.320
printers. And for printers that are connected
to the server or a different Chrome connector,

469
00:39:44.320 --> 00:39:50.100
it's an XMPP connection per machine.
So -- so, for example, if I'm sharing five

470
00:39:50.100 --> 00:39:55.730
printers with my MacBook, I'd have five XMPP
open or, I'm sorry, one XMPP connection controlling

471
00:39:55.730 --> 00:40:00.890
all five of those printers.
&gt;&gt;&gt; But just short questions -- the short

472
00:40:00.890 --> 00:40:05.600
answer to your question is we keep millions
connected, connections open on our site, for

473
00:40:05.600 --> 00:40:12.600
every single printer, and we rely on your
infrastructure for that. So, yes.

474
00:40:13.190 --> 00:40:18.980
&gt;&gt;&gt; So if my office just lost its internet
connection because a cable chewed on the wire,

475
00:40:18.980 --> 00:40:22.080
all I can do is stare at my Cloud Printers,
correct.

476
00:40:22.080 --> 00:40:27.450
&gt;&gt;Akshay Kannan: What happens is when your
printers are offline, any job goes into a

477
00:40:27.450 --> 00:40:31.619
queued state, so everyone would still be able
to print, but then once the internet comes

478
00:40:31.619 --> 00:40:34.410
back on, all the jobs would come back out
of the printer.

479
00:40:34.410 --> 00:40:40.369
&gt;&gt;&gt; I cannot send jobs directly to the print,
they have to go through Google. No connection

480
00:40:40.369 --> 00:40:44.319
to Google, no printing.
&gt;&gt;Akshay Kannan: Yeah.

481
00:40:44.319 --> 00:40:50.030
&gt;&gt;&gt; Got it. Thank you.
&gt;&gt;&gt; Is there a Linux print server for this,

482
00:40:50.030 --> 00:40:53.050
or windows print server, short of leaving
Chrome open on the server?

483
00:40:53.050 --> 00:41:00.050
&gt;&gt;Akshay Kannan: There is, actually, so on
Linux, how it works is you can start the Chrome

484
00:41:00.220 --> 00:41:05.900
connector, but actually you can run Chrome
in -- this is actually -- it's in the chromium

485
00:41:05.900 --> 00:41:11.930
source. I'm not sure how much of this is documented.
We'll probably be documenting over time. But

486
00:41:11.930 --> 00:41:16.119
you can run Chrome in a headless mode with
a certain command line flag, which will start

487
00:41:16.119 --> 00:41:20.450
the Cloud Print service up in the background,
and it's what we do internally at Google to

488
00:41:20.450 --> 00:41:24.430
get all of our thousands of printers online.
So it doesn't require you to keep Chrome running;

489
00:41:24.430 --> 00:41:28.260
it just requires you to have Chrome installed,
and you launch it with the flag which starts

490
00:41:28.260 --> 00:41:35.260
up the Cloud Print service in the background.
&gt;&gt;&gt; I've noticed that sometimes the office

491
00:41:35.830 --> 00:41:42.000
printer that I Cloud Print to doesn't appear
in the dialogue box. I assume that's because

492
00:41:42.000 --> 00:41:45.980
it's kind of a flakey printer and sometimes
it's offline or broken or something, but I

493
00:41:45.980 --> 00:41:52.720
didn't see in your API that there was a way
for a printer to report its status, or how

494
00:41:52.720 --> 00:41:56.240
does that -- how does Google know that that
printer is not available?

495
00:41:56.240 --> 00:42:01.800
&gt;&gt;Akshay Kannan: So what we do is for status,
we actually determine that using your XMPP

496
00:42:01.800 --> 00:42:06.810
status. So if the printer doesn't have an
active connection, in fact you could see this,

497
00:42:06.810 --> 00:42:11.100
if I turn the printer off right now, it will
show up as offline in the dialogue. We basically

498
00:42:11.100 --> 00:42:14.730
use the XMPP status of the printer to determine
whether it's online or offline.

499
00:42:14.730 --> 00:42:17.450
&gt;&gt;&gt; So that doesn't remove from the list,
though? Is there some --

500
00:42:17.450 --> 00:42:21.040
&gt;&gt;Akshay Kannan: It doesn't remove from the
list. What it does is it grays it out and

501
00:42:21.040 --> 00:42:25.890
it moves it to the bottom of the list, so
your online printers show up above your offline

502
00:42:25.890 --> 00:42:29.710
printers, but you'll still be able to see
your offline printers at any time. If you're

503
00:42:29.710 --> 00:42:33.330
actually not seeing the printer, then it might
be that you're logged in with a different

504
00:42:33.330 --> 00:42:38.250
account. You have to be logged in with the
same account that you used to set up the printer,

505
00:42:38.250 --> 00:42:45.250
or you can share the printer with your other
account. But, yeah, we don't -- the printer,

506
00:42:45.530 --> 00:42:50.480
if you set it up once, it will always be part
of your account so...

507
00:42:50.480 --> 00:42:57.480
&gt;&gt;&gt; So you mentioned for security, once a
job is complete, you delete it. Is there any

508
00:42:58.010 --> 00:43:03.040
ability to retain that for at least a short
period so that you could reprint successful

509
00:43:03.040 --> 00:43:05.010
jobs?
&gt;&gt;Akshay Kannan: So one thing you can do is

510
00:43:05.010 --> 00:43:10.000
if you are the printer receiving the jobs,
if you want to reprint successful jobs, we

511
00:43:10.000 --> 00:43:15.760
only delete the job content when the status
gets set to done, so if you're the developer,

512
00:43:15.760 --> 00:43:21.060
you could just set the status to be "in progress",
or move it from "in progress" back into queued,

513
00:43:21.060 --> 00:43:24.470
and with all of these different states we
would retain the job on our side.

514
00:43:24.470 --> 00:43:29.260
&gt;&gt;&gt; I guess what I would like to see is -- is
that ability when you're using the connector,

515
00:43:29.260 --> 00:43:36.200
so you've got an existing printer, but that
capability magically from your end.

516
00:43:36.200 --> 00:43:41.210
&gt;&gt;Akshay Kannan: Sorry, I didn't catch exactly
that.

517
00:43:41.210 --> 00:43:46.060
&gt;&gt;&gt; So maybe just the ability to automatically
keep a copy of everything you print in the

518
00:43:46.060 --> 00:43:49.850
drive, so not choosing one or the other, but
archive.

519
00:43:49.850 --> 00:43:53.960
&gt;&gt;Akshay Kannan: I see. I see. That would
definitely be interesting looking into. I

520
00:43:53.960 --> 00:43:58.020
know there's definitely document retention
and privacy implications around that as well,

521
00:43:58.020 --> 00:44:02.450
because not everyone wants all their print
jobs saved, but it's definitely something

522
00:44:02.450 --> 00:44:05.000
worth looking into.
&gt;&gt;&gt; Thanks.

523
00:44:05.000 --> 00:44:11.470
&gt;&gt;&gt; I love Google Cloud Print by the way,
but my question is say you're in Google Drive,

524
00:44:11.470 --> 00:44:17.280
and you have a picture file, I think if you
print it now, it like -- it just comes out

525
00:44:17.280 --> 00:44:22.840
in a standard way. Are you guys like thinking
of any options -- like if you wanted a full

526
00:44:22.840 --> 00:44:26.220
page photo or like half page or like -- is
there a way to format it?

527
00:44:26.220 --> 00:44:30.910
&gt;&gt;Akshay Kannan: So currently your formatting
options are limited to what the printer service

528
00:44:30.910 --> 00:44:35.800
is and the capabilities. Definitely over time
we'll be expanding what those capabilities

529
00:44:35.800 --> 00:44:40.960
are. Some things like scaling would be options
that are -- that are part of the dialogue,

530
00:44:40.960 --> 00:44:45.880
but I think for now the best approach is to
client side just generate the PDF how you

531
00:44:45.880 --> 00:44:50.890
want it to look or just flow the image how
you want it to look and then send it to our

532
00:44:50.890 --> 00:44:57.890
service, but, yeah, definitely it's future
work for us, but not currently there.

533
00:44:58.839 --> 00:45:03.220
&gt;&gt;&gt; At -- on my home system if I'm not logged
in, and I see my son is logged in on the computer,

534
00:45:03.220 --> 00:45:10.220
I can't print. Is there any work to have like
an appliance that could just sit on the network,

535
00:45:10.540 --> 00:45:16.690
you know, a tiny little box that would prevent
-- or provide the cloud services so that I

536
00:45:16.690 --> 00:45:21.270
don't have to worry about being logged in?
&gt;&gt;Akshay Kannan: There's -- that's definitely

537
00:45:21.270 --> 00:45:26.140
a -- something that's -- a developer could
technically build. We currently don't have

538
00:45:26.140 --> 00:45:29.170
anything like that.
&gt;&gt;Yuri Dolgov: We have source implementation

539
00:45:29.170 --> 00:45:34.980
for WRT support, in just -- it's in early
stage, but (indiscernible) we implemented

540
00:45:34.980 --> 00:45:40.760
this, and the problem he faced is basically
a drivers problem. This implementation supports

541
00:45:40.760 --> 00:45:47.680
pretty much every file as I remember, and,
well, maybe something else, but it won't support

542
00:45:47.680 --> 00:45:52.130
like every single printer. And it's hard to
implement one that will support every single

543
00:45:52.130 --> 00:45:53.690
printer.
&gt;&gt;&gt; Where would I find that?

544
00:45:53.690 --> 00:45:57.290
&gt;&gt;Akshay Kannan: Currently we don't link to
it from anywhere, but we can talk to you after

545
00:45:57.290 --> 00:46:01.330
the presentation. It's currently a project
that's just on Google code that was published

546
00:46:01.330 --> 00:46:08.330
by another Google engineer who built this
as an enthusiastic side project.

547
00:46:10.240 --> 00:46:14.230
&gt;&gt;&gt; So kind of back to the scaling.
Say you have a printer that doesn't print

548
00:46:14.230 --> 00:46:19.790
8.5 x 11, and you print an image or a PDF,
what happens?

549
00:46:19.790 --> 00:46:25.350
Does that get scaled down up to the media,
or does it print at some, you know, fixed

550
00:46:25.350 --> 00:46:29.390
resolution conversion?
&gt;&gt;Akshay Kannan: I believe some of that depends

551
00:46:29.390 --> 00:46:34.040
on the printer you're printing to. If there's
a fit-to-page option, then we currently service

552
00:46:34.040 --> 00:46:38.869
that and allow you to scale it down to whatever
the output format is. Otherwise, I think the

553
00:46:38.869 --> 00:46:44.490
default behavior is just to print it out exactly
how it is, so it might not be perfectly aligned

554
00:46:44.490 --> 00:46:51.330
when you're trying to print and 8.5 x 11 PDF
on your A4 paper. That is the current behavior.

555
00:46:51.330 --> 00:46:55.970
I think going forward we'll be working on
expanding fit-to-page capabilities. But that's

556
00:46:55.970 --> 00:47:00.950
why we were also mentioning the ideal experience
rather than scaling is you want your document

557
00:47:00.950 --> 00:47:06.590
to be reflowed which is why we do recommend
HTML for document submissions because we can

558
00:47:06.590 --> 00:47:10.630
intelligently flow that for whatever printer
it's ending up on.

559
00:47:10.630 --> 00:47:17.630
&gt;&gt;&gt; But you don't necessarily have control
over what that source content is, if you want

560
00:47:17.970 --> 00:47:22.030
to print some third party content that you
were just browsing to, say?

561
00:47:22.030 --> 00:47:26.900
&gt;&gt;Akshay Kannan: Yes, if it's -- if it's,
for example, a PDF that's 8.5 x 11 that you

562
00:47:26.900 --> 00:47:32.940
want to print to A4 paper, then our best options
there are fitting to page or printing it out

563
00:47:32.940 --> 00:47:38.670
as it is, so we won't be able to intelligently
reflow that in that case.

564
00:47:38.670 --> 00:47:42.680
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;&gt; Can you please talk a bit more about the

565
00:47:42.680 --> 00:47:47.430
setup you had on the first floor?
Can I make one of my printers public?

566
00:47:47.430 --> 00:47:51.960
&gt;&gt;Akshay Kannan: Currently the setup we have
on our first floor is actually just part of

567
00:47:51.960 --> 00:47:57.070
a pilot that we're running to try and make
printers public, so none of this UI is currently

568
00:47:57.070 --> 00:48:02.330
available. That being said, depending on the
-- we're basically trying this out as a pilot

569
00:48:02.330 --> 00:48:06.609
to see how people interact with it. I think
moving forward it might be something that

570
00:48:06.609 --> 00:48:12.960
we pursue more seriously and open up to developers
and to users.

571
00:48:12.960 --> 00:48:18.050
&gt;&gt;&gt; If my printer is not cloud ready, how
do I print to it?

572
00:48:18.050 --> 00:48:23.740
&gt;&gt;Akshay Kannan: So if your printer is not
cloud-ready, you can set up the Chrome connector,

573
00:48:23.740 --> 00:48:28.240
so this is -- or there's a slide earlier.
Basically from within the -- if your printer

574
00:48:28.240 --> 00:48:34.140
is connected to a desktop or a laptop at home,
you can go to Chrome settings and enable from

575
00:48:34.140 --> 00:48:38.410
advanced options, Google cloud print connector,
which will take that printer and then share

576
00:48:38.410 --> 00:48:45.160
it with your Google account using that local
machine as a print server.

577
00:48:45.160 --> 00:48:49.240
&gt;&gt;&gt; The printer cannot be a network printer?
&gt;&gt;Akshay Kannan: It could be a network printer,

578
00:48:49.240 --> 00:48:53.330
as long as -- the only restriction is that
the laptop or the computer that you're using

579
00:48:53.330 --> 00:48:59.310
as the Cloud Print connector has to be able
to see that printer locally or over the network.

580
00:48:59.310 --> 00:49:03.780
It has to be part of the OS print dialogue.
&gt;&gt;&gt; Okay, thanks.

581
00:49:03.780 --> 00:49:10.780
&gt;&gt;&gt; If the page has a specific CSS layout
for print media, will the print Cloud Print

582
00:49:13.289 --> 00:49:19.460
--
&gt;&gt;Yuri Dolgov: Specific print and layout so,

583
00:49:19.460 --> 00:49:26.460
yes.
&gt;&gt;&gt; And also your https rasts API, can I set

584
00:49:28.060 --> 00:49:35.060
the orientation program -- like orientation
equals landscape or --

585
00:49:35.890 --> 00:49:39.540
&gt;&gt;Yuri Dolgov: Oh, yeah, it depends on the
printer. If printer supports orientation,

586
00:49:39.540 --> 00:49:44.370
we'll show orientation. If printer doesn't
support orientation, we don't do anything.

587
00:49:44.370 --> 00:49:50.890
&gt;&gt;&gt; No, no, I mean, I guess certain printers
-- for some reason it has to do with drivers

588
00:49:50.890 --> 00:49:57.890
that's not -- exposed the API for software
to control whether it always asks the user

589
00:50:06.050 --> 00:50:13.050
what orientation, but were you able to experiment?
Have you done it to programmatically set the

590
00:50:13.780 --> 00:50:18.330
--
&gt;&gt;&gt; With most printers you are able to programmatically

591
00:50:18.330 --> 00:50:23.720
set the orientation using the capabilities,
basically when you get your -- when you fetch

592
00:50:23.720 --> 00:50:29.080
the capabilities for that printer, you can
find the ones which correspond to orientation,

593
00:50:29.080 --> 00:50:32.530
set them in your print ticket, and then when
you do your submit call, you can specify that

594
00:50:32.530 --> 00:50:37.680
print ticket with the orientation specified.
&gt;&gt;&gt; Thanks.

595
00:50:37.680 --> 00:50:44.660
&gt;&gt;&gt; So you mentioned some esoteric encryption
solutions where I would implement my -- a

596
00:50:44.660 --> 00:50:51.660
shared key or something with my clients. If
I need an end-to-end security where Google

597
00:50:53.180 --> 00:50:56.980
never sees my content, would I have to do
that, or is there another option?

598
00:50:56.980 --> 00:51:01.260
&gt;&gt;Akshay Kannan: Yeah. So, as I mentioned
earlier, you can -- yeah, with end-to-end

599
00:51:01.260 --> 00:51:06.140
security such that we never see your content,
the best solution currently that we have is

600
00:51:06.140 --> 00:51:10.710
for you to encrypt it client side and decrypt
after receiving it. The disadvantage there

601
00:51:10.710 --> 00:51:16.050
is you lose the functionality for us to convert
the document because we can't read it, but

602
00:51:16.050 --> 00:51:23.050
it would be completely invisible to us in
that case.

603
00:51:24.010 --> 00:51:30.530
&gt;&gt;&gt; Thanks.
&gt;&gt;&gt; Hi, you said raster data is either PDF,

604
00:51:30.530 --> 00:51:36.359
is there any plan to support XPSS or --
&gt;&gt;Akshay Kannan: The question was is there

605
00:51:36.359 --> 00:51:43.359
plans to support XPS as an output format.
The answer is currently no. We're always looking

606
00:51:45.640 --> 00:51:52.070
into new formats to explore, but for the -- for
the foreseeable future, PDF and PW Raster

607
00:51:52.070 --> 00:51:57.710
are our primary formats going forward.
&gt;&gt;&gt; Is it because XPS is from Microsoft?

608
00:51:57.710 --> 00:52:03.010
[ Laughter ]
&gt;&gt;Akshay Kannan: I'm not going to comment

609
00:52:03.010 --> 00:52:08.640
on that.
&gt;&gt;&gt; So kudos on Cloud Print. It's a very useful

610
00:52:08.640 --> 00:52:14.760
facility. We have a network, a guest network
that we let people connect in on, and we have

611
00:52:14.760 --> 00:52:21.090
our printers on our private network. So Cloud
Print helps with that, being able to not have

612
00:52:21.090 --> 00:52:25.590
them on the same network, but one of the issues
is is being able to print from Word or other

613
00:52:25.590 --> 00:52:31.530
OS-level type printers. There's an open source
piece of software that lets you do that, but

614
00:52:31.530 --> 00:52:35.890
apparently with that piece of software it
only lets you print one copy at a time. Is

615
00:52:35.890 --> 00:52:40.119
there going to be anything supported by Google
that would allow, you know, printing from

616
00:52:40.119 --> 00:52:45.840
OSB first class, first class printing, like
from Mac OS or --

617
00:52:45.840 --> 00:52:49.950
&gt;&gt;Akshay Kannan: We -- yeah, we currently
don't have any plans to announce in that direction,

618
00:52:49.950 --> 00:52:56.050
but that's definitely something that -- that
we're looking into going forward, and currently

619
00:52:56.050 --> 00:53:00.590
I guess the one way to get around the fact
that that isn't currently there is to save

620
00:53:00.590 --> 00:53:05.980
it as a PDF and then print it through Cloud
Print in Chrome, but, yeah, there's -- we

621
00:53:05.980 --> 00:53:07.380
currently don't have stuff to announce but
--

622
00:53:07.380 --> 00:53:12.140
&gt;&gt;&gt; It makes the -- the wife acceptance factor
pretty low when you have to go through and

623
00:53:12.140 --> 00:53:14.260
do those kind of gyrations.
&gt;&gt;Akshay Kannan: Absolutely.

624
00:53:14.260 --> 00:53:19.960
&gt;&gt;&gt; The second thing is is someone had mentioned
about a device like one of the things I toyed

625
00:53:19.960 --> 00:53:26.170
around with is using raspberry pie and putting
Google Cloud Print on something like that.

626
00:53:26.170 --> 00:53:30.980
Is anyone at Google or on your team interested
in doing something like that, or would they

627
00:53:30.980 --> 00:53:35.850
support developers that were interested in
doing a project like that?

628
00:53:35.850 --> 00:53:40.240
Because that seems like that would be an ideal
solution to provide printers, especially if

629
00:53:40.240 --> 00:53:46.570
you have a large investment in Legacy printers
that you don't want to replace with Google

630
00:53:46.570 --> 00:53:50.420
Cloud Printers.
&gt;&gt;Akshay Kannan: Yeah. Absolutely. As I mentioned,

631
00:53:50.420 --> 00:53:54.800
we did have an engineer who put together a
reference implementation of a Cloud Print

632
00:53:54.800 --> 00:53:59.960
server on a router, and that is all open source
on Google code, so I can hand you my contact

633
00:53:59.960 --> 00:54:04.090
information or you can message the Google
groups and we'll be happy to point you to

634
00:54:04.090 --> 00:54:06.930
the code, and also put you in touch with the
guy who wrote it so --

635
00:54:06.930 --> 00:54:10.400
&gt;&gt;&gt; Okay. Cool. Thanks.
&gt;&gt;&gt; On that side.

636
00:54:10.400 --> 00:54:16.460
&gt;&gt;&gt; I think he was before me.
&gt;&gt;&gt; All right. I have two questions. First

637
00:54:16.460 --> 00:54:23.460
question is how do you handle updates to capabilities?
For example, you know, you have a server that

638
00:54:24.270 --> 00:54:29.880
got upgraded to handle duplex printing or
the toners are completely out, you can't print

639
00:54:29.880 --> 00:54:33.970
anymore. Is it over XMPP?
&gt;&gt;Akshay Kannan: So actually, we have an up

640
00:54:33.970 --> 00:54:38.210
-- I didn't mention this API, but we do have
an update API which allows you to do exactly

641
00:54:38.210 --> 00:54:44.230
that. It's basically an https call that the
printer makes. You specify new capabilities,

642
00:54:44.230 --> 00:54:48.110
what's changed since last time, and we'll
automatically update all of that server side.

643
00:54:48.110 --> 00:54:52.190
&gt;&gt;&gt; That's over the tags, then?
&gt;&gt;Akshay Kannan: That's over https.

644
00:54:52.190 --> 00:54:58.040
&gt;&gt;&gt; And the second question is -- I forgot.
All right, I'll come back.

645
00:54:58.040 --> 00:55:05.000
&gt;&gt;&gt; Okay, so my questions are that when you
have multiple printers it's -- it gets quite

646
00:55:05.000 --> 00:55:11.160
hard to determine if they are -- you have
the three different connectivity options,

647
00:55:11.160 --> 00:55:18.050
and it's very hard to determine which of them
are connected in which ways, or at least used

648
00:55:18.050 --> 00:55:25.050
to be. So what's your opinion on that, and
in windows environments, in -- at least in

649
00:55:27.150 --> 00:55:33.140
Windows 7, you can get an image of the printer
so you can see, oh, that's -- that's one.

650
00:55:33.140 --> 00:55:38.690
Are there any developments in that direction?
&gt;&gt;Akshay Kannan: So I guess a couple of different

651
00:55:38.690 --> 00:55:43.700
approaches we have are we do in our dialogue
use iconography to distinguish different types

652
00:55:43.700 --> 00:55:50.040
of printers. We also have a rename functionality
that users can use on their side to name the

653
00:55:50.040 --> 00:55:54.840
printer such that you can differentiate between
different printers. I don't know if there's

654
00:55:54.840 --> 00:56:00.050
anything else I'm forgetting that kind of
helps along these lines, but we have a couple

655
00:56:00.050 --> 00:56:04.880
of solutions in place. I know there's also
a description field that you can specify as

656
00:56:04.880 --> 00:56:08.940
part of the printer which will show up in
the print dialogue which you can use to differentiate

657
00:56:08.940 --> 00:56:15.650
different printers.
&gt;&gt;&gt; Okay. Thank you. Would it be possible

658
00:56:15.650 --> 00:56:22.650
to group printers like on departments on functionality-wise,
or it could also be -- say if you have a mobile

659
00:56:25.460 --> 00:56:32.180
device or it feels that, okay, you're in this
city or in this office, then these are the

660
00:56:32.180 --> 00:56:36.970
available printers from the ones that are
close nearby?

661
00:56:36.970 --> 00:56:41.490
&gt;&gt;Akshay Kannan: So currently the answer to
that is no, but we do sort of have a solution

662
00:56:41.490 --> 00:56:46.230
in place which is our search, our search in
our Cloud Print Web dialogue search is not

663
00:56:46.230 --> 00:56:50.619
only over printer names but over capabilities
and description fields. So one thing we do

664
00:56:50.619 --> 00:56:54.780
for example in Google is every printer has
a description field for the building that

665
00:56:54.780 --> 00:56:58.420
it's in, so all I have to do is type my building
name into the search dialogue and I'll see

666
00:56:58.420 --> 00:57:02.690
all the printers that are near me. Another
thing is we also do -- I think you mentioned

667
00:57:02.690 --> 00:57:06.840
grouping by capabilities, or what options
a printer can do, we do search over those

668
00:57:06.840 --> 00:57:11.060
as well, so if you search for I only want
to see color printers, you can type in color

669
00:57:11.060 --> 00:57:15.130
and just get a list of printers which can
print to color.

670
00:57:15.130 --> 00:57:21.099
&gt;&gt;&gt; Okay, so new employees at Google, you
have like a thousand printers in your dialogues.

671
00:57:21.099 --> 00:57:24.570
&gt;&gt;Akshay Kannan: Uh-huh.
&gt;&gt;&gt; Okay. Then you search for nearby --

672
00:57:24.570 --> 00:57:26.130
&gt;&gt;Akshay Kannan: Exactly.
&gt;&gt;&gt; Okay.

673
00:57:26.130 --> 00:57:32.690
&gt;&gt;Yuri Dolgov: You usually only use a couple
of them, and once you use printer, they will

674
00:57:32.690 --> 00:57:39.690
be on top basically. So you only need to do
search once or twice.

675
00:57:40.900 --> 00:57:44.760
&gt;&gt;&gt; Thank you.
&gt;&gt;&gt; When you submit print jobs, you have to

676
00:57:44.760 --> 00:57:50.859
be locked in in the browser or in Android.
Is there any way that a server application

677
00:57:50.859 --> 00:57:57.859
might be able to submit print jobs?
The case I have, all the use case where we

678
00:57:57.880 --> 00:58:02.750
might be able to use this is one of our clients
runs a E commerce site, and they would love

679
00:58:02.750 --> 00:58:08.300
to be able to use Cloud Print to print older
notifications as they come in.

680
00:58:08.300 --> 00:58:14.290
&gt;&gt;Yuri Dolgov: You can do that. You can create
any account that you can share the printer

681
00:58:14.290 --> 00:58:21.290
with, and then just using AUTH, you can authenticate
server with this account and totally submit

682
00:58:24.369 --> 00:58:25.430
this account.
&gt;&gt;&gt; Okay.

683
00:58:25.430 --> 00:58:30.380
&gt;&gt;Akshay Kannan: Yeah, we support both AUTH
and client login for authentication, so you

684
00:58:30.380 --> 00:58:35.320
could use that server side to authenticate
into our API with a dummy Google account and

685
00:58:35.320 --> 00:58:40.590
then use that to submit print jobs.
&gt;&gt;&gt; Excellent. Thank you.

686
00:58:40.590 --> 00:58:45.790
&gt;&gt;Akshay Kannan: Sure.
&gt;&gt;&gt; Okay. I'm wondering what kind of data

687
00:58:45.790 --> 00:58:51.680
has Google extract from my print jobs? Because
privacy (indiscernible) but there must be

688
00:58:51.680 --> 00:58:57.000
some other reasons to process data.
&gt;&gt;Akshay Kannan: If the source and destination

689
00:58:57.000 --> 00:59:00.660
formats of your print job are the same, so
let's say you're printing a PDF to a PDF,

690
00:59:00.660 --> 00:59:06.109
absolutely nothing. We just send the document
over to the printer without any conversion

691
00:59:06.109 --> 00:59:13.109
on our side. In terms of -- so in terms of
conversion, we do use a conversion service

692
00:59:13.869 --> 00:59:18.220
to convert your document to the format it
needs to be in, but, yeah, as I mentioned

693
00:59:18.220 --> 00:59:23.390
before, the converted document will not persist
on our server for more than 30 days. The only

694
00:59:23.390 --> 00:59:30.240
thing I guess that stays left over are standard
http logs, and also I guess the fact that

695
00:59:30.240 --> 00:59:33.340
within your account you'll see these -- you'll
see your print job history.

696
00:59:33.340 --> 00:59:39.930
&gt;&gt;&gt; So Google has no content extraction kind
of -- if I print my bank account statements

697
00:59:39.930 --> 00:59:42.510
it's not --
&gt;&gt;Akshay Kannan: Not at all. We don't use

698
00:59:42.510 --> 00:59:45.299
your print jobs to serve ads.
[ Laughter ]

699
00:59:45.299 --> 00:59:52.299
&gt;&gt;&gt; Is there any update on the Android as
an official Cloud Print, because as I recall,

700
00:59:56.570 --> 01:00:03.170
it was still something that was semi unofficial.
&gt;&gt;Akshay Kannan: So, yeah, we are working

701
01:00:03.170 --> 01:00:09.490
on integrating with the Android properties
of Google Apps going forward, but as far as

702
01:00:09.490 --> 01:00:13.099
platform integration goes, we don't have anything
to announce at the moment.

703
01:00:13.099 --> 01:00:16.190
&gt;&gt;&gt; And then secondly, I think this has been
asked about three or four different ways,

704
01:00:16.190 --> 01:00:23.190
at least, but I'm not sure that I got it completely
straight. In our office, for instance, we

705
01:00:23.820 --> 01:00:30.820
have a large group of people that come in
and out, and we have Legacy printers, and

706
01:00:31.670 --> 01:00:37.940
I didn't really want to leave the Legacy printer
connected to a machine on my account, since

707
01:00:37.940 --> 01:00:43.730
I'm not there all the time, amongst other
things, but also the machines themselves are

708
01:00:43.730 --> 01:00:46.730
generally public, so I ended up putting it
on one of the administrator's -- one of the

709
01:00:46.730 --> 01:00:51.680
administrator's accounts and leaving it there,
but it doesn't seem to be any way to have

710
01:00:51.680 --> 01:00:58.090
that done without having a specific account
which you then can delegate out of. That's,

711
01:00:58.090 --> 01:01:00.900
I think, the summarization of everything that
I've heard.

712
01:01:00.900 --> 01:01:06.279
&gt;&gt;Akshay Kannan: In terms of accounts are
you referring to like log-in accounts?

713
01:01:06.279 --> 01:01:12.930
&gt;&gt;&gt; They have to have a Gmail account in order
to be able to have a printer -- in order to

714
01:01:12.930 --> 01:01:18.000
be able to attach it to a legacy printer,
which they can then share. And there's no

715
01:01:18.000 --> 01:01:22.010
other way around that that I can figure.
&gt;&gt;&gt; Just in general, enterprise printing I

716
01:01:22.010 --> 01:01:27.609
guess would be the question and how do you
take a set of enterprise printers and let

717
01:01:27.609 --> 01:01:33.330
a specific set of people or even make it public,
which is kind of what you're doing downstairs.

718
01:01:33.330 --> 01:01:36.550
Is that going to be available soon or when
is that going to be available?

719
01:01:36.550 --> 01:01:41.240
&gt;&gt;Akshay Kannan: I guess in terms of both
questions, with having an account in order

720
01:01:41.240 --> 01:01:46.130
to register a printer, you do need a Google
account in order to register your printer

721
01:01:46.130 --> 01:01:49.510
with Cloud Print. That being said, it doesn't
have to be your Google account or someone

722
01:01:49.510 --> 01:01:52.180
else's.
A lot of the enterprises that we work with,

723
01:01:52.180 --> 01:01:57.940
to answer your question, use what they call
a roll account, which is just a dedicated

724
01:01:57.940 --> 01:02:02.930
Google account that they set up for the express
purpose of printing that they can share access

725
01:02:02.930 --> 01:02:07.440
to, and they'll use that to run the print
server so that way no one has to use their

726
01:02:07.440 --> 01:02:11.210
personal account to --
&gt;&gt;&gt; Is there a way to -- so if you have a

727
01:02:11.210 --> 01:02:16.270
set of employees, is there a way to share
the printer with them or basically make it

728
01:02:16.270 --> 01:02:20.720
available in their preferences so they don't
have to be accepting invitations for this?

729
01:02:20.720 --> 01:02:25.520
&gt;&gt;Akshay Kannan: Absolutely. So we're working
on expanding more of that going forward, but

730
01:02:25.520 --> 01:02:29.119
what you can already currently do is share
it with a group.

731
01:02:29.119 --> 01:02:31.910
So for example, let's say you have a Google
group that encompasses everyone within your

732
01:02:31.910 --> 01:02:36.250
domain. You can from within the share interface
that we demoed earlier, just type in that

733
01:02:36.250 --> 01:02:39.420
group.
And all that needs to happen is the owner

734
01:02:39.420 --> 01:02:46.420
of that group can accept the invitation on
behalf of people in the organization.

735
01:02:46.610 --> 01:02:52.050
&gt;&gt;&gt; Okay. Thanks.
&gt;&gt;&gt; I develop an application that actually

736
01:02:52.050 --> 01:02:58.410
works like print server, and the printer is
a terminal printer, and I control the printer

737
01:02:58.410 --> 01:03:05.410
by escape comments. So I open the LPT port
and send comments. How about in that case?

738
01:03:06.900 --> 01:03:12.670
&gt;&gt;Akshay Kannan: So this is with a terminal
printer that you account to over LPR?

739
01:03:12.670 --> 01:03:17.250
&gt;&gt;&gt; Yes, but it's connected to my applications.
There is no drivers, there is no --

740
01:03:17.250 --> 01:03:22.400
&gt;&gt;Akshay Kannan: I see. If there's no standard
print drivers, we won't be able to integrate

741
01:03:22.400 --> 01:03:25.680
that with Cloud Print.
So currently -- I'm assuming you want to set

742
01:03:25.680 --> 01:03:30.220
up the Cloud Print connector from within Chrome
to share it with your Cloud Print account?

743
01:03:30.220 --> 01:03:35.140
In that case we only take the local printers
which are actually in your OS print dialogue

744
01:03:35.140 --> 01:03:40.450
to share. So we won't be sharing it unless
it's -- unless it uses the standard OS print

745
01:03:40.450 --> 01:03:47.130
mechanism to receive print jobs.
&gt;&gt;&gt; Okay. But is it -- can I make a connector

746
01:03:47.130 --> 01:03:50.190
to the Google server? Okay.
&gt;&gt;Akshay Kannan: Yeah.

747
01:03:50.190 --> 01:03:57.190
&gt;&gt;&gt; I remembered the question now.
So you mentioned you can print to your mobile

748
01:04:00.040 --> 01:04:06.109
Nexus, right? What does that mean? Like it's
just PDF on the flash drive?

749
01:04:06.109 --> 01:04:10.570
&gt;&gt;Akshay Kannan: Exactly. What we do is we
take the job, we convert it to a PDF and then

750
01:04:10.570 --> 01:04:16.530
we push a notification to your device that
starts a download of that PDF. So you don't

751
01:04:16.530 --> 01:04:20.570
even have to be running Chrome as Android.
It runs as a background service using Android

752
01:04:20.570 --> 01:04:27.570
push. So you can print anything to your phone
and it just shows up as a PDF on 
the device.

753
01:04:30.190 --> 01:04:32.000
Next questions.
&gt;&gt;&gt; Getting back to the non-cloud-ready printer.

754
01:04:32.000 --> 01:04:35.540
You said you simply do this from a PC or something
like that. Is there some software you have

755
01:04:35.540 --> 01:04:40.420
to load on to the PC in order for it to act
as the server? I assume it's acting as a cloud-ready

756
01:04:40.420 --> 01:04:42.780
server.
&gt;&gt;Akshay Kannan: So currently it works within

757
01:04:42.780 --> 01:04:46.630
Google Chrome. You have to have Chrome installed
on that PC.

758
01:04:46.630 --> 01:04:50.510
&gt;&gt;&gt; Chrome OS?
&gt;&gt;Akshay Kannan: No, just the Chrome browser.

759
01:04:50.510 --> 01:04:54.849
So from within the settings on Google Chrome
you can configure your local printers to be

760
01:04:54.849 --> 01:04:57.740
cloud ready. And there's no additional software
apart from Google Chrome required.

761
01:04:57.740 --> 01:05:04.740
&gt;&gt;&gt; So then it acts as a cloud-ready server.
&gt;&gt;Akshay Kannan: Exactly.

762
01:05:05.540 --> 01:05:07.450
&gt;&gt;&gt; Okay.
&gt;&gt;&gt; One more.

763
01:05:07.450 --> 01:05:14.450
Can you tell us about Cloud Print integration
with Google Apps, like sharing to groups,

764
01:05:14.700 --> 01:05:19.080
et cetera?
&gt;&gt;Akshay Kannan: Yeah. In terms of apps integration,

765
01:05:19.080 --> 01:05:21.660
we do support -- is this for enterprise in
particular?

766
01:05:21.660 --> 01:05:25.220
&gt;&gt;&gt; Yeah.
&gt;&gt;Akshay Kannan: Yeah. For enterprise integration

767
01:05:25.220 --> 01:05:30.980
we have -- currently our consumer solution
for most part is our enterprise solution.

768
01:05:30.980 --> 01:05:36.150
There are plans to move that into a more custom
enterprise solution going forward.

769
01:05:36.150 --> 01:05:43.150
But yeah, for now integration we offer at
a basic level is -- as we mentioned you can

770
01:05:43.880 --> 01:05:49.940
configure Chrome to run as a headless server
on Linux and then also with group sharing

771
01:05:49.940 --> 01:05:54.140
you can easily share printers with groups
of people.

772
01:05:54.140 --> 01:06:01.140
&gt;&gt;&gt; So if that's -- if you add a new user
to a group, if we have a group called printers

773
01:06:02.060 --> 01:06:08.580
and we have five or ten printers connected
to that group and you add a new user to that

774
01:06:08.580 --> 01:06:14.500
group, would he automatically have the print
when he log on to his new account?

775
01:06:14.500 --> 01:06:18.230
&gt;&gt;Yuri Dolgov: Yes.
&gt;&gt;&gt; Okay. Excellent, thanks.

776
01:06:18.230 --> 01:06:24.720
&gt;&gt;Akshay Kannan: Cool. Do we have one more?
All right. Last question.

777
01:06:24.720 --> 01:06:31.099
&gt;&gt;&gt; Normally the driverless printing is a
myth, used to be, but you guys has really

778
01:06:31.099 --> 01:06:37.150
done a good job that it can be a reality.
I really appreciate that.

779
01:06:37.150 --> 01:06:38.280
&gt;&gt;Akshay Kannan: Thank you.
&gt;&gt;Yuri Dolgov: Thank you.

780
01:06:38.280 --> 01:06:40.020
&gt;&gt;Akshay Kannan: Thank you so much. Thanks
a lot, everyone.

781
01:06:40.020 --> 01:06:40.270
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:08.041

2
00:00:08.041 --> 00:00:10.460
COLT MCANLIS: Better yet, I use
Chrome OS, because I don't

3
00:00:10.460 --> 00:00:11.110
know what defrag is.

4
00:00:11.110 --> 00:00:12.746
NOEL ALLEN: There you are.

5
00:00:12.746 --> 00:00:14.090
COLT MCANLIS: There
is actually.

6
00:00:14.090 --> 00:00:15.340
NOEL ALLEN: Ooh.

7
00:00:15.340 --> 00:00:17.550
8
00:00:17.550 --> 00:00:18.860
COLT MCANLIS: All right.

9
00:00:18.860 --> 00:00:20.490
It looks like we are alive.

10
00:00:20.490 --> 00:00:21.260
Fantastic.

11
00:00:21.260 --> 00:00:21.700
Hello.

12
00:00:21.700 --> 00:00:24.520
Welcome, everyone.

13
00:00:24.520 --> 00:00:24.830
Wow.

14
00:00:24.830 --> 00:00:26.830
We have a post-lunch
coma crowd.

15
00:00:26.830 --> 00:00:27.970
Hello, everyone!

16
00:00:27.970 --> 00:00:28.890
AUDIENCE: Hello!

17
00:00:28.890 --> 00:00:29.700
COLT MCANLIS: Fantastic.

18
00:00:29.700 --> 00:00:30.050
Perfect.

19
00:00:30.050 --> 00:00:31.860
Guys, we're getting recorded on
YouTube, and you're going

20
00:00:31.860 --> 00:00:33.490
to be like, no, let's not
talk to the presenter.

21
00:00:33.490 --> 00:00:35.340
That's horrible.

22
00:00:35.340 --> 00:00:36.960
Your voice will be recorded
and saved for

23
00:00:36.960 --> 00:00:39.230
the annals of time.

24
00:00:39.230 --> 00:00:40.780
Anyhow, hello everyone.

25
00:00:40.780 --> 00:00:43.340
Welcome today to Native
Client Live.

26
00:00:43.340 --> 00:00:44.460
My name is Colt McAnlis.

27
00:00:44.460 --> 00:00:46.910
I'm a developer advocate
at Google

28
00:00:46.910 --> 00:00:48.160
working on Native Client.

29
00:00:48.160 --> 00:00:50.155
NOEL ALLEN: I'm Noel Allen,
the SDK lead.

30
00:00:50.155 --> 00:00:51.140
COLT MCANLIS: SDK lead.

31
00:00:51.140 --> 00:00:53.240
And we have fancy
hats, as well.

32
00:00:53.240 --> 00:00:55.370
We figured these lights
are actually

33
00:00:55.370 --> 00:00:56.220
pretty gnarly up here.

34
00:00:56.220 --> 00:00:56.940
We can't see people.

35
00:00:56.940 --> 00:00:58.130
So we're like, let's
wear our hats.

36
00:00:58.130 --> 00:00:59.235
That'll be funny.

37
00:00:59.235 --> 00:01:01.505
NOEL ALLEN: It actually kind
of works, because it is a

38
00:01:01.505 --> 00:01:02.870
little bright.

39
00:01:02.870 --> 00:01:03.650
COLT MCANLIS: OK.

40
00:01:03.650 --> 00:01:05.900
So what today's talk is about
is, we're actually going to

41
00:01:05.900 --> 00:01:08.980
port an application to Native
Client live in 60 minutes.

42
00:01:08.980 --> 00:01:10.690
Now, just quick show of hands
in here, how many have

43
00:01:10.690 --> 00:01:12.920
actually played with
Native Client?

44
00:01:12.920 --> 00:01:13.370
Wow.

45
00:01:13.370 --> 00:01:15.590
That's actually a surprising
amount of people.

46
00:01:15.590 --> 00:01:17.210
I'm very encouraged
by that, actually.

47
00:01:17.210 --> 00:01:19.930
They'll know what we're
talking about today.

48
00:01:19.930 --> 00:01:23.910
Funny story is we actually
decided to sign off to do this

49
00:01:23.910 --> 00:01:26.030
about three to four
months ago.

50
00:01:26.030 --> 00:01:28.120
And we actually walked into
Noel's office, and I was like,

51
00:01:28.120 --> 00:01:31.020
hey, we're going to give a talk
at Google I/O, and we're

52
00:01:31.020 --> 00:01:32.220
going to port something
to Native

53
00:01:32.220 --> 00:01:33.610
Client live in 60 minutes.

54
00:01:33.610 --> 00:01:35.280
And he was like, uh,
no you're not.

55
00:01:35.280 --> 00:01:36.240
And I said, yes, yes we are.

56
00:01:36.240 --> 00:01:37.570
So we got him to
sign off on it.

57
00:01:37.570 --> 00:01:39.790
I convinced him with alcohol
or something else.

58
00:01:39.790 --> 00:01:41.920
And we started going through
the process.

59
00:01:41.920 --> 00:01:43.870
And the truth was, we failed.

60
00:01:43.870 --> 00:01:44.900
We failed a lot.

61
00:01:44.900 --> 00:01:45.620
Horribly.

62
00:01:45.620 --> 00:01:47.350
Like crash and burn style.

63
00:01:47.350 --> 00:01:48.990
NOEL ALLEN: You failed
before I started.

64
00:01:48.990 --> 00:01:50.310
Let's just get that clear.

65
00:01:50.310 --> 00:01:51.040
COLT MCANLIS: Fair enough,
fair enough.

66
00:01:51.040 --> 00:01:52.420
That is true.

67
00:01:52.420 --> 00:01:54.030
The original port of the
application we're going to

68
00:01:54.030 --> 00:01:57.160
show you today actually took
about 2.5 weeks the very first

69
00:01:57.160 --> 00:01:59.310
time we did it, which was kind
of embarrassing on our side,

70
00:01:59.310 --> 00:02:00.920
because it's a very simple
piece of technology we're

71
00:02:00.920 --> 00:02:02.290
going to look at today.

72
00:02:02.290 --> 00:02:05.060
But the good news is that we
actually learned from that.

73
00:02:05.060 --> 00:02:06.940
We said, where are we.

74
00:02:06.940 --> 00:02:08.100
This isn't good for
our developers.

75
00:02:08.100 --> 00:02:09.440
Let's improve the process.

76
00:02:09.440 --> 00:02:11.690
Let's improve the SDK,
the workflow.

77
00:02:11.690 --> 00:02:14.630
And what we're going to talk
about today is the learn-ins,

78
00:02:14.630 --> 00:02:16.110
the learn-ins of those things.

79
00:02:16.110 --> 00:02:19.880
So how you should view
today's class session

80
00:02:19.880 --> 00:02:20.490
is a cooking show.

81
00:02:20.490 --> 00:02:23.750
How many people watch
late night cooking?

82
00:02:23.750 --> 00:02:24.300
Really?

83
00:02:24.300 --> 00:02:25.390
That's it?

84
00:02:25.390 --> 00:02:28.930
The rest of you are liars, and
you're dirty, filthy liars.

85
00:02:28.930 --> 00:02:30.530
If you do not watch
Iron Chef there is

86
00:02:30.530 --> 00:02:31.380
something wrong with you.

87
00:02:31.380 --> 00:02:32.630
That is an amazing show.

88
00:02:32.630 --> 00:02:36.340
89
00:02:36.340 --> 00:02:36.730
When did--

90
00:02:36.730 --> 00:02:37.945
OK--

91
00:02:37.945 --> 00:02:39.580
NOEL ALLEN: You kept changing
the slides on me.

92
00:02:39.580 --> 00:02:41.770
I figured I'd have
some fun too.

93
00:02:41.770 --> 00:02:43.690
COLT MCANLIS: That's new.

94
00:02:43.690 --> 00:02:44.280
OK.

95
00:02:44.280 --> 00:02:44.950
We're going there.

96
00:02:44.950 --> 00:02:47.090
Today is a cooking show,
and we have Chef

97
00:02:47.090 --> 00:02:50.240
Noel Allen over here.

98
00:02:50.240 --> 00:02:53.320
In these shows, you usually have
some very peppy person

99
00:02:53.320 --> 00:02:55.010
standing up there showing you
how they're going to make a

100
00:02:55.010 --> 00:02:59.640
lamb sorbet, which is normally
like a nine-day endeavor.

101
00:02:59.640 --> 00:03:02.210
And they're going to do it in 30
minutes and show you how to

102
00:03:02.210 --> 00:03:02.710
do it, too.

103
00:03:02.710 --> 00:03:04.380
Well, we're going to do the
same process today.

104
00:03:04.380 --> 00:03:06.080
We're going to take the
knowledge and everything we've

105
00:03:06.080 --> 00:03:08.700
learned in the past couple of
months and dissect it down.

106
00:03:08.700 --> 00:03:11.400
Now, we've had to pre-chop some
onions so that we can get

107
00:03:11.400 --> 00:03:14.120
this in our 60 minute window
here, but we'll be sure to

108
00:03:14.120 --> 00:03:16.360
call that out so you know what
was pre-chopped, what was

109
00:03:16.360 --> 00:03:18.750
canned, and what was actually
fresh tuna fish

110
00:03:18.750 --> 00:03:20.080
for our lamb sorbet.

111
00:03:20.080 --> 00:03:21.655
And that hat is awesome.

112
00:03:21.655 --> 00:03:23.040
Where did you even find that?

113
00:03:23.040 --> 00:03:25.080
NOEL ALLEN: I got
it at the store.

114
00:03:25.080 --> 00:03:26.240
COLT MCANLIS: You have two?

115
00:03:26.240 --> 00:03:27.093
Sweet.

116
00:03:27.093 --> 00:03:30.550
Sorry, guys.

117
00:03:30.550 --> 00:03:31.005
I'm getting fired.

118
00:03:31.005 --> 00:03:32.950
This is going to be awesome.

119
00:03:32.950 --> 00:03:33.430
How does it look?

120
00:03:33.430 --> 00:03:35.130
NOEL ALLEN: Very nice.

121
00:03:35.130 --> 00:03:35.690
Very convincing.

122
00:03:35.690 --> 00:03:38.680
COLT MCANLIS: I feel like
I have a pope hat.

123
00:03:38.680 --> 00:03:40.470
Is this even on right?

124
00:03:40.470 --> 00:03:41.770
NOEL ALLEN: I can't tell.

125
00:03:41.770 --> 00:03:42.630
I don't know what it's supposed
to look like.

126
00:03:42.630 --> 00:03:43.450
COLT MCANLIS: OK, cool.

127
00:03:43.450 --> 00:03:43.950
All right.

128
00:03:43.950 --> 00:03:44.780
We're wearing these now.

129
00:03:44.780 --> 00:03:45.330
Fantastic.

130
00:03:45.330 --> 00:03:46.860
I'm sure the YouTube
guys love this.

131
00:03:46.860 --> 00:03:47.520
OK.

132
00:03:47.520 --> 00:03:49.460
This is a cooking show
with your chefs.

133
00:03:49.460 --> 00:03:51.770
So let's get started and talk
about Native Client a little

134
00:03:51.770 --> 00:03:53.435
bit, sort of set the groundwork
and the ecosystem

135
00:03:53.435 --> 00:03:55.660
of we're talking about today.

136
00:03:55.660 --> 00:03:59.380
Native Client is a technology
that allows you to run C and

137
00:03:59.380 --> 00:04:04.040
C++ code in a web page with the
same safety as JavaScript.

138
00:04:04.040 --> 00:04:07.320
And here's the really cool part,
is that the user is not

139
00:04:07.320 --> 00:04:09.620
required to install a plug-in.

140
00:04:09.620 --> 00:04:12.160
So what we've seen is that with
a lot of technologies out

141
00:04:12.160 --> 00:04:15.310
there, you can actually run C
and C++ code in a web browser,

142
00:04:15.310 --> 00:04:18.529
but the user gets this really
scary pop-up that's like, hey,

143
00:04:18.529 --> 00:04:19.980
you're about to install a
plug-in that's going to

144
00:04:19.980 --> 00:04:22.970
violate every piece of data you
have on your hard drive.

145
00:04:22.970 --> 00:04:25.580
What we've been seeing over time
is that that, of course,

146
00:04:25.580 --> 00:04:27.445
affects user retention rates.

147
00:04:27.445 --> 00:04:28.620
NOEL ALLEN: And installation.

148
00:04:28.620 --> 00:04:29.330
COLT MCANLIS: Say again?

149
00:04:29.330 --> 00:04:29.990
NOEL ALLEN: And installation.

150
00:04:29.990 --> 00:04:30.600
COLT MCANLIS: And installation.

151
00:04:30.600 --> 00:04:31.220
Exactly.

152
00:04:31.220 --> 00:04:34.070
So users get there, and they
go, hey, this is too scary.

153
00:04:34.070 --> 00:04:34.900
And they move on.

154
00:04:34.900 --> 00:04:36.980
And so this means that high
performance applications that

155
00:04:36.980 --> 00:04:40.810
want to run C++ code in a web
page really lose a lot of

156
00:04:40.810 --> 00:04:42.620
their users to this
scary dialogue.

157
00:04:42.620 --> 00:04:45.660
Now, with Native Client, C++
and the fact it can be run

158
00:04:45.660 --> 00:04:48.560
safely in the web browser and
they're not prompted to

159
00:04:48.560 --> 00:04:51.750
install a plug-in, means that
your C++ code can actually

160
00:04:51.750 --> 00:04:55.070
bridge a lot of ecosystems
and a lot of platforms.

161
00:04:55.070 --> 00:04:59.000
So predominantly, C++ code was
in the realm of game consoles,

162
00:04:59.000 --> 00:05:00.330
PC development mobile.

163
00:05:00.330 --> 00:05:02.960
And now you can actually use
your same code base right in

164
00:05:02.960 --> 00:05:05.250
the web, which is fantastic
for a lot of companies and

165
00:05:05.250 --> 00:05:08.470
studios who spend a lot of time
not only training their

166
00:05:08.470 --> 00:05:12.530
engineers in C++ code, but also,
you have legacy code.

167
00:05:12.530 --> 00:05:16.540
You've got 10 years of C++
memory management code, STL

168
00:05:16.540 --> 00:05:18.340
containers sitting around,
and you don't want to

169
00:05:18.340 --> 00:05:20.690
throw all that out.

170
00:05:20.690 --> 00:05:23.190
Now, we had our official Native
Client launch event in

171
00:05:23.190 --> 00:05:24.860
December of last year.

172
00:05:24.860 --> 00:05:27.160
In truth, Native Client was out
for quite a while before

173
00:05:27.160 --> 00:05:29.510
that, but we decided to snazzy
it up and actually have some

174
00:05:29.510 --> 00:05:31.330
hors d'oeuvres and call
it a launch event.

175
00:05:31.330 --> 00:05:33.500
Since then, NaCl has been
doing fantastic.

176
00:05:33.500 --> 00:05:37.580
We've seen already 27 titles,
actual products, ship with

177
00:05:37.580 --> 00:05:39.770
Native Client since
the announcement.

178
00:05:39.770 --> 00:05:42.000
In addition to that, we've
seen that game developers

179
00:05:42.000 --> 00:05:44.750
predominantly love
Native Client.

180
00:05:44.750 --> 00:05:48.880
We see a lot of technology
middleware for games on the

181
00:05:48.880 --> 00:05:49.640
side there.

182
00:05:49.640 --> 00:05:53.500
They're finding that Native
Client provides them this nice

183
00:05:53.500 --> 00:05:56.480
little niche between performance
and reach.

184
00:05:56.480 --> 00:06:00.360
You can run all of your code
extremely fast and reach all

185
00:06:00.360 --> 00:06:05.200
of the 310 million users
that Chrome has active.

186
00:06:05.200 --> 00:06:06.000
That was a new stat today.

187
00:06:06.000 --> 00:06:07.210
Watch the keynote.

188
00:06:07.210 --> 00:06:08.740
So let's talk about what
we're cooking today.

189
00:06:08.740 --> 00:06:09.790
Let's switch this over to you.

190
00:06:09.790 --> 00:06:13.550
So Chef Noel, can you show us
what our lamb sorbet looks

191
00:06:13.550 --> 00:06:13.870
like today?

192
00:06:13.870 --> 00:06:14.380
NOEL ALLEN: Absolutely.

193
00:06:14.380 --> 00:06:21.540
So for today, we have a fabulous
spinning cube.

194
00:06:21.540 --> 00:06:24.170
COLT MCANLIS: That wasn't what
we looked at yesterday.

195
00:06:24.170 --> 00:06:24.435
What--

196
00:06:24.435 --> 00:06:26.480
NOEL ALLEN: Well, we still had
a couple, you know, bugs.

197
00:06:26.480 --> 00:06:26.650
Issues.

198
00:06:26.650 --> 00:06:28.080
COLT MCANLIS: You didn't
fix the bugs?

199
00:06:28.080 --> 00:06:28.750
We were supposed to have--

200
00:06:28.750 --> 00:06:29.610
you were buying the hats.

201
00:06:29.610 --> 00:06:30.390
NOEL ALLEN: I was busy.

202
00:06:30.390 --> 00:06:31.010
I had stuff to do.

203
00:06:31.010 --> 00:06:32.430
I had a new Nexus
to play with.

204
00:06:32.430 --> 00:06:34.770
COLT MCANLIS: Fair enough.

205
00:06:34.770 --> 00:06:35.120
Cool.

206
00:06:35.120 --> 00:06:35.640
You had a new Nexus.

207
00:06:35.640 --> 00:06:35.970
Awesome.

208
00:06:35.970 --> 00:06:36.810
So we're doing a
spinning cube.

209
00:06:36.810 --> 00:06:38.560
So what is this thing actually
doing behind the scenes?

210
00:06:38.560 --> 00:06:39.180
NOEL ALLEN: OK.

211
00:06:39.180 --> 00:06:41.260
So this is an open GL demo.

212
00:06:41.260 --> 00:06:43.900
It's a kind of standard demo
that you do, make sure your

213
00:06:43.900 --> 00:06:46.730
graphics engine is rendering
correctly, hence the arrows

214
00:06:46.730 --> 00:06:48.430
and the lighting and whatnot.

215
00:06:48.430 --> 00:06:51.870
So this is a standard Windows
32 application.

216
00:06:51.870 --> 00:06:53.340
And we're going to port
that to Native Client.

217
00:06:53.340 --> 00:06:54.860
COLT MCANLIS: And so this is
doing just standard rendering.

218
00:06:54.860 --> 00:06:56.550
So we're [? reading ?] in some
shaders, reading some

219
00:06:56.550 --> 00:06:58.170
textures, doing some
a platform calls.

220
00:06:58.170 --> 00:06:58.820
NOEL ALLEN: Exactly.

221
00:06:58.820 --> 00:07:00.060
COLT MCANLIS: This is
our lamb sorbet.

222
00:07:00.060 --> 00:07:01.170
Fantastic.

223
00:07:01.170 --> 00:07:03.050
So with that spinning cube up
and running over there to

224
00:07:03.050 --> 00:07:04.950
distract all of you, I'm going
to point over this way with

225
00:07:04.950 --> 00:07:05.700
sock puppets.

226
00:07:05.700 --> 00:07:07.050
Let's talk about our kitchen.

227
00:07:07.050 --> 00:07:08.880
Let's talk about what
development with Native Client

228
00:07:08.880 --> 00:07:11.010
should actually look like
today for most of you.

229
00:07:11.010 --> 00:07:14.140
So, when porting to Native
Client, you need to approach

230
00:07:14.140 --> 00:07:16.010
it from the concept of
any other ports.

231
00:07:16.010 --> 00:07:18.370
So let's say you're actually
porting an application from

232
00:07:18.370 --> 00:07:20.160
Windows to Linux.

233
00:07:20.160 --> 00:07:22.620
This is going to have a specific
set of processes that

234
00:07:22.620 --> 00:07:24.000
you're going to need
to go through.

235
00:07:24.000 --> 00:07:26.420
First off, you're going to need
to actually change over

236
00:07:26.420 --> 00:07:28.110
from using DirectX to OpenGL.

237
00:07:28.110 --> 00:07:30.360
That's actually a big set of
code, different APIs that

238
00:07:30.360 --> 00:07:32.410
aren't available on the
Linux machines.

239
00:07:32.410 --> 00:07:35.560
Also some APIs are only
available on Windows for the

240
00:07:35.560 --> 00:07:36.280
same process.

241
00:07:36.280 --> 00:07:37.800
So you want to spawn
up a thread.

242
00:07:37.800 --> 00:07:41.230
Well on Windows, you'd use
beginthread or beginthreadex.

243
00:07:41.230 --> 00:07:43.570
On Linux, you would have to use
sort of a more POSIX style

244
00:07:43.570 --> 00:07:45.050
pthread_create.

245
00:07:45.050 --> 00:07:47.590
And for other things, Windows
actually provides a very rich

246
00:07:47.590 --> 00:07:50.950
ecosystem for UI components that
you can use as part of

247
00:07:50.950 --> 00:07:52.850
their platform that may
not exist on other

248
00:07:52.850 --> 00:07:53.600
platforms like Linux.

249
00:07:53.600 --> 00:07:56.170
So instead of being able to
actually use the message box

250
00:07:56.170 --> 00:07:59.040
function directly, you'd have to
get shifted over to printf.

251
00:07:59.040 --> 00:08:00.820
Right?

252
00:08:00.820 --> 00:08:04.020
So viewing your port to Native
Client should be the same way.

253
00:08:04.020 --> 00:08:06.620
You should view it like porting
from anything to

254
00:08:06.620 --> 00:08:07.370
another platform.

255
00:08:07.370 --> 00:08:09.400
But with Native Client, what
you're actually porting to are

256
00:08:09.400 --> 00:08:10.310
these specific functions.

257
00:08:10.310 --> 00:08:13.410
You're actually porting to
an API we call Pepper.

258
00:08:13.410 --> 00:08:17.960
Now, what Pepper is, is it's
actually a plug-in API that

259
00:08:17.960 --> 00:08:21.630
Chrome provides that allows
plug-ins to interact with

260
00:08:21.630 --> 00:08:25.380
lower-level system resources
like FileIO, rendering, audio,

261
00:08:25.380 --> 00:08:27.710
and even the ability to
communicate directly to the

262
00:08:27.710 --> 00:08:28.690
JavaScript page.

263
00:08:28.690 --> 00:08:31.480
And it allows it to do this
inside of the Chrome sandbox,

264
00:08:31.480 --> 00:08:33.630
which means that these
plug-ins are actually

265
00:08:33.630 --> 00:08:37.039
communicating through the same
exact code paths that

266
00:08:37.039 --> 00:08:39.210
JavaScript is communicating
to, to do the same

267
00:08:39.210 --> 00:08:40.390
functionality.

268
00:08:40.390 --> 00:08:42.240
This hat is awesome,
by the way.

269
00:08:42.240 --> 00:08:42.710
I'm not sure--

270
00:08:42.710 --> 00:08:43.950
I need an ear-in.

271
00:08:43.950 --> 00:08:46.470
It's popping over my head.

272
00:08:46.470 --> 00:08:49.100
Anyhow, Native Client should be
viewed as a plug-in that's

273
00:08:49.100 --> 00:08:50.970
provided with Chrome.

274
00:08:50.970 --> 00:08:52.030
It's compiled with Chrome.

275
00:08:52.030 --> 00:08:53.260
It's shipped with Chrome.

276
00:08:53.260 --> 00:08:56.540
And what Native Client allows
you to do is it allows you to

277
00:08:56.540 --> 00:09:00.290
load pre-compiled executable
code that can then target the

278
00:09:00.290 --> 00:09:01.880
Pepper APIs.

279
00:09:01.880 --> 00:09:05.080
It'll load it up, execute the
code, and allow that code to

280
00:09:05.080 --> 00:09:08.340
actually, directly trampoline
over and get access to these

281
00:09:08.340 --> 00:09:10.630
lower-level system resources.

282
00:09:10.630 --> 00:09:12.400
How this works at a developer
level starts with the

283
00:09:12.400 --> 00:09:14.100
original C++ code.

284
00:09:14.100 --> 00:09:17.310
The C++ code is then sent
through our custom GCC

285
00:09:17.310 --> 00:09:19.260
compiler, provided by the SDK.

286
00:09:19.260 --> 00:09:21.880
This spits out a set
of NEXE files, or

287
00:09:21.880 --> 00:09:23.470
Native Client exe files.

288
00:09:23.470 --> 00:09:26.100
These have been munged
and messed

289
00:09:26.100 --> 00:09:27.510
around a bit to ensure--

290
00:09:27.510 --> 00:09:29.870
well, to do the best we
can to ensure safety.

291
00:09:29.870 --> 00:09:33.700
We remove a lot of malicious
codes that may cause security

292
00:09:33.700 --> 00:09:35.940
vulnerabilities and some other
fun stuff that we'll talk

293
00:09:35.940 --> 00:09:37.520
about later.

294
00:09:37.520 --> 00:09:39.170
You take this data that's
actually generated from the

295
00:09:39.170 --> 00:09:42.870
toolchain, and with a simple
HTML embed tag, you can

296
00:09:42.870 --> 00:09:44.810
actually get it running right
in your web page.

297
00:09:44.810 --> 00:09:46.380
So what you're actually seeing
on the screen there is a

298
00:09:46.380 --> 00:09:48.690
screenshot from a game
called From Dust.

299
00:09:48.690 --> 00:09:52.130
From Dust was actually an Xbox
360 title that was ported over

300
00:09:52.130 --> 00:09:54.390
to Native Client that we
unveiled earlier this year.

301
00:09:54.390 --> 00:09:57.000
Now, this is running the same
shaders, the same code.

302
00:09:57.000 --> 00:09:58.910
It's actually doing
quite amazing.

303
00:09:58.910 --> 00:10:00.272
I think I have this backwards.

304
00:10:00.272 --> 00:10:00.694
How about that?

305
00:10:00.694 --> 00:10:01.540
Is that better?

306
00:10:01.540 --> 00:10:03.030
NOEL ALLEN: You're going to
fiddle with this the whole

307
00:10:03.030 --> 00:10:03.325
presentation, aren't you?

308
00:10:03.325 --> 00:10:04.390
COLT MCANLIS: It's
annoying me.

309
00:10:04.390 --> 00:10:06.060
My head's too small and
my ears are too big.

310
00:10:06.060 --> 00:10:07.760
That's the problem.

311
00:10:07.760 --> 00:10:09.370
So let's talk a little
bit about the SDK.

312
00:10:09.370 --> 00:10:12.530
The SDK itself allows for cross
platform development on

313
00:10:12.530 --> 00:10:15.190
platforms for Linux,
Windows and Mac.

314
00:10:15.190 --> 00:10:17.360
And we do this through providing
a simple command

315
00:10:17.360 --> 00:10:18.710
line GCC compiler.

316
00:10:18.710 --> 00:10:20.880
So the compiler itself is just
simple command line.

317
00:10:20.880 --> 00:10:23.130
Everybody in here has probably
used GCC at one time in your

318
00:10:23.130 --> 00:10:24.270
programming life.

319
00:10:24.270 --> 00:10:27.395
We also provide a full set of
working code examples so that

320
00:10:27.395 --> 00:10:29.600
you can actually see how to
properly use Pepper and how to

321
00:10:29.600 --> 00:10:30.950
use Native Client and
best practices

322
00:10:30.950 --> 00:10:32.550
involved with that process.

323
00:10:32.550 --> 00:10:35.530
And then in addition to that, we
also provide debugging and

324
00:10:35.530 --> 00:10:37.110
profiling tools that
are currently an

325
00:10:37.110 --> 00:10:39.380
AlphaRev of our SDK.

326
00:10:39.380 --> 00:10:41.430
Now, this takes a little
bit to understand.

327
00:10:41.430 --> 00:10:44.310
So you need to know that when
we generate these Native

328
00:10:44.310 --> 00:10:46.810
Client executables, the NEXE
files, it's not your

329
00:10:46.810 --> 00:10:48.915
standard x86 code.

330
00:10:48.915 --> 00:10:50.590
We've got a lot of paperwork
that we're not going to talk

331
00:10:50.590 --> 00:10:53.150
about today so much.

332
00:10:53.150 --> 00:10:56.220
It actually isn't an exe that
you can just double click on

333
00:10:56.220 --> 00:10:57.360
your desktop and run.

334
00:10:57.360 --> 00:10:59.740
It's actually a modified
DWARF file.

335
00:10:59.740 --> 00:11:00.130
Right?

336
00:11:00.130 --> 00:11:01.470
NOEL ALLEN: Correct.

337
00:11:01.470 --> 00:11:01.940
DWARF and ELF.

338
00:11:01.940 --> 00:11:02.460
COLT MCANLIS: OK.

339
00:11:02.460 --> 00:11:03.010
Fantastic.

340
00:11:03.010 --> 00:11:05.480
Which means that debugging
systems work a little bit

341
00:11:05.480 --> 00:11:06.130
differently.

342
00:11:06.130 --> 00:11:08.670
You don't have a PDB file
full of symbols and

343
00:11:08.670 --> 00:11:09.400
all these other things.

344
00:11:09.400 --> 00:11:13.040
It requires some massaging.

345
00:11:13.040 --> 00:11:15.820
Now with these things in mind,
let's talk about actually

346
00:11:15.820 --> 00:11:17.970
porting, because we've only
got 47 minutes left.

347
00:11:17.970 --> 00:11:18.850
And my hat is funny.

348
00:11:18.850 --> 00:11:20.070
And I'm running on
reserve power.

349
00:11:20.070 --> 00:11:21.320
This isn't even plugged in.

350
00:11:21.320 --> 00:11:24.330
351
00:11:24.330 --> 00:11:27.000
If it was a perfect demo,
we wouldn't do it.

352
00:11:27.000 --> 00:11:28.730
So here's our plan
of attack today.

353
00:11:28.730 --> 00:11:30.222
First, what we're going to do
is we're actually going to

354
00:11:30.222 --> 00:11:32.120
build as a Pepper
plug-in first.

355
00:11:32.120 --> 00:11:34.890
Pepper's a fantastic API, but
we're going to actually ignore

356
00:11:34.890 --> 00:11:37.950
the Native Client part of the
equation and just migrate over

357
00:11:37.950 --> 00:11:41.580
our platform-specific APIs over
to the Pepper APIs first.

358
00:11:41.580 --> 00:11:44.430
And then as a last step, we'll
actually do the generation of

359
00:11:44.430 --> 00:11:45.840
the Native Client exe.

360
00:11:45.840 --> 00:11:50.170
This allows us to actually use
our plug-in system in an

361
00:11:50.170 --> 00:11:51.970
existing IDE of choice.

362
00:11:51.970 --> 00:11:53.910
So standard plug-in development
is pretty much

363
00:11:53.910 --> 00:11:55.900
exposed in every
IDE out there.

364
00:11:55.900 --> 00:11:56.650
It's a standard loop.

365
00:11:56.650 --> 00:11:58.970
You create a DLL or an SO.

366
00:11:58.970 --> 00:12:00.540
The external application
loads it up.

367
00:12:00.540 --> 00:12:02.170
You can set break points,
see memory, all

368
00:12:02.170 --> 00:12:03.280
this other fun stuff.

369
00:12:03.280 --> 00:12:05.290
Now to facilitate this, and
this is one of the biggest

370
00:12:05.290 --> 00:12:07.490
things that we learned in our
failures that I mentioned

371
00:12:07.490 --> 00:12:09.820
earlier in this project, was
that we really didn't have

372
00:12:09.820 --> 00:12:12.470
good integration into
existing IDEs at the

373
00:12:12.470 --> 00:12:13.680
level we wanted to.

374
00:12:13.680 --> 00:12:15.680
So today we're actually really
excited to announce that we're

375
00:12:15.680 --> 00:12:18.800
actually providing a Visual
Studio 2010 plug-in for Native

376
00:12:18.800 --> 00:12:19.920
Client and Pepper.

377
00:12:19.920 --> 00:12:21.430
And we'll actually
provide this--

378
00:12:21.430 --> 00:12:21.700
Please.

379
00:12:21.700 --> 00:12:22.830
Yes, applause.

380
00:12:22.830 --> 00:12:23.170
Yeah.

381
00:12:23.170 --> 00:12:25.130
That's cool.

382
00:12:25.130 --> 00:12:27.120
Add-ins are awesome.

383
00:12:27.120 --> 00:12:29.250
This will be available
in the Pepper 22 SDK.

384
00:12:29.250 --> 00:12:32.430
So if you guys go to GoNaCl.com,
grab the SDK

385
00:12:32.430 --> 00:12:33.610
chain, you'll actually
get a preview.

386
00:12:33.610 --> 00:12:35.890
Because we actually
have a few Peppers

387
00:12:35.890 --> 00:12:37.330
ahead of stable available.

388
00:12:37.330 --> 00:12:37.630
Right?

389
00:12:37.630 --> 00:12:38.700
Canary builds and
the other stuff.

390
00:12:38.700 --> 00:12:38.850
NOEL ALLEN: Yes.

391
00:12:38.850 --> 00:12:40.910
COLT MCANLIS: So this is
actually available, and you

392
00:12:40.910 --> 00:12:41.800
guys can totally take
a look at it.

393
00:12:41.800 --> 00:12:43.540
So we're really excited about
that, because it really helps

394
00:12:43.540 --> 00:12:44.710
with ease of use.

395
00:12:44.710 --> 00:12:48.770
Now, what chef Noel is going
to do today for us, can you

396
00:12:48.770 --> 00:12:51.220
walk us through some of the
things that the add-in does

397
00:12:51.220 --> 00:12:51.790
inside of Visual Studio?

398
00:12:51.790 --> 00:12:52.630
NOEL ALLEN: Sure.

399
00:12:52.630 --> 00:12:53.390
Absolutely.

400
00:12:53.390 --> 00:12:57.190
So I have already created some
different configurations.

401
00:12:57.190 --> 00:13:00.180
We can see a Native Client
configuration, a Pepper

402
00:13:00.180 --> 00:13:02.340
configuration, and the
original Windows 32

403
00:13:02.340 --> 00:13:03.760
configuration.

404
00:13:03.760 --> 00:13:07.105
So what the add-in is doing is
we can go over here and--

405
00:13:07.105 --> 00:13:13.880
406
00:13:13.880 --> 00:13:15.880
so the add-in drives
the compiler.

407
00:13:15.880 --> 00:13:17.880
Now for the Pepper
configuration, it's actually

408
00:13:17.880 --> 00:13:18.640
pretty straightforward.

409
00:13:18.640 --> 00:13:21.570
All we're actually going to
do is convert from an

410
00:13:21.570 --> 00:13:23.080
executable to a DLL.

411
00:13:23.080 --> 00:13:27.290
So Chrome's going to load this
and run it as a plug-in.

412
00:13:27.290 --> 00:13:28.420
Very little change.

413
00:13:28.420 --> 00:13:31.420
I'm just going to go ahead and
point my Include Directories

414
00:13:31.420 --> 00:13:33.310
to the Pepper SDK.

415
00:13:33.310 --> 00:13:37.690
I'm going to create a macro for
Pepper so that I know in

416
00:13:37.690 --> 00:13:41.260
my code which particular view
of the code I'm looking at.

417
00:13:41.260 --> 00:13:42.450
And that's pretty much it.

418
00:13:42.450 --> 00:13:43.170
I'm ready to go.

419
00:13:43.170 --> 00:13:43.720
COLT MCANLIS: OK.

420
00:13:43.720 --> 00:13:44.270
Fantastic.

421
00:13:44.270 --> 00:13:47.550
So you set up these properties,
so you create the

422
00:13:47.550 --> 00:13:48.880
platform, and then
you compile.

423
00:13:48.880 --> 00:13:49.620
And what happens here?

424
00:13:49.620 --> 00:13:50.180
NOEL ALLEN: Right.

425
00:13:50.180 --> 00:13:52.820
So now I'm going to switch to
the Pepper configuration, and

426
00:13:52.820 --> 00:13:54.180
I'm going to go ahead
and re-launch.

427
00:13:54.180 --> 00:13:57.360
Now, I did actually do one other
thing, which is for the

428
00:13:57.360 --> 00:14:02.850
sake of debugging, I set this
up to launch Chrome for me.

429
00:14:02.850 --> 00:14:03.470
COLT MCANLIS: Oh.

430
00:14:03.470 --> 00:14:04.840
Now, I see some other
flags in there.

431
00:14:04.840 --> 00:14:05.800
Can you walk us through what
exactly is going on?

432
00:14:05.800 --> 00:14:06.200
NOEL ALLEN: Sure.

433
00:14:06.200 --> 00:14:08.260
So there's a couple flags in
here that make things a little

434
00:14:08.260 --> 00:14:09.560
bit easier for you.

435
00:14:09.560 --> 00:14:12.980
So I am setting user data
dir to not pollute

436
00:14:12.980 --> 00:14:15.490
my normal user settings.

437
00:14:15.490 --> 00:14:19.270
I have Incognito to let Chrome
forget what I've done, so we

438
00:14:19.270 --> 00:14:21.720
don't actually get
caching effects.

439
00:14:21.720 --> 00:14:23.240
And then, register
Pepper plug-in.

440
00:14:23.240 --> 00:14:27.860
Here's the interesting one where
I am telling Chrome,

441
00:14:27.860 --> 00:14:32.490
please load this plug-in, and
then I want you to answer any

442
00:14:32.490 --> 00:14:35.790
request to the particular MIME
type I have described here,

443
00:14:35.790 --> 00:14:38.260
which in this case is
application xNaCl.

444
00:14:38.260 --> 00:14:39.010
COLT MCANLIS: Interesting.

445
00:14:39.010 --> 00:14:41.110
So to be very clear about this,
what happens is, any

446
00:14:41.110 --> 00:14:43.240
time Chrome actually encounters
the MIME type

447
00:14:43.240 --> 00:14:45.710
application NaCl, it'll actually
go load the Native

448
00:14:45.710 --> 00:14:48.200
Client exe and pass the
data over to it.

449
00:14:48.200 --> 00:14:51.310
What this command line option
allows us to do is override

450
00:14:51.310 --> 00:14:51.970
that process.

451
00:14:51.970 --> 00:14:55.320
And so instead of actually
finding MIME type NaCl and

452
00:14:55.320 --> 00:14:57.090
running NaCl, it's going to
run our plug-in instead.

453
00:14:57.090 --> 00:14:58.980
NOEL ALLEN: Exactly.

454
00:14:58.980 --> 00:15:01.860
So we can go ahead
and launch that.

455
00:15:01.860 --> 00:15:06.910
456
00:15:06.910 --> 00:15:10.240
And it helps if I start
the web server first.

457
00:15:10.240 --> 00:15:13.200
Always useful.

458
00:15:13.200 --> 00:15:13.920
All right.

459
00:15:13.920 --> 00:15:17.086
Now, it couldn't find
the plug-in.

460
00:15:17.086 --> 00:15:20.060
COLT MCANLIS: So why is it
saying that, though?

461
00:15:20.060 --> 00:15:23.940
NOEL ALLEN: Well, I am missing
the components that let Pepper

462
00:15:23.940 --> 00:15:25.210
talk to the plug-in.

463
00:15:25.210 --> 00:15:26.050
COLT MCANLIS: I see.

464
00:15:26.050 --> 00:15:27.160
So we had our Win32 codes.

465
00:15:27.160 --> 00:15:29.420
So even though we've compiled it
as a DLL, we haven't added

466
00:15:29.420 --> 00:15:31.670
the hooks, the API hooks,
for Pepper for

467
00:15:31.670 --> 00:15:32.340
Chrome to actually load.

468
00:15:32.340 --> 00:15:32.785
NOEL ALLEN: Exactly.

469
00:15:32.785 --> 00:15:33.940
COLT MCANLIS: So where
do we get those, and

470
00:15:33.940 --> 00:15:34.680
how do we get those?

471
00:15:34.680 --> 00:15:34.970
NOEL ALLEN: OK.

472
00:15:34.970 --> 00:15:38.450
Well, the easiest thing to do is
I am just going to sit here

473
00:15:38.450 --> 00:15:41.510
and go over to one of the
examples that we ship, and

474
00:15:41.510 --> 00:15:43.810
just copy and paste it in,
so that I have all

475
00:15:43.810 --> 00:15:44.640
that start-up code.

476
00:15:44.640 --> 00:15:45.590
COLT MCANLIS: I like
your style.

477
00:15:45.590 --> 00:15:46.430
What is that they say?

478
00:15:46.430 --> 00:15:49.182
That good programmers code and
great programmers reuse?

479
00:15:49.182 --> 00:15:50.330
I like it.

480
00:15:50.330 --> 00:15:55.110
NOEL ALLEN: So if we take this
Hello World example, And I'm

481
00:15:55.110 --> 00:16:00.680
going to select that, and paste
it here into the bottom,

482
00:16:00.680 --> 00:16:01.930
and then run again.

483
00:16:01.930 --> 00:16:05.610
484
00:16:05.610 --> 00:16:07.640
So now we can see the Hello
World demo that

485
00:16:07.640 --> 00:16:08.930
ships with the SDK.

486
00:16:08.930 --> 00:16:10.665
COLT MCANLIS: And then that's
running in our existing code?

487
00:16:10.665 --> 00:16:11.440
NOEL ALLEN: Correct.

488
00:16:11.440 --> 00:16:13.320
COLT MCANLIS: So, but where'd
the spinning cube go?

489
00:16:13.320 --> 00:16:14.650
NOEL ALLEN: Well, we haven't
called it yet.

490
00:16:14.650 --> 00:16:16.560
So we haven't actually called
any of the original

491
00:16:16.560 --> 00:16:17.565
code that we had.

492
00:16:17.565 --> 00:16:18.330
COLT MCANLIS: Can you?

493
00:16:18.330 --> 00:16:19.480
NOEL ALLEN: I can do
that real quick.

494
00:16:19.480 --> 00:16:19.690
COLT MCANLIS: OK.

495
00:16:19.690 --> 00:16:20.552
You do that.

496
00:16:20.552 --> 00:16:21.802
Awesome.

497
00:16:21.802 --> 00:16:23.926
498
00:16:23.926 --> 00:16:24.700
NOEL ALLEN: OK.

499
00:16:24.700 --> 00:16:27.830
So if I come up here
and just say--

500
00:16:27.830 --> 00:16:30.500
501
00:16:30.500 --> 00:16:32.050
COLT MCANLIS: Now, really quick
while you're scrolling

502
00:16:32.050 --> 00:16:33.920
up here, what are these
functions we're looking at?

503
00:16:33.920 --> 00:16:34.950
These are Pepper functions,
right?

504
00:16:34.950 --> 00:16:35.920
NOEL ALLEN: So these are
Pepper functions.

505
00:16:35.920 --> 00:16:39.450
So as I said, there's three
functions that we look at.

506
00:16:39.450 --> 00:16:42.560
We have a module initialization,
we have an API

507
00:16:42.560 --> 00:16:44.350
request, and we have a
shut down function.

508
00:16:44.350 --> 00:16:46.930
509
00:16:46.930 --> 00:16:49.740
One of the APIs that gets
requested is an

510
00:16:49.740 --> 00:16:50.740
API for your interface.

511
00:16:50.740 --> 00:16:53.600
So you're going to provide
functions that Chrome can call

512
00:16:53.600 --> 00:16:55.220
into to do things.

513
00:16:55.220 --> 00:16:58.890
And one of those is this Did
Create, which is very similar

514
00:16:58.890 --> 00:17:00.700
to the regular Main function.

515
00:17:00.700 --> 00:17:05.369
So from there I'm actually
going to call into the

516
00:17:05.369 --> 00:17:06.619
original WinMain.

517
00:17:06.619 --> 00:17:10.579
518
00:17:10.579 --> 00:17:13.110
And now we've got our
box, but no alert.

519
00:17:13.110 --> 00:17:13.990
COLT MCANLIS: Interesting.

520
00:17:13.990 --> 00:17:16.380
OK, so what we're seeing here
though is really cool, because

521
00:17:16.380 --> 00:17:19.660
we're actually seeing Win32 code
running side by side as

522
00:17:19.660 --> 00:17:22.150
launched from a plug-in
inside of Chrome.

523
00:17:22.150 --> 00:17:24.310
So now we can call this code,
because we're actually running

524
00:17:24.310 --> 00:17:25.170
on a Windows system.

525
00:17:25.170 --> 00:17:25.890
NOEL ALLEN: Exactly.

526
00:17:25.890 --> 00:17:27.210
COLT MCANLIS: OK.

527
00:17:27.210 --> 00:17:29.000
So the goal here is to actually
get that spinning

528
00:17:29.000 --> 00:17:29.960
cube running in the web page.

529
00:17:29.960 --> 00:17:31.310
So we've got all that
stuff set up.

530
00:17:31.310 --> 00:17:35.810
The next step for us is to
actually port over to Pepper.

531
00:17:35.810 --> 00:17:38.490
Now, when understanding the
Pepper API, it's important to

532
00:17:38.490 --> 00:17:42.030
understand how an application
communicates with a plug-in to

533
00:17:42.030 --> 00:17:43.340
kind of give a little
bit more visibility

534
00:17:43.340 --> 00:17:44.350
into what it's doing.

535
00:17:44.350 --> 00:17:46.290
So let's say we've got our
Chrome, and let's say we've

536
00:17:46.290 --> 00:17:47.180
got our plug-in.

537
00:17:47.180 --> 00:17:49.430
Chrome, of course, will call
init, like it did.

538
00:17:49.430 --> 00:17:51.350
And then the plug-in will
go do some processing.

539
00:17:51.350 --> 00:17:53.880
Now, in order for the plug-in
to get a sort of persistent

540
00:17:53.880 --> 00:17:54.560
heartbeat--

541
00:17:54.560 --> 00:17:55.780
right, because this
is a plug-in.

542
00:17:55.780 --> 00:17:58.250
We can't just allow yourself
to go call code into it,

543
00:17:58.250 --> 00:18:00.290
otherwise you'll never
receive execution

544
00:18:00.290 --> 00:18:01.980
control back into Chrome.

545
00:18:01.980 --> 00:18:04.840
So once the plug-in's done, it
can actually tell Chrome, hey,

546
00:18:04.840 --> 00:18:08.170
can you call me again in
10 minutes, or whenever

547
00:18:08.170 --> 00:18:09.320
you get some time.

548
00:18:09.320 --> 00:18:11.460
And so what'll happen is
the plug-in, and Pepper

549
00:18:11.460 --> 00:18:14.800
specifically, provides APIs
that allow you to push a

550
00:18:14.800 --> 00:18:16.560
callback up into Chrome.

551
00:18:16.560 --> 00:18:19.280
And then Chrome can run off, do
some processing, render a

552
00:18:19.280 --> 00:18:24.910
web page, check your local
listings for cars and salty

553
00:18:24.910 --> 00:18:26.090
pork products.

554
00:18:26.090 --> 00:18:28.310
And then when it gets around
to it, it can actually call

555
00:18:28.310 --> 00:18:30.570
that callback, giving execution

556
00:18:30.570 --> 00:18:31.790
control back your plug-in.

557
00:18:31.790 --> 00:18:33.390
And then of course, your plug-in
does some processing

558
00:18:33.390 --> 00:18:34.440
and the cycle repeats.

559
00:18:34.440 --> 00:18:37.280
And this is as close as you
can get actually having a

560
00:18:37.280 --> 00:18:39.910
while loop inside of Pepper
or inside of a plug-in.

561
00:18:39.910 --> 00:18:44.020
We allow you to get this
processing over time.

562
00:18:44.020 --> 00:18:46.040
Now, let's talk about a couple
road blocks you're going to

563
00:18:46.040 --> 00:18:47.260
run into when working
with Pepper.

564
00:18:47.260 --> 00:18:50.430
First off, all of the APIs for
Pepper are non-blocking.

565
00:18:50.430 --> 00:18:52.460
And you can see why
when looking at it

566
00:18:52.460 --> 00:18:53.970
as a plug-in API.

567
00:18:53.970 --> 00:18:57.660
If one of these APIs were
blocking, what would occur is

568
00:18:57.660 --> 00:19:00.850
that you can effectively stall
out all of Chrome, because

569
00:19:00.850 --> 00:19:03.990
execution control goes into
the plug-in and then they,

570
00:19:03.990 --> 00:19:06.680
Chrome, won't get any more time
slices to give to v8 or

571
00:19:06.680 --> 00:19:07.280
anything else.

572
00:19:07.280 --> 00:19:08.810
And so you get that nice,
little aw snap

573
00:19:08.810 --> 00:19:10.430
little sad face dude.

574
00:19:10.430 --> 00:19:11.540
My heart always breaks
when I see him.

575
00:19:11.540 --> 00:19:13.210
I'm like, aw, he's so sad.

576
00:19:13.210 --> 00:19:15.650
Don't worry, the internet
is still there.

577
00:19:15.650 --> 00:19:18.670
Anyhow, second off is that
Pepper APIs can only be called

578
00:19:18.670 --> 00:19:19.360
from the main thread.

579
00:19:19.360 --> 00:19:22.110
This is another restriction
that we enforce to ensure

580
00:19:22.110 --> 00:19:24.880
stability and security
over time.

581
00:19:24.880 --> 00:19:27.470
And then finally, that there's
really no main loop in Pepper.

582
00:19:27.470 --> 00:19:30.240
As you can see, based upon the
APIs, that you can't actually

583
00:19:30.240 --> 00:19:32.590
just create a while loop
and sit there and spin.

584
00:19:32.590 --> 00:19:34.820
Now, I want to point out that
this is sort of temporary

585
00:19:34.820 --> 00:19:37.550
restrictions as of Pepper 21.

586
00:19:37.550 --> 00:19:40.520
The team is working very, very
hard at removing these

587
00:19:40.520 --> 00:19:42.630
restrictions, including the
ability to call Pepper from

588
00:19:42.630 --> 00:19:44.340
any thread in your environment,
which would be a

589
00:19:44.340 --> 00:19:48.130
huge step forward for those of
you who've done development.

590
00:19:48.130 --> 00:19:49.980
So let's talk about the call
loop a little bit more, and

591
00:19:49.980 --> 00:19:52.060
why exactly we didn't
see the plug-in, but

592
00:19:52.060 --> 00:19:53.180
we did see the cube.

593
00:19:53.180 --> 00:19:55.960
So what exactly happened was
this, Chrome called init and

594
00:19:55.960 --> 00:19:57.950
gave execution control
to the plug-in.

595
00:19:57.950 --> 00:19:59.990
Well, the plug-in at that point
actually called into

596
00:19:59.990 --> 00:20:01.940
Windows and said, hey,
let's go run this.

597
00:20:01.940 --> 00:20:05.620
Now, Windows being Windows code
effectively sucked up all

598
00:20:05.620 --> 00:20:06.690
of the processing time.

599
00:20:06.690 --> 00:20:09.790
And we actually didn't ever give
execution control back

600
00:20:09.790 --> 00:20:10.950
into Chrome.

601
00:20:10.950 --> 00:20:13.090
So WinMain has a little while
loop in there where it

602
00:20:13.090 --> 00:20:15.310
processes events and message
pumps and everything else that

603
00:20:15.310 --> 00:20:16.410
it passes to the window.

604
00:20:16.410 --> 00:20:18.500
And we were never actually
able to give

605
00:20:18.500 --> 00:20:19.470
control back into Chrome.

606
00:20:19.470 --> 00:20:20.900
So we starved it out.

607
00:20:20.900 --> 00:20:24.200
But you guys didn't see the aw
snap sad face, because we

608
00:20:24.200 --> 00:20:26.360
didn't hit the time out
period for the demo.

609
00:20:26.360 --> 00:20:28.360
Our floppy hats kept
us from doing that.

610
00:20:28.360 --> 00:20:31.500
So in order to fix this though,
Chef Noel, Chef

611
00:20:31.500 --> 00:20:35.535
Noelington III, can you show us
how you address this issue?

612
00:20:35.535 --> 00:20:36.150
NOEL ALLEN: OK.

613
00:20:36.150 --> 00:20:38.670
So here are a couple of changes
that I'm making.

614
00:20:38.670 --> 00:20:42.140
So we want to break that main
loop into two separate pieces,

615
00:20:42.140 --> 00:20:45.440
the initialization piece
and the actual loop.

616
00:20:45.440 --> 00:20:49.620
So I am going to ifdef out the
loop and instead put it in a

617
00:20:49.620 --> 00:20:51.410
new function.

618
00:20:51.410 --> 00:20:54.580
And I'm going to have that
function request to get more

619
00:20:54.580 --> 00:20:58.740
execution time by asking Pepper,
please call on the

620
00:20:58.740 --> 00:21:01.350
main thread this function
again at a later time.

621
00:21:01.350 --> 00:21:03.580
COLT MCANLIS: And so this is the
function that effectively

622
00:21:03.580 --> 00:21:05.330
pushes the function pointer
back into Chrome.

623
00:21:05.330 --> 00:21:06.176
NOEL ALLEN: Correct.

624
00:21:06.176 --> 00:21:07.610
COLT MCANLIS: Excellent.

625
00:21:07.610 --> 00:21:09.810
So then, what's this
look like?

626
00:21:09.810 --> 00:21:11.267
NOEL ALLEN: Well, let's
fire that up.

627
00:21:11.267 --> 00:21:14.249
628
00:21:14.249 --> 00:21:16.750
COLT MCANLIS: So we get the pop
up and we get the cube.

629
00:21:16.750 --> 00:21:18.760
So the execution happened
side by side.

630
00:21:18.760 --> 00:21:19.670
Fantastic.

631
00:21:19.670 --> 00:21:22.090
So now that that's handled and
we know that we're actually

632
00:21:22.090 --> 00:21:24.540
not stalling out Chrome and we
have execution control being

633
00:21:24.540 --> 00:21:26.650
handed back to the main
application, let's actually

634
00:21:26.650 --> 00:21:28.180
talk about loading files.

635
00:21:28.180 --> 00:21:31.140
Now, Native Client is an
internet technology, which

636
00:21:31.140 --> 00:21:33.490
means that it's served from a
web server somewhere and the

637
00:21:33.490 --> 00:21:35.820
client is going to make a
request to pull things down.

638
00:21:35.820 --> 00:21:38.275
Now, any time you have
communication between client

639
00:21:38.275 --> 00:21:40.180
and server with a web browser--
we'll talk about

640
00:21:40.180 --> 00:21:43.010
Chrome just to limit our scope
of discussion here--

641
00:21:43.010 --> 00:21:45.420
when a page load request
occurs, Chrome, on your

642
00:21:45.420 --> 00:21:48.740
behalf, will go ahead and fetch
specific files and store

643
00:21:48.740 --> 00:21:49.780
them in Chrome's cache.

644
00:21:49.780 --> 00:21:53.140
Which means it'll grab HTML
files, it'll grab NEXE files

645
00:21:53.140 --> 00:21:55.560
and the Native Client Manifest
file, the NMF file.

646
00:21:55.560 --> 00:21:56.980
Now, this'll be stored
in the cache on your

647
00:21:56.980 --> 00:21:58.850
behalf, which is fantastic.

648
00:21:58.850 --> 00:22:01.500
Because if you have executable
code sitting on a server

649
00:22:01.500 --> 00:22:03.060
somewhere, it's probably
between the

650
00:22:03.060 --> 00:22:05.200
range of 5 to 13 megabytes.

651
00:22:05.200 --> 00:22:07.000
And you don't want the user to
have to keep grabbing that

652
00:22:07.000 --> 00:22:09.270
code and pulling it down every
time they hit refresh.

653
00:22:09.270 --> 00:22:12.610
Now, the bad part about this,
though, is that Chrome won't

654
00:22:12.610 --> 00:22:14.730
go fetch all of those other
files which are usually

655
00:22:14.730 --> 00:22:16.120
required by your application.

656
00:22:16.120 --> 00:22:18.340
You've usually got a bunch
of binary data.

657
00:22:18.340 --> 00:22:21.780
If you're a game developer,
you've got textures, assets,

658
00:22:21.780 --> 00:22:24.870
map data, XML information, all
this other sort of stuff.

659
00:22:24.870 --> 00:22:26.340
Now, to grab that data--

660
00:22:26.340 --> 00:22:28.290
that's specifically what we're
going to focus on today--

661
00:22:28.290 --> 00:22:31.460
Pepper provides an API
called GetURL.

662
00:22:31.460 --> 00:22:36.140
GetURL, again being an internet
technology, says,

663
00:22:36.140 --> 00:22:38.800
hey, here's a URL, go fetch
me the bits of this.

664
00:22:38.800 --> 00:22:40.480
So in JavaScript, this would
be equivalent to

665
00:22:40.480 --> 00:22:42.950
an XHR, XHTTP request.

666
00:22:42.950 --> 00:22:44.740
So everyone in here is
a net developer.

667
00:22:44.740 --> 00:22:46.370
You should grock that.

668
00:22:46.370 --> 00:22:47.240
I see one head nodding.

669
00:22:47.240 --> 00:22:49.250
I like your style.

670
00:22:49.250 --> 00:22:51.250
Can I nod with this and
that actually work?

671
00:22:51.250 --> 00:22:51.980
Maybe.

672
00:22:51.980 --> 00:22:53.110
Everyone on YouTube
just jumped.

673
00:22:53.110 --> 00:22:54.850
Cool.

674
00:22:54.850 --> 00:22:56.920
In addition to that, because
you can actually pull down

675
00:22:56.920 --> 00:22:59.890
this data, again, that's not
cached on your behalf.

676
00:22:59.890 --> 00:23:01.320
So you actually have to have
an answer for that.

677
00:23:01.320 --> 00:23:03.150
Because, again, if the user
reloads your page, you're

678
00:23:03.150 --> 00:23:05.290
going to have to go grab another
40 megs worth of data

679
00:23:05.290 --> 00:23:06.580
every time they do that.

680
00:23:06.580 --> 00:23:08.810
To address this, Pepper actually
provides another API

681
00:23:08.810 --> 00:23:10.210
called the FileStore API.

682
00:23:10.210 --> 00:23:12.300
So you can actually grab your
data and write it to the

683
00:23:12.300 --> 00:23:14.770
Persistent Sandbox file
storage on disk.

684
00:23:14.770 --> 00:23:18.370
This way, when the user closes
Chrome, reloads the page, goes

685
00:23:18.370 --> 00:23:22.150
on vacation for 15 days, that
data will still stay on disk

686
00:23:22.150 --> 00:23:23.900
that you can pick up
and grab later.

687
00:23:23.900 --> 00:23:26.670
So this is a great place
to put save state, user

688
00:23:26.670 --> 00:23:29.230
preferences that you may not
want to sync to the cloud, or

689
00:23:29.230 --> 00:23:33.040
just, again, the 80 megs of
binary data that's needed for

690
00:23:33.040 --> 00:23:34.860
your application.

691
00:23:34.860 --> 00:23:38.100
Now, one thing we talked about
earlier was that the Pepper

692
00:23:38.100 --> 00:23:40.100
APIs are non-blocking.

693
00:23:40.100 --> 00:23:43.980
So for all of you who have used
fread, we can't use that

694
00:23:43.980 --> 00:23:45.950
in Native Client, because that
would actually stall the

695
00:23:45.950 --> 00:23:48.310
system, wouldn't relinquish
control back to Chrome.

696
00:23:48.310 --> 00:23:49.880
So we actually don't allow
you to use that command.

697
00:23:49.880 --> 00:23:51.650
You have to use GetURL.

698
00:23:51.650 --> 00:23:53.840
And any of you who have done
asynchronous file loading know

699
00:23:53.840 --> 00:23:54.990
what this looks like.

700
00:23:54.990 --> 00:23:56.560
Effectively, we have
an init phase.

701
00:23:56.560 --> 00:24:01.260
The init phase will kick off an
open URL command to Chrome

702
00:24:01.260 --> 00:24:03.530
and say, hey, go
load some data.

703
00:24:03.530 --> 00:24:06.490
Then our plug-in will actually
go into a loader loop phase.

704
00:24:06.490 --> 00:24:07.230
What we're going to do is we're

705
00:24:07.230 --> 00:24:08.390
effectively going to spin--

706
00:24:08.390 --> 00:24:10.095
well, we can't exactly spin, but
we're going to go through

707
00:24:10.095 --> 00:24:13.820
a process of allowing Chrome to
do call on main thread and

708
00:24:13.820 --> 00:24:16.080
allowing the plug-in to
relinquish control, gain

709
00:24:16.080 --> 00:24:18.830
control, et cetera, et cetera,
until Chrome actually tells us

710
00:24:18.830 --> 00:24:20.540
the file has actually
been opened.

711
00:24:20.540 --> 00:24:23.270
Chrome will signal to us and
give us a specific call.

712
00:24:23.270 --> 00:24:25.490
Once we've received the file
open command, we then can

713
00:24:25.490 --> 00:24:27.690
issue a read bytes and say, hey,
you've opened the file.

714
00:24:27.690 --> 00:24:29.340
Please give me some data.

715
00:24:29.340 --> 00:24:31.320
And then we can continue this
loop until the data's actually

716
00:24:31.320 --> 00:24:31.980
been fetched.

717
00:24:31.980 --> 00:24:33.740
And this is the standard loader
loop that we're going

718
00:24:33.740 --> 00:24:34.700
to work through here.

719
00:24:34.700 --> 00:24:37.650
Once the data's been fetched or
pre-loaded everything, you

720
00:24:37.650 --> 00:24:39.540
can then move on to your actual
render loop and start

721
00:24:39.540 --> 00:24:41.650
drawing the cube
on the screen.

722
00:24:41.650 --> 00:24:44.870
So you haven't seen that
one yet, have you?

723
00:24:44.870 --> 00:24:46.050
NOEL ALLEN: You know I'm
allergic to fish.

724
00:24:46.050 --> 00:24:47.040
COLT MCANLIS: Really?

725
00:24:47.040 --> 00:24:47.960
That makes it even awesomer.

726
00:24:47.960 --> 00:24:49.050
NOEL ALLEN: I'm going to itch.

727
00:24:49.050 --> 00:24:53.620
COLT MCANLIS: So by the way,
don't Google man hugging fish.

728
00:24:53.620 --> 00:24:56.400
Different sort of results
that you get there.

729
00:24:56.400 --> 00:25:02.680
Anyhow, your royal majesty
Noelington Chefton III, can

730
00:25:02.680 --> 00:25:06.050
you please walk us through what
this FileIO asynchronous

731
00:25:06.050 --> 00:25:07.120
stuff looks like in our demo.

732
00:25:07.120 --> 00:25:09.790
NOEL ALLEN: Sure.

733
00:25:09.790 --> 00:25:16.700
So what we're going to do is
we are going to request for

734
00:25:16.700 --> 00:25:18.960
these assets to get loaded
in the background.

735
00:25:18.960 --> 00:25:25.020
And we're going to do that by
first issuing an Open, as you

736
00:25:25.020 --> 00:25:30.160
described, which is basically
a Get request to the asset.

737
00:25:30.160 --> 00:25:33.690
Once that open completes, it's
going to call us back.

738
00:25:33.690 --> 00:25:35.870
And then in that callback
function, we're going to

739
00:25:35.870 --> 00:25:38.580
record the size of the object
that we're getting, we're

740
00:25:38.580 --> 00:25:41.050
going to allocate memory for
it, and then we're going to

741
00:25:41.050 --> 00:25:42.910
start reading bites.

742
00:25:42.910 --> 00:25:44.490
And again, this happens
as a callback.

743
00:25:44.490 --> 00:25:47.920
So every time we get some bites
back, we're then going

744
00:25:47.920 --> 00:25:52.770
to call this other function,
which is going to store it in

745
00:25:52.770 --> 00:25:55.660
that block of memory
that I allocated.

746
00:25:55.660 --> 00:25:58.340
And eventually, when I get
enough of it, I'm going to go

747
00:25:58.340 --> 00:26:00.300
ahead and give myself a
call back to let me

748
00:26:00.300 --> 00:26:02.410
know that it's there.

749
00:26:02.410 --> 00:26:05.200
And when it's there, I'm simply
going to increment a

750
00:26:05.200 --> 00:26:07.650
global counter that says, hey,
I got another asset.

751
00:26:07.650 --> 00:26:10.400
COLT MCANLIS: Now, to be very
clear, we know that all of you

752
00:26:10.400 --> 00:26:12.630
have very sophisticated code
bases, and asynchronous file

753
00:26:12.630 --> 00:26:15.340
loading is probably part of your
general platform library.

754
00:26:15.340 --> 00:26:18.310
We are not at all advocating
this as best practices for

755
00:26:18.310 --> 00:26:19.390
loading files on the internet.

756
00:26:19.390 --> 00:26:22.150
Please write a good asset
manager with mutexes and

757
00:26:22.150 --> 00:26:23.540
callbacks and everything else.

758
00:26:23.540 --> 00:26:24.410
Don't just use a counter.

759
00:26:24.410 --> 00:26:26.290
That's really just a bad idea.

760
00:26:26.290 --> 00:26:26.420
Sorry.

761
00:26:26.420 --> 00:26:29.160
I had to give the disclaimer,
otherwise it'll show up like,

762
00:26:29.160 --> 00:26:31.380
Google says you should just use
a counter to load all of

763
00:26:31.380 --> 00:26:32.445
your files with Native Client.

764
00:26:32.445 --> 00:26:32.940
NOEL ALLEN: Yes.

765
00:26:32.940 --> 00:26:37.650
Well the ugly counter hack
is, in fact, right here.

766
00:26:37.650 --> 00:26:39.480
We're going to call the
initialization programs.

767
00:26:39.480 --> 00:26:41.600
I've changed this main loop.

768
00:26:41.600 --> 00:26:44.010
So we do the initialization.

769
00:26:44.010 --> 00:26:46.870
And then once we actually
discover three assets, then

770
00:26:46.870 --> 00:26:48.720
we're going to switch
to rendering.

771
00:26:48.720 --> 00:26:52.120
But in either case, we're just
going to go back and ask for

772
00:26:52.120 --> 00:26:53.640
more processing time
every time we go

773
00:26:53.640 --> 00:26:54.830
through the loop as normal.

774
00:26:54.830 --> 00:26:56.470
COLT MCANLIS: So effectively,
if we haven't loaded it yet,

775
00:26:56.470 --> 00:26:58.540
we still submit our call on
main thread so we can get

776
00:26:58.540 --> 00:27:00.770
processing in the future to
determine if it's all loaded?

777
00:27:00.770 --> 00:27:01.100
NOEL ALLEN: Correct.

778
00:27:01.100 --> 00:27:03.030
COLT MCANLIS: And then once the
things are loaded, we go

779
00:27:03.030 --> 00:27:04.670
to our render loop
at that point.

780
00:27:04.670 --> 00:27:04.930
NOEL ALLEN: Exactly.

781
00:27:04.930 --> 00:27:06.830
COLT MCANLIS: And so
this has changed.

782
00:27:06.830 --> 00:27:08.080
Let's see this live.

783
00:27:08.080 --> 00:27:11.936
784
00:27:11.936 --> 00:27:12.740
NOEL ALLEN: OK.

785
00:27:12.740 --> 00:27:14.040
So it looks much the same.

786
00:27:14.040 --> 00:27:18.360
But if we go over here and look
at the web server, you

787
00:27:18.360 --> 00:27:23.045
can see that originally
we were getting--

788
00:27:23.045 --> 00:27:24.290
hold on.

789
00:27:24.290 --> 00:27:25.540
Ran the wrong file.

790
00:27:25.540 --> 00:27:28.206
791
00:27:28.206 --> 00:27:29.190
COLT MCANLIS: Stop it.

792
00:27:29.190 --> 00:27:29.740
Stop it all.

793
00:27:29.740 --> 00:27:30.015
Hit buttons.

794
00:27:30.015 --> 00:27:31.050
NOEL ALLEN: Please stop.

795
00:27:31.050 --> 00:27:33.510
COLT MCANLIS: Click more.

796
00:27:33.510 --> 00:27:34.140
Panic click.

797
00:27:34.140 --> 00:27:35.100
Panic click.

798
00:27:35.100 --> 00:27:36.290
Take evasive action.

799
00:27:36.290 --> 00:27:37.113
Scatter.

800
00:27:37.113 --> 00:27:38.560
NOEL ALLEN: You're not
being helpful.

801
00:27:38.560 --> 00:27:39.290
COLT MCANLIS: I know.

802
00:27:39.290 --> 00:27:40.060
NOEL ALLEN: I want you to know,

803
00:27:40.060 --> 00:27:41.980
you're not being helpful.

804
00:27:41.980 --> 00:27:46.640
So as we can see here, we now
actually see the requests for

805
00:27:46.640 --> 00:27:49.010
those assets coming into
the web server.

806
00:27:49.010 --> 00:27:51.640
So we have successfully moved
over to serving the

807
00:27:51.640 --> 00:27:52.410
data from the web.

808
00:27:52.410 --> 00:27:53.110
COLT MCANLIS: Awesome.

809
00:27:53.110 --> 00:27:55.560
So as a Pepper plug-in, we were
actually able to just use

810
00:27:55.560 --> 00:27:57.210
fread and actually
load the data.

811
00:27:57.210 --> 00:27:59.030
But as part of the Pepper API,
you can see that we're

812
00:27:59.030 --> 00:28:02.270
fetching it right
from the server.

813
00:28:02.270 --> 00:28:04.180
You need to nod with
authority.

814
00:28:04.180 --> 00:28:05.615
NOEL ALLEN: Is my hat
not correctly--

815
00:28:05.615 --> 00:28:07.230
COLT MCANLIS: Well, you have
hair, and so it keeps it from

816
00:28:07.230 --> 00:28:07.785
sliding around.

817
00:28:07.785 --> 00:28:11.480
That my problem, is
the balding thing.

818
00:28:11.480 --> 00:28:13.290
So once we've got a rendering
with our simple example, the

819
00:28:13.290 --> 00:28:16.080
next step is actually to get us
porting from OpenGL, which

820
00:28:16.080 --> 00:28:19.560
is desktop GL, to GLES2, which
is the API that we provide in

821
00:28:19.560 --> 00:28:22.810
Native Client that allows you to
do fancy rendering of cube

822
00:28:22.810 --> 00:28:24.450
with arrow texture.

823
00:28:24.450 --> 00:28:26.020
I really think we should have
done the other demo.

824
00:28:26.020 --> 00:28:27.420
You should have fixed stuff
instead of playing with your

825
00:28:27.420 --> 00:28:28.440
new hardware.

826
00:28:28.440 --> 00:28:30.320
So what we're going to do today
is we're not going to

827
00:28:30.320 --> 00:28:33.470
talk about the actual porting
process of GL to GLES.

828
00:28:33.470 --> 00:28:36.350
There's a lot of documentation
out there on how to actually

829
00:28:36.350 --> 00:28:37.350
do this process.

830
00:28:37.350 --> 00:28:41.090
GLES2.0 is very dominant on
mobile devices right now.

831
00:28:41.090 --> 00:28:42.530
And if you just Google
for-- don't Google

832
00:28:42.530 --> 00:28:43.500
for man hugs fish.

833
00:28:43.500 --> 00:28:46.890
Instead, Google for desktop GL2,
GLES2, you'll find much

834
00:28:46.890 --> 00:28:48.980
more useful information
in that process.

835
00:28:48.980 --> 00:28:50.990
We are going to note a couple
things that are different

836
00:28:50.990 --> 00:28:51.610
between the two.

837
00:28:51.610 --> 00:28:53.150
Just so if you've never
actually dealt with

838
00:28:53.150 --> 00:28:55.770
OpenGLES2.0, you're aware of
some of the things you're

839
00:28:55.770 --> 00:28:57.510
going to run into
moving forward.

840
00:28:57.510 --> 00:28:59.230
First off, they are not
the same thing.

841
00:28:59.230 --> 00:29:02.160
The predominant one is that
GLES2 could be considered a

842
00:29:02.160 --> 00:29:03.480
subset of GL.

843
00:29:03.480 --> 00:29:08.040
The most shocking change there
is that GLES2.0 has no fixed

844
00:29:08.040 --> 00:29:08.960
function of support.

845
00:29:08.960 --> 00:29:12.310
So in order to draw a polygon or
set some state or even get

846
00:29:12.310 --> 00:29:15.080
a texture on screen, you have to
provide a vertex shader and

847
00:29:15.080 --> 00:29:16.070
a pixel shader.

848
00:29:16.070 --> 00:29:17.470
If you've never written a
vertex shader or a pixel

849
00:29:17.470 --> 00:29:18.460
shader, don't worry.

850
00:29:18.460 --> 00:29:19.680
The internet can help you.

851
00:29:19.680 --> 00:29:21.610
Which I find I need on
my business card.

852
00:29:21.610 --> 00:29:21.980
Don't worry.

853
00:29:21.980 --> 00:29:24.250
The internet can help you.

854
00:29:24.250 --> 00:29:26.300
In addition to that, there's
a different shader syntax.

855
00:29:26.300 --> 00:29:28.080
When you actually do write your
shader for the system,

856
00:29:28.080 --> 00:29:31.310
because standard GL does support
shaders, the syntax

857
00:29:31.310 --> 00:29:32.370
itself is different.

858
00:29:32.370 --> 00:29:36.730
So you have to set different
precision values for your

859
00:29:36.730 --> 00:29:39.550
pixel shaders, as well as some
other nuances with how you

860
00:29:39.550 --> 00:29:43.060
handle skinning and constant
register access.

861
00:29:43.060 --> 00:29:45.540
And probably one of the
interesting things is because

862
00:29:45.540 --> 00:29:49.280
GLES2.0 is actually a subset of
GL, some things that you'd

863
00:29:49.280 --> 00:29:52.360
normally have to go to GL and
fetch extensions for you no

864
00:29:52.360 --> 00:29:53.340
longer have to.

865
00:29:53.340 --> 00:29:56.430
So with standard desktop GL, you
would have to go grab an

866
00:29:56.430 --> 00:29:59.610
extension to actually do
multiple render targets or to

867
00:29:59.610 --> 00:30:02.220
do deferred rendering or some
other interesting things.

868
00:30:02.220 --> 00:30:04.710
With GLES2, a lot of that
stuff is just provided

869
00:30:04.710 --> 00:30:07.160
natively, which is fantastic.

870
00:30:07.160 --> 00:30:10.070
There is one API we're going to
talk about today, though.

871
00:30:10.070 --> 00:30:13.060
And this is really the only
thing that's Pepper specific

872
00:30:13.060 --> 00:30:16.100
in the translation
from GL to GLES.

873
00:30:16.100 --> 00:30:18.670
And that is a function
called SwapBuffers.

874
00:30:18.670 --> 00:30:20.900
So what happens is, when you're
doing your render loop

875
00:30:20.900 --> 00:30:23.410
you're going to render some
polygons, you're going to set

876
00:30:23.410 --> 00:30:26.460
some textures, blow up some
aliens, do really cool stuff.

877
00:30:26.460 --> 00:30:27.550
From there, you're actually
going to call

878
00:30:27.550 --> 00:30:28.980
the SwapBuffers API.

879
00:30:28.980 --> 00:30:31.730
Now typically, what SwapBuffers
will do with the

880
00:30:31.730 --> 00:30:35.370
GL API is it'll actually trigger
off a command to the

881
00:30:35.370 --> 00:30:39.820
device driver and to the GPU to
swap the front screen with

882
00:30:39.820 --> 00:30:40.500
the back screen.

883
00:30:40.500 --> 00:30:42.920
So when you actually do your
rendering, all of the commands

884
00:30:42.920 --> 00:30:45.640
are actually compositing to a
buffer that's not currently

885
00:30:45.640 --> 00:30:46.950
displayed to the user.

886
00:30:46.950 --> 00:30:49.410
And the swap screen command
tells it to say, hey, swap it

887
00:30:49.410 --> 00:30:51.650
so the user can see the work
that you've all done.

888
00:30:51.650 --> 00:30:55.300
The SwapBuffers command provided
with Pepper, part of

889
00:30:55.300 --> 00:31:00.150
our header suite, actually
contains a function that

890
00:31:00.150 --> 00:31:02.220
allows you to actually kick
off your callback.

891
00:31:02.220 --> 00:31:04.020
So typically, like we said
before, you're going to need

892
00:31:04.020 --> 00:31:07.160
to use a call on main thread so
that sometime in the future

893
00:31:07.160 --> 00:31:09.650
you'll get called again.

894
00:31:09.650 --> 00:31:12.050
The SwapBuffers API sort of
encapsulates these two

895
00:31:12.050 --> 00:31:13.720
concepts into a single call.

896
00:31:13.720 --> 00:31:16.100
So you can actually kick off
your SwapBuffer call as well

897
00:31:16.100 --> 00:31:18.950
as push your function pointer
back into Chrome.

898
00:31:18.950 --> 00:31:20.840
Now, if you're doing rendering,
you should consider

899
00:31:20.840 --> 00:31:22.450
this the end of your
Pepper frame.

900
00:31:22.450 --> 00:31:24.520
Because if you've called
SwapBuffers it's time to

901
00:31:24.520 --> 00:31:26.420
relinquish control
off to Chrome.

902
00:31:26.420 --> 00:31:28.650
Chrome's going to do some cool
stuff, fix the internet, make

903
00:31:28.650 --> 00:31:31.020
everything amazing, and
do it really fast.

904
00:31:31.020 --> 00:31:33.710
And then eventually it'll come
back and call your function,

905
00:31:33.710 --> 00:31:34.840
because you've passed it off.

906
00:31:34.840 --> 00:31:36.260
And that's your start
of your frame again.

907
00:31:36.260 --> 00:31:38.270
So this is really the
only difference.

908
00:31:38.270 --> 00:31:41.100
Everything else is a standard
GL to GLES port.

909
00:31:41.100 --> 00:31:43.680
This is the one thing you
need to be aware of.

910
00:31:43.680 --> 00:31:47.900
So we're not talking
about GL to GLES.

911
00:31:47.900 --> 00:31:50.270
So this is the chopped onions
part of the talk.

912
00:31:50.270 --> 00:31:51.890
We're not going to walk you
through that change.

913
00:31:51.890 --> 00:31:53.080
We've already got it live.

914
00:31:53.080 --> 00:31:53.965
Can you show us what
that looks like?

915
00:31:53.965 --> 00:31:56.240
NOEL ALLEN: Sure thing.

916
00:31:56.240 --> 00:31:59.600
So here is the change that we
discussed, the SwapBuffer.

917
00:31:59.600 --> 00:32:02.350
And I am going to go
ahead and run this.

918
00:32:02.350 --> 00:32:09.070
919
00:32:09.070 --> 00:32:10.110
COLT MCANLIS: Very cool.

920
00:32:10.110 --> 00:32:11.790
So we're actually running
in the web page.

921
00:32:11.790 --> 00:32:14.360
NOEL ALLEN: We now have our
cube in the web page.

922
00:32:14.360 --> 00:32:15.720
COLT MCANLIS: Very cool.

923
00:32:15.720 --> 00:32:16.170
I like that.

924
00:32:16.170 --> 00:32:17.590
So now, quick question here.

925
00:32:17.590 --> 00:32:21.010
If we actually are creating a
Pepper plug-in, and we can

926
00:32:21.010 --> 00:32:23.840
actually get it to run in the
web page like this and do full

927
00:32:23.840 --> 00:32:26.900
graphics and high precision
timing and everything, why are

928
00:32:26.900 --> 00:32:28.320
we even messing with NaCl?

929
00:32:28.320 --> 00:32:30.150
Why don't we just ship
a Pepper plug-in

930
00:32:30.150 --> 00:32:31.130
and that's our product?

931
00:32:31.130 --> 00:32:33.880
NOEL ALLEN: Well first, Chrome
isn't going to let you just

932
00:32:33.880 --> 00:32:36.570
load some random plug-in.

933
00:32:36.570 --> 00:32:41.070
Native code is kind of an ugly,
unsafe thing, so we want

934
00:32:41.070 --> 00:32:43.350
to make sure that we take
care of it correctly.

935
00:32:43.350 --> 00:32:47.470
So in order to use that C and
C++ code, you're going to want

936
00:32:47.470 --> 00:32:51.320
to ship that as a NEXE so that
you get that extra protection.

937
00:32:51.320 --> 00:32:54.000
COLT MCANLIS: So you're saying
that me downloading an

938
00:32:54.000 --> 00:32:57.820
arbitrary plug-in from Bob's
hugging fish website is not

939
00:32:57.820 --> 00:32:58.740
necessarily a safe
thing to do?

940
00:32:58.740 --> 00:32:59.100
NOEL ALLEN: Yes.

941
00:32:59.100 --> 00:33:01.250
Especially not the websites
you go to.

942
00:33:01.250 --> 00:33:05.780
COLT MCANLIS: Let's edit that
part out of YouTube, please.

943
00:33:05.780 --> 00:33:07.730
So the next step then, since
we actually don't want to

944
00:33:07.730 --> 00:33:09.790
provide just a plug-in to the
masses, because, again,

945
00:33:09.790 --> 00:33:11.510
that'll come back to the point,
the user will get that

946
00:33:11.510 --> 00:33:14.440
really nasty pop-up that says,
hey, Bob's Hugging Fish

947
00:33:14.440 --> 00:33:16.080
Basement would really
like to install some

948
00:33:16.080 --> 00:33:17.070
things on your computer.

949
00:33:17.070 --> 00:33:18.170
Which, never click OK to that.

950
00:33:18.170 --> 00:33:19.950
What we're going to do now is
we're actually going to do the

951
00:33:19.950 --> 00:33:23.030
final step of our process of
creating our lamb sorbet and

952
00:33:23.030 --> 00:33:25.970
actually go and compile our
code with Native Client,

953
00:33:25.970 --> 00:33:28.400
generating the proper NEXE files
that can be distributed

954
00:33:28.400 --> 00:33:29.380
on the internet.

955
00:33:29.380 --> 00:33:32.310
So now, recall this graph here
is that Native Client is a

956
00:33:32.310 --> 00:33:35.770
plug-in that's provided with
Chrome that allows external

957
00:33:35.770 --> 00:33:39.460
compiled code to effectively
call the APIs that allow

958
00:33:39.460 --> 00:33:43.730
secure sandbox execution to
lower-level system resources.

959
00:33:43.730 --> 00:33:49.160
Now, the add-in for Visual
Studio provides some specific

960
00:33:49.160 --> 00:33:50.780
nuances that we should
talk about here.

961
00:33:50.780 --> 00:33:53.700
What the Visual Studio plug-in
does at this point in time,

962
00:33:53.700 --> 00:33:56.100
because debugging and profiling
support is still in

963
00:33:56.100 --> 00:33:58.720
alpha, the add-in actually
doesn't allow you to set break

964
00:33:58.720 --> 00:34:00.820
points and do debugging inside
of Native Client.

965
00:34:00.820 --> 00:34:01.500
Yet.

966
00:34:01.500 --> 00:34:02.440
That's coming soon.

967
00:34:02.440 --> 00:34:03.480
Stay tuned.

968
00:34:03.480 --> 00:34:05.100
Follow me on G+.

969
00:34:05.100 --> 00:34:07.510
What it does now though is
it'll actually scrape the

970
00:34:07.510 --> 00:34:10.270
Visual Studio properties on
your behalf and create the

971
00:34:10.270 --> 00:34:13.730
proper command line that's
required to send off to GCC.

972
00:34:13.730 --> 00:34:17.250
GCC, of course, will then
produce the NEXE from our SDK

973
00:34:17.250 --> 00:34:19.719
and then output any information
for command line

974
00:34:19.719 --> 00:34:22.130
errors or processes back
to Visual Studio.

975
00:34:22.130 --> 00:34:24.699
So the good thing is if you are
a Visual Studio developer,

976
00:34:24.699 --> 00:34:27.060
you've got a lot of legacy code
there, this allows you to

977
00:34:27.060 --> 00:34:29.800
operate and compile with Native
Client in a way that

978
00:34:29.800 --> 00:34:33.210
feels very natural to you, save
for the break points and

979
00:34:33.210 --> 00:34:33.690
the debugging.

980
00:34:33.690 --> 00:34:34.780
But again, that's in alpha.

981
00:34:34.780 --> 00:34:35.830
We're working very
hard on that.

982
00:34:35.830 --> 00:34:36.130
Right, Noel?

983
00:34:36.130 --> 00:34:36.889
NOEL ALLEN: Exactly.

984
00:34:36.889 --> 00:34:38.670
COLT MCANLIS: Noel's actually
the guy heading that up.

985
00:34:38.670 --> 00:34:38.900
Right?

986
00:34:38.900 --> 00:34:39.230
NOEL ALLEN: Yes.

987
00:34:39.230 --> 00:34:40.964
COLT MCANLIS: Your hat is
heading that up, actually.

988
00:34:40.964 --> 00:34:42.719
NOEL ALLEN: My hat
is in charge.

989
00:34:42.719 --> 00:34:44.444
COLT MCANLIS: Your hat is
in charge of debugging.

990
00:34:44.444 --> 00:34:45.300
It's still floppy.

991
00:34:45.300 --> 00:34:46.550
I don't know what to do.

992
00:34:46.550 --> 00:34:49.870
993
00:34:49.870 --> 00:34:51.600
Anyhow, this is actually my
favorite picture in the deck,

994
00:34:51.600 --> 00:34:51.969
by the way.

995
00:34:51.969 --> 00:34:54.100
NOEL ALLEN: Thanks.

996
00:34:54.100 --> 00:34:55.590
COLT MCANLIS: It's
the salt head.

997
00:34:55.590 --> 00:34:57.520
We did a rehearsal of this a
couple weeks ago, and someone

998
00:34:57.520 --> 00:34:58.900
said, you should probably
Photoshop some

999
00:34:58.900 --> 00:34:59.880
salt shakers in there.

1000
00:34:59.880 --> 00:35:02.880
And I was like, well,
here's a salt head.

1001
00:35:02.880 --> 00:35:06.100
So part of our add-in allows
the Pepper configuration as

1002
00:35:06.100 --> 00:35:07.290
well as the NaCl
configuration.

1003
00:35:07.290 --> 00:35:10.540
So can you show us the NaCl
config and what it does?

1004
00:35:10.540 --> 00:35:12.750
NOEL ALLEN: Absolutely.

1005
00:35:12.750 --> 00:35:13.040
OK.

1006
00:35:13.040 --> 00:35:16.960
So again from the add-in that
you'll get in Pepper 22, you

1007
00:35:16.960 --> 00:35:21.280
can go ahead and set up for a
Native Client configuration.

1008
00:35:21.280 --> 00:35:24.810
And as Colt said, this is
going to drive that GCC

1009
00:35:24.810 --> 00:35:26.740
toolchain for you.

1010
00:35:26.740 --> 00:35:29.060
And then we have the
standard settings.

1011
00:35:29.060 --> 00:35:32.250
Again, I'm going to use Chrome
as the application that I'm

1012
00:35:32.250 --> 00:35:34.200
actually going to run.

1013
00:35:34.200 --> 00:35:37.740
And I am going to set some
additional flags.

1014
00:35:37.740 --> 00:35:39.690
I'm going to set my include
directories.

1015
00:35:39.690 --> 00:35:42.490
I'm going to set my
library paths.

1016
00:35:42.490 --> 00:35:47.090
All the standard things
that you would set

1017
00:35:47.090 --> 00:35:50.520
for using an SDK.

1018
00:35:50.520 --> 00:35:52.995
And we can take a
look at that.

1019
00:35:52.995 --> 00:35:56.360
COLT MCANLIS: So now, once you
create the configuration is

1020
00:35:56.360 --> 00:35:56.890
there anything else?

1021
00:35:56.890 --> 00:35:58.280
Or can we actually
just run live?

1022
00:35:58.280 --> 00:35:59.675
Will it do a lot of automation
for you?

1023
00:35:59.675 --> 00:36:01.680
NOEL ALLEN: Well, what'll end
up happening is if we try to

1024
00:36:01.680 --> 00:36:05.190
run it right now, we still have
that Windows window and

1025
00:36:05.190 --> 00:36:06.870
some other stuff that
we need to clean up.

1026
00:36:06.870 --> 00:36:09.260
So we'd actually get a lot of
compile errors or link errors

1027
00:36:09.260 --> 00:36:10.170
or whatnot.

1028
00:36:10.170 --> 00:36:13.505
So we still have to get rid of
those platform specific things

1029
00:36:13.505 --> 00:36:14.615
to Windows.

1030
00:36:14.615 --> 00:36:15.710
COLT MCANLIS: OK.

1031
00:36:15.710 --> 00:36:16.440
Let's take a look at that.

1032
00:36:16.440 --> 00:36:17.788
Or at least, can you point
them out or make

1033
00:36:17.788 --> 00:36:17.904
[? the right ?]

1034
00:36:17.904 --> 00:36:18.020
change, or--

1035
00:36:18.020 --> 00:36:18.660
NOEL ALLEN: Sure.

1036
00:36:18.660 --> 00:36:21.240
So let me show you the changes
that we had to do here.

1037
00:36:21.240 --> 00:36:25.080
So we need to obviously no
longer include the Windows

1038
00:36:25.080 --> 00:36:27.350
header, because that's
not going to work,

1039
00:36:27.350 --> 00:36:30.080
or the Windows libraries.

1040
00:36:30.080 --> 00:36:33.500
We need to stop calling main,
because that had a lot of

1041
00:36:33.500 --> 00:36:34.190
Windows code in it.

1042
00:36:34.190 --> 00:36:35.670
So instead, we just call the

1043
00:36:35.670 --> 00:36:37.770
initialization function directly.

1044
00:36:37.770 --> 00:36:43.550
And we need to no longer use
those old GL calls and things

1045
00:36:43.550 --> 00:36:47.810
that were pointing to screen
resolution and things like

1046
00:36:47.810 --> 00:36:49.240
that that were described
in Windows, so

1047
00:36:49.240 --> 00:36:50.930
basically the WGL calls.

1048
00:36:50.930 --> 00:36:52.235
COLT MCANLIS: Got it.

1049
00:36:52.235 --> 00:36:55.290
NOEL ALLEN: So once those have
all been ifdeffed out, then

1050
00:36:55.290 --> 00:36:57.095
we're actually ready to
make that change.

1051
00:36:57.095 --> 00:36:57.410
COLT MCANLIS: Cool.

1052
00:36:57.410 --> 00:37:00.440
So we've converted all of our
stuff over to Pepper.

1053
00:37:00.440 --> 00:37:02.040
So we're using those
API calls.

1054
00:37:02.040 --> 00:37:05.230
We've also removed any platform
specific code from

1055
00:37:05.230 --> 00:37:06.670
our application at this point.

1056
00:37:06.670 --> 00:37:07.490
That's the good thing.

1057
00:37:07.490 --> 00:37:09.210
And so now we can
actually run--?

1058
00:37:09.210 --> 00:37:09.760
NOEL ALLEN: OK.

1059
00:37:09.760 --> 00:37:11.690
So this is the Pepper version.

1060
00:37:11.690 --> 00:37:16.660
And now I'm going to switch to
the Native Client version.

1061
00:37:16.660 --> 00:37:20.080
Rebuild, and you can see in
the output window the

1062
00:37:20.080 --> 00:37:22.910
toolchain running.

1063
00:37:22.910 --> 00:37:25.660
And now we have the cube
actually running as a Native

1064
00:37:25.660 --> 00:37:26.290
Client module.

1065
00:37:26.290 --> 00:37:27.330
COLT MCANLIS: Fantastic.

1066
00:37:27.330 --> 00:37:28.850
Perfect.

1067
00:37:28.850 --> 00:37:30.740
That's cool.

1068
00:37:30.740 --> 00:37:34.110
NOEL ALLEN: And you can
see the load is

1069
00:37:34.110 --> 00:37:35.350
right here of the NEXE.

1070
00:37:35.350 --> 00:37:36.290
COLT MCANLIS: Excellent.

1071
00:37:36.290 --> 00:37:36.770
Excellent.

1072
00:37:36.770 --> 00:37:39.120
So now with the Visual
Studio plug-in--

1073
00:37:39.120 --> 00:37:41.080
because we want to empower
developers to do great

1074
00:37:41.080 --> 00:37:43.630
things-- you can actually swap
back and run the original

1075
00:37:43.630 --> 00:37:44.870
Win32 as well still.

1076
00:37:44.870 --> 00:37:45.150
Right?

1077
00:37:45.150 --> 00:37:46.250
NOEL ALLEN: Exactly.

1078
00:37:46.250 --> 00:37:48.360
So the Windows 32 version
is still available.

1079
00:37:48.360 --> 00:37:49.760
So I will switch back to that.

1080
00:37:49.760 --> 00:37:53.560
1081
00:37:53.560 --> 00:37:56.390
And here we are.

1082
00:37:56.390 --> 00:37:57.640
COLT MCANLIS: Really?

1083
00:37:57.640 --> 00:38:02.630
1084
00:38:02.630 --> 00:38:04.760
You honestly went to my G+
stream and pulled down a

1085
00:38:04.760 --> 00:38:06.870
picture of me eating barbecue
in Austin, Texas?

1086
00:38:06.870 --> 00:38:07.690
NOEL ALLEN: You put
it up there.

1087
00:38:07.690 --> 00:38:08.935
Anybody can get access to it.

1088
00:38:08.935 --> 00:38:12.330
What do you want?

1089
00:38:12.330 --> 00:38:14.270
COLT MCANLIS: There's
a great--

1090
00:38:14.270 --> 00:38:16.100
you didn't do this yesterday.

1091
00:38:16.100 --> 00:38:16.750
OK.

1092
00:38:16.750 --> 00:38:17.170
Awesome.

1093
00:38:17.170 --> 00:38:19.390
That's a great barbecue place
in Austin, Texas.

1094
00:38:19.390 --> 00:38:20.750
I highly recommend
you going to it.

1095
00:38:20.750 --> 00:38:23.290
1096
00:38:23.290 --> 00:38:25.970
Stop going to my G+ page.

1097
00:38:25.970 --> 00:38:27.785
I'm going to put you in
a separate Circle.

1098
00:38:27.785 --> 00:38:30.100
You don't get any access
to photos.

1099
00:38:30.100 --> 00:38:30.590
I lost myself.

1100
00:38:30.590 --> 00:38:32.260
What are we talking about?

1101
00:38:32.260 --> 00:38:32.970
OK.

1102
00:38:32.970 --> 00:38:33.410
Win32.

1103
00:38:33.410 --> 00:38:35.830
So this is the original
Win32 application.

1104
00:38:35.830 --> 00:38:37.100
Fantastic.

1105
00:38:37.100 --> 00:38:37.810
OK.

1106
00:38:37.810 --> 00:38:39.940
It's mesmerizing.

1107
00:38:39.940 --> 00:38:41.030
NOEL ALLEN: Actually,
I find it a

1108
00:38:41.030 --> 00:38:43.332
little disturbing, myself.

1109
00:38:43.332 --> 00:38:45.260
COLT MCANLIS: I'm very
disturbed right now.

1110
00:38:45.260 --> 00:38:46.200
So, fantastic.

1111
00:38:46.200 --> 00:38:47.100
So we've done the port.

1112
00:38:47.100 --> 00:38:49.130
We actually have, according to
that timer back there, we've

1113
00:38:49.130 --> 00:38:50.280
got 20 minutes left.

1114
00:38:50.280 --> 00:38:52.270
So even with me blathering on
about all this other stuff

1115
00:38:52.270 --> 00:38:54.730
about Native Client, we've been
able to chop some onions,

1116
00:38:54.730 --> 00:38:55.760
dice some things up.

1117
00:38:55.760 --> 00:38:58.810
The power of the Visual Studio
add-in actually propelled us

1118
00:38:58.810 --> 00:39:00.670
to do a lot of these things--

1119
00:39:00.670 --> 00:39:01.770
do it in a faster manner.

1120
00:39:01.770 --> 00:39:05.170
A lot of the heavy lifting
was done by the add-in.

1121
00:39:05.170 --> 00:39:07.780
Pepper was really the hard place
that we had to do some

1122
00:39:07.780 --> 00:39:08.810
API conversions.

1123
00:39:08.810 --> 00:39:12.020
Now, what we didn't talk about
today was anything under the

1124
00:39:12.020 --> 00:39:13.260
hood of Native Client.

1125
00:39:13.260 --> 00:39:16.430
Today's talk has been
specifically focusing on the

1126
00:39:16.430 --> 00:39:17.980
developer side of things.

1127
00:39:17.980 --> 00:39:20.920
Now, if you're interested in
what Native Client is doing

1128
00:39:20.920 --> 00:39:23.880
under the hood, to make sure
that you can run native code

1129
00:39:23.880 --> 00:39:26.430
in a browser with the same
security and safety as

1130
00:39:26.430 --> 00:39:29.930
JavaScript, I highly recommend
you check out Nick Bray's talk

1131
00:39:29.930 --> 00:39:31.880
on Life of Native Client
Instruction.

1132
00:39:31.880 --> 00:39:33.340
It's happening today, in fact.

1133
00:39:33.340 --> 00:39:36.690
He is actually going to pull
back the mask of running x86

1134
00:39:36.690 --> 00:39:39.970
code in the web and talk about
all the bad things it can do

1135
00:39:39.970 --> 00:39:41.910
and how Native Client addresses
those issues.

1136
00:39:41.910 --> 00:39:44.650
So I highly recommend checking
out his talk.

1137
00:39:44.650 --> 00:39:45.690
So what did we learn today?

1138
00:39:45.690 --> 00:39:47.730
Let's talk about this,
the leftovers.

1139
00:39:47.730 --> 00:39:50.450
So develop as a Pepper
plug-in first.

1140
00:39:50.450 --> 00:39:53.160
This is going to allow you
to use your existing IDE.

1141
00:39:53.160 --> 00:39:55.280
It's going to allow you to
develop as a plug-in, which a

1142
00:39:55.280 --> 00:39:58.670
lot of developers are
familiar with.

1143
00:39:58.670 --> 00:40:00.690
And it's going to allow you to
use the debugger properly.

1144
00:40:00.690 --> 00:40:02.840
Now, again you can use debugging
and profiling with

1145
00:40:02.840 --> 00:40:04.830
Native Client, but they're
very alpha right now.

1146
00:40:04.830 --> 00:40:08.050
So if you're used to using
Visual Studio all the time,

1147
00:40:08.050 --> 00:40:09.570
you're probably going to have
a lot of teeth gnashing in

1148
00:40:09.570 --> 00:40:10.210
that process.

1149
00:40:10.210 --> 00:40:12.560
Instead, use your IDE, get
everything ported over to

1150
00:40:12.560 --> 00:40:16.020
Pepper, make your big
code changes there.

1151
00:40:16.020 --> 00:40:18.630
Never underestimate the power
of a good platform wrapper.

1152
00:40:18.630 --> 00:40:18.860
Right?

1153
00:40:18.860 --> 00:40:21.560
Because all the platform code
that effectively you're using

1154
00:40:21.560 --> 00:40:24.200
for Pepper, you should properly
abstract out.

1155
00:40:24.200 --> 00:40:25.805
So when you're about to jump in
the code and be like, I'm

1156
00:40:25.805 --> 00:40:28.300
going to do Native Client,
stop, hammer

1157
00:40:28.300 --> 00:40:29.410
time, think about it.

1158
00:40:29.410 --> 00:40:32.680
And then write a good wrapper
so you can actually maintain

1159
00:40:32.680 --> 00:40:34.610
your backward compatibility to
the other [? SKUs ?] that

1160
00:40:34.610 --> 00:40:35.840
you're targeting.

1161
00:40:35.840 --> 00:40:37.160
We ported FileIO.

1162
00:40:37.160 --> 00:40:39.140
We ported GL to GLES.

1163
00:40:39.140 --> 00:40:41.760
And then we remove all of our
platform specific stuff from

1164
00:40:41.760 --> 00:40:44.910
NaCl, and we did it with really
cool looking hats.

1165
00:40:44.910 --> 00:40:47.020
I'm still amazed you
found these.

1166
00:40:47.020 --> 00:40:49.450
And with that, we're
done with the port.

1167
00:40:49.450 --> 00:40:50.130
I'm Colt McAnlis.

1168
00:40:50.130 --> 00:40:50.935
NOEL ALLEN: I'm Noel Allen.

1169
00:40:50.935 --> 00:40:52.800
COLT MCANLIS: That's porting
in 60 minutes.

1170
00:40:52.800 --> 00:40:55.080
And we'll open the floor for
some questions right now.

1171
00:40:55.080 --> 00:40:58.816
1172
00:40:58.816 --> 00:41:01.690
You did good.

1173
00:41:01.690 --> 00:41:02.740
I don't know if I
should curtsy.

1174
00:41:02.740 --> 00:41:04.200
NOEL ALLEN: I don't
do that funny bow.

1175
00:41:04.200 --> 00:41:05.100
I'd probably just
fall right over.

1176
00:41:05.100 --> 00:41:05.960
COLT MCANLIS: Probably.

1177
00:41:05.960 --> 00:41:06.900
We're a little bit top heavy.

1178
00:41:06.900 --> 00:41:08.010
So there's some microphones
here.

1179
00:41:08.010 --> 00:41:11.630
If you've got some questions,
please feel free to speak up.

1180
00:41:11.630 --> 00:41:12.430
Yes, sir.

1181
00:41:12.430 --> 00:41:13.490
No, the guy behind you.

1182
00:41:13.490 --> 00:41:14.885
No, I'm just messing with you.

1183
00:41:14.885 --> 00:41:15.360
Sorry.

1184
00:41:15.360 --> 00:41:17.566
The hat, it gives me power.

1185
00:41:17.566 --> 00:41:20.320
AUDIENCE: I was wondering if
there are any plans to be able

1186
00:41:20.320 --> 00:41:24.550
to target Pepper to native
binaries so that I could use

1187
00:41:24.550 --> 00:41:28.770
the same APIs for deploying to
NaCl and to deploying to just

1188
00:41:28.770 --> 00:41:31.690
an application running on
there and not have that,

1189
00:41:31.690 --> 00:41:33.695
ifdeffed out Win32 code.

1190
00:41:33.695 --> 00:41:35.730
COLT MCANLIS: That's actually
a great question.

1191
00:41:35.730 --> 00:41:37.510
I'm going to let
you field this.

1192
00:41:37.510 --> 00:41:39.250
NOEL ALLEN: Actually, could
you repeat that again?

1193
00:41:39.250 --> 00:41:41.790
I'm not sure exactly what
you were asking there.

1194
00:41:41.790 --> 00:41:44.530
Can you take a binary that's
already compiled?

1195
00:41:44.530 --> 00:41:45.290
AUDIENCE: So no.

1196
00:41:45.290 --> 00:41:48.780
So the question is you've been
porting the app to use these

1197
00:41:48.780 --> 00:41:52.550
Pepper APIs instead of using
the native Windows APIs.

1198
00:41:52.550 --> 00:41:56.320
Is there any plans to create
kind of a wrapper that is the

1199
00:41:56.320 --> 00:41:59.420
Pepper API but it targets
Windows functions instead of

1200
00:41:59.420 --> 00:42:00.010
the Chrome functions?

1201
00:42:00.010 --> 00:42:01.990
COLT MCANLIS: So we could use
fread, and under the hood it

1202
00:42:01.990 --> 00:42:02.850
would do the right
Pepper thing.

1203
00:42:02.850 --> 00:42:03.170
AUDIENCE: Right.

1204
00:42:03.170 --> 00:42:04.270
NOEL ALLEN: Gotcha.

1205
00:42:04.270 --> 00:42:04.690
Yes.

1206
00:42:04.690 --> 00:42:08.490
So actually, there's some stuff
already out there that

1207
00:42:08.490 --> 00:42:10.150
other people have developed.

1208
00:42:10.150 --> 00:42:13.990
But we are actually putting in
a subset of that into the SDK

1209
00:42:13.990 --> 00:42:15.090
as we speak.

1210
00:42:15.090 --> 00:42:19.970
So you can expect to see things
like pthread wrappers,

1211
00:42:19.970 --> 00:42:24.570
access to fread open, closed,
the standard POSIX-y things,

1212
00:42:24.570 --> 00:42:28.830
except running in Win32 so that
you can take that Native

1213
00:42:28.830 --> 00:42:31.940
Client application and then run
it as a Pepper plug-in so

1214
00:42:31.940 --> 00:42:33.400
that you can do your
development

1215
00:42:33.400 --> 00:42:34.650
a little bit easier.

1216
00:42:34.650 --> 00:42:37.650
1217
00:42:37.650 --> 00:42:39.760
AUDIENCE: So the question I have
is about the transition

1218
00:42:39.760 --> 00:42:42.340
from the no sandbox
to the sandbox.

1219
00:42:42.340 --> 00:42:45.330
So basically, obviously, since
you are using Windows calls,

1220
00:42:45.330 --> 00:42:49.730
you used the no sandbox call
initially when you just made

1221
00:42:49.730 --> 00:42:53.370
it a Pepper plug-in.

1222
00:42:53.370 --> 00:42:54.950
So where does the transition
happen?

1223
00:42:54.950 --> 00:42:59.030
So when you actually make it a
NEXE and when you download it,

1224
00:42:59.030 --> 00:43:01.610
is it that the MIME type is
handled by the Native Client?

1225
00:43:01.610 --> 00:43:04.190
1226
00:43:04.190 --> 00:43:06.780
Where does the transition
to the sandbox happen?

1227
00:43:06.780 --> 00:43:08.770
When you ran it finally,
did you also

1228
00:43:08.770 --> 00:43:09.610
run it with no sandbox?

1229
00:43:09.610 --> 00:43:10.600
NOEL ALLEN: OK.

1230
00:43:10.600 --> 00:43:14.820
So what the no sandbox does
is it takes out that

1231
00:43:14.820 --> 00:43:15.850
outer Chrome sandbox.

1232
00:43:15.850 --> 00:43:16.895
AUDIENCE: I know what
no sandbox does.

1233
00:43:16.895 --> 00:43:18.232
NOEL ALLEN: I was just
explaining it

1234
00:43:18.232 --> 00:43:19.060
for everybody else.

1235
00:43:19.060 --> 00:43:20.450
COLT MCANLIS: There's a lot of
other people in the room who

1236
00:43:20.450 --> 00:43:21.235
may not know.

1237
00:43:21.235 --> 00:43:25.410
NOEL ALLEN: But what that outer
sandbox does is it gives

1238
00:43:25.410 --> 00:43:26.880
you that OS protection.

1239
00:43:26.880 --> 00:43:29.750
So it interferes with things
like debugging.

1240
00:43:29.750 --> 00:43:33.160
So I have the no sandbox off to
enable me to debug at every

1241
00:43:33.160 --> 00:43:34.020
single step.

1242
00:43:34.020 --> 00:43:36.130
Now, when you actually deploy
it-- so if I took this

1243
00:43:36.130 --> 00:43:39.734
application, I can switch it
back to Native Client.

1244
00:43:39.734 --> 00:43:42.490
Go over here to Properties,
Debugging.

1245
00:43:42.490 --> 00:43:45.050
And as you can see,
I do not have No

1246
00:43:45.050 --> 00:43:47.720
Sandbox set at this point.

1247
00:43:47.720 --> 00:43:49.780
So I'm actually running it
with the sandbox on.

1248
00:43:49.780 --> 00:43:50.530
AUDIENCE: Right.

1249
00:43:50.530 --> 00:43:52.180
So that was my question.

1250
00:43:52.180 --> 00:43:54.720
So how does this actually
work in the sense that--

1251
00:43:54.720 --> 00:43:57.675
so when the page actually loads,
does it have a MIME

1252
00:43:57.675 --> 00:44:01.140
type that is whatever
application slash xNaCl, and

1253
00:44:01.140 --> 00:44:04.715
that's handled by whatever the
NaCl processor inside Chrome?

1254
00:44:04.715 --> 00:44:05.320
COLT MCANLIS: Yes.

1255
00:44:05.320 --> 00:44:07.390
So remember early on in the
talk, we talked about using

1256
00:44:07.390 --> 00:44:09.840
the embed tag to actually
signify and point to the

1257
00:44:09.840 --> 00:44:10.810
Native Client manifest.

1258
00:44:10.810 --> 00:44:12.510
And we defined the
MIME type there.

1259
00:44:12.510 --> 00:44:15.690
And then, when the page is
parsed by Chrome, it'll say,

1260
00:44:15.690 --> 00:44:17.690
hey, we found this MIME type.

1261
00:44:17.690 --> 00:44:20.240
And it has a table that says,
load this plug-in to handle

1262
00:44:20.240 --> 00:44:21.080
this MIME type.

1263
00:44:21.080 --> 00:44:21.400
NOEL ALLEN: Correct.

1264
00:44:21.400 --> 00:44:26.230
So, the application xNaCl
typically points to the Native

1265
00:44:26.230 --> 00:44:28.610
Client plug-in.

1266
00:44:28.610 --> 00:44:32.140
But we were overwriting that for
the purpose of developing

1267
00:44:32.140 --> 00:44:34.690
as a Pepper plug-in
to make it easier.

1268
00:44:34.690 --> 00:44:36.305
COLT MCANLIS: We were
hacking the planet.

1269
00:44:36.305 --> 00:44:36.925
AUDIENCE: Thanks.

1270
00:44:36.925 --> 00:44:38.175
COLT MCANLIS: No problem.

1271
00:44:38.175 --> 00:44:43.268
1272
00:44:43.268 --> 00:44:46.920
AUDIENCE: I was wondering if
there's plans to get this in

1273
00:44:46.920 --> 00:44:48.190
the mobile version of Chrome.

1274
00:44:48.190 --> 00:44:49.440
And if so, when?

1275
00:44:49.440 --> 00:44:52.742
1276
00:44:52.742 --> 00:44:54.310
NOEL ALLEN: I actually
don't know.

1277
00:44:54.310 --> 00:44:57.952
I'll leave that to you.

1278
00:44:57.952 --> 00:45:00.840
COLT MCANLIS: Next question.

1279
00:45:00.840 --> 00:45:02.310
I've got no answers
for you today.

1280
00:45:02.310 --> 00:45:03.540
I'm sorry.

1281
00:45:03.540 --> 00:45:04.730
AUDIENCE: Then maybe--

1282
00:45:04.730 --> 00:45:07.450
the NEXE format very
specific to x86.

1283
00:45:07.450 --> 00:45:11.560
Or is it something like LLVM
that might be able to be

1284
00:45:11.560 --> 00:45:13.540
compiled for an ARM?

1285
00:45:13.540 --> 00:45:17.620
NOEL ALLEN: So let me rephrase
that question.

1286
00:45:17.620 --> 00:45:22.330
So what you're looking at right
now is specifically an

1287
00:45:22.330 --> 00:45:26.920
x86, 64-bit binary that was
generated by the toolchains.

1288
00:45:26.920 --> 00:45:27.440
OK?

1289
00:45:27.440 --> 00:45:30.830
So if someone had a 32-bit
version of the browser, then

1290
00:45:30.830 --> 00:45:32.700
they would be using the
32-bit version.

1291
00:45:32.700 --> 00:45:36.250
Or if they had an ARM, they'd
be using the ARM version.

1292
00:45:36.250 --> 00:45:40.540
Now, we are working on a
portable version that will, in

1293
00:45:40.540 --> 00:45:43.690
fact, use LLVM to generate
bitcode.

1294
00:45:43.690 --> 00:45:46.240
And then we will do
the translation at

1295
00:45:46.240 --> 00:45:47.870
the browser for you.

1296
00:45:47.870 --> 00:45:50.750
So you can expect that to be
coming around like, say, end

1297
00:45:50.750 --> 00:45:51.640
of the year.

1298
00:45:51.640 --> 00:45:54.358
AUDIENCE: Thank you.

1299
00:45:54.358 --> 00:45:55.810
AUDIENCE: Hi there.

1300
00:45:55.810 --> 00:45:58.340
If I have a pretty sophisticated
Pepper plug-in

1301
00:45:58.340 --> 00:46:00.130
already made--

1302
00:46:00.130 --> 00:46:03.230
Well, I guess my question is do
I have full access to all

1303
00:46:03.230 --> 00:46:06.746
the Pepper APIs inside NaCl,
or is it some subset?

1304
00:46:06.746 --> 00:46:13.510
NOEL ALLEN: It is a subset,
but it's almost all.

1305
00:46:13.510 --> 00:46:18.780
So there's a few private
interfaces that are only

1306
00:46:18.780 --> 00:46:21.580
usable by a few different
plug-ins.

1307
00:46:21.580 --> 00:46:24.220
So unless you were one of those
special cases already,

1308
00:46:24.220 --> 00:46:25.886
you wouldn't have had
access to it.

1309
00:46:25.886 --> 00:46:27.260
AUDIENCE: OK, thanks.

1310
00:46:27.260 --> 00:46:30.122
1311
00:46:30.122 --> 00:46:33.320
AUDIENCE: I noticed you took
out two of the libs.

1312
00:46:33.320 --> 00:46:37.130
If I have an external lib,
I need to recompile

1313
00:46:37.130 --> 00:46:38.510
that lib as a NaCl.

1314
00:46:38.510 --> 00:46:39.210
Is that correct?

1315
00:46:39.210 --> 00:46:40.080
And then statically link it?

1316
00:46:40.080 --> 00:46:41.145
COLT MCANLIS: Yes.

1317
00:46:41.145 --> 00:46:41.760
NOEL ALLEN: Yes.

1318
00:46:41.760 --> 00:46:45.180
So you're asking what
do you have to do

1319
00:46:45.180 --> 00:46:45.920
with the two libraries.

1320
00:46:45.920 --> 00:46:50.520
So the libraries that we see
here, that I took out, is the

1321
00:46:50.520 --> 00:46:53.600
Windows GL libraries.

1322
00:46:53.600 --> 00:46:57.470
Since we're GLES, you're
going to be using GLES.

1323
00:46:57.470 --> 00:47:02.520
Now, as you can see here, what
I'm doing is I am loading the

1324
00:47:02.520 --> 00:47:06.220
PPAPI version of the
GLES2 library.

1325
00:47:06.220 --> 00:47:11.050
So you will get this in the
SDK in the native form for

1326
00:47:11.050 --> 00:47:11.690
your platform.

1327
00:47:11.690 --> 00:47:15.350
So Windows, Mac, Linux.

1328
00:47:15.350 --> 00:47:17.680
And of course, the
GCC toolchain

1329
00:47:17.680 --> 00:47:18.630
ships with it as well.

1330
00:47:18.630 --> 00:47:21.140
So you'll have it on
all the platforms.

1331
00:47:21.140 --> 00:47:23.450
And we do actually ship the
source for this library.

1332
00:47:23.450 --> 00:47:25.266
So you could actually recompile
it yourself, if you

1333
00:47:25.266 --> 00:47:25.710
wanted to as well.

1334
00:47:25.710 --> 00:47:27.880
COLT MCANLIS: And If you have
libraries, you do have to

1335
00:47:27.880 --> 00:47:30.540
recompile them, because
otherwise it may have unsafe

1336
00:47:30.540 --> 00:47:34.660
code or it may use fread or try
to open a window and that

1337
00:47:34.660 --> 00:47:36.670
would, of course, fail
the validation.

1338
00:47:36.670 --> 00:47:38.660
AUDIENCE: I'm sure there's
an example I can follow.

1339
00:47:38.660 --> 00:47:39.810
That sounds great.

1340
00:47:39.810 --> 00:47:45.380
The other question was, now that
Chrome is in Android 4.1,

1341
00:47:45.380 --> 00:47:49.175
is Native Client also runnable
through that Chrome version?

1342
00:47:49.175 --> 00:47:53.200
COLT MCANLIS: I believe the
correct answer is no.

1343
00:47:53.200 --> 00:47:56.170
Because remember Chrome on
Android doesn't have all of

1344
00:47:56.170 --> 00:47:57.910
the big wizbang features
today.

1345
00:47:57.910 --> 00:48:00.470
We want to, of course, as
Chrome, move towards having

1346
00:48:00.470 --> 00:48:02.680
feature parity in as many
places as we do.

1347
00:48:02.680 --> 00:48:03.930
Right now, we actually
don't have Native

1348
00:48:03.930 --> 00:48:04.760
Client running on Chrome.

1349
00:48:04.760 --> 00:48:05.090
NOEL ALLEN: Yes.

1350
00:48:05.090 --> 00:48:06.860
Currently, this is
a desktop only--

1351
00:48:06.860 --> 00:48:07.060
COLT MCANLIS: Yes.

1352
00:48:07.060 --> 00:48:08.310
Currently desktop only.

1353
00:48:08.310 --> 00:48:10.710
1354
00:48:10.710 --> 00:48:11.500
Fantastic.

1355
00:48:11.500 --> 00:48:13.800
Going once, going twice.

1356
00:48:13.800 --> 00:48:14.740
Thank you, guys, for your
attention today.

1357
00:48:14.740 --> 00:48:15.390
We appreciate it.

1358
00:48:15.390 --> 00:48:16.640
Thank you.

1359
00:48:16.640 --> 00:48:20.033
WEBVTT

1
00:00:01.100 --> 00:00:05.950
&gt;&gt;Alex Komoroske: Let's get started.
&gt;&gt;Dimitri Glazkov: Let's get started. So what

2
00:00:05.950 --> 00:00:12.950
the heck of Web components?
&gt;&gt;Alex Komoroske: So When you guys saw that

3
00:00:13.810 --> 00:00:18.140
word component, you probably thought what
is that? Well, I submit that each and every

4
00:00:18.140 --> 00:00:25.140
one of you know what a component is because
you use them today. You use them in lots of

5
00:00:34.760 --> 00:00:41.760
different cases. So the first case is in embedded
widgets. So here if you have a Google+ button

6
00:00:49.350 --> 00:00:56.350
inside your site or a like button or something
like that --

7
00:01:00.419 --> 00:01:07.419
&gt;&gt; Dimitri Glazkov: Or a Twitter button.
&gt;&gt;Alex Komoroske: This is a third-party bit

8
00:01:13.500 --> 00:01:20.500
of code that's running within your site. It's
something where you have trust issues, right?

9
00:01:23.060 --> 00:01:30.060
They don't want to allow you to mess with
all of their stuff or (indiscernible) privileged

10
00:01:34.039 --> 00:01:41.039
APIs, and they also don't want you to style
their stuff. So they talk a lot about discipline.

11
00:01:46.429 --> 00:01:53.429
Like, "Thou shalt not use anything under -- sell
anything under my little ID" and stuff like

12
00:01:57.920 --> 00:02:03.659
that.
&gt;&gt;Dimitri Glazkov: Right, and of course we

13
00:02:03.659 --> 00:02:10.659
as user of those widgets go, "Eh, it's more
like an etiquette." Try not to do that stuff

14
00:02:19.050 --> 00:02:26.050
and we'll mess with that the way we want to
to make it look nice.

15
00:02:43.020 --> 00:02:50.020
&gt;&gt;Alex Komoroske: And so in fact, what everybody
does, they give up on these iframes, but that's

16
00:03:03.040 --> 00:03:10.040
not really ideal.
So another use case is when you are writing

17
00:03:20.260 --> 00:03:27.260
your own app, and say you want a tabstrip,
well, you shouldn't have to create a tabstrip

18
00:03:31.540 --> 00:03:38.540
because there are thousands of them that other
people have created; you just want to use

19
00:03:38.570 --> 00:03:44.870
those.
So you just want to grab in a widget or a

20
00:03:44.870 --> 00:03:50.950
component that someone else has written, and
put it inside of your app.

21
00:03:50.950 --> 00:03:57.950
&gt;&gt;Dimitri Glazkov: And there are entire libraries
written nowadays, and some of them are quite

22
00:04:00.970 --> 00:04:06.850
complete, libraries, and widgets and all of
the different UI elements that you might want

23
00:04:06.850 --> 00:04:10.760
to put together.
And of course, unfortunately, the problem

24
00:04:10.760 --> 00:04:17.760
there is that all of these libraries espouse
their own strategy on how to execute the UI

25
00:04:19.140 --> 00:04:26.140
widget composition and how those things come
together. And so like one of the top stock

26
00:04:28.350 --> 00:04:33.200
overflow
questions would be how do I use the widget

27
00:04:33.200 --> 00:04:38.060
from Framework Foo in Framework R, right?
&gt;&gt;Alex Komoroske: Unfortunately, they follow

28
00:04:38.060 --> 00:04:45.060
different conventions, so often the answer
is you use a lot of duct tape, a lot of script,

29
00:04:48.870 --> 00:04:55.870
jam them together as best you can.
&gt;&gt;Dimitri Glazkov: Don't touch those parts.

30
00:04:57.420 --> 00:05:04.420
&gt;&gt;Alex Komoroske: And don't do this, whatever
you do. So the final one is custom-built widgets.

31
00:05:06.120 --> 00:05:13.120
Are you hungry? So bear with me for a second.
You are all familiar with spaghetti code,

32
00:05:14.270 --> 00:05:21.270
right? Where you have all of these crazy stuff
to do, really hacky. When you are writing

33
00:05:22.090 --> 00:05:29.090
your own apps, you want to have this better
fit of encapsulation, right? Because that's

34
00:05:30.880 --> 00:05:37.880
how you build more complex things. But it's
hard to do in the above platform, so the best

35
00:05:46.720 --> 00:05:53.720
that you can kind of get is lasagne. You've
got layers, but they're still kind of messy,

36
00:05:58.720 --> 00:06:05.720
right? So even when you are building any kind
of app, you are building these custom elements

37
00:06:07.800 --> 00:06:13.190
for yourself.
&gt;&gt;Dimitri Glazkov: The components is, you

38
00:06:13.190 --> 00:06:20.190
know, one use of that.
&gt;&gt;Alex Komoroske: So let's go dive into our

39
00:06:21.960 --> 00:06:28.960
example we will be talking through today.
We're going to build a poll app and show you

40
00:06:32.200 --> 00:06:39.200
how we built this today. So here it is. It's
a pretty app.

41
00:06:43.919 --> 00:06:50.919
It's got a cool HTML file logo, it's got a
title, a subtitle, different options. If you

42
00:06:57.320 --> 00:07:04.320
aren't familiar with them, you can hover over
them to see the information about them. You

43
00:07:05.960 --> 00:07:12.960
can select them. I selected things. You can
also see the results. See what other people

44
00:07:13.360 --> 00:07:20.360
have voted for. But let's dive into how this
stuff actually

45
00:07:21.120 --> 00:07:25.139
works. So I'm going to open up Web inspector
here,

46
00:07:25.139 --> 00:07:31.710
I have got this way zoomed in, which is why
it looks so funky.

47
00:07:31.710 --> 00:07:35.480
&gt;&gt;Dimitri Glazkov: And if you look at this
today, and this is a written -- you know,

48
00:07:35.480 --> 00:07:42.480
this is a pretty cutting edge technology even
by today's standard. Shout out for David who

49
00:07:43.280 --> 00:07:47.550
wrote this code. It's using what you would
call the modern

50
00:07:47.550 --> 00:07:54.050
principles of Web design, and that is, you
know, you do see your components right away.

51
00:07:54.050 --> 00:08:01.050
You see the poll is one component, which is
a backbone view; and then you see the choices

52
00:08:03.240 --> 00:08:09.310
view, results view, and all of those different
things that are put together into a widget

53
00:08:09.310 --> 00:08:14.030
hierarchy of some sort, right? Unfortunately,
some of the things immediately

54
00:08:14.030 --> 00:08:17.889
start jumping out at you and going what's
going on here?

55
00:08:17.889 --> 00:08:22.190
See those strings there? Your HTML became
just a string, right? It's not a markup anymore.

56
00:08:22.190 --> 00:08:24.180
It's just the cottage cheese in your Lasagne,
right?

57
00:08:24.180 --> 00:08:29.350
And so at this point you are starting to go
and say, "Well, I'm not really working in

58
00:08:29.350 --> 00:08:34.779
HTML anymore; I'm working in this parallel
world that the framework has designed for

59
00:08:34.779 --> 00:08:39.909
me. And then what happens is this framework
will do the right thing and project the actual

60
00:08:39.909 --> 00:08:43.289
HTML or DOM tree into the browser for user
to see. And, of course, when the user clicks

61
00:08:43.289 --> 00:08:50.079
on something, the backward thing happens,
you know. The framework traverses the events

62
00:08:50.079 --> 00:08:57.079
back to your tree to your object hierarchy
and tells you what happened. It's not just

63
00:08:57.540 --> 00:09:00.029
the deal that was clicked; it's your poll
that was selected.

64
00:09:00.029 --> 00:09:07.029
Ah-ha, I understand this now. So if you look
at this markup right now, you actually see

65
00:09:07.439 --> 00:09:11.660
this very clearly. It's that markup is not
necessarily representative of what the poll

66
00:09:11.660 --> 00:09:17.629
is; it's actually a lot of things in addition
to just what should be a very simple widget

67
00:09:17.629 --> 00:09:22.869
layout, right? You have poll and you have
choices and that's it. What else should be

68
00:09:22.869 --> 00:09:29.869
going on here? But there is actually a lot
of markup going on. That's because the markup

69
00:09:34.399 --> 00:09:39.649
is essentially a projection. And even worse,
today, if you load this page, it's just a

70
00:09:39.649 --> 00:09:43.980
DIV in markup. What happens is the framework
then blows up

71
00:09:43.980 --> 00:09:50.680
this DIV using the JavaScript and creates
the actual framework out of it.

72
00:09:50.680 --> 00:09:55.279
So -- you think this is bad?
&gt;&gt;Alex Komoroske: Right. So I actually have

73
00:09:55.279 --> 00:10:02.019
something that haunts my nightmares, and it
will haunt yours, too, after I show you.

74
00:10:02.019 --> 00:10:08.009
So if you open -- if you go to, say, just
Gmail which we all use, know and love, if

75
00:10:08.009 --> 00:10:14.100
you switch and look at the Web inspector in
here, you inspect some random elements -- what

76
00:10:14.100 --> 00:10:20.029
is going on?
&gt;&gt;Dimitri Glazkov: Oh, my God! What is this?

77
00:10:20.029 --> 00:10:27.029
This should be a very simple widget tree,
right? There's like a list of things and then

78
00:10:27.459 --> 00:10:31.639
there's -- oh, my God look at this! Stairway
to hell. [Laughter]

79
00:10:31.639 --> 00:10:34.300
&gt;&gt;Dimitri Glazkov: Right? What's going on
there?

80
00:10:34.300 --> 00:10:39.920
&gt;&gt;Alex Komoroske: This doesn't make any sense.
And so -- this is in this bizarro. You know,

81
00:10:39.920 --> 00:10:46.920
I bet a lot of you watching this were saying,
"Oh, well that's just how you do it, right?"

82
00:10:48.449 --> 00:10:55.449
Like, why are you talking about why this is
insane? This is just how you make it work.

83
00:10:58.480 --> 00:11:05.480
You know what, Dimitri? I submit that everyone
in this room who said that is insane. Right?

84
00:11:06.429 --> 00:11:09.110
[Laughter].
&gt;&gt;Alex Komoroske: This is insane, this is

85
00:11:09.110 --> 00:11:14.319
crazy.
&gt;&gt;Dimitri Glazkov: We're insane, yay! All

86
00:11:14.319 --> 00:11:21.319
right. But the thing is that -- it is true,
we are

87
00:11:21.660 --> 00:11:28.660
doing something to work around the issues
in the browser. And we're writing a lot of

88
00:11:29.350 --> 00:11:36.350
code. We're writing frameworks to help us
do this -- these bits of code. Then with more

89
00:11:38.369 --> 00:11:45.300
code that we write, we have more opportunities
for -- for losing test coverage, for example,

90
00:11:45.300 --> 00:11:52.300
and not knowing exactly what's happening.
And clearly more code you ship over the wire,

91
00:11:56.220 --> 00:12:03.220
the slower your application will go, right?
And the development time suffers, of course.

92
00:12:05.540 --> 00:12:09.839
Unless you stay in the confines of that specific
framework, right?

93
00:12:09.839 --> 00:12:16.839
&gt;&gt;Alex Komoroske: So that's sort of on a low
level why this is bad. On a high level, this

94
00:12:19.550 --> 00:12:26.189
is bad, too. Right? If you looked at this
DOM, this isn't very

95
00:12:26.189 --> 00:12:33.189
symmetric at all. I had to look through it.
I didn't really understand what those things

96
00:12:33.899 --> 00:12:39.220
were doing. The Gmail example, of course,
is way on one end of the spectrum. But actually

97
00:12:39.220 --> 00:12:45.869
if we look at our index, Google, we see the
Web is getting less and less semantic as we

98
00:12:45.869 --> 00:12:51.470
go. There's more DIVs and spans. It's harder
to understand what's going on.

99
00:12:51.470 --> 00:12:58.089
&gt;&gt;Dimitri Glazkov: And more empty DIVs, like
I mentioned before, right? You try to index

100
00:12:58.089 --> 00:13:04.589
a page, you go there, you say, oh, there's
nothing there, no, no, that's actually an

101
00:13:04.589 --> 00:13:10.619
NPR app but loads all kinds of images. You
have to run script to understand that it does

102
00:13:10.619 --> 00:13:17.189
that, right?
&gt;&gt;Alex Komoroske: So running script means

103
00:13:17.189 --> 00:13:24.189
that you have to -- to make any kind of complicated
app, you have to run script. You can't be

104
00:13:31.980 --> 00:13:38.980
a web author; you have to be a Web developer
to make something work today. Okay. So I have

105
00:13:40.569 --> 00:13:47.569
one bit of good news. You guys are all insane,
but it's not your

106
00:13:48.179 --> 00:13:55.179
fault. It's the fault of the platform right
now and that's why you have to do these things.

107
00:14:03.059 --> 00:14:07.420
&gt;&gt;Dimitri Glazkov: That's right.
&gt;&gt;Alex Komoroske: So if you look at this,

108
00:14:07.420 --> 00:14:14.420
the rare thing of it, is the Web platform
has all of these amazing technologies that

109
00:14:16.860 --> 00:14:22.499
do all kinds of really cool stuff. But there
are a few little potholes. A few little tiny

110
00:14:22.499 --> 00:14:28.329
things that don't work correctly or that are
difficult. And you run into them. You're on

111
00:14:28.329 --> 00:14:32.790
this information super highway, everything
is working great, you run into a pothole,

112
00:14:32.790 --> 00:14:37.619
and you say, "Ooop, I can't handle this."
But that's okay.

113
00:14:37.619 --> 00:14:44.239
I have script, I have an escape hatch. I will
do this in JavaScript. It will be okay. So

114
00:14:44.239 --> 00:14:48.329
you go a little tiny bit off road. That's
fine, right?

115
00:14:48.329 --> 00:14:50.829
Now you run into another pothole, a deeper
pothole offroad. This means you're offroad,

116
00:14:50.829 --> 00:14:53.889
right? And it's a pothole that wouldn't have
been

117
00:14:53.889 --> 00:14:58.049
there had you been on the highway, had you
been able to use these normal technologies,

118
00:14:58.049 --> 00:15:02.949
but you're offroad. That's okay. You write
a little bit more script, you go a little

119
00:15:02.949 --> 00:15:03.980
bit more offroad. Things are wrong, right?
Unfortunately, this

120
00:15:03.980 --> 00:15:09.170
leads into a pit of despair, right? Like the
more offroad you go, after a certain point

121
00:15:09.170 --> 00:15:13.329
you are drawing your own cursor, you've completely
escaped the browser here.

122
00:15:13.329 --> 00:15:17.299
[Laughter].
&gt;&gt;Alex Komoroske: You are sort of building

123
00:15:17.299 --> 00:15:22.499
inside this escape hatch. JavaScript is an
escape hatch. If the (indiscernible) doesn't

124
00:15:22.499 --> 00:15:28.899
do what you need, you are now building everything
inside of the escape hatch. That's crazy.

125
00:15:28.899 --> 00:15:35.899
Even if you don't think that you are doing
it, you think you are doing a very good job

126
00:15:37.350 --> 00:15:44.350
of being semantic and all of that stuff, well,
the framework they are using is doing it for

127
00:15:45.609 --> 00:15:49.559
you. They are going completely offroad to
do this kind of stuff.

128
00:15:49.559 --> 00:15:55.579
&gt;&gt;Dimitri Glazkov: Right. And a lot of this
framework becomes so robust. And in order

129
00:15:55.579 --> 00:16:00.339
to become robust, in order to offer the experience
to you that makes sense, they build entire

130
00:16:00.339 --> 00:16:04.709
rendering engines into the browser, so you
have this turducken of the thing. The rendering

131
00:16:04.709 --> 00:16:08.569
engine is just a rendering surface, and then
there's another one that's being loaded to

132
00:16:08.569 --> 00:16:13.399
the js file that actually does the stuff for
you. And so it's pretty sad.

133
00:16:13.399 --> 00:16:17.859
&gt;&gt;Alex Komoroske: So, yeah, we've been talking
all doom and gloom so far. We're going to

134
00:16:17.859 --> 00:16:23.420
turn the page here, and the good news is that
although we look like normal people, Dimitri

135
00:16:23.420 --> 00:16:26.720
and I actually come to you from the future.
[Laughter]

136
00:16:26.720 --> 00:16:29.999
&gt;&gt;Dimitri Glazkov: Yes. We did come from the
future. You must know there are multiple versions

137
00:16:29.999 --> 00:16:33.759
of the future, and there is one, for example,
where the alien invasion begins in 15 minutes

138
00:16:33.759 --> 00:16:36.809
and the Web platform essentially becomes irrelevant.
&gt;&gt;Alex Komoroske: But there also good time

139
00:16:36.809 --> 00:16:41.079
lines. The time line we're from is the one
where there's free beer and there's Web components,

140
00:16:41.079 --> 00:16:43.109
so it's not all bad. So what we want to do
is we want to talk to

141
00:16:43.109 --> 00:16:47.769
you about how Web components solves this problem.
&gt;&gt;Dimitri Glazkov: So the Web components is

142
00:16:47.769 --> 00:16:54.769
this new set of technologies that we looked
at -- we created by looking at those potholes

143
00:16:55.540 --> 00:17:02.540
and decided to fill them naturally as things
that fit inside of the Web platform as a whole.

144
00:17:06.470 --> 00:17:13.470
Rather than building a whole new crazy thing
on the side, which we always have done before,

145
00:17:13.639 --> 00:17:19.370
we decided we're going to fill those holes
naturally into something that feels like just

146
00:17:19.370 --> 00:17:26.139
part of the Web platform. Just part of the
standard things that you normally do in the

147
00:17:26.139 --> 00:17:30.940
browser. Not a script and not some crazy invention
that is completely brand new.

148
00:17:30.940 --> 00:17:36.990
And so what we did is we kind of found out
that there's three pieces that are missing

149
00:17:36.990 --> 00:17:41.980
and these pieces are Shadow DOM, the custom
elements, and the templates.

150
00:17:41.980 --> 00:17:47.149
&gt;&gt;Alex Komoroske: So let me walk you through
what each of these ones means in practice.

151
00:17:47.149 --> 00:17:52.169
So again, all of these three things are what
come underneath the umbrella of Web components.

152
00:17:52.169 --> 00:17:56.340
So the first is Shadow DOM. Shadow DOM is
what allows you to encapsulate stuff in the

153
00:17:56.340 --> 00:18:00.090
DOM to hide away all of that crush that you
need to make it look correct.

154
00:18:00.090 --> 00:18:07.090
Custom elements is what allows you to define
your own tabs. When the HTML parser runs into

155
00:18:07.929 --> 00:18:11.799
your widget, it can instantiate it immediately
for you.

156
00:18:11.799 --> 00:18:17.120
Finally, templates allows you to define HTML
DOM snippets very easily. So today you are

157
00:18:17.120 --> 00:18:24.120
doing this in long bits of strings and script,
or you are doing script tags with some -- with

158
00:18:26.730 --> 00:18:33.460
some templates there. This basically just
allows you to define it directly in your HTML,

159
00:18:33.460 --> 00:18:40.460
have it sort of frozen off to the side, so
you can swap it in when you need it.

160
00:18:40.919 --> 00:18:45.279
&gt;&gt;Dimitri Glazkov: It's kind of neat to decide
that developers are -- really like this master

161
00:18:45.279 --> 00:18:49.070
framework, right. There's problems with the
Web platform, but no matter what, developers

162
00:18:49.070 --> 00:18:51.980
force will work around them or flow around
those problems.

163
00:18:51.980 --> 00:18:54.899
&gt;&gt;Alex Komoroske: They will find a way.
&gt;&gt;Dimitri Glazkov: Exactly.

164
00:18:54.899 --> 00:19:01.250
&gt;&gt;Alex Komoroske: So this is sort of like
the low level what the technologies do, but

165
00:19:01.250 --> 00:19:04.210
what does this actually mean in practice?
&gt;&gt;Dimitri Glazkov: Well, in practice, what

166
00:19:04.210 --> 00:19:09.269
you are really are looking for is something
that allows you to tell -- allows you to tell

167
00:19:09.269 --> 00:19:13.510
the browser exactly what you mean. This, for
example, would be the markup that

168
00:19:13.510 --> 00:19:20.000
you are actually are trying to communicate
to the browser. I have a poll, I have choices,

169
00:19:20.000 --> 00:19:27.000
and there's things that -- that are essentially
data for my poll, right? Why should there

170
00:19:27.159 --> 00:19:30.500
be anything else? Right, right, right?!!
&gt;&gt;&gt; Right!

171
00:19:30.500 --> 00:19:37.470
&gt;&gt;Dimitri Glazkov: All right! So the three
pieces fit very neatly into this idea. First

172
00:19:37.470 --> 00:19:44.149
Shadow DOM allows you to take the scaffolding
all of the weird DIVs that are really irrelevant

173
00:19:44.149 --> 00:19:49.809
to the semantic of the markup, and hide them
into the Shadow DOM -- which we will talk

174
00:19:49.809 --> 00:19:55.350
more about later. Then the custom elements
allow you to define new tags, right? New tags,

175
00:19:55.350 --> 00:20:02.350
awesome? X-poll, right? And specify behavior
and assign things on top of them.

176
00:20:02.380 --> 00:20:09.340
Then, of course, the templates allow you to
stop treating markup as string, which is always

177
00:20:09.340 --> 00:20:12.730
nice.
&gt;&gt;Alex Komoroske: So that's how they help

178
00:20:12.730 --> 00:20:17.360
tactically, but they also, of course, are
really important on the high level. So if

179
00:20:17.360 --> 00:20:22.580
you have this world, this is all you need
to pass down to the browser to have that rich

180
00:20:22.580 --> 00:20:26.740
poll experience exist, that means that you
don't need this bizarro script. DOM can be

181
00:20:26.740 --> 00:20:29.130
your only hierarchy. You don't need to have
this parallel bizarro hierarchy on the side.

182
00:20:29.130 --> 00:20:33.809
&gt;&gt;Dimitri Glazkov: You no longer need to build
your widget hierarchy as just a, you know,

183
00:20:33.809 --> 00:20:37.509
an object tree somewhere off to the side.
The one that projects the DOM is a kabuki

184
00:20:37.509 --> 00:20:41.409
theater of some sort.
&gt;&gt;Alex Komoroske: So DOM can become this lingua

185
00:20:41.409 --> 00:20:48.409
franca of the Web. It also means that you
would have real encapsulation, so you wouldn't

186
00:20:48.799 --> 00:20:53.419
have to worry about people coming in and messing
with your innards and messing up how your

187
00:20:53.419 --> 00:20:55.690
component works, because they can't because
it would be a barrier.

188
00:20:55.690 --> 00:20:58.049
So it's not just etiquette or discipline.
It's an actual encapsulation barrier. Also

189
00:20:58.049 --> 00:21:02.610
if DOM is the composition mechanism, it already
composes really nicely. You can put a span,

190
00:21:02.610 --> 00:21:07.870
DIVs, all kinds of stuff, right? If you have
that as the framework that you

191
00:21:07.870 --> 00:21:13.070
use for composability, that means that you
have compatible composability. So if you have

192
00:21:13.070 --> 00:21:18.940
a widget from Framework A and Framework B,
they can live together harmoniously without

193
00:21:18.940 --> 00:21:24.240
having to figure out which widgets they have
-- it's just DOM.

194
00:21:24.240 --> 00:21:28.490
&gt;&gt;Dimitri Glazkov: Right. And where that one
widget begins and where one widget ends. That's

195
00:21:28.490 --> 00:21:32.070
another important thing. Let's be clear. Web
components is not a set of those widgets.

196
00:21:32.070 --> 00:21:35.429
It's just a platform on which the future frameworks,
you know, the future where we're from? Can

197
00:21:35.429 --> 00:21:36.950
build those new frameworks.
&gt;&gt;Alex Komoroske: So it's a foundation for

198
00:21:36.950 --> 00:21:40.549
this stuff. Okay. So this -- actually, Web
components

199
00:21:40.549 --> 00:21:47.549
as you may have guessed, makes all of this
stuff real. So we're going to show you what

200
00:21:49.120 --> 00:21:54.659
it looks like in practice. So let me switch.
This is the demo that we showed; it's built

201
00:21:54.659 --> 00:21:59.090
using the best practices of today. And this
is what the -- what the one with

202
00:21:59.090 --> 00:22:03.299
Web components looks like. Right? Looks exactly
the same.

203
00:22:03.299 --> 00:22:08.590
&gt;&gt;Dimitri Glazkov: Yeah. Right. So in the
future, all applications are going to look

204
00:22:08.590 --> 00:22:13.700
exactly the same, right? This is the lesson
that we are learning? Well, actually, no.

205
00:22:13.700 --> 00:22:17.970
What's interesting here, this is actually
a functional application, but instead of all

206
00:22:17.970 --> 00:22:21.779
of these weird spans and DIVs inside of it,
it has a very clear, very concise markup.

207
00:22:21.779 --> 00:22:28.009
This markup is exactly the same as the actual
DOM structure off this document, right?

208
00:22:28.009 --> 00:22:32.669
So whatever you ship over the wire is exactly
the same thing that is represented as DOM.

209
00:22:32.669 --> 00:22:36.480
You don't have to create this thing that the
frameworks -- the rendering decorate where

210
00:22:36.480 --> 00:22:43.480
you just first load the page and then you
go find those things that you want to upgrade

211
00:22:43.620 --> 00:22:50.230
and make them into the right stuff, you don't
have to do that anymore. All of this happens

212
00:22:50.230 --> 00:22:52.210
magically?
&gt;&gt;Alex Komoroske: Magically, that's actually

213
00:22:52.210 --> 00:22:58.490
a good point. I was going to ask, clearly
we saw all of the extra stuff that's required

214
00:22:58.490 --> 00:23:04.799
to make this poll demo work. But it's not
here, so what's going on? All right. Well,

215
00:23:04.799 --> 00:23:08.610
let's look.
&gt;&gt;Dimitri Glazkov: And kind of the way that

216
00:23:08.610 --> 00:23:13.880
you look at this is in the Web platform, we
never had this opportunity to -- to build

217
00:23:13.880 --> 00:23:18.639
in layering. Layering is like a cool thing.
It's not -- it's also related to the lasagne

218
00:23:18.639 --> 00:23:21.759
thing. But all of the frameworks, if you look
at

219
00:23:21.759 --> 00:23:28.759
them together, all of the JavaScript frameworks
that are built out today are nothing but attempts

220
00:23:29.789 --> 00:23:36.100
to provide a layering in the browser. Because
what they want to do is they want to create

221
00:23:36.100 --> 00:23:39.580
an environment in which the users of this
framework don't have to think about the details.

222
00:23:39.580 --> 00:23:43.379
And then the developers of the new widgets,
the builders of the components, the ones who

223
00:23:43.379 --> 00:23:45.690
work inside of the framework, actually have
flexibility and power to, you know, provide

224
00:23:45.690 --> 00:23:45.940
those new services to the -- to the higher
level.

225
00:23:45.879 --> 00:23:51.330
&gt;&gt;Alex Komoroske: By having this built into
the browser, it means that there's no build

226
00:23:51.330 --> 00:23:55.639
step, there's no extra framework you can use,
you might be able to build the users of this

227
00:23:55.639 --> 00:24:02.639
components, which is what the vast majority
of the Web developers will be doing, it's

228
00:24:06.220 --> 00:24:11.200
super simple, you do an import, you use these
tags, it just works, however, if you really

229
00:24:11.200 --> 00:24:17.100
want to understand the magic going on behind
this, you need to go a little bit behind the

230
00:24:17.100 --> 00:24:22.240
scenes, you have to see these more powerful
concepts that are a little bit more confusing

231
00:24:22.240 --> 00:24:27.480
that have a lot more to learn about.
&gt;&gt;Dimitri Glazkov: We have a choice here,

232
00:24:27.480 --> 00:24:33.080
do you guys want to continue or should we
just stop right here, behind the scenes!!??

233
00:24:33.080 --> 00:24:35.870
Yes.
&gt;&gt;Alex Komoroske: Okay. So we're going to

234
00:24:35.870 --> 00:24:42.870
go behind the scenes. If at this point you
say what the heck is going on, that's okay,

235
00:24:43.019 --> 00:24:47.340
you can just be a user of these components
and not have to worry about it. Dimitri, why

236
00:24:47.340 --> 00:24:51.190
don't you take us behind the scenes?
&gt;&gt;Dimitri Glazkov: First we're going to talk

237
00:24:51.190 --> 00:24:55.429
about Shadow DOM. Believe it or not, Shadow
DOM already exists on the browsers, well and

238
00:24:55.429 --> 00:25:01.269
alive, and the one and good example would
be a video tag. Let's take a look at this

239
00:25:01.269 --> 00:25:05.779
video tag right here embedded into this presentation,
because, you know, our presentations are actually

240
00:25:05.779 --> 00:25:11.049
HTML as well. Right? Okay. So as you can see
you have really neat video tag right there,

241
00:25:11.049 --> 00:25:15.269
right? Video/video, everything looks great,
but there's actually more stuff happening.

242
00:25:15.269 --> 00:25:20.129
There's slider there in the time line, and
all these things. How do browser developers

243
00:25:20.129 --> 00:25:25.480
do this? Right? How do they draw those things?
Well, they have a couple of choices: One of

244
00:25:25.480 --> 00:25:31.740
them is build the whole thing from scratch
to build their own, testing right into this

245
00:25:31.740 --> 00:25:36.169
thing, and we're kind of actually lazy and
we didn't do that. What we did instead is

246
00:25:36.169 --> 00:25:41.580
we invented a way where we could stash away
a DOM tree where we can build those things

247
00:25:41.580 --> 00:25:46.080
out of just normal CSS and DOM, and operate
on them just the normal way, and then we present

248
00:25:46.080 --> 00:25:48.620
it to you as if this is a built-in functionality,
and this DOM tree, we obviously called Shadow

249
00:25:48.620 --> 00:25:49.509
DOM, right?
It's in the shadows.

250
00:25:49.509 --> 00:25:52.490
&gt;&gt;Alex Komoroske: So how can we see what's
going on here?

251
00:25:52.490 --> 00:25:58.299
&gt;&gt;Dimitri Glazkov: So one of the interesting
things is in Chrome browser, today you can

252
00:25:58.299 --> 00:26:04.110
opt in to this experiment and you can say,
well, I want to be able to show Shadow DOM,

253
00:26:04.110 --> 00:26:09.379
and so if you're a load inspector, you will
see that, when you inspect the video, suddenly

254
00:26:09.379 --> 00:26:14.029
there's more stuff inside of it. It's that
thing called shadow root. That's that hidden

255
00:26:14.029 --> 00:26:19.539
DOM that you can't see. Let's go inside of
it. Oh, there's a DIV. Oh, interesting input

256
00:26:19.539 --> 00:26:26.539
type button. That's actually the play button,
and then the input type or this style, open

257
00:26:27.779 --> 00:26:34.070
that one right there, that will be a type
range. That's the slider, right? That's the

258
00:26:34.070 --> 00:26:39.220
thing. So what we did is we really,
really cheated in a pretty big way, right?

259
00:26:39.220 --> 00:26:43.679
We just -- instead of building all this stuff
in C++, you know, and all this stuff, it's

260
00:26:43.679 --> 00:26:47.960
just DOM. And, in fact, when you play this
video, and you know how the timeline goes

261
00:26:47.960 --> 00:26:53.350
away, that is just a CSS transition, right?
It's nothing special.

262
00:26:53.350 --> 00:26:58.419
&gt;&gt;Alex Komoroske: So what you're saying is
that this stuff, this isn't new, Shadow DOM

263
00:26:58.419 --> 00:27:03.820
has existed in some browsers already. What
is new is exposing it to web developers.

264
00:27:03.820 --> 00:27:09.600
&gt;&gt;Dimitri Glazkov: Right. So what we did next,
we said, well, wouldn't it be cool if Web

265
00:27:09.600 --> 00:27:10.990
developers could have the same power, and
wouldn't you agree that would be cool? Would

266
00:27:10.990 --> 00:27:12.320
that be cool?
All right. So that's what Shadow DOM is about.

267
00:27:12.320 --> 00:27:15.889
It's about encapsulation and providing you
with the ability to add these extra chunks

268
00:27:15.889 --> 00:27:19.169
on DOM tree and render them as if they're
part of the bigger rendering.

269
00:27:19.169 --> 00:27:26.169
&gt;&gt;Alex Komoroske: Okay. This is kind of complicated,
so let's go through this in a little bit more

270
00:27:26.389 --> 00:27:29.200
depth.
&gt;&gt;Dimitri Glazkov: All right. Sounds good.

271
00:27:29.200 --> 00:27:36.200
So the next slide here that we see, we have
a nice diagram. As you can see it's peas and

272
00:27:36.549 --> 00:27:41.480
radishes, clearly. So the green notes, the
peas represent the document tree, that's the

273
00:27:41.480 --> 00:27:48.379
actual tree that you see when you go into
the inspector, and that's the one that is

274
00:27:48.379 --> 00:27:53.169
parsed, when the browser parses your markup,
and the pink stuff is the Shadow DOM tree,

275
00:27:53.169 --> 00:27:59.409
so the Shadow DOM allows you to associate
a special subtree with every DOM element,

276
00:27:59.409 --> 00:28:06.409
and then this subtree, you can build and create
DIVs and all kinds of things inside of it,

277
00:28:06.480 --> 00:28:11.700
but then when it's rendered, you actually
see the shadow subtree rendered instead of

278
00:28:11.700 --> 00:28:18.149
the contents of that node, the element that
you associate it with.

279
00:28:18.149 --> 00:28:23.429
&gt;&gt;Alex Komoroske: Okay. So let me go over
this one more time. So what we have here on

280
00:28:23.429 --> 00:28:29.840
the left, we have these green nodes, or just
the logical DOM that we're all familiar with,

281
00:28:29.840 --> 00:28:36.840
and then off to the right we have a sort of
parallel DOM hierarchy.

282
00:28:36.940 --> 00:28:43.769
&gt;&gt;Dimitri Glazkov: That's right.
&gt;&gt;Alex Komoroske: And so it's sort of stashed

283
00:28:43.769 --> 00:28:49.960
off to the side. But if the Shadow DOM is
defined, when we render, what we see, is as

284
00:28:49.960 --> 00:28:52.899
though the pink nodes were underneath the
green nodes.

285
00:28:52.899 --> 00:28:56.159
&gt;&gt;Dimitri Glazkov: That's right.
&gt;&gt; Alex Komoroske: So magically the green

286
00:28:56.159 --> 00:29:00.070
ones are still there.
&gt;&gt; Dimitri Glazkov: Right. So this is a really,

287
00:29:00.070 --> 00:29:07.070
really cool concept right here, it's a render
time composition. You don't have to move those

288
00:29:07.820 --> 00:29:11.749
nodes around. They're still there -- if you
walk your, you know, first child, next child

289
00:29:11.749 --> 00:29:15.330
thing, next sibling, there's going to be only
the green tree inside of it, but at render

290
00:29:15.330 --> 00:29:18.799
time, the shadow DOM tree will be placed on
top and rendered as if it's there.

291
00:29:18.799 --> 00:29:23.990
&gt;&gt; Alex Komoroske: I had real stuff in that
-- in that real in the green DOM tree. I want

292
00:29:23.990 --> 00:29:27.700
to show that. It's kind of weird this is sort
of (indiscernible)

293
00:29:27.700 --> 00:29:28.179
&gt;&gt;Dimitri Glazkov: Right. Yeah, this use case
is pretty good for a video, but you suddenly

294
00:29:28.179 --> 00:29:35.179
lost that other green peas things that were
hanging off the element, so what do we do

295
00:29:35.200 --> 00:29:37.809
there?
We have this really, really cool concept called

296
00:29:37.809 --> 00:29:42.470
insertion point. Insertion points are special
elements that you can put into your Shadow

297
00:29:42.470 --> 00:29:48.389
DOM subtree to designate where the children
of the shadow root will poke through, and

298
00:29:48.389 --> 00:29:52.950
so as you can see there, I have two insertion
points and when it's rendering, again at render

299
00:29:52.950 --> 00:29:56.799
time only, those children will shine through
inside of the Shadow DOM tree, so in a way

300
00:29:56.799 --> 00:30:03.799
it allows you to have this way to compose
the Shadow DOM subtree around your documents

301
00:30:08.499 --> 00:30:10.950
node.
&gt;&gt; Alex Komoroske: This is the same thing

302
00:30:10.950 --> 00:30:12.600
that frameworks are doing today, right, because
you have like your markup, then you call this

303
00:30:12.600 --> 00:30:19.600
magic decorate method on it, then it swaps
your DOM directly into the place it needs

304
00:30:20.889 --> 00:30:23.460
to be to render.
&gt;&gt;Dimitri Glazkov: That's right.

305
00:30:23.460 --> 00:30:28.830
&gt;&gt;Alex Komoroske: This leaves it in the same
place as before so you can still interact

306
00:30:28.830 --> 00:30:33.279
with it like you did before.
&gt;&gt;Dimitri Glazkov: The cool thing here, exactly

307
00:30:33.279 --> 00:30:40.279
right, is that this is entirely render time,
so you don't have to touch the DOM, in fact

308
00:30:44.110 --> 00:30:49.190
the DOM stays exactly the same. What happens
is this happens only at render time, so only

309
00:30:49.190 --> 00:30:55.899
when this stuff shows up on the page is things
appear in the right spot.

310
00:30:55.899 --> 00:31:02.159
&gt;&gt;Alex Komoroske: Okay. So this is all very
abstract. Let's go through a more concrete

311
00:31:02.159 --> 00:31:04.669
example.
&gt;&gt;Dimitri Glazkov: Sure. For example, the

312
00:31:04.669 --> 00:31:09.019
&lt;x-choice&gt; element that we have just seen
in the markup example here is implemented

313
00:31:09.019 --> 00:31:16.019
using Shadow DOM, so you can see there it's
a very simple subtree. The Shadow DOM subtree

314
00:31:18.409 --> 00:31:25.409
has a DIV in it and has a little mask which
stands for the little icon there, but then

315
00:31:25.889 --> 00:31:32.889
you have this really interesting thing called
content. Content is a name of the insertion

316
00:31:35.519 --> 00:31:42.519
point; it's the HTML element which represents
the insertion point. And then you see it has

317
00:31:45.320 --> 00:31:50.059
a select attribute in a value that looks very
similar to something. What does it look like?

318
00:31:50.059 --> 00:31:52.330
People from the audience?
Is that --

319
00:31:52.330 --> 00:31:55.450
&gt;&gt;Alex Komoroske: CSS?
&gt;&gt;Dimitri Glazkov: Right, so that's what you

320
00:31:55.450 --> 00:32:02.450
use. You use CSS selectors to say which items
will show through in my insertion point? And

321
00:32:04.860 --> 00:32:11.860
so what we say here is the H3, first of
type, which is the first H3 we find as child,

322
00:32:12.740 --> 00:32:16.649
is going to show up right here instead of
this thing when rendering, and then we have

323
00:32:16.649 --> 00:32:21.119
a little aside item for our tool tip, and
then we say, eh, everything else, universal

324
00:32:21.119 --> 00:32:24.200
selector goes inside there.
&gt;&gt;Alex Komoroske: So what we're doing basically

325
00:32:24.200 --> 00:32:28.100
is we're using CSS to decide which elements
to sort of funnel and tele-port where when

326
00:32:28.100 --> 00:32:30.169
we render.
&gt;&gt;Dimitri Glazkov: That's right.

327
00:32:30.169 --> 00:32:35.690
&gt;&gt;Alex Komoroske: Okay. So what we're actually
kind of doing here too is we're almost defining

328
00:32:35.690 --> 00:32:42.690
a declarative API. We say if you provide some
H3s, the first ones, what we'll use as the

329
00:32:42.850 --> 00:32:48.309
actual name for the thing and later ones we'll
just establish another --

330
00:32:48.309 --> 00:32:52.730
&gt;&gt;Dimitri Glazkov: So you have this not only
mechanism to stash things away into the subtree,

331
00:32:52.730 --> 00:32:55.419
you also have a mechanism to now declaratively
project some of the items. You don't have

332
00:32:55.419 --> 00:33:02.419
to write a bit of script to do this. This
is all built in. This is standard stuff. Awesome?

333
00:33:03.919 --> 00:33:10.919
Awesome. All right. Okay.
And so the next thing is we need to take these

334
00:33:12.570 --> 00:33:17.419
Shadow DOM subtrees and build them into something
useful, and that's where custom elements come

335
00:33:17.419 --> 00:33:21.730
in. Custom elements allow you to define a
new element, and for that purpose we have

336
00:33:21.730 --> 00:33:25.580
the new HTML element -- that's a good name
for it -- which allows you to specify and

337
00:33:25.580 --> 00:33:27.619
say, well, there's my element, &lt;x-choice&gt;,
and inside of it, the template. Remember the

338
00:33:27.619 --> 00:33:31.499
template? That's where my Shadow DOM subtree
instance is. Every time I create a new &lt;x-choice&gt;,

339
00:33:31.499 --> 00:33:33.539
that will be stamped out and create a new
instance of the Shadow DOM subtree. And then

340
00:33:33.539 --> 00:33:37.740
you can run script inside of it to do lots
of cool things. For example, you can declare

341
00:33:37.740 --> 00:33:41.090
an imperative API, and say, well, the &lt;x-choice&gt;
method needs extra methods -- or &lt;x-choice&gt;

342
00:33:41.090 --> 00:33:45.350
object needs extra methods or properties on
it, and you can do this. And also you can

343
00:33:45.350 --> 00:33:50.470
define things like life cycle hooks, like
I want to run some scripts, register events

344
00:33:50.470 --> 00:33:54.690
every time a new instance is created, right?
That's useful stuff.

345
00:33:54.690 --> 00:34:01.690
&gt;&gt;Alex Komoroske: So that's how you define
it as a component author. For component users

346
00:34:03.070 --> 00:34:10.070
all you have to do, you include this link
to the components and point to the document

347
00:34:13.080 --> 00:34:20.080
where this thing is defined, and then you
can just use it like any other built-in tag

348
00:34:28.970 --> 00:34:35.970
in your page. And also, so you talked about
those imperative APIs we defined here, was

349
00:34:36.630 --> 00:34:43.630
selected on this thing. If I go through and
grab this element out of the DOM using various

350
00:34:49.080 --> 00:34:54.429
lectures, say, I can just call that method
directly on that object, the DOM object. The

351
00:34:54.429 --> 00:34:57.710
DOM object is the object.
&gt;&gt;Dimitri Glazkov: Right. And there's no faking

352
00:34:57.710 --> 00:35:02.270
there, right? There's no need to create separate
objects or view or things, your DOM objects

353
00:35:02.270 --> 00:35:07.470
are the actual things that you operate on.
When you query the standard DOM APIs, use

354
00:35:07.470 --> 00:35:12.760
them, whatever comes back to you is going
to be those things that you define.

355
00:35:12.760 --> 00:35:17.190
&gt;&gt;Alex Komoroske: You don't have to know the
convention of the framework, how we stash

356
00:35:17.190 --> 00:35:24.190
things and how DOM are related.
&gt;&gt;Dimitri Glazkov: And also the link rail,

357
00:35:26.920 --> 00:35:33.390
the new rail components, gives you the opportunity
to create the packaging mechanism to build

358
00:35:33.390 --> 00:35:40.390
packaging right into the browser. You don't
have to have a build script that then compiles

359
00:35:40.930 --> 00:35:47.730
all this thing into one gob of code. You don't
have to have five script tags loaded into

360
00:35:47.730 --> 00:35:54.570
your page. One link rail, you can load other
link rails if you want, you will have more

361
00:35:54.570 --> 00:36:01.570
components that you want to reuse, and that's
all it takes. So it's packaging. It's reuse.

362
00:36:05.050 --> 00:36:10.030
And also the ability to have one DOM hierarchy
instead of multiple tree objects.

363
00:36:10.030 --> 00:36:17.030
&gt;&gt;Alex Komoroske: So one of the problems we
have today on the Web platform is styles sort

364
00:36:18.510 --> 00:36:23.640
of naturally go all over the place. And so
when you're designing a style for your component,

365
00:36:23.640 --> 00:36:29.700
it might go and mess up somebody else inadvertently.
&gt;&gt;Dimitri Glazkov: That is a very common problem,

366
00:36:29.700 --> 00:36:35.950
especially if your object tree is pretty complex.
At some point you really start losing sight

367
00:36:35.950 --> 00:36:42.950
of where -- which selector, and you know,
how many of you guys have committed the Cardinal

368
00:36:46.080 --> 00:36:53.080
sin of pound important? Okay. Be honest here
now. And so in Shadow DOM, there is some really

369
00:36:53.140 --> 00:36:58.490
cool stuff here. In Shadow DOM the styles
are implicitly or explicitly scoped inside

370
00:36:58.490 --> 00:37:05.490
of the Shadow DOM subtree. So even if you
put a universal selector inside of the Shadow

371
00:37:07.200 --> 00:37:14.200
DOM subtree, it will only apply instead of
inside of the Shadow DOM subtree. So it will

372
00:37:14.660 --> 00:37:18.960
not go and bleed out into a document. Similarly,
styles that you apply in the document will

373
00:37:18.960 --> 00:37:23.410
not bleed into your Shadow DOM subtree. So
you have a very nice style separation boundary

374
00:37:23.410 --> 00:37:26.560
which really works extremely well for widget
case scenarios where you want to have the

375
00:37:26.560 --> 00:37:33.330
boundaries defined and you don't want people
to stomp on your styles, and you want to keep

376
00:37:33.330 --> 00:37:40.330
some sort of sanity inside of your application.
&gt;&gt;Alex Komoroske: Okay. So that is sort of

377
00:37:41.310 --> 00:37:45.440
behind the scenes. Thank you for that, Dimitri.
I actually just got a call from a designer,

378
00:37:45.440 --> 00:37:52.440
he's watching on the live stream, and he says
that we shouldn't have used accordion, we

379
00:37:55.280 --> 00:38:02.280
should have used a tab strip in our demo.
&gt;&gt;Dimitri Glazkov: I actually agree with the

380
00:38:02.590 --> 00:38:08.910
designer, accordions are kind of weird anyway,
right, a cross between a piano and a harmonica,

381
00:38:08.910 --> 00:38:15.910
really? Oh, you're talking about a widget.
I'm sorry. Okay, yes. So that is actually

382
00:38:17.380 --> 00:38:18.680
really easy,
because we're using just markup, we're just

383
00:38:18.680 --> 00:38:21.630
swapping tags, so the idea of swapping out
components now becomes just changing your

384
00:38:21.630 --> 00:38:26.690
markup, right? So now we have to just include
in your component and then change X accordion

385
00:38:26.690 --> 00:38:31.830
to be X tabs, and it's, you know, it's -- we'll
just see what happens, right?

386
00:38:31.830 --> 00:38:36.950
&gt;&gt;Alex Komoroske: Okay. So you say I have
to include the new component, which I actually

387
00:38:36.950 --> 00:38:40.650
already did when you were talking, and I needed
to change X-accordion to X-tabs, is that right?

388
00:38:40.650 --> 00:38:43.260
Save that, switch back to the demo and just
refresh.

389
00:38:43.260 --> 00:38:46.450
&gt;&gt;Dimitri Glazkov: And now we have tabs. Applause,
please. [ APPLAUSE ]

390
00:38:46.450 --> 00:38:51.870
&gt;&gt;Dimitri Glazkov: No wing suit drop, no wing
suits, but at least, you know, some cool tricks,

391
00:38:51.870 --> 00:38:55.750
right, at some point. All right. So this looks
really, really awesome and I'm already kind

392
00:38:55.750 --> 00:39:02.750
of enamored with this. I don't know about
you guys. But I really want this poll on my

393
00:39:04.580 --> 00:39:08.860
website now.
&gt;&gt;Alex Komoroske: On your site.

394
00:39:08.860 --> 00:39:15.860
&gt;&gt;Dimitri Glazkov: On my site.
&gt;&gt;Alex Komoroske: just so guys know, I'll

395
00:39:16.080 --> 00:39:20.920
show you what Dimitri's website looks like.
It's beautiful. It's really special. It's

396
00:39:20.920 --> 00:39:27.920
awesome. So, no offense, Dimitri. I definitely
hear that you want to have this poll on your

397
00:39:30.990 --> 00:39:37.990
site. I'm a little bit concerned that you
might mark with it a bit, but that's okay.

398
00:39:38.160 --> 00:39:43.600
I'm going to package this up for you so that
you can include it on your site without you

399
00:39:43.600 --> 00:39:49.960
worrying about how you're going to set this
up. First of all, I don't want you to be able

400
00:39:49.960 --> 00:39:54.070
to change the text for the choices, that way
you could stack the deck.

401
00:39:54.070 --> 00:39:58.920
&gt;&gt;Dimitri Glazkov: I could add my own choices,
right? CSS 3. Why not CSS 4 or 7?

402
00:39:58.920 --> 00:40:04.050
&gt;&gt;Alex Komoroske: So what I'm going to do
actually is I'm going to create a new element

403
00:40:04.050 --> 00:40:07.720
called awesome poll, obviously.
&gt;&gt;Dimitri Glazkov: Has to be awesome, awesome

404
00:40:07.720 --> 00:40:11.770
site, right.
&gt;&gt;Alex Komoroske: And then to hide it from

405
00:40:11.770 --> 00:40:17.210
people who are vetting it, I'm going to take
and put in my Shadow DOM one of those polls

406
00:40:17.210 --> 00:40:19.420
so you can't see it.
&gt;&gt;Dimitri Glazkov: Okay.

407
00:40:19.420 --> 00:40:26.180
&gt;&gt;Alex Komoroske: Then what I'll do is I'll
allow yourself to define sort of where this

408
00:40:26.180 --> 00:40:32.950
configuration is, and I'll then create all
the stuff inside the X poll in my own little

409
00:40:32.950 --> 00:40:36.400
area.
&gt;&gt;Dimitri Glazkov: Have you guys seen inception?

410
00:40:36.400 --> 00:40:38.690
And if you haven't, please leave the room
now. It's like we have to go one level deeper,

411
00:40:38.690 --> 00:40:42.020
right? Shadow DOM inside of the Shadow DOM.
You know, seriously cool stuff.

412
00:40:42.020 --> 00:40:44.860
&gt;&gt;Alex Komoroske: Okay. So what we'll do,
so then you can just put that right in your

413
00:40:44.860 --> 00:40:47.100
page and you will have the poll right there.
Awesome.

414
00:40:47.100 --> 00:40:50.680
&gt;&gt;Dimitri Glazkov: Wow, this is -- well...
&gt;&gt;Alex Komoroske: What?

415
00:40:50.680 --> 00:40:56.720
&gt;&gt;Dimitri Glazkov: It kind of looks not like
my site actually. The place my vote clearly

416
00:40:56.720 --> 00:41:00.640
doesn't have enough exclamation points. I
don't know. I kind of want to customize it

417
00:41:00.640 --> 00:41:01.770
a little.
&gt;&gt;Alex Komoroske: Okay. Okay. So you're right.

418
00:41:01.770 --> 00:41:06.430
This is actually technically just as good
as an iframe basically. Doesn't give you any

419
00:41:06.430 --> 00:41:10.830
way to customize it. So you have such an interesting
vocabulary and way of speaking.

420
00:41:10.830 --> 00:41:13.500
&gt;&gt;Dimitri Glazkov: I do. I'm a very colorful
person.

421
00:41:13.500 --> 00:41:18.000
&gt;&gt;Alex Komoroske: I don't want you to have
control over everything, but I guess -- I

422
00:41:18.000 --> 00:41:23.660
guess subtitle and the button will allow you
to override. So I'm going to define in my

423
00:41:23.660 --> 00:41:29.970
poll, I'm going to allow you to have a declarative
API, allow you to define your own aside for

424
00:41:29.970 --> 00:41:33.960
that subtitle and your own label text.
&gt;&gt;Dimitri Glazkov: That sounds good.

425
00:41:33.960 --> 00:41:39.190
&gt;&gt;Alex Komoroske: What we'll do is we'll switch
back to your site. Right here. I already wrote

426
00:41:39.190 --> 00:41:43.320
in here where you had this customization,
save that, switch back to my demo, refresh,

427
00:41:43.320 --> 00:41:46.360
and vote for CSS 3 because it's awesome, and
vote now.

428
00:41:46.360 --> 00:41:49.390
&gt;&gt;Dimitri Glazkov: Now I have plenty of exclamation
points, right, guys?

429
00:41:49.390 --> 00:41:51.510
Think about what just happened. Just stop
for a second. I have customized a poll without

430
00:41:51.510 --> 00:41:53.480
mucking it up, because Alex is a developer
of this custom component, of this web component,

431
00:41:53.480 --> 00:41:56.670
the awesome poll, only gave me the guardrails
to step into this specific areas, and that's

432
00:41:56.670 --> 00:42:03.670
all. And the way I do this is by markup. I
don't have to go GS and do some weird muckety

433
00:42:04.810 --> 00:42:11.810
muckety JSON stuff. Well, you know, the font
kind of looks like a clean and creepy. I want

434
00:42:12.960 --> 00:42:18.090
something huggable and wonderful. What could
be more wonderful than comic SANS? It's from

435
00:42:18.090 --> 00:42:23.050
the perfection, right? So what we're going
to do -- I want to say

436
00:42:23.050 --> 00:42:28.599
that I'm not going to do this unless you let
me customize the font.

437
00:42:28.599 --> 00:42:34.330
&gt;&gt;&gt; I admire design aesthetic, I think it's
very unique, but I don't want you to be able

438
00:42:34.330 --> 00:42:40.810
to run all over this stuff and break everything,
so I guess what I'm going to allow you to

439
00:42:40.810 --> 00:42:43.600
do is change a couple of things in here, before
I do that, I'm want to walk you through how

440
00:42:43.600 --> 00:42:48.070
I'm going to do this. So CSS variables is
one new technology, the spec is nearing completion.

441
00:42:48.070 --> 00:42:51.600
We actually have it implemented in Chrome
behind the flag. CSS variables --

442
00:42:51.600 --> 00:42:54.920
&gt;&gt;Dimitri Glazkov: Wait, wait, wait, did you
just say CSS variables? Guys, are you getting

443
00:42:54.920 --> 00:42:57.830
this? Are you getting the CSS variables?
&gt;&gt;Alex Komoroske: Yeah, it's kind of cool,

444
00:42:57.830 --> 00:43:00.770
right, because today you have to have, define
pound FFF, one, two, three, four, like 8,000

445
00:43:00.770 --> 00:43:05.030
places in you're CSS. This allows you basically
to define it once. So they're actually really,

446
00:43:05.030 --> 00:43:09.420
really powerful. You can do all kinds of cool
stuff with cascade and referencing other variables.

447
00:43:09.420 --> 00:43:13.660
We don't need that today. I really encourage
you guys to look more into CSS variables and

448
00:43:13.660 --> 00:43:16.090
all the crazy, amazing stuff it can do, but
the cool thing about CSS variables is it allows

449
00:43:16.090 --> 00:43:19.810
a very natural place for me to allow you to
override what I want. So when I'm writing

450
00:43:19.810 --> 00:43:22.850
my poll, I'll use CSS variables very deliberately
in places that I want you to be able to hook

451
00:43:22.850 --> 00:43:26.840
in and change my stuff.
&gt;&gt;Dimitri Glazkov: So these are my styling

452
00:43:26.840 --> 00:43:33.810
hooks. I can't go anywhere and mess with anything
else.

453
00:43:33.810 --> 00:43:37.770
&gt;&gt;Alex Komoroske: I'm only giving you -- allowing
you to change a few things. So in this case

454
00:43:37.770 --> 00:43:44.770
I'll allow you to change maybe the font and
also the color that we use as the primary

455
00:43:51.600 --> 00:43:52.010
color.
&gt;&gt;Dimitri Glazkov: Colors are important.

456
00:43:52.010 --> 00:43:54.760
&gt;&gt;Alex Komoroske: What you'll do on your sheet
is you'll just style -- direct some styles,

457
00:43:54.760 --> 00:43:56.600
these variables at my poll, and then it will
magically just work.

458
00:43:56.600 --> 00:44:00.740
&gt;&gt;Dimitri Glazkov: I want to see this.
&gt;&gt;Alex Komoroske: I'm going to switch to CSS,

459
00:44:00.740 --> 00:44:03.240
and I'm going to uncomment -- I've already
written --

460
00:44:03.240 --> 00:44:07.600
&gt;&gt;Dimitri Glazkov: You made the right choice.
&gt;&gt;Alex Komoroske: Comic sans, I thought you

461
00:44:07.600 --> 00:44:10.020
would like that. I'm going to switch back
to my -- to your site. Refresh. There you

462
00:44:10.020 --> 00:44:13.040
go --
&gt;&gt;Dimitri Glazkov: This is now awesome. I

463
00:44:13.040 --> 00:44:15.860
can do this. [ APPLAUSE ]
But again take a second to think about this.

464
00:44:15.860 --> 00:44:17.780
Now you as the developer of the widget or
a component can give specific instructions

465
00:44:17.780 --> 00:44:18.490
to the browser on what to permit the user
of the component to do. Isn't that awesome?

466
00:44:18.490 --> 00:44:18.740
Isn't that styling APIs?
Who wants this? Who wants this? [ Applause

467
00:44:18.670 --> 00:44:18.920
]
&gt;&gt;Alex Komoroske: I want this.

468
00:44:18.750 --> 00:44:19.450
&gt;&gt;Dimitri Glazkov: All right!
&gt;&gt;Alex Komoroske: Cool. So we've walked you

469
00:44:19.450 --> 00:44:26.450
through a couple of examples of how to use
this stuff and also some of the tactical uses

470
00:44:26.640 --> 00:44:31.190
you can have with this.
And actually is a bigger deal than just that.

471
00:44:31.190 --> 00:44:37.110
The way that I think of that actually -- I'm
actually a little bit dramatic, I guess sometimes,

472
00:44:37.110 --> 00:44:44.110
is the declarative Renaissance. So way long
time go, you just used HTML, you just wrote

473
00:44:50.800 --> 00:44:57.800
(indiscernible) code straightforward, and
then we started using JavaScript a lot for

474
00:45:04.410 --> 00:45:09.210
a lot of stuff, right? But now this allows
people to return back to writing things very

475
00:45:09.210 --> 00:45:11.020
declaratively in most cases. There's a lot
of stuff that allows that to happen.

476
00:45:11.020 --> 00:45:17.700
&gt;&gt;&gt; And like one of the most important things
that I think is -- the ability to actually

477
00:45:17.700 --> 00:45:22.780
talk via an API. Or tell the browser, specify
to -- to let the user know: These are the

478
00:45:22.780 --> 00:45:26.970
things that you can do and no more. And no
matter how much you hack about on this or

479
00:45:26.970 --> 00:45:27.680
do whatever this -- whatever, you can't mess
up my stuff. My stuff is safe. I gave you

480
00:45:27.680 --> 00:45:32.160
these hooks, that's all that you can do. You
have CSS variables for the styling API and

481
00:45:32.160 --> 00:45:36.430
you have the components, the Shadow DOM technology,
to allow you to have the markup API. And then

482
00:45:36.430 --> 00:45:40.590
you, of course, can define -- define the imperative
API on custom elements. So the Web components

483
00:45:40.590 --> 00:45:41.270
give you those three things. To essentially
explicitly define APIs on the components now.

484
00:45:41.270 --> 00:45:41.520
Awesome stuff.
&gt;&gt;Alex Komoroske: So another one that's really

485
00:45:41.370 --> 00:45:41.620
cool is we talked about before, if DOM is
your composition mechanism, then components

486
00:45:41.520 --> 00:45:43.590
from different libraries just work together.
This is neat, I'm like oh, cool, you can get

487
00:45:43.590 --> 00:45:46.310
whatever widget you want. But it also means
that today we have to spend all of this time

488
00:45:46.310 --> 00:45:49.640
recreating tabstrips and calendar controls
and everything in each and every framework.

489
00:45:49.640 --> 00:45:53.720
And, of course, each time you do it, you probably
aren't going to get 100% perfect, but 80%

490
00:45:53.720 --> 00:45:55.410
of the way there. But if everyone can use
any calendar component, then people will start

491
00:45:55.410 --> 00:46:02.410
using the better one, it will be more of an
incentive to build really, really awesome,

492
00:46:07.390 --> 00:46:14.390
accessible, beautiful, interactive components.
You will see a lot better components as well.

493
00:46:14.980 --> 00:46:15.230
&gt;&gt;Dimitri Glazkov: Right. No longer you have
to pledge allegiance to a specific framework.

494
00:46:14.980 --> 00:46:15.420
That little mini browser that was built inside
of your browser, you can say well, no longer

495
00:46:15.420 --> 00:46:16.370
I am just specifically a backbone man. I can
just use markup and mix them around, because

496
00:46:16.370 --> 00:46:18.070
this is just markup. It's a common media.
Just standard stuff is in the DOM, in your

497
00:46:18.070 --> 00:46:18.410
browser.
If you look at this, you can clearly see another

498
00:46:18.410 --> 00:46:19.390
advantage. For a -- for a company or a team
of people working on the same Web applications,

499
00:46:19.390 --> 00:46:20.840
ability to encapsulate offers tremendous advantages,
right? Because now you can work on this stuff

500
00:46:20.840 --> 00:46:21.090
without worrying about stepping on each other's
toes, you can have a clean separation, you

501
00:46:20.840 --> 00:46:21.090
can build work flows that actually make sense
and not have this crazy schemes of discipline

502
00:46:20.840 --> 00:46:21.090
built into this. Making that sure your selectors
have to start with #foo and all of that thing

503
00:46:20.840 --> 00:46:21.090
that you have to do today when you build complex
applications.

504
00:46:20.950 --> 00:46:21.200
&gt;&gt;Alex Komoroske: Cool. So the other case
is that again most cases are fully declarative.

505
00:46:21.180 --> 00:46:21.430
So these people who don't know script, they
don't have a CS degree, they can still be

506
00:46:21.390 --> 00:46:22.530
really productive. They can build really cool
stuff with these components.

507
00:46:22.530 --> 00:46:25.070
&gt;&gt;Dimitri Glazkov: Right. And one of the other
things here is because the browser is taking

508
00:46:25.070 --> 00:46:25.330
care of loading and understanding the packaging
obligations, the rendering of the things,

509
00:46:25.330 --> 00:46:25.580
it can go much faster because the browser
ultimately kind of knows more about rendering

510
00:46:25.330 --> 00:46:25.580
than any author or any JavaScript engineer
could do because we have a little more hooks

511
00:46:25.330 --> 00:46:25.580
than standard JavaScript application could.
&gt;&gt;Alex Komoroske: The final one, and this

512
00:46:25.330 --> 00:46:25.580
one is kind of crazy, so bear with me, is
the rise of shared semantics. So today your

513
00:46:25.400 --> 00:46:25.650
semantics might only apply within your site
because there's no good way to share them.

514
00:46:25.400 --> 00:46:26.200
But if you allow people to define these tags
that are useful to Web developers, it's very

515
00:46:26.200 --> 00:46:31.390
obvious if we are -- for example, we will
see these x-polls, it's very obvious that

516
00:46:31.390 --> 00:46:38.390
people find that useful. And so this is a
great way for Web developers to experiment

517
00:46:45.710 --> 00:46:47.700
with new components and things. After a while,
maybe you will see that everyone is using

518
00:46:47.700 --> 00:46:49.560
tabstrips, they are using it in the same basic
way, well, we just roll that into the spec,

519
00:46:49.560 --> 00:46:49.940
roll that into the standard.
&gt;&gt;Dimitri Glazkov: Directly into HTML.

520
00:46:49.940 --> 00:46:50.540
&gt;&gt;Alex Komoroske: Directly into the browser.
Why do you have to define your own? This is

521
00:46:50.540 --> 00:46:51.140
a great place for Web developers to experiment,
show us the way as browser developers, about

522
00:46:51.140 --> 00:46:51.610
what stuff we should be directly baking in.
&gt;&gt;Dimitri Glazkov: Right. And if you look

523
00:46:51.610 --> 00:46:55.000
at it from another slightly different perspective,
is that today there is no path from local

524
00:46:55.000 --> 00:47:02.000
semantics, the semantics of your framework,
to the global semantics, the public semantics

525
00:47:03.150 --> 00:47:07.230
of HTML. Once you've built that thing imperatively,
there is no existence of the actual tags,

526
00:47:07.230 --> 00:47:13.010
there is no path to the tags. You can just
study those things, and look at the patterns

527
00:47:13.010 --> 00:47:17.770
and wonder what is the right thing. But there
is no path. With the custom tags, you actually

528
00:47:17.770 --> 00:47:20.720
start having this path because these are just
tags. And now all that you have to do is run

529
00:47:20.720 --> 00:47:21.490
a really,
really large query, which Google can do actually,

530
00:47:21.490 --> 00:47:22.330
and figure out which elements are common.
Then you can know precisely which tags are

531
00:47:22.330 --> 00:47:23.630
winning, which tags deserve to become more
public and at some point make it into the

532
00:47:23.630 --> 00:47:23.880
-- into the HTML spec, for example.
&gt;&gt;Alex Komoroske: It's really cool stuff.

533
00:47:23.660 --> 00:47:23.910
Again, Dimitri and I come from the future,
so that's why we can talk about all of this

534
00:47:23.840 --> 00:47:24.090
amazing stuff. The good news is actually that
the future isn't quite as far away as you

535
00:47:23.920 --> 00:47:24.170
might think. We aren't from, like, years in
the future; we're from, like, a few months

536
00:47:24.000 --> 00:47:24.250
in the future, basically.
So shadow DOM and CSS variables are both implemented

537
00:47:24.060 --> 00:47:24.310
in Chrome today. They are behind the 5. They
aren't released on the Web yet, but if you

538
00:47:24.150 --> 00:47:24.400
really want to you can go on and play with
them. There are lots of effective polyfills.

539
00:47:24.230 --> 00:47:24.540
Polyfills are basically shims that allow you
to use functionality before it's directly

540
00:47:24.540 --> 00:47:24.790
in the browser. We'll talk about those in
a second. And another thing is this is not

541
00:47:24.590 --> 00:47:24.840
a Chrome thing. This is being done in standards,
we have a lot of other browser vendors are

542
00:47:24.700 --> 00:47:24.950
extremely excited about the number of folks
from those are in the audience today. We are

543
00:47:24.730 --> 00:47:24.980
really working, this is a collaborative effort,
a concerted effort with everybody to build

544
00:47:24.750 --> 00:47:25.000
this. So this is something that you can actually
look forward to using relatively soon.

545
00:47:24.780 --> 00:47:25.030
&gt;&gt;Dimitri Glazkov: It's happening, guys, it's
coming, seriously.

546
00:47:24.790 --> 00:47:25.230
&gt;&gt;Alex Komoroske: So what can you guys do
that you are all jazzed up about this stuff?

547
00:47:25.230 --> 00:47:25.890
Well, you can help the future arrive faster.
The one way -- there's lots of links and information

548
00:47:25.890 --> 00:47:26.220
on this slide. What you should do right now
if you are already a member of the Web components

549
00:47:26.220 --> 00:47:26.540
plus page is follow us. We have a Google short
link right there for you. This is where we

550
00:47:26.540 --> 00:47:26.790
post interested updates about the spec, the
implementations, cool examples, blog posts.

551
00:47:26.750 --> 00:47:27.190
It's the one place that you can really learn
about all of this stuff going on. And right

552
00:47:27.190 --> 00:47:27.440
after this we're going to post all of these
links to that plus page. If you want to, you

553
00:47:27.340 --> 00:47:27.590
can read the introduction
to Web components. You probably learn that

554
00:47:27.480 --> 00:47:27.730
specs are really hard to read and they often
are, but actually Dimitri has done an amazing

555
00:47:27.570 --> 00:47:27.820
job writing an explainer, that goes through
all of these concepts, in quiet some depth

556
00:47:27.640 --> 00:47:27.890
but in a very readable way.
&gt;&gt;Dimitri Glazkov: I promise there's no comic

557
00:47:27.700 --> 00:47:27.950
sans on that page. If you are scared.
&gt;&gt;Alex Komoroske: You can also read the CSS

558
00:47:27.780 --> 00:47:28.030
variable spec, understand more how that stuff
works, all of the amazing stuff that you can

559
00:47:27.860 --> 00:47:28.110
do with it. It's really more powerful than
it looks.

560
00:47:27.910 --> 00:47:28.160
&gt;&gt;Dimitri Glazkov: The other thing is that
there is actually a lot of really cool discussions

561
00:47:27.990 --> 00:47:28.240
happening right now in your present about
the Web components and working out all of

562
00:47:28.180 --> 00:47:28.430
the corner cases, working out the kinks of
how things should work precisely. I mean we're

563
00:47:28.240 --> 00:47:28.490
in the future, all of those things are solved,
we don't have to worry about them, but you

564
00:47:28.310 --> 00:47:28.560
guys have to worry about it. Because getting
this stuff done just right and making sure

565
00:47:28.360 --> 00:47:28.610
this does not suck is really, really important.
So, please, if you have any, you know, gumption

566
00:47:28.430 --> 00:47:28.680
for bike shedding, or really, really endless
discussions with no end, please join the standards

567
00:47:28.480 --> 00:47:28.730
list and start listening in, start understanding
what's going on, what's happening.

568
00:47:28.530 --> 00:47:28.780
&gt;&gt;Alex Komoroske: It's also possible to start
building with this stuff today. Dimitri has

569
00:47:28.580 --> 00:47:28.830
written a polyfill for Web components, all
it requires is Shadow DOM, so you would have

570
00:47:28.830 --> 00:47:29.340
to turn it on in Chrome to play around with
it. That's a really cool thing that actually

571
00:47:29.340 --> 00:47:29.780
makes the polyfill for this entire thing,
everything that we have shown you today is

572
00:47:29.780 --> 00:47:30.090
how we actually did --
&gt;&gt;Dimitri Glazkov: You know those self driving

573
00:47:30.090 --> 00:47:30.550
cars? It's like that. It's like a very, very
early prototype that you can possibly drive.

574
00:47:30.550 --> 00:47:30.990
Bad things may happen, I can't guarantee--
&gt;&gt;Alex Komoroske: Don't use that one for anything

575
00:47:30.990 --> 00:47:31.420
in production today are written by Daniel
Buchner, who I believe is right there from

576
00:47:31.420 --> 00:47:31.820
Mozilla, he's built this really cool library
called x-tags. X-tags is basically a polyfill

577
00:47:31.820 --> 00:47:32.340
for the custom elements part of what we showed
you today. The cool thing about that is this

578
00:47:32.340 --> 00:47:32.590
actually
works in all major browsers. It uses a number

579
00:47:32.520 --> 00:47:33.240
of very clever hacks to do it, but you actually
can start building real apps on top of this

580
00:47:33.240 --> 00:47:33.490
today if you want.
&gt;&gt;Dimitri Glazkov: Daniel is actually actively

581
00:47:33.390 --> 00:47:33.640
at work building a pretty, pretty solid toolkit
on top of this, the UI widget library that

582
00:47:33.640 --> 00:47:33.890
would potentially power some really, really
cool applications in the future.

583
00:47:33.800 --> 00:47:34.060
&gt;&gt;Alex Komoroske: That's really cool, so check
that out once we post the link to that plus

584
00:47:34.060 --> 00:47:34.330
page.
All right, great! So that's all that we have

585
00:47:34.330 --> 00:47:36.010
for you today, we wanted to share a little
bit more about Web components, it's a really

586
00:47:36.010 --> 00:47:36.510
exciting thing for the future. Thanks so much
for coming out. [ Applause ]

587
00:47:36.510 --> 00:47:37.140
&gt;&gt;Dimitri Glazkov: And -- and in the future
-- the future bus leaves in 10 minutes, but

588
00:47:37.140 --> 00:47:37.600
until then we can answer your questions if
you would like.

589
00:47:37.600 --> 00:47:37.970
&gt;&gt;Alex Komoroske: Come up to one of these
microphones that we've got here in the aisles.

590
00:47:37.970 --> 00:47:38.220
&gt;&gt;&gt; What about events?
&gt;&gt;Alex Komoroske: What about events is the

591
00:47:37.980 --> 00:47:38.230
question we got from the audience.
&gt;&gt;Dimitri Glazkov: The events are actually

592
00:47:38.000 --> 00:47:38.250
also handled by the Shadow DOM specifications,
and there's really neat things that we do

593
00:47:38.010 --> 00:47:38.260
to make sure that the information in the event
never escapes outside of the Shadow DOM subtree,

594
00:47:38.030 --> 00:47:38.280
but the events are heard. It's called retargeting.
What happens is that if something fires, like,

595
00:47:38.040 --> 00:47:38.290
for example, if you click a play button in
your video element, the event or the click

596
00:47:38.060 --> 00:47:38.310
event propagates out, but it looks like it
came from the video element. Does that make

597
00:47:38.070 --> 00:47:38.320
sense? So it's actually a really complex part
of those things, and we fought extremely hard

598
00:47:38.090 --> 00:47:38.340
to make sure that Shadow DOM feels transparent
to the user and it doesn't look like it's

599
00:47:38.110 --> 00:47:38.360
affecting any actual normal operation of the
events. But the information from the inside

600
00:47:38.120 --> 00:47:38.370
of the Shadow DOM subtree never leaks out
on the outside.

601
00:47:38.130 --> 00:47:38.380
&gt;&gt;Alex Komoroske: We've got a question at
this mic.

602
00:47:38.140 --> 00:47:38.390
&gt;&gt;&gt; So it sounds like a lot of this is helping
you with bringing in dependencies and encapsulating

603
00:47:38.160 --> 00:47:38.410
code. Have you guys thought much in the spec
about dependency management, you know, I mean,

604
00:47:38.170 --> 00:47:38.420
obviously a lot of Java developers and a lot
of developers in general use Maven for that,

605
00:47:38.190 --> 00:47:38.440
so you don't get dependency explosion with
inside your app. There's that encapsulated

606
00:47:38.200 --> 00:47:38.450
part but, you know, in a team you want to
try and use consistent dependencies across.

607
00:47:38.220 --> 00:47:38.470
Has that been addressed in the spec at all?
&gt;&gt;Dimitri Glazkov: At this point there is

608
00:47:38.230 --> 00:47:38.480
just early discussions on how this actual
linking of the custom elements, the packaging,

609
00:47:38.250 --> 00:47:38.500
will happen, so this is actually a good time
to start talking and start discussing this

610
00:47:38.260 --> 00:47:38.510
type of thing. I mean you saw that in the
future and you saw it works but, you know,

611
00:47:38.280 --> 00:47:38.530
later on.
&gt;&gt;&gt; What about like with media queries where

612
00:47:38.290 --> 00:47:38.540
the widget, the component need to adapt based
on certain break points, and usually those

613
00:47:38.300 --> 00:47:38.550
break points are going to be different based
on whatever context of the app they are used

614
00:47:38.320 --> 00:47:38.570
in. Right. So one of the interesting things
there is that first of all we made sure that

615
00:47:38.340 --> 00:47:38.590
Shadow DOM actually operates within the confines
of CSS, we are not inventing anything abnormal,

616
00:47:38.350 --> 00:47:38.600
so all of the CSS machinery the way that you
operate on it will just work. It just feels,

617
00:47:38.370 --> 00:47:38.620
it has the same -- it will feel like it's
just part of the documents. So you will get

618
00:47:38.390 --> 00:47:38.640
all of the same information about the size
and media queries, things like that.

619
00:47:38.400 --> 00:47:38.650
&gt;&gt;&gt; (Inaudible).
&gt;&gt;&gt; I'm an extension developer in the users

620
00:47:38.410 --> 00:47:38.660
group aficionado, and there's lots of templated
sites out there that don't use that yet, but

621
00:47:38.430 --> 00:47:38.680
that would be great to extend. And are you
thinking about how to integrate this into

622
00:47:38.440 --> 00:47:38.690
the Chrome extension API so that we can add
components where there are none and change

623
00:47:38.460 --> 00:47:38.710
them?
&gt;&gt;Dimitri Glazkov: Shadow DOM is actually

624
00:47:38.460 --> 00:47:38.710
one of the really, really use cases for extensions,
the ones that modify the page on the fly.

625
00:47:38.480 --> 00:47:38.730
Because what you can do is you can build a
Shadow DOM into an element and the document

626
00:47:38.500 --> 00:47:38.750
doesn't know that it's there. And so yes,
it's a very common use case, yes, it's coming.

627
00:47:38.520 --> 00:47:38.770
&gt;&gt;&gt; Thank you.
&gt;&gt;&gt; I'm a (indiscernible) developer but I

628
00:47:38.520 --> 00:47:38.770
was thinking could you invent the map API
into the Shadow DOM so it would build a custom

629
00:47:38.540 --> 00:47:38.790
tech for example a store locator and give
that to a customer and say, hey, do this and

630
00:47:38.560 --> 00:47:38.810
--
&gt;&gt;Alex Komoroske: That's a phenomenal use

631
00:47:38.560 --> 00:47:38.810
case, doing exactly that. In fact, one of
the components of x-tag --

632
00:47:38.580 --> 00:47:38.830
&gt;&gt;Dimitri Glazkov: Talk to this guy, he's
already got one.

633
00:47:38.590 --> 00:47:38.840
&gt;&gt;Alex Komoroske: That's an awesome use case
for it. Yeah.

634
00:47:38.600 --> 00:47:38.850
&gt;&gt;Dimitri Glazkov: Come on, bring it on!
&gt;&gt;Alex Komoroske: Anything else?

635
00:47:38.610 --> 00:47:38.860
&gt;&gt;&gt; What about the SCO, like there's potential
information like the SI tag that would be

636
00:47:38.620 --> 00:47:38.870
less important, would Google bot pick that
up because it's not potentially rendered on

637
00:47:38.640 --> 00:47:38.890
the page?
&gt;&gt;&gt; We don't work on the search team so we

638
00:47:38.650 --> 00:47:38.900
don't know the answer to that question. We
can imagine there's going to be interesting

639
00:47:38.660 --> 00:47:38.910
changes in the way that people --
&gt;&gt;Dimitri Glazkov: It doesn't have to be on

640
00:47:38.670 --> 00:47:38.920
the SI tag, it can be on H1 or poll, if you
want it to. It's up to you to define it as

641
00:47:38.700 --> 00:47:38.950
the author of the API.
&gt;&gt;Alex Komoroske: If there are any other questions,

642
00:47:38.710 --> 00:47:38.960
Dimitri and I will be hanging around for few
minutes afterwards if you want to ask us any

643
00:47:38.730 --> 00:47:38.980
other questions. Thanks so much. [ Applause
]

644
00:47:38.730 --> 00:47:38.980
&gt;&gt;Dimitri Glazkov: Yay!

WEBVTT

1
00:00:01.260 --> 00:00:08.260
&gt;&gt;Sam Dutton: Hi, everyone. I think we're
ready to begin if you would like to take a

2
00:00:08.830 --> 00:00:10.040
seat.
Glad to see everyone here. Yeah, we're here

3
00:00:10.040 --> 00:00:13.390
to talk about the Chrome Development Tools
today. If you are here for something else,

4
00:00:13.390 --> 00:00:16.209
I think you should stay because it will be
a really good session.

5
00:00:16.209 --> 00:00:20.449
My name is Sam Dutton, I'm a developer advocate
for Google Chrome. I'm based in London.

6
00:00:20.449 --> 00:00:23.850
&gt;&gt;Pavel Feldman: And I'm Pavel Feldman, software
engineer working at Google Chrome.

7
00:00:23.850 --> 00:00:27.630
&gt;&gt;Sam Dutton: And yeah, we're going to show
you some great new features in Tools and hopefully

8
00:00:27.630 --> 00:00:32.180
some stuff that can make your life easier
as a developer.

9
00:00:32.180 --> 00:00:39.180
You know, 2012 has just been an incredible
year on the Web. I was looking back at the

10
00:00:40.059 --> 00:00:46.710
session that Pavel did with -- Paul Irish
is in the house somewhere -- last year, and

11
00:00:46.710 --> 00:00:52.379
it amazes me how much the Chrome Tools have
evolved in that time, how much the Web has

12
00:00:52.379 --> 00:00:57.620
changed in that time.
It just seems like the normal thing now for

13
00:00:57.620 --> 00:01:02.699
you guys to be building these apps that are
incredibly complex and really pushing the

14
00:01:02.699 --> 00:01:08.690
limits of development on the clients' side.
And I think that one thing I've found is that

15
00:01:08.690 --> 00:01:15.220
in a context, you know, a really great text
editor just isn't always enough. And with

16
00:01:15.220 --> 00:01:22.220
that in mind I think that's where the Chrome
Dev Tools come in. So what are we going to

17
00:01:22.220 --> 00:01:26.780
talk about today? Well, we're going to run
through some tools that we hope will boost

18
00:01:26.780 --> 00:01:33.360
your productivity. And we'll also be looking
in some detail at using the tools to do mobile

19
00:01:33.360 --> 00:01:40.360
Web developments. We'll also be looking at
this idea of responsiveness. You know, what

20
00:01:40.700 --> 00:01:45.920
is it? How do we measure it and how do we
deal with it in a scientific way rather than

21
00:01:45.920 --> 00:01:50.290
with guesswork?
And you know, in a balance to that, also looking

22
00:01:50.290 --> 00:01:55.720
at memory and making sure that we stay on
top of that.

23
00:01:55.720 --> 00:02:00.840
And all through this we'll be looking at a
whole bunch of new features in the Tools.

24
00:02:00.840 --> 00:02:07.840
But first, we just wanted to say, you know,
I really big tip of the hat to all the people

25
00:02:08.340 --> 00:02:14.310
who have contributed to the Tools in the last
year with bug reports, feature requests and,

26
00:02:14.310 --> 00:02:19.870
you know, by committing code.
We've got a list here of some stuff, just

27
00:02:19.870 --> 00:02:25.280
touching the surface of stuff that's been
put into the Tools in the last year just from

28
00:02:25.280 --> 00:02:30.379
user requests and user codes, you know, fantastic
contributions, really good stuff.

29
00:02:30.379 --> 00:02:36.730
Just to pick on one of these things, this
business of caching. Caching is a good thing,

30
00:02:36.730 --> 00:02:41.760
but it can be a real pain for developers.
Particularly when you're dealing with situations

31
00:02:41.760 --> 00:02:47.560
where assets are being loaded dynamically
after the onload event and in those situations

32
00:02:47.560 --> 00:02:52.340
a hard reload or whatever just isn't enough.
So we have two new features in the tools.

33
00:02:52.340 --> 00:02:56.879
From the network panel you can right-click
and clear the browser cache or you can even

34
00:02:56.879 --> 00:03:03.879
just turn off caching from the settings page.
So yeah, great stuff from our users, and we're

35
00:03:03.959 --> 00:03:08.010
really grateful for that.
So with that in mind, we've got this roomful

36
00:03:08.010 --> 00:03:13.499
of great developers, we thought we would take
this opportunity to try and get from you guys

37
00:03:13.499 --> 00:03:18.840
some ideas about what you would like right
here, right now, to see next in the Tools.

38
00:03:18.840 --> 00:03:22.129
You know, what challenges are you facing now?
What would you like to see?

39
00:03:22.129 --> 00:03:24.749
Pavel?
&gt;&gt;Pavel Feldman: Right, guys, that's your

40
00:03:24.749 --> 00:03:29.969
only opportunity, unique opportunity, to request
something, and even without filing a bug I

41
00:03:29.969 --> 00:03:34.389
will be implementing it for you. So please
shout out what you want from the devtools

42
00:03:34.389 --> 00:03:37.590
and we'll type it in and we'll make sure it's
not lost.

43
00:03:37.590 --> 00:03:44.590
&gt;&gt;Sam Dutton: Right here, right now, shout
it out.

44
00:03:44.879 --> 00:03:51.879
&gt;&gt;&gt; [Inaudible - No Mic].
&gt;&gt;Sam Dutton: Okay, next, please.

45
00:03:58.530 --> 00:04:05.530
&gt;&gt;&gt; [Inaudible - No Mic].
&gt;&gt;&gt; [Inaudible - No Mic].

46
00:04:08.760 --> 00:04:14.049
&gt;&gt;Sam Dutton: Thanks very much.
One here.

47
00:04:14.049 --> 00:04:19.590
&gt;&gt;&gt; [Inaudible - No Mic]
&gt;&gt;Sam Dutton: And while on this side?

48
00:04:19.590 --> 00:04:23.580
&gt;&gt;&gt; [Inaudible - No Mic].
&gt;&gt;Sam Dutton: That we already have.

49
00:04:23.580 --> 00:04:28.880
&gt;&gt;Pavel Feldman: Let me put it in. I will
be happy to file the bug and close it.

50
00:04:28.880 --> 00:04:35.880
&gt;&gt;Sam Dutton: Okay. Down the front.
&gt;&gt;&gt; Storing edited CSS.

51
00:04:36.050 --> 00:04:43.050
&gt;&gt;&gt; [Inaudible - No Mic].
&gt;&gt;Sam Dutton: Okay. And who else down in the

52
00:04:50.680 --> 00:04:54.500
front?
&gt;&gt;&gt; [Inaudible - No Mic].

53
00:04:54.500 --> 00:05:00.230
&gt;&gt;Sam Dutton: Here.
&gt;&gt;&gt; [Inaudible - No Mic].

54
00:05:00.230 --> 00:05:05.970
&gt;&gt;Sam Dutton: Yes?
&gt;&gt;&gt; [Inaudible - No Mic].

55
00:05:05.970 --> 00:05:12.970
&gt;&gt;Sam Dutton: Maybe two more.
&gt;&gt;&gt; [Inaudible - No Mic].

56
00:05:13.610 --> 00:05:20.060
&gt;&gt;Sam Dutton: Like by the system in other
words, like for San Serif or whatever. Behind

57
00:05:20.060 --> 00:05:22.670
you there.
&gt;&gt;&gt; Bigger text in the developer tools.

58
00:05:22.670 --> 00:05:25.000
&gt;&gt;Sam Dutton: Ah, we can help you with that.
Bigger text.

59
00:05:25.000 --> 00:05:28.260
&gt;&gt;Pavel Feldman: Bigger text.
&gt;&gt;Sam Dutton: And right out the back.

60
00:05:28.260 --> 00:05:33.800
&gt;&gt;&gt; Support for CSS preprocessors.
&gt;&gt;Sam Dutton: Yes. Good, good. That's fantastic.

61
00:05:33.800 --> 00:05:40.800
&gt;&gt;Pavel Feldman: Okay. That's a good list.
I'm happy to say that at least half of it

62
00:05:42.150 --> 00:05:43.900
is already implemented.
[ Laughter ]

63
00:05:43.900 --> 00:05:50.120
&gt;&gt;Sam Dutton: That's great. We'll take that.
&gt;&gt;Pavel Feldman: So I'm making sure it is

64
00:05:50.120 --> 00:05:54.830
not lost. I'll be filing those by myself and
probably will be implementing some of those

65
00:05:54.830 --> 00:05:58.140
personally.
&gt;&gt;Sam Dutton: And I'll be following him around

66
00:05:58.140 --> 00:06:01.660
with a whip.
[ Applause ]

67
00:06:01.660 --> 00:06:06.000
&gt;&gt;Sam Dutton: So you know, like one of the
things -- another thing we've noticed over

68
00:06:06.000 --> 00:06:12.000
the last 12 months or so is that people are
using the tools now more for actually writing

69
00:06:12.000 --> 00:06:16.300
code, for building interfaces, not just for
debugging.

70
00:06:16.300 --> 00:06:22.710
And with that in mind, when the devtools team
have built in some great features for working

71
00:06:22.710 --> 00:06:29.020
in the tools in that way, and I was thinking
about just how to demonstrate it, how it increases

72
00:06:29.020 --> 00:06:33.800
productivity, and I was thinking about the
devtools team themselves, like the devtools

73
00:06:33.800 --> 00:06:39.980
team build the devtools to build the devtools.
And good developers are really productive,

74
00:06:39.980 --> 00:06:46.770
so who better to ask about productivity than
Pavel Feldman. It would be a good opportunity

75
00:06:46.770 --> 00:06:51.180
to give Pavel Feldman a chance to give us
a master class, show us how he works.

76
00:06:51.180 --> 00:06:55.120
&gt;&gt;Pavel Feldman: Now I feel flattered.
Okay. Before we jump into the demos, let me

77
00:06:55.120 --> 00:07:01.050
say a few words about the productivity. What
do we expect from the Tools for productivity?

78
00:07:01.050 --> 00:07:07.410
And for me it is getting into the source into
where I need to fast. And being a part of

79
00:07:07.410 --> 00:07:12.140
the screen or an action or a process, I like
to jump instantly into the source code that

80
00:07:12.140 --> 00:07:15.790
is responsible for this action.
And vice versa, while looking at the source

81
00:07:15.790 --> 00:07:21.220
I want to know what it is responsible for,
how do I get the part of the screen that it

82
00:07:21.220 --> 00:07:24.200
paints?
While in the source code I am interested in

83
00:07:24.200 --> 00:07:29.640
changing it and more importantly I'm interesting
in seeing an immediate feedback.

84
00:07:29.640 --> 00:07:36.640
And for those of you who have seen the Bret
Victor's "Inventing on Principle" talk, if

85
00:07:37.800 --> 00:07:42.950
you haven't, please make sure you check it
out. That's an image from Bret's slides.

86
00:07:42.950 --> 00:07:48.330
So the main principle Bret is talking about
is the instant feedback. And as he goes through

87
00:07:48.330 --> 00:07:53.940
his demos it is clear that the instant feedback
not only increases your productivity, makes

88
00:07:53.940 --> 00:07:59.500
you do things faster, but it also boosts your
creativity, because when things are reflected

89
00:07:59.500 --> 00:08:05.200
fast, when you have an instant feedback, you
start experimenting. You go through the states

90
00:08:05.200 --> 00:08:09.960
that you have otherwise not visit.
Now that you have changed the source code

91
00:08:09.960 --> 00:08:14.170
and you've seen the feedback, the essential
part of the tool is to persist it.

92
00:08:14.170 --> 00:08:21.170
So let me show you how these map into the
devtools features.

93
00:08:21.710 --> 00:08:28.710
I just started Chrome Canary, and it is a
version of Chrome that is being updated on

94
00:08:32.060 --> 00:08:38.340
your machine daily. It is built from the tip
of the tree sources from WebKit and Chrome

95
00:08:38.340 --> 00:08:43.880
and contains all the features that are implemented
by this date, including the devtools ones.

96
00:08:43.880 --> 00:08:48.960
So if you are a Web developer and you would
like to make sure that everything works perfectly

97
00:08:48.960 --> 00:08:53.760
on the next version of Chrome or if you'd
like to use the tip of the tree devtools,

98
00:08:53.760 --> 00:08:58.360
please use the Canary and please provide us
with your feedback.

99
00:08:58.360 --> 00:09:04.230
But more importantly, Canary can run side
by side with your Chrome browser, so you no

100
00:09:04.230 --> 00:09:09.450
longer need to choose whether you want to
be on the Dev channel or Beta channel or Stable

101
00:09:09.450 --> 00:09:16.450
to test for the changes, just have those two
installed and that will be very convenient.

102
00:09:17.900 --> 00:09:24.900
Oh, I have no connectivity. Sorry. It just
plugged out.

103
00:09:28.040 --> 00:09:33.950
So I'm navigating to the WebKit.org. And WebKit
is the project where most of the Chrome devtools

104
00:09:33.950 --> 00:09:38.040
source code belongs. We develop devtools fronted
upstream.

105
00:09:38.040 --> 00:09:45.040
Let me load it once again.
Okay. Let's go to the backup plan. We have

106
00:09:51.990 --> 00:09:58.150
a backup plan, don't we?
Yeah, we do.

107
00:09:58.150 --> 00:10:04.150
[ Laughter ]
&gt;&gt;Pavel Feldman: So that's the WebKit. And

108
00:10:04.150 --> 00:10:08.339
I'm going to do a lot of demos on the devtools,
and we're going to hack devtools today, and

109
00:10:08.339 --> 00:10:12.390
after this session you will be able to contribute
your source code into the devtools yourself.

110
00:10:12.390 --> 00:10:19.230
Now, I'm going to debug this page, but before
I -- I'm not going to open the devtools using

111
00:10:19.230 --> 00:10:26.230
the command option I, I'll do it different
then.

112
00:10:27.360 --> 00:10:34.360
I'm using remote debugging to start inspecting
my page. And as you can see, remote debugging

113
00:10:38.700 --> 00:10:45.700
works as a regular devtools. You can see the
devtools is opened as a Web page. I can do

114
00:10:47.110 --> 00:10:52.460
that because developer tools uses clients
server architecture where browser acts as

115
00:10:52.460 --> 00:10:57.860
a server and a front end acts as a client.
So the devtools that you have in your browser

116
00:10:57.860 --> 00:11:03.890
is in fact a Web app read in HTML, JavaScript,
CSS, and it's talking to the backup using

117
00:11:03.890 --> 00:11:10.339
Web Sockets. Did you know that?
Okay, good.

118
00:11:10.339 --> 00:11:17.339
Now, it's -- is it okay? Now it's time to
debug. And as you can see, I open the devtools

119
00:11:22.070 --> 00:11:29.070
doc to the right and let me [Indiscernible].
Here we go.

120
00:11:29.520 --> 00:11:35.010
So what we are going to do here today is we
are going to hack on the devtools itself because

121
00:11:35.010 --> 00:11:40.960
I'm a devtools engineer. I want to show you
what I'm doing everyday.

122
00:11:40.960 --> 00:11:47.080
So that's regular old stuff. This is your
Web page to the left. In my case it's devtools.

123
00:11:47.080 --> 00:11:49.300
And that's your devtools to the right.
[ Laughter ]

124
00:11:49.300 --> 00:11:54.980
&gt;&gt;Sam Dutton: Pavel's life is so meta.
&gt;&gt;Pavel Feldman: So we get a bit of inception

125
00:11:54.980 --> 00:12:01.980
here, so don't get confused.
Okay. Now, I've been working lately on the

126
00:12:02.190 --> 00:12:07.210
timeline features. And as I was editing the
timeline features, I noticed the timeline

127
00:12:07.210 --> 00:12:10.670
does not really look like the rest of the
Chrome.

128
00:12:10.670 --> 00:12:13.960
We implemented it in WebKit, we were using
these colorful gradients, 3D loops, we don't

129
00:12:13.960 --> 00:12:18.100
really do that in Chrome, so I needed to fix
it.

130
00:12:18.100 --> 00:12:21.399
And when you were working in a UI like that,
you need to go back and forth between the

131
00:12:21.399 --> 00:12:26.240
page and your source code until what you see
satisfies you.

132
00:12:26.240 --> 00:12:32.790
Let's try to recreate this experience right
now. I'm recording a couple of timelines in

133
00:12:32.790 --> 00:12:39.790
here, and if you can see those gray zebra
bars in the central part of the timeline,

134
00:12:41.240 --> 00:12:43.529
let me make them a bit more conscious for
you.

135
00:12:43.529 --> 00:12:50.060
To do that I'm using the inspect element tool
to locate the actual code responsible for

136
00:12:50.060 --> 00:12:56.300
the zebra bar. And in here I can play around
with its colors using the color meter. Let

137
00:12:56.300 --> 00:13:03.300
me increase it or maybe play with the color.
And I can do it dynamically in here. I have

138
00:13:04.700 --> 00:13:10.390
a range of values I am choosing. And that's
really a simplistic example of what Bret was

139
00:13:10.390 --> 00:13:14.770
talking about, because as I go through these
ranges I was just going to bump the conscious

140
00:13:14.770 --> 00:13:19.720
a bit, but now I like the different color
I can accept it.

141
00:13:19.720 --> 00:13:26.720
Let's check if the sources were updated. And
they were updated, so that's my new color.

142
00:13:26.950 --> 00:13:32.839
Nice. But I think we have a bug because in
the top part of this grid you can see the

143
00:13:32.839 --> 00:13:37.130
overview. It also has the zebra bar, but it
was not updated.

144
00:13:37.130 --> 00:13:41.630
We are probably doing a bad job, we don't
use constants here or the style we're using

145
00:13:41.630 --> 00:13:45.670
is different.
Let me do the same thing with the top area.

146
00:13:45.670 --> 00:13:52.670
So I inspect it. Whoa. That's not CSS, so
it's not going to work like that. We all love

147
00:13:55.180 --> 00:13:59.750
CSS because it's declarative language. You
change a value and you get an instant feedback,

148
00:13:59.750 --> 00:14:04.490
everything updated live.
Canvas is just JavaScript, imperative language.

149
00:14:04.490 --> 00:14:09.029
Painting on a canvas, you can't go into the
source code and change things dynamically,

150
00:14:09.029 --> 00:14:14.220
or can you?
For that let us try and find out what source

151
00:14:14.220 --> 00:14:19.180
code is responsible for this painting.
Remember we want to go from the screen into

152
00:14:19.180 --> 00:14:23.220
the source code.
For that I'm using command alt F, and I'm

153
00:14:23.220 --> 00:14:30.220
just going to search for canvas. And it searches
through all my source project, and through

154
00:14:30.890 --> 00:14:36.700
the entire project. As you can see, we have
a number of components that are using canvas,

155
00:14:36.700 --> 00:14:43.700
but I think the timeline overview pane is
the one that I need, so I'm jumping to it.

156
00:14:45.420 --> 00:14:50.070
And while we are here let me say a few words
about the new sources panel. So the sources

157
00:14:50.070 --> 00:14:54.320
panel is the one where you are dealing with
your source code. You are going to view it

158
00:14:54.320 --> 00:14:58.600
there, you are going to modify it there, you
are going to save it there, you're going to

159
00:14:58.600 --> 00:15:02.980
jump on to the source code from your URL,
so we need more real estate for that.

160
00:15:02.980 --> 00:15:09.980
For that we now have collapsible debugger
sidebars and expandable tree view with all

161
00:15:10.600 --> 00:15:16.050
of your sources. And remember Web scales you
need a lot of space for the list of your files.

162
00:15:16.050 --> 00:15:20.620
But do you know what? You don't really need
it at all times on your screen because you

163
00:15:20.620 --> 00:15:27.620
can hit command O and jump to any file instantly.
As I type, the list narrows down and I can

164
00:15:27.959 --> 00:15:33.630
jump into a particular file or even a particular
line number.

165
00:15:33.630 --> 00:15:40.630
[ Applause ]
&gt;&gt;Pavel Feldman: Now, remember what were we

166
00:15:41.240 --> 00:15:45.339
doing? We were looking for canvas, right?
So let us search for canvas.

167
00:15:45.339 --> 00:15:52.339
There are a lot of occurrences. Does not work.
Or let us go through -- oh, the methods. I'm

168
00:15:52.920 --> 00:15:58.709
pressing command shift O and I get a list
of all the functions in this file. And the

169
00:15:58.709 --> 00:16:04.040
same very thing will work for your selectors
in the style sheet. And as I type, the list

170
00:16:04.040 --> 00:16:08.779
narrows down and I can jump to a particular
function, but unfortunately there is no clue

171
00:16:08.779 --> 00:16:14.430
on the canvas and the zebra stripes, so let's
go on.

172
00:16:14.430 --> 00:16:20.490
But I think I have an idea. I think this code
uses the same color of the CSS. Do you remember

173
00:16:20.490 --> 00:16:25.100
the color? What was the color there?
&gt;&gt;&gt; [Inaudible - No Mic].

174
00:16:25.100 --> 00:16:31.700
&gt;&gt;Pavel Feldman: 50% gray? Any more options?
So let's see if you're right.

175
00:16:31.700 --> 00:16:38.700
I'm pressing control -- I'm using the context
menu, control click in my case, and I'm looking

176
00:16:39.320 --> 00:16:44.610
for local modifications, and I can see all
the files that were edited within this editing

177
00:16:44.610 --> 00:16:46.980
session.
[ Applause ]

178
00:16:46.980 --> 00:16:53.980
&gt;&gt;Pavel Feldman: And let me search for the
old color definition. Here you go. Let me

179
00:16:54.320 --> 00:16:58.950
grab the new one. Okay.
&gt;&gt;&gt; [Inaudible - No Mic].

180
00:16:58.950 --> 00:17:05.429
&gt;&gt;Pavel Feldman: I am using context menu,
local modifications. We'll go there in a bit.

181
00:17:05.429 --> 00:17:11.079
Now, I'm replacing the code with a new value.
And unlike in Bret's demos, unfortunately

182
00:17:11.079 --> 00:17:16.260
the screen is not updated, but the reason
is that we are not using requestAnimationFrame

183
00:17:16.260 --> 00:17:22.510
to paint our canvas painting. We updated upon
resize or any event that is being painted

184
00:17:22.510 --> 00:17:25.709
in this overview.
Let us try and keep those modifications while

185
00:17:25.709 --> 00:17:31.380
resizing.
Here you go.

186
00:17:31.380 --> 00:17:36.160
So what happened under the hood is the V8
driven live edit, step in place, so when I

187
00:17:36.160 --> 00:17:41.590
save the file the actual machine code generated
for that source file, for that JavaScript,

188
00:17:41.590 --> 00:17:48.170
was patched at runtime. And any subsequent
execution of that code was using the new code.

189
00:17:48.170 --> 00:17:54.090
Now, let's see if the local modifications,
it's a context menu in here or in the scripts

190
00:17:54.090 --> 00:18:01.090
navigator to the left, captured our changes.
And of course, they are here.

191
00:18:01.100 --> 00:18:06.870
Now, let's see if we actually like them. I'm
going to go ahead and apply original content

192
00:18:06.870 --> 00:18:12.980
for top and bottom areas.
And, no, I like the new way more, okay. Applying

193
00:18:12.980 --> 00:18:18.730
the revision content. I'm keeping the changes
again. So as you can see, you can experiment

194
00:18:18.730 --> 00:18:25.120
with the revisions of your edited source files,
be it JavaScript or CSS. Now that we have

195
00:18:25.120 --> 00:18:31.990
edited all, we need to save it. And for that
we are going to use context menu and save

196
00:18:31.990 --> 00:18:36.900
as. Here you can bind your source file to
the file system location and all of the subsequent

197
00:18:36.900 --> 00:18:42.809
saves are going to write to that location.
Or you can do something more interesting.

198
00:18:42.809 --> 00:18:48.480
You can actually install an extension, Chrome
extension, from the Web store. I'm using a

199
00:18:48.480 --> 00:18:54.170
(indiscernible) device devtools have to save
for that. And my extension is installed and

200
00:18:54.170 --> 00:19:01.170
configured. So that it mapped the particular
-- the URL into the particular location of

201
00:19:03.650 --> 00:19:08.330
my file system. Once I mapped it, everything
else just happens automatically.

202
00:19:08.330 --> 00:19:15.330
Let's go and -- go ahead and see if the changes
are in place.

203
00:19:16.480 --> 00:19:23.320
And here they are.
So the changes were indeed persistent in the

204
00:19:23.320 --> 00:19:28.260
file system and I was not doing anything for
that.

205
00:19:28.260 --> 00:19:35.260
[ Applause ]
&gt;&gt;Pavel Feldman: Okay. Yeah. Thank you. So

206
00:19:35.590 --> 00:19:40.309
now that's the -- that's the productivity
story. We can jump into the source file, we

207
00:19:40.309 --> 00:19:45.620
can change it to immediate feedback persistent,
but it's really easy to provide such an instant

208
00:19:45.620 --> 00:19:49.890
feedback when you are working on a desktop,
because both your page and the devtools are

209
00:19:49.890 --> 00:19:54.920
on the same screen in the same box. Wouldn't
it be great if the same experience could exist

210
00:19:54.920 --> 00:19:59.710
while you are working for mobile. Sam?
&gt;&gt;Sam Dutton: Well, yeah, the good news is

211
00:19:59.710 --> 00:20:06.710
that the devtools are available now for mobile.
The devtools team have done a huge amount

212
00:20:07.510 --> 00:20:14.230
of work over the last year to implement remote
debugging in WebKit, and we are really pleased

213
00:20:14.230 --> 00:20:21.230
to see this code being used across the industry
now. Because there is no better way to -- to

214
00:20:21.750 --> 00:20:28.640
get a really good impression of what your
Web app is actually like out in the world

215
00:20:28.640 --> 00:20:34.549
than to do remote debugging via USB on a real
device that's getting real 2G, 3G, whatever

216
00:20:34.549 --> 00:20:38.660
real connectivity. And, yeah, we would like
to show you that right now, actually.

217
00:20:38.660 --> 00:20:41.290
&gt;&gt;Pavel Feldman: Let me check it now. Internet
connection?

218
00:20:41.290 --> 00:20:44.970
&gt;&gt;Sam Dutton: We've got internet?
&gt;&gt;Pavel Feldman: Yeah.

219
00:20:44.970 --> 00:20:49.590
&gt;&gt;Sam Dutton: That's good. Okay. So it's really
easy to set up. We go to the device. You need

220
00:20:49.590 --> 00:20:52.040
to log me in here.
&gt;&gt;Pavel Feldman: Okay, sure. I won't be showing

221
00:20:52.040 --> 00:20:59.040
it to you. Sorry.
&gt;&gt;Sam Dutton: So on the device in Chrome,

222
00:20:59.990 --> 00:21:01.710
you need to go to settings.
&gt;&gt;Pavel Feldman: There you go.

223
00:21:01.710 --> 00:21:08.030
&gt;&gt;Sam Dutton: And from there you can go to
--

224
00:21:08.030 --> 00:21:12.520
&gt;&gt;Pavel Feldman: Wait, let me do it for you.
&gt;&gt;Sam Dutton: Yeah. Okay. Get the right one

225
00:21:12.520 --> 00:21:15.419
so I can see what I'm doing. In settings,
you go to developer tools, then make sure

226
00:21:15.419 --> 00:21:22.419
that enable Web USB debugging is enabled.
That's all you need to do on Chrome on the

227
00:21:23.840 --> 00:21:30.840
device. And -- and now we have installed the
Android SDK on the desktop and then run port

228
00:21:31.650 --> 00:21:38.240
forwarding, ADB port forwarding so that now
we can look at Port 9223, which will show

229
00:21:38.240 --> 00:21:42.710
all of the pages that are open on the mobile
device.

230
00:21:42.710 --> 00:21:47.840
We'll just open up YouTube now. And you can
see what's going on there.

231
00:21:47.840 --> 00:21:50.640
&gt;&gt;Pavel Feldman: Yeah.
&gt;&gt;Sam Dutton: There we go.

232
00:21:50.640 --> 00:21:54.380
&gt;&gt;Pavel Feldman: That's opened up.
&gt;&gt;Sam Dutton: Right, so we have got devtools

233
00:21:54.380 --> 00:21:59.049
there for the mobile device there.
&gt;&gt;Pavel Feldman: Right.

234
00:21:59.049 --> 00:22:02.190
[ Applause ]
&gt;&gt;Pavel Feldman: Thank you.

235
00:22:02.190 --> 00:22:08.000
So now let's see how it works. Of course,
you can do simple stuff. So as I hover here,

236
00:22:08.000 --> 00:22:12.080
you get areas in the screen of data.
[ Applause ]

237
00:22:12.080 --> 00:22:17.980
&gt;&gt;Pavel Feldman: All right. Or you can go
vice versa, and Sam could you click on an

238
00:22:17.980 --> 00:22:24.799
image here. Yeah. And here it is. The image
that Sam has been clicking. You can see it

239
00:22:24.799 --> 00:22:29.690
big in here. But that's simple, right, you
can modify DOM here or play with the CSS,

240
00:22:29.690 --> 00:22:32.860
but that's all simple, you can do it with
the other tools as well.

241
00:22:32.860 --> 00:22:39.860
But as Sam was saying, you could do some interesting
things with the mobile handset. For example,

242
00:22:40.320 --> 00:22:44.280
let's go to the network.
While I'm on the network panel, I'm pressing

243
00:22:44.280 --> 00:22:49.299
command R, to reload the target page. It usually
reloads the target page for the devtools,

244
00:22:49.299 --> 00:22:56.299
but in this case it reloaded the YouTube.
What you can see in here is the precise network

245
00:22:57.049 --> 00:23:02.730
information. That with the DNS connecting,
sending, waiting numbers, for your cellular

246
00:23:02.730 --> 00:23:08.500
network, for 2G, 3G, taken from the network
stack, from this various device, so that's

247
00:23:08.500 --> 00:23:14.220
the actual information in milliseconds came
from this native network stack. Of course

248
00:23:14.220 --> 00:23:18.559
you have all of the other information, all
of the previews, responses, cookies, everything

249
00:23:18.559 --> 00:23:23.400
that is available in the devtools, but again
it's the mobile. Let's say you want something

250
00:23:23.400 --> 00:23:30.400
more complex. You want to see how the cell
phone performs on your tasks. So I'm reloading

251
00:23:30.830 --> 00:23:36.290
the YouTube again, and timeline shows me not
only network events but also the style recalculation

252
00:23:36.290 --> 00:23:42.380
or JavaScript execution that happened on this
very CPU architecture, different from my box,

253
00:23:42.380 --> 00:23:49.380
at this very CPU this handset is running.
Or even more fun stuff. Let's do some breakpoints

254
00:23:50.470 --> 00:23:57.470
in here. I'm going to set a breakpoint. Oh,
I have one on the mouse click. Can you click

255
00:23:58.250 --> 00:24:01.770
it again? Here you go. You stopped on the
breakpoint in the cell phone, all of the regular

256
00:24:01.770 --> 00:24:08.130
devtools features are available here, so you
can prettyprint, I can step through my execution

257
00:24:08.130 --> 00:24:15.130
and everything just works.
So that's all of the devtools features, full-fledged

258
00:24:15.940 --> 00:24:20.370
developer tools running against the mobile.
[ Applause ]

259
00:24:20.370 --> 00:24:27.370
&gt;&gt;Pavel Feldman: Take it from there.
&gt;&gt;Sam Dutton: That's fantastic stuff. So the

260
00:24:35.060 --> 00:24:39.750
-- I guess looking at the other side of it,
one thing that we've learned after kinda 12

261
00:24:39.750 --> 00:24:46.750
months of remote debugging is that of course
in lots of situations, it's most the best

262
00:24:47.270 --> 00:24:53.950
thing to do to begin by doing as much as you
can on the desktop tools. But, of course,

263
00:24:53.950 --> 00:24:59.809
for that what you would need is really accurate
emulation tools. And the devtools team has

264
00:24:59.809 --> 00:25:03.600
been working really hard on putting a lot
of those features into those tools, which

265
00:25:03.600 --> 00:25:06.840
we will show some of that now, I think.
&gt;&gt;Pavel Feldman: Sure.

266
00:25:06.840 --> 00:25:13.840
&gt;&gt;Sam Dutton: We'll go over here. So we go
over to YouTube. Let's open it over here.

267
00:25:17.559 --> 00:25:24.559
There we go. So we've got -- yeah, we've got
the desktop version there, and the remote

268
00:25:30.360 --> 00:25:37.289
version over there. Now, I would like to go
to the settings in the developer tools. And

269
00:25:37.289 --> 00:25:44.289
if I go into there, and -- and let's -- let's
go to the user agent panel there. You can

270
00:25:44.730 --> 00:25:50.510
see the tabs now in the settings. And if I
click on user agent, now what's -- it's a

271
00:25:50.510 --> 00:25:52.230
Galaxy Nexus --
&gt;&gt;Pavel Feldman: It's a Galaxy Nexus, yes.

272
00:25:52.230 --> 00:25:58.330
Does anyone have one?
&gt;&gt;Sam Dutton: Yes, so I will select that now.

273
00:25:58.330 --> 00:26:05.330
And -- and that's -- let's refresh that. You
can see we've got a really accurate representation

274
00:26:07.220 --> 00:26:14.220
of what it actually looks like on the mobile
device. And let's just -- in fact, this little

275
00:26:15.030 --> 00:26:19.600
button here, I don't know if you can see that,
it kind of swaps from portrait to landscape

276
00:26:19.600 --> 00:26:24.720
mode pretty handy. So if I click that and
just zoom out again, you can see now again

277
00:26:24.720 --> 00:26:30.080
we have got a really accurate representation.
One thing that we've got here, you know, it's

278
00:26:30.080 --> 00:26:35.559
not kind of faking it. You will be able to
use Media Queries for this and it will work,

279
00:26:35.559 --> 00:26:41.360
so, yeah, really handy stuff. I will turn
that off.

280
00:26:41.360 --> 00:26:44.780
[ Applause ]
&gt;&gt;Sam Dutton: And obviously another crucial

281
00:26:44.780 --> 00:26:51.780
feature when you are trying to build for mobile
devices is touch. And if we go to this example,

282
00:26:54.760 --> 00:27:00.000
it's -- it gives us, you know, the ability
to see how touch works. The only problem being

283
00:27:00.000 --> 00:27:01.410
--
&gt;&gt;Pavel Feldman: Override. You --

284
00:27:01.410 --> 00:27:04.600
&gt;&gt;Sam Dutton: Sorry, I left the override on
there.

285
00:27:04.600 --> 00:27:08.140
&gt;&gt;Pavel Feldman: Yeah.
&gt;&gt;Sam Dutton: Okay, just refresh that. And,

286
00:27:08.140 --> 00:27:12.600
yeah, so what you can do here is use touchevents,
but, you know, it doesn't work obviously.

287
00:27:12.600 --> 00:27:18.530
What we have in the tools is the ability now
to emulate touchevents and you can set breakpoints

288
00:27:18.530 --> 00:27:23.860
and so on, there we have it.
I'm using touch there on the desktop device.

289
00:27:23.860 --> 00:27:26.780
So, yeah, really handy tool.
&gt;&gt;Pavel Feldman: So you were just dragging

290
00:27:26.780 --> 00:27:33.780
your mouse and it was emulating the touch.
&gt;&gt;Sam Dutton: Right, yeah, that's good stuff.

291
00:27:36.220 --> 00:27:41.830
So, um, I would like to just kind of I don't
know shift focus a little bit now. We've talked

292
00:27:41.830 --> 00:27:47.559
a lot about the parts of the tools that make
your life easier as a developer. Also, you

293
00:27:47.559 --> 00:27:53.740
know, thinking about the users of your apps.
What's in it for them?

294
00:27:53.740 --> 00:27:57.929
And, you know, particularly in this world
we have now where users really come to expect

295
00:27:57.929 --> 00:28:03.669
from Web apps these, you know, these new features
that really push the limits of the CPU and

296
00:28:03.669 --> 00:28:10.669
GPU and memory and so on and, you know, in
that context, in particular, how do we -- how

297
00:28:10.679 --> 00:28:17.070
do we measure responsiveness? You know, this
idea like what is it, how do we measure it?

298
00:28:17.070 --> 00:28:23.179
And luckily, we have some tools for that.
I was thinking in particular, you know, a

299
00:28:23.179 --> 00:28:30.179
website you may have seen called HTML5rocks.
It's got a really nice interface, really great

300
00:28:30.460 --> 00:28:34.230
content. But we've noticed some, you know,
just slight stuttering, it's hard to see here.

301
00:28:34.230 --> 00:28:41.230
But some slight stuttering with scrolling
on the page and, you know, the thing was coming

302
00:28:41.450 --> 00:28:45.830
at that problem -- you know, there are a million
things it could have been. And what I wanted

303
00:28:45.830 --> 00:28:50.220
to know from Pavel is how do we approach that
problem where you really kind of have no idea

304
00:28:50.220 --> 00:28:54.280
where to start.
So, yeah, I thought maybe you could give us

305
00:28:54.280 --> 00:28:56.159
hints there.
&gt;&gt;Pavel Feldman: Yeah, of course. So you start

306
00:28:56.159 --> 00:29:00.630
with the timeline when you don't know what's
happening in the page, especially if you have

307
00:29:00.630 --> 00:29:03.330
performance issues in the page, you start
with the timeline.

308
00:29:03.330 --> 00:29:10.030
So let us record a timeline in here. I will
do devtools to get a bit more real estate

309
00:29:10.030 --> 00:29:16.600
in here. And in the timeline, I am pressing
record the record button and I go to the page,

310
00:29:16.600 --> 00:29:23.179
and I scroll it a bit, and then I go back
and turn off the recording. So what I can

311
00:29:23.179 --> 00:29:28.169
see here, let me zoom into a window here.
What I can see here is a lot of events are

312
00:29:28.169 --> 00:29:33.230
happening within the browser. And timeline
not only shows us the JavaScript events, it

313
00:29:33.230 --> 00:29:39.309
shows all of the native events, styles, painting,
everything that happens in the browser. While

314
00:29:39.309 --> 00:29:44.700
hovering over these elements, you can see
what is actually taking time. Yellow is scripting,

315
00:29:44.700 --> 00:29:49.710
blue is loading, we didn't have any and green
is painting. So this picture gives you a very

316
00:29:49.710 --> 00:29:54.679
good understanding of what's slow.
&gt;&gt;Sam Dutton: Yeah. That's good. That's good.

317
00:29:54.679 --> 00:30:00.130
I mean, the only problem is, you know, I remember
when I first saw this timeline thing I thought,

318
00:30:00.130 --> 00:30:04.250
wow, that's lot of information. But it's kind
of useless, you know. It's like where do we

319
00:30:04.250 --> 00:30:08.400
go from there? It doesn't really give me a
picture of what's happening each time there's

320
00:30:08.400 --> 00:30:11.700
a slowness --
&gt;&gt;Pavel Feldman: I give up. So we've gotten

321
00:30:11.700 --> 00:30:16.480
exactly this feedback from you and we thought
we need something better. And with this version

322
00:30:16.480 --> 00:30:22.620
of Chrome we are introducing a new frame mode
of the timeline. Let me zoom into a couple

323
00:30:22.620 --> 00:30:27.740
of frames. So with these frame mode in the
timeline, we are defining a new term, a frame.

324
00:30:27.740 --> 00:30:34.460
And the frame is the amount of time that the
browser needs to update the screen. It includes

325
00:30:34.460 --> 00:30:39.330
everything. JavaScript processing, recalculation
of the styles, painting, everything is happening

326
00:30:39.330 --> 00:30:43.570
within the single frame and then your user
sees the picture.

327
00:30:43.570 --> 00:30:49.429
You can see the same nice color coding in
here. Green is paint, purple is layout, styles

328
00:30:49.429 --> 00:30:54.730
and the yellow is scripting.
But more importantly, we set a baseline to

329
00:30:54.730 --> 00:31:01.080
you. And this baseline is 60-hertz. 60 frames
per second. That's what browser expects from

330
00:31:01.080 --> 00:31:08.080
you. You need to generate 60 frames each second.
It gives you only 16 milliseconds per frame.

331
00:31:08.850 --> 00:31:14.330
That's the same vsync signal that we've been
talking about on the keynote. Now, if we look

332
00:31:14.330 --> 00:31:21.330
at this very page, we can see that the frame
was taking, in fact, 45 milliseconds.

333
00:31:21.440 --> 00:31:28.440
And it is above the baseline of the 60 frames
per second. This solid line in the middle.

334
00:31:28.970 --> 00:31:34.370
So it's not JavaScript in your case. It's
not styles. It's the paint. You must be painting

335
00:31:34.370 --> 00:31:37.919
something very beautiful.
&gt;&gt;Sam Dutton: Yeah, yeah, no I know.

336
00:31:37.919 --> 00:31:40.950
[Laughter].
&gt;&gt;Sam Dutton: What I know is the culprit is

337
00:31:40.950 --> 00:31:46.830
-- yeah, some there's some heavy duty CSS
in there, a lot of gradients.

338
00:31:46.830 --> 00:31:52.250
&gt;&gt;Pavel Feldman: Oh, I know! [Laughter]
&gt;&gt;Sam Dutton: Aesthetic. Nice background image.

339
00:31:52.250 --> 00:31:58.850
&gt;&gt;Pavel Feldman: I know it's nice, but it's
slow. I removed all of them, and the page

340
00:31:58.850 --> 00:32:05.000
still has that background. What's wrong? Okay.
Let's inspect. Oh, are there are more.

341
00:32:05.000 --> 00:32:07.679
[Laughter]
&gt;&gt;Pavel Feldman: And those are the same. You

342
00:32:07.679 --> 00:32:13.059
are using all over again the same gradients.
&gt;&gt;Sam Dutton: Twice is good. [Laughter].

343
00:32:13.059 --> 00:32:16.159
&gt;&gt;Pavel Feldman: Okay.
Maybe it was making it slow. Okay. Anyways,

344
00:32:16.159 --> 00:32:21.000
now that I've disabled everything and you
can't really tell the difference, can you?

345
00:32:21.000 --> 00:32:27.460
Let me go back to the timeline and start recording.
And let me scroll here a bit.

346
00:32:27.460 --> 00:32:31.549
Go back and stop my timeline. [Laughter].
[ Applause ]

347
00:32:31.549 --> 00:32:38.150
&gt;&gt;Pavel Feldman: There's nice 16 milliseconds
frame, thank you.

348
00:32:38.150 --> 00:32:44.740
&gt;&gt;Sam Dutton: Yeah, okay, well done.
&gt;&gt;&gt; [ Inaudible - no mic ]

349
00:32:44.740 --> 00:32:47.740
&gt;&gt;Pavel Feldman: Okay. Let's take it to the
Q and A.

350
00:32:47.740 --> 00:32:52.600
Thank you.
&gt;&gt;Sam Dutton: Yeah, and if you want to learn

351
00:32:52.600 --> 00:32:57.370
more about that stuff, after us there's the
jank buster session.

352
00:32:57.370 --> 00:33:00.020
It will go into more detail.
&gt;&gt;Pavel Feldman: Right. So that was smooth

353
00:33:00.020 --> 00:33:06.539
animations. Wrapping up, please measure performance
of your animations and scrolling. Now we have

354
00:33:06.539 --> 00:33:11.960
a good baseline, 16 milliseconds, you will
know for sure, (indiscernible) smooth has

355
00:33:11.960 --> 00:33:17.450
now a value, it's 60.
Use this time wisely. Think as game developers.

356
00:33:17.450 --> 00:33:22.240
Game developers don't have much time for a
frame. Tools will help you narrowing down

357
00:33:22.240 --> 00:33:27.600
the problem, whether it's paint or JavaScript.
After you know the paint events and you need

358
00:33:27.600 --> 00:33:31.480
to bisect those, regress, find where the culprit
is.

359
00:33:31.480 --> 00:33:35.190
For the JavaScript we have better tools. We
will point you to the very line of the source

360
00:33:35.190 --> 00:33:41.440
code that is updating the layout or recalculating
styles. So you will know what is wrong.

361
00:33:41.440 --> 00:33:46.190
And as Sam mentioned, in this very room, right
after ours, there is going to be an extended

362
00:33:46.190 --> 00:33:52.299
session on the frames mode for the timeline
and the GPU team from Chrome is going to drive

363
00:33:52.299 --> 00:33:56.980
it. So make sure you don't miss it.
&gt;&gt;Sam Dutton: Yeah, great stuff.

364
00:33:56.980 --> 00:34:00.950
Of course, Pavel was kind of cheating there.
You know, you can always just delete stuff

365
00:34:00.950 --> 00:34:05.150
to make a web app work faster.
&gt;&gt;Pavel Feldman: You can? [Laughter].

366
00:34:05.150 --> 00:34:10.070
&gt;&gt;Sam Dutton: That's true. But, you know,
I mean we all know that these situations,

367
00:34:10.070 --> 00:34:15.560
as much as you optimize everything, all your
code, you get to a point sometimes where you've

368
00:34:15.560 --> 00:34:18.540
got some code that is just inherently CPU
intensive, long running.

369
00:34:18.540 --> 00:34:25.429
And, you know, I was thinking about how to
use the devtools to deal with that. And I

370
00:34:25.429 --> 00:34:29.800
was thinking of -- you know, the prettyprint
function itself. What I have noticed with

371
00:34:29.800 --> 00:34:34.359
that is that, you know, it's obviously doing
a lot of work but it doesn't seem to freeze

372
00:34:34.359 --> 00:34:37.710
up the interface, so I have asked Pavel about
how that works.

373
00:34:37.710 --> 00:34:42.060
&gt;&gt;Pavel Feldman: Right, so it does use more
than 16 milliseconds of time. We are using

374
00:34:42.060 --> 00:34:45.970
WebWorkers to move the work off into the other
thread.

375
00:34:45.970 --> 00:34:49.320
&gt;&gt;Sam Dutton: Okay, Yeah. I mean, I always
feel like I should use WebWorkers.

376
00:34:49.320 --> 00:34:53.119
&gt;&gt;Pavel Feldman: Do you use WebWorkers? Not
much, okay.

377
00:34:53.119 --> 00:34:57.599
&gt;&gt;Sam Dutton: But I always sort of shy away
from it, because I feel like they are hard

378
00:34:57.599 --> 00:35:03.080
to debug, you know, like where do you start?
&gt;&gt;Pavel Feldman: Oh, is it? [Laughter].

379
00:35:03.080 --> 00:35:09.849
&gt;&gt;Pavel Feldman: Let's try that. As I mentioned
we will be focusing on the WebWorkers, so

380
00:35:09.849 --> 00:35:14.849
let me go back to the page where we were debugging
devtools, for the devtools.

381
00:35:14.849 --> 00:35:20.080
We will be interested in the source code.
Do we have any? Well, let's reload.

382
00:35:20.080 --> 00:35:27.080
Let's get some. Yeah, we've got some files.
Okay. So here is the source code. As you probably

383
00:35:27.190 --> 00:35:33.310
know, when you press this little button, it
gets prettyprinted, really nice. And as I

384
00:35:33.310 --> 00:35:38.830
mentioned, it happens in the worker. So let's
try going ahead and debug it. I'm going to

385
00:35:38.830 --> 00:35:45.830
the debugger sidebar, under the workers tab
I choose to pause on start. So what it should

386
00:35:47.440 --> 00:35:52.900
do, when the worker is created for your page,
it should stop it before the very first statement

387
00:35:52.900 --> 00:35:59.420
this worker executes.
And we should be able to debug it. Let's try

388
00:35:59.420 --> 00:36:04.150
it out.
Okay. Now that we have three windows with

389
00:36:04.150 --> 00:36:09.000
the devtools on the screen, I feel I must
go over them again. So the one to the left,

390
00:36:09.000 --> 00:36:14.270
is your Web page. It's just me, I have the
devtools, sorry. One to the right is the devtools.

391
00:36:14.270 --> 00:36:18.380
And the one in the middle is the devtools
for the worker. [Laughter].

392
00:36:18.380 --> 00:36:22.740
&gt;&gt;Sam Dutton: Got it.
&gt;&gt;Pavel Feldman: Yeah, is that okay?

393
00:36:22.740 --> 00:36:28.560
Right. So I can step through the execution
here and I can see that I'm debugging the

394
00:36:28.560 --> 00:36:35.560
worker. The worker is stopped. But he can
scroll the page. So the page is not blocked

395
00:36:36.460 --> 00:36:41.760
by the worker. So this is not the fake worker
emulation using iFrames, this is the real

396
00:36:41.760 --> 00:36:46.290
stuff, native workers being debugged. Now,
of course you can use all of the debugging

397
00:36:46.290 --> 00:36:53.290
functions in here or you can go and collect
CPU profiles or take heap snapshots, do the

398
00:36:53.440 --> 00:36:59.490
timeline for the worker or use console. This
devtools window is working in the context

399
00:36:59.490 --> 00:37:06.490
of your worker. And if you type window in
here, there is no window and there's no document.

400
00:37:08.400 --> 00:37:11.280
Who are you?
[Laughter]

401
00:37:11.280 --> 00:37:17.230
&gt;&gt;Pavel Feldman: It is dedicated worker context.
So this is in fact the worker object.

402
00:37:17.230 --> 00:37:23.849
Now, we support debugging workers, the dedicated
workers and the shared workers. And the way

403
00:37:23.849 --> 00:37:30.849
to start debugging shared workers is to visit
Chrome Inspect. That's where all of the inspectable

404
00:37:31.940 --> 00:37:36.900
properties of Chrome are represented, be it
page or an extension or a background page,

405
00:37:36.900 --> 00:37:40.920
application, shared worker, everything you
can start from here. You click inspect and

406
00:37:40.920 --> 00:37:47.380
you are brought to the right window.
So that's the WebWorker story.

407
00:37:47.380 --> 00:37:54.380
[ Applause ]
&gt;&gt;Sam Dutton: I may even use them now. We

408
00:37:55.980 --> 00:38:02.290
talked a lot about memory, but of course,
there's always some kind of tradeoff with

409
00:38:02.290 --> 00:38:09.290
performance. Well, or is there?
We did some testing of Google Web apps, and

410
00:38:11.560 --> 00:38:18.560
you can see on the graph here, the yellow
line at the top there represents overtime

411
00:38:18.859 --> 00:38:25.859
memory consumption, and the blue with a high
level variance represents the measure of the

412
00:38:26.430 --> 00:38:33.060
projection of latency. One thing we're finding
with Web apps, I think this is a common experience

413
00:38:33.060 --> 00:38:38.890
now, people are using Web Apps for much longer
than they used to. We have users of Google

414
00:38:38.890 --> 00:38:45.890
Apps like running them for days. So you need
to be aware of that. What we learned was obviously

415
00:38:47.230 --> 00:38:53.690
that there were memory leaks and that we could
fix, and the most common source of that was

416
00:38:53.690 --> 00:38:57.330
problematic -- in fact, it was problematic
usage of event listeners.

417
00:38:57.330 --> 00:39:02.470
&gt;&gt;Pavel Feldman: Okay. So I think we have
some tools for that.

418
00:39:02.470 --> 00:39:06.040
&gt;&gt;Sam Dutton: Yeah, indeed.
&gt;&gt;Pavel Feldman: And we're going to explore

419
00:39:06.040 --> 00:39:11.070
a simple example of the memory leak, and --
&gt;&gt;Sam Dutton: That's a lovely website.

420
00:39:11.070 --> 00:39:18.070
&gt;&gt;Pavel Feldman: Yeah. So I'm going to the
source, and let us see the source code. So

421
00:39:19.890 --> 00:39:26.890
what it does is every time I click "say hello",
it creates an element. Hello, there. And it

422
00:39:27.859 --> 00:39:34.859
adds it to the result. But then in a second
it just removed them all. But they all are

423
00:39:35.849 --> 00:39:42.560
still here in this array. Let's see how the
tool handles that memory leak case. But now

424
00:39:42.560 --> 00:39:47.089
let's imagine we don't know it all and we
start from scratch. Can you forget everything

425
00:39:47.089 --> 00:39:52.200
that I've just said?
I'm going to start recording the timeline,

426
00:39:52.200 --> 00:39:59.200
and a number of clicks in here, and let me
undock the timeline. Oops. And we are going

427
00:40:04.260 --> 00:40:09.750
to look at the memory view for it, and let
me face the window. What you can see here

428
00:40:09.750 --> 00:40:15.160
is the heap graph. That's the memory your
app is consuming at the top, so it's a bit

429
00:40:15.160 --> 00:40:21.869
more than a megabyte. Then there is a regular
timeline, and then there is the memory counters,

430
00:40:21.869 --> 00:40:27.690
DOM counters, and event list counters represented
in here. You can see that the number of DOM

431
00:40:27.690 --> 00:40:34.690
notes increased from 18 to 24 as I was clicking,
and the document is still alone, and there

432
00:40:35.030 --> 00:40:42.030
are two new event listeners in here. If I
click on the step, I will see that there is

433
00:40:43.099 --> 00:40:50.099
an event associated with that. So every time
it grows, there is some event in here, and

434
00:40:52.810 --> 00:40:59.810
indeed the link, we can hover over and jump
to the line that was creating that object,

435
00:40:59.849 --> 00:41:06.750
of course, but more importantly we now know
what user action is causing the leak. Now

436
00:41:06.750 --> 00:41:13.750
that we know what is the problem, we'll find
the actual location of that object. And for

437
00:41:15.500 --> 00:41:22.500
that we turn to the profiler, and in the profiler,
I'm going to -- let me go back to the page.

438
00:41:23.010 --> 00:41:30.010
I'm going to take a heap snapshot. Let me
say hello a few more times and take another

439
00:41:31.000 --> 00:41:38.000
heap snapshot, and let's see what it is all
about. So the heap snapshot is in fact the

440
00:41:38.440 --> 00:41:45.440
snapshot of the JavaScript heap of running
application. And the summary view that I'm

441
00:41:45.710 --> 00:41:51.930
looking at is the summary for the heap where
all the objects are grouped by their type.

442
00:41:51.930 --> 00:41:58.390
For example, those are API functions and those
are date objects. Those are Chrome events.

443
00:41:58.390 --> 00:42:04.280
So everything is grouped in here. For each
of the objects I can see -- for each of the

444
00:42:04.280 --> 00:42:10.099
group I can see the object count, shadow size
and the retain size, so its own size and the

445
00:42:10.099 --> 00:42:17.099
size of the tree it is holding. Now, if I
go to the second snapshot, that was taken

446
00:42:17.940 --> 00:42:24.940
after my actions that are supposed to leak,
I can compare it to the first one.

447
00:42:28.750 --> 00:42:35.750
[ APPLAUSE ]
And in the comparison mode, I can see that

448
00:42:36.160 --> 00:42:42.690
there are 7 new objects. And if I hover over
these objects, you get this hover card that

449
00:42:42.690 --> 00:42:48.329
you got used to while debugging, and if I
select this object, it will show me the retaining

450
00:42:48.329 --> 00:42:54.910
trees for this object. Those are the guys
that reference my object. And those are the

451
00:42:54.910 --> 00:43:01.910
real cause of the memory leak. In this case,
I have an array. And in its 13th slot there

452
00:43:02.339 --> 00:43:09.339
is this paragraph element, and, you know these
dollar zero that refers the currently selected

453
00:43:09.560 --> 00:43:16.560
element in the elements panel, it also works
in here. So from this panel you can jump into

454
00:43:16.720 --> 00:43:22.160
the source -- into the console, into the running
object and explore it there. Let's see what

455
00:43:22.160 --> 00:43:26.820
is holding this array?
It's a window. It's a global object. And the

456
00:43:26.820 --> 00:43:33.820
property name on it is "holding", so if I
do dollar zero, that's my window, and if I

457
00:43:33.920 --> 00:43:40.920
do dollar zero holding, that's the array that
was holding the paragraph element. So to recap

458
00:43:43.140 --> 00:43:49.560
that, if you don't know where your memory
leak is or where is the unbonded cache that

459
00:43:49.560 --> 00:43:55.480
you're using, you should go to the time line,
then you perform your actions and look at

460
00:43:55.480 --> 00:44:01.060
the spikes in the DOM node counters. There
is also garbage collection button that you

461
00:44:01.060 --> 00:44:06.579
can press in the timeline to collect the garbage
that should bring everything back to normal.

462
00:44:06.579 --> 00:44:12.680
If it doesn't, this means you have a leak.
Now that you have tracked down the user scenario

463
00:44:12.680 --> 00:44:18.270
that is responsible for your leak, start using
the heap profiler. You take a heap snapshot,

464
00:44:18.270 --> 00:44:24.369
then you do your action, you take another
snapshot and then you compare the two. And

465
00:44:24.369 --> 00:44:28.760
once you've seen the leak objects, the objects
that should not be there, look for suspicious

466
00:44:28.760 --> 00:44:34.690
classes that you own the code, you know it.
Then track the retainers in the bottom part

467
00:44:34.690 --> 00:44:39.430
of the screen to track them to the global
objects and you will see the exact path that

468
00:44:39.430 --> 00:44:45.200
is leaking memory. There are more complicated
techniques for finding memory leaks that are

469
00:44:45.200 --> 00:44:51.829
more efficient such as three snapshot technology
where you take three snapshots, then you look

470
00:44:51.829 --> 00:44:58.380
at the third, and filter out everything that
has been allocated between one and two, or

471
00:44:58.380 --> 00:45:02.760
actually show everything that has been allocated
between one and two, but it's a different

472
00:45:02.760 --> 00:45:06.869
technique. It's more complex. It's beyond
this session, but we are here at the Chrome

473
00:45:06.869 --> 00:45:12.560
booth, so if you have questions there, make
sure you come and ask them there. Okay.

474
00:45:12.560 --> 00:45:17.650
&gt;&gt;Sam Dutton: Thanks very much, Pavel, really
useful tools for dealing with memory as well

475
00:45:17.650 --> 00:45:23.960
as performance. We don't have much more time,
but I just wanted to mention a couple of more

476
00:45:23.960 --> 00:45:27.710
features that have come into the tools now,
really useful stuff, particularly in relation

477
00:45:27.710 --> 00:45:30.089
to clientside story.
&gt;&gt;Pavel Feldman: It's not the end.

478
00:45:30.089 --> 00:45:35.760
&gt;&gt;Sam Dutton: Have a look at the features
for index DB and App Cache. Have you seen

479
00:45:35.760 --> 00:45:39.550
the web components? We have great tools for
shadow DOM inspection, just go to the elements

480
00:45:39.550 --> 00:45:46.010
panel and drill down into an element and you
will see the shadow DOM compliance. It's great

481
00:45:46.010 --> 00:45:52.119
stuff. My favorite thing of all, Pavel wouldn't
let me demonstrate is source maps. These are

482
00:45:52.119 --> 00:45:57.640
really easy to work with, you know, you use
a tool like closure to minify your code, at

483
00:45:57.640 --> 00:46:03.089
the same time you make a source map file,
you put a link to the source map file in the

484
00:46:03.089 --> 00:46:09.140
minified code, and that's it. When you use
that code in the devtools, you'll see the

485
00:46:09.140 --> 00:46:12.520
human readable version seamlessly in place.
It makes life much easier.

486
00:46:12.520 --> 00:46:17.900
&gt;&gt;Pavel Feldman: Come on. Come on. How can
you love a feature like that? Here is my favorite

487
00:46:17.900 --> 00:46:24.900
one. Here is the WebKit, right? Let us go
back there. No, let's do Google. So in the

488
00:46:27.380 --> 00:46:31.970
Dev Tools, right, I'm a developer, and where
is everything in here?

489
00:46:31.970 --> 00:46:37.700
Okay. And there's Google, and sometimes I
am ambitious and I kind of think, okay, let

490
00:46:37.700 --> 00:46:44.700
me change things here, and it will be a Google
search, supersearch -- it didn't apply. Why?

491
00:46:46.220 --> 00:46:53.220
They are fooling me. Come on. Do it again.
&gt;&gt;Sam Dutton: That's weird.

492
00:46:53.420 --> 00:46:59.960
&gt;&gt;Pavel Feldman: Yeah. Oh, it wasn't title.
Okay. Sorry. I'm feeling very lucky. Are you

493
00:46:59.960 --> 00:47:02.990
working for me?
Okay. Good. Then I have more ambitious, I

494
00:47:02.990 --> 00:47:09.640
think. Okay. So that color is not -- I want
a red one. And then I think, okay, this Nexus

495
00:47:09.640 --> 00:47:16.640
7 is really cool. I actually go and list the
font size for it, and do the shift up. Yeah,

496
00:47:19.540 --> 00:47:24.060
and I think, okay, so this is enough clutter
here, right?

497
00:47:24.060 --> 00:47:27.690
I need to get rid of it, and go and delete
it all, and you know what, the search field,

498
00:47:27.690 --> 00:47:29.290
I don't like it either. I'll just delete it
all.

499
00:47:29.290 --> 00:47:30.920
&gt;&gt;Sam Dutton: That's too complex.
&gt;&gt;Pavel Feldman: Come on. And then I think,

500
00:47:30.920 --> 00:47:37.920
okay, I've done a lot -- why can't I delete
it? Come on, Google, where is it?

501
00:47:40.960 --> 00:47:47.960
Yeah. And I think, okay, that's enough, and
then I calm down, I think I like it the way

502
00:47:49.339 --> 00:47:56.339
it was, and I press command C and things are
undone, or I press shift command C and things

503
00:47:57.520 --> 00:48:04.520
are redone. So we have the complete undo-redo
stuck in here that is more importantly retaining

504
00:48:05.450 --> 00:48:11.359
the identity of the nodes, so when I'm deleting
nodes or recreating nodes, those are the same

505
00:48:11.359 --> 00:48:16.710
objects, and your JavaScript points there
and your program remains functional with that.

506
00:48:16.710 --> 00:48:22.020
So that's a cool feature.
[ APPLAUSE ]

507
00:48:22.020 --> 00:48:26.570
&gt;&gt;Sam Dutton: Go back. Go back. Come on, while
you're there, someone asked for this, do command

508
00:48:26.570 --> 00:48:30.300
-- what is it, command plus.
&gt;&gt;Pavel Feldman: No, I won't show you. I'll

509
00:48:30.300 --> 00:48:34.849
show you the question mark. The question mark
is where you get all the shortcuts to all

510
00:48:34.849 --> 00:48:40.930
the features that we have, the ones with the
shortcuts, including the ones that go to file,

511
00:48:40.930 --> 00:48:47.930
go to line, and goes to your font size.
&gt;&gt;Sam Dutton: Okay. So, yeah, we've been using

512
00:48:49.609 --> 00:48:54.720
Chrome Canary today. Would recommend if you're
using the devtools a lot, that you give Chrome

513
00:48:54.720 --> 00:48:59.740
Canary a try, you get all the newest features
and also you can give us feedback on how you

514
00:48:59.740 --> 00:49:06.740
would like to see the devtools in the future.
And if you've never filed a bug, you know,

515
00:49:07.119 --> 00:49:09.410
today's the day, new.crbug.com. Go there to
file bugs, make feature requests, anything

516
00:49:09.410 --> 00:49:16.410
Chrome related particularly with the devtools,
do it now, yeah, that's the place to go for

517
00:49:16.690 --> 00:49:23.690
any of you stuff. So, yeah, that's it from
us, thank you very much. Indeed.

518
00:49:27.739 --> 00:49:34.739
[ APPLAUSE ]
&gt;&gt;Sam Dutton: We've got about -- yeah, about

519
00:49:35.510 --> 00:49:40.740
7 minutes for questions so if you would like
to ask questions, come up to the mics in the

520
00:49:40.740 --> 00:49:43.349
aisles there.
&gt;&gt;&gt; I thought of one more question, you're

521
00:49:43.349 --> 00:49:47.579
taking requests for improvements to devtools.
Remote debugging is really cool, but it doesn't

522
00:49:47.579 --> 00:49:51.500
work when you're offline, because it hits
app spot first. It makes it really hard to

523
00:49:51.500 --> 00:49:54.790
do like mobile development on an airplane.
&gt;&gt;Pavel Feldman: So I can give you advice

524
00:49:54.790 --> 00:50:01.599
how to work around it, and then we'll fix
it. So the workaround is to save that page

525
00:50:01.599 --> 00:50:06.920
that is served alt app engine, and it's just
a Web app, and you save it, you open it, and

526
00:50:06.920 --> 00:50:12.310
you point to your Chrome instance or your
mobile instance and it will work. No need

527
00:50:12.310 --> 00:50:19.310
for a cloud there. Okay?
&gt;&gt;&gt; Is there a way to see the packets in the

528
00:50:19.420 --> 00:50:23.760
Web socket?
&gt;&gt;Pavel Feldman: Yes, in fact you can see

529
00:50:23.760 --> 00:50:30.760
the packets on the Web socket.
And let me show it to you, so that's -- okay.

530
00:50:33.060 --> 00:50:37.870
I'm going to use a -- we are using those,
right, for the devtool itself, where are you

531
00:50:37.870 --> 00:50:44.609
-- where are you?
Okay. So I'll need to do devtool on devtool

532
00:50:44.609 --> 00:50:51.609
on devtool, but that's probably fine. You
got used to it. And in the network, I don't

533
00:50:53.940 --> 00:51:00.940
need to record. I'll just do some stuff. And
you should see the packets in here, and if

534
00:51:03.170 --> 00:51:09.680
they aren't, we just can't find them, so the
idea is that you can see the resource responsible

535
00:51:09.680 --> 00:51:15.010
for the Web socket packet in here, and in
the editing part of this screen, you will

536
00:51:15.010 --> 00:51:22.010
see Web socket frames tab. I can't show it
to you right now, but it's there, and it is

537
00:51:22.079 --> 00:51:25.530
going to be stable in Chrome 21. It's a recent
feature.

538
00:51:25.530 --> 00:51:30.010
&gt;&gt;Sam Dutton: And another?
&gt;&gt;&gt; Hi, thank you guys for the presentation.

539
00:51:30.010 --> 00:51:37.010
It was real cool. So I have a question: Is
it possible to simulate the http request that

540
00:51:38.040 --> 00:51:45.030
like that made from UI, or, you know, you
click a button, you have a bunch of requests,

541
00:51:45.030 --> 00:51:50.359
is it possible to simulate a bunch of them
and override some headers, override a script

542
00:51:50.359 --> 00:51:56.470
that can do it.
&gt;&gt;Pavel Feldman: Not yet. XHR replay simulation

543
00:51:56.470 --> 00:52:02.180
is very high in our to-do list, so we are
going to make it soon, but it's not there

544
00:52:02.180 --> 00:52:05.839
yet.
&gt;&gt;Sam Dutton: Yeah, lots of people are asking

545
00:52:05.839 --> 00:52:07.059
for that.
&gt;&gt;&gt; Thanks.

546
00:52:07.059 --> 00:52:10.349
&gt;&gt;&gt; So do these techniques -- I mean the kind
of examples that you showed were a little

547
00:52:10.349 --> 00:52:16.240
bit, you know, contrived obviously for the
demo, but let's say Gmail, does Gmail use

548
00:52:16.240 --> 00:52:21.900
the Chrome devtools in the same way that you're
doing it or do they use different tools or

549
00:52:21.900 --> 00:52:27.240
do they have different techniques in how they
use the tools, you know, for debugging and

550
00:52:27.240 --> 00:52:30.950
just working with that system, because there's
literally, you know, dozens if not hundreds

551
00:52:30.950 --> 00:52:35.560
of events happening per second in the timeline,
the heap snapshots will have, you know, tons

552
00:52:35.560 --> 00:52:38.880
of different things, does it scale to something
at that level?

553
00:52:38.880 --> 00:52:44.560
&gt;&gt;Pavel Feldman: Gmail is our best in-house
client so we're working with them a lot. These

554
00:52:44.560 --> 00:52:49.660
three snapshot techniques with the heap profiling
was in fact -- those were discovered while

555
00:52:49.660 --> 00:52:55.280
working with the Gmail team while they were
hunting their memory leaks. They're also using

556
00:52:55.280 --> 00:52:58.180
timeline and, of course, they're using RD
bugger.

557
00:52:58.180 --> 00:53:01.510
&gt;&gt;&gt; So it does.
&gt;&gt;Pavel Feldman: Yes. Of course.

558
00:53:01.510 --> 00:53:06.480
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;&gt; Hi, is there a good way to inspect, edit

559
00:53:06.480 --> 00:53:13.420
CSS key frames, the CSS animation key frames?
Because you can -- you can see the define

560
00:53:13.420 --> 00:53:18.109
animation, but I want to see the key frames,
edit them, and then look at performance issues.

561
00:53:18.109 --> 00:53:23.349
&gt;&gt;Pavel Feldman: So the best you can get is
just jumping to the source code and editing

562
00:53:23.349 --> 00:53:28.650
them there. Everything you do in the source
code is immediately reflected in the screen.

563
00:53:28.650 --> 00:53:31.280
&gt;&gt;&gt; Okay.
&gt;&gt;Pavel Feldman: But there is no structural

564
00:53:31.280 --> 00:53:33.690
editing for the key frames and for media queries
yet.

565
00:53:33.690 --> 00:53:38.400
&gt;&gt;&gt; Okay. And then is there a way to trigger
them, force them to rerun in a performance

566
00:53:38.400 --> 00:53:41.380
tracing kind of context.
&gt;&gt;Pavel Feldman: Of course. You can edit everything

567
00:53:41.380 --> 00:53:45.980
in here, and then you just save, and then
you go to the timeline and you perform those

568
00:53:45.980 --> 00:53:52.980
actions and they will be using these new styles.
Okay, thank you. Is the mobile debugging going

569
00:53:55.109 --> 00:54:01.849
to be available on Chrome for IOS?
&gt;&gt;Pavel Feldman: I don't know. We'll have

570
00:54:01.849 --> 00:54:07.640
to check. So the remote debugging background
is a part of WebKit, so the code is there.

571
00:54:07.640 --> 00:54:14.640
I believe there is a way to remove the debugger
IOS devices. I don't know about the Chrome,

572
00:54:15.980 --> 00:54:22.230
but I can find it out for you, and e-mail
that, I'll send it back to you.

573
00:54:22.230 --> 00:54:25.220
&gt;&gt;&gt; Thanks.
&gt;&gt;&gt; And you talked earlier about getting below

574
00:54:25.220 --> 00:54:29.710
60 frames a second, there was I think green,
purple and blue were colors that you talked

575
00:54:29.710 --> 00:54:32.680
about, and when you got below they all turned
gray. What was the gray for?

576
00:54:32.680 --> 00:54:39.680
&gt;&gt;Pavel Feldman: Okay, so here is the thing:
The frame for us is everything that beginning

577
00:54:40.170 --> 00:54:47.170
of the frames, and the gray that you saw above
is the CPU activity that we do not instrument,

578
00:54:48.700 --> 00:54:54.430
or it's an idle time. We are working on distinguishing
between the two, so very soon we will be able

579
00:54:54.430 --> 00:55:01.430
to say this is the CPU. It has been doing
something. Or this is idle, the other tasks

580
00:55:02.619 --> 00:55:07.240
are using it. So we are actively working on
the timeline, on the frame mode, and it's

581
00:55:07.240 --> 00:55:11.160
very first revision of it.
&gt;&gt;&gt; So if it's gray and it is the CPU that's

582
00:55:11.160 --> 00:55:14.380
doing it, it's your app that is causing that
CPU to spin up but you don't know why?

583
00:55:14.380 --> 00:55:19.950
&gt;&gt;Pavel Feldman: Right, the spikes that we
saw on the timeline, the gray one, transparent

584
00:55:19.950 --> 00:55:26.150
one, were related to the CPU related to the
switching in windows that I was doing as the

585
00:55:26.150 --> 00:55:31.550
timeline was captured, so that was idle from
your page perspective, because it was not

586
00:55:31.550 --> 00:55:36.329
wasting CPU resources, so we will be able
to cut that down soon and tell you that your

587
00:55:36.329 --> 00:55:42.319
page is not responsible for it. But the picture
that we show is accurate from the repaint

588
00:55:42.319 --> 00:55:47.869
perspective, from the frame perspective, because
something has been happening and your frame

589
00:55:47.869 --> 00:55:54.460
has not been painted at that time, so there
was indeed a jank in the repaint.

590
00:55:54.460 --> 00:56:00.140
&gt;&gt;&gt; Thank you.
&gt;&gt;&gt; Is there any plans on integrating a -- like

591
00:56:00.140 --> 00:56:07.140
a testing framework into the devtool so, say,
macros and assertions and these kinds of things.

592
00:56:07.260 --> 00:56:13.210
&gt;&gt;Pavel Feldman: So we have a nice extensions
API support where we add extensions for you

593
00:56:13.210 --> 00:56:19.170
to be able to build your own panel in the
devtool, or to react upon selection of an

594
00:56:19.170 --> 00:56:24.670
element in the elements panel and such. We
might extend those APIs if they are not sufficient

595
00:56:24.670 --> 00:56:31.619
for achieving your goals. So we -- yeah, we
are -- we are relying upon the third parties

596
00:56:31.619 --> 00:56:34.809
to provide the functional like that.
&gt;&gt;&gt; All right, so there's no -- right now

597
00:56:34.809 --> 00:56:38.869
on that direct like roadmap, there's no plans
for a testing framework essentially?

598
00:56:38.869 --> 00:56:42.880
&gt;&gt;Pavel Feldman: Right. Those would be done
through the extensions at least at the first

599
00:56:42.880 --> 00:56:46.280
page.
&gt;&gt;&gt; Okay, cool, thanks.

600
00:56:46.280 --> 00:56:50.460
&gt;&gt;&gt; I'm an engineer on the Google+ team, and
first of all, I just want to say thanks so

601
00:56:50.460 --> 00:56:53.410
much for these tools, I couldn't do my job
without them. I mean, they're just a real

602
00:56:53.410 --> 00:57:00.410
joy to use, they make Web development fun
again. That said, we do obviously have a pretty

603
00:57:01.319 --> 00:57:06.180
massively large JavaScript application and
it's compiling files together and it's starting

604
00:57:06.180 --> 00:57:11.380
across all that, so at least the search across
sources made it easier again to figure out

605
00:57:11.380 --> 00:57:16.329
where that JavaScript is coming from, but
just loading it in and parsing it still is

606
00:57:16.329 --> 00:57:21.089
pretty pokey, it's many -- I'm just curious
how optimized that stuff is and how much you

607
00:57:21.089 --> 00:57:24.940
think you can improve the performance even
further when you have really large JavaScript?

608
00:57:24.940 --> 00:57:30.109
&gt;&gt;&gt; All right, so, by the moment Gmail was
our like largest client, so whenever they

609
00:57:30.109 --> 00:57:35.710
hit the limitation, they came to us and we
fixed it, and please, do that as well, and

610
00:57:35.710 --> 00:57:40.079
we'll be improving. So right now with the
frame mode, we found that we have a lot of

611
00:57:40.079 --> 00:57:45.349
junk in our own UI, and we do know a couple
of little knocks related to the scale with

612
00:57:45.349 --> 00:57:52.349
our text viewer. We are comfortable at about
100K lines. When it goes beyond we are not

613
00:57:52.609 --> 00:57:57.500
that comfortable from the memory standpoint,
but those are all fixable, so as we hit new

614
00:57:57.500 --> 00:57:59.329
limitations, we are fixing them, so please
provide your feedback.

615
00:57:59.329 --> 00:58:04.259
&gt;&gt;&gt; Okay, great. Will do. Thanks.
&gt;&gt;Sam Dutton: Question from this side.

616
00:58:04.259 --> 00:58:10.349
&gt;&gt;&gt; We've been writing some code that runs
on both node.js and the client, since node.js

617
00:58:10.349 --> 00:58:15.470
using V8 does it have any association with
this, or is this purely the clientside browser?

618
00:58:15.470 --> 00:58:22.470
&gt;&gt;Pavel Feldman: Right. This is working against
the WebKit based browsers primarily, so it

619
00:58:22.599 --> 00:58:28.390
does not work against V8 or node. There is
a solution that works against node, because

620
00:58:28.390 --> 00:58:33.690
node supports -- exposes the V8 debugging
protocol. There's a project called Chrome

621
00:58:33.690 --> 00:58:40.690
devtool for Java that is an eclipse plug-in,
and eclipse has indicated that can connect

622
00:58:42.050 --> 00:58:49.050
both to Chrome and to raw V8 including node.
I know that there is a fork of Web inspector

623
00:58:49.900 --> 00:58:56.510
that works a pretty old font that works against
node, and I know there are people that are

624
00:58:56.510 --> 00:59:02.390
trying to implement wrappers around V8 so
that they emulated the remote debugging protocol

625
00:59:02.390 --> 00:59:07.450
that Chrome devtool is using so that we could
connect there, but that is a work in progress.

626
00:59:07.450 --> 00:59:09.339
&gt;&gt;&gt; Okay.
&gt;&gt;Pavel Feldman: So it's Chrome devtools for

627
00:59:09.339 --> 00:59:15.940
Java and that is an eclipse plug-in.
&gt;&gt;Sam Dutton: Thanks very much. I think we

628
00:59:15.940 --> 00:59:22.000
better wrap it up. We've run out of time.
Thanks again. Thanks also for the live feature

629
00:59:22.000 --> 00:59:23.290
request earlier. We'll take note of that.
Thank you.

630
00:59:23.290 --> 00:59:23.999
&gt;&gt;Pavel Feldman: Thank you.
[ Applause ]

WEBVTT

1
00:00:03.399 --> 00:00:05.220
&gt;&gt;Steve Souders: Okay. Is that my cue to go?
Okay. We're having a current discussion about

2
00:00:05.220 --> 00:00:12.220
letting people come in and sit up front, so
I hope we can do that.

3
00:00:13.200 --> 00:00:19.160
I'm really excited to see everyone that showed
up, but I have a cold shower announcement

4
00:00:19.160 --> 00:00:26.009
to make. I'm not giving anything away.
So although that's not entirely true. I'm

5
00:00:26.009 --> 00:00:31.849
giving away information and knowledge, but
nothing that physically you can take home

6
00:00:31.849 --> 00:00:35.770
and give to your kids if that's what they're
expecting.

7
00:00:35.770 --> 00:00:42.770
So I'm going to talk about HTML5 from a performance
perspective, but first I'm going to start

8
00:00:44.070 --> 00:00:50.520
off and give a little background on my work
in working on Web performance and kind of

9
00:00:50.520 --> 00:00:55.960
the motivation. I think probably a lot of
people -- how many people here build Web sites?

10
00:00:55.960 --> 00:01:02.960
Yeah, okay, great.
So I think there's something in the DNA of

11
00:01:05.180 --> 00:01:10.370
engineers in general, and especially programmers,
to be efficient and optimize.

12
00:01:10.370 --> 00:01:16.650
I think as developers we all like our code
-- we feel proud if people -- if we can say

13
00:01:16.650 --> 00:01:22.920
about our code that it's really fast and efficient.
And so at the beginning I'm going to talk

14
00:01:22.920 --> 00:01:29.920
about how we can try to work to instill that
interest and buy-in for performance across

15
00:01:30.060 --> 00:01:33.110
other parts of the organization outside of
engineering.

16
00:01:33.110 --> 00:01:36.800
So there will be a little preamble on that
and then we'll dive into the HTML5 stuff.

17
00:01:36.800 --> 00:01:42.340
I just want to mention the slides are up on
my Web site, stevesouders.com. If you go there

18
00:01:42.340 --> 00:01:49.340
there's a link to it. You can check that out.
Okay. So let's get started -- oh, the other

19
00:01:51.060 --> 00:01:58.060
thing I want to mention is really more than
what I say and more than the words on the

20
00:01:58.479 --> 00:02:04.070
slides, I really want people to pay attention
to the photos in the background of the slides.

21
00:02:04.070 --> 00:02:08.000
[ Laughter ]
&gt;&gt;Steve Souders: Come on, we're going to -- loosen

22
00:02:08.000 --> 00:02:11.459
up a little bit. Let's go.
I mean, like the story of my life, like I

23
00:02:11.459 --> 00:02:15.549
take slow things and make them fast, like
is that very appropriate or what?

24
00:02:15.549 --> 00:02:18.319
I need more feedback.
[ Applause ]

25
00:02:18.319 --> 00:02:25.319
&gt;&gt;Steve Souders: Yeah, okay, there we go.
I worked at Yahoo for a long time, eight years.

26
00:02:25.769 --> 00:02:29.659
I was going to be there one year and I was
there eight years. And about four and a half

27
00:02:29.659 --> 00:02:35.510
years ago I joined Google, which was really
my goal when I first started on Web performance

28
00:02:35.510 --> 00:02:40.099
because I knew the people at Google really
cared about making things fast, and it's true.

29
00:02:40.099 --> 00:02:46.969
So I've been there four and a half years.
I do mostly open source stuff, so I did -- I

30
00:02:46.969 --> 00:02:53.019
created YSlow, Cuzillion, Sprite Me, Hammerhead,
Browserscope. Lindsey Simon now runs that

31
00:02:53.019 --> 00:02:58.939
project, very successful project. Jdrop, which
is a great concept, but not such a successful

32
00:02:58.939 --> 00:03:04.109
project, but you should check it out. HTTP
Archive, another one I don't have time to

33
00:03:04.109 --> 00:03:10.639
talk about today, but check it out, HTTParchive.org.
I wrote "High Performance Web sites," "Even

34
00:03:10.639 --> 00:03:14.290
Faster Web sites."
I taught at Stanford based on the books and

35
00:03:14.290 --> 00:03:19.579
I run the velocity conference. Oh, I have
to update. We just had it this week in fact.

36
00:03:19.579 --> 00:03:24.010
I just finished that on Wednesday.
So I've been doing this performance stuff

37
00:03:24.010 --> 00:03:29.689
for quite a listening time now, seven years,
I think, but when I started back in 2004 I

38
00:03:29.689 --> 00:03:34.290
kind of felt like the lone voice in the woods.
So really I'm sure there were people that

39
00:03:34.290 --> 00:03:40.340
were working on it back then, but when I searched
for information about making Web sites faster,

40
00:03:40.340 --> 00:03:44.760
I really didn't find very much. There was
a great blog post from David Hyatt that actually

41
00:03:44.760 --> 00:03:51.209
really opened my eyes to where I should look
for making Web sites faster.

42
00:03:51.209 --> 00:03:56.439
I should mention that when I talk about performance,
I mean that from the end user's perspective.

43
00:03:56.439 --> 00:04:01.199
My goal when I started this in 2004 was to
make the user experience fast.

44
00:04:01.199 --> 00:04:07.329
Now, there's another aspect of performance
which I think of more as efficiency or scalability

45
00:04:07.329 --> 00:04:13.089
on back end servers. How can we handle 10X
the current number of users with the same

46
00:04:13.089 --> 00:04:19.370
hardware? Those kinds of efficiency optimizations
are also performance, but when I say performance,

47
00:04:19.370 --> 00:04:25.629
I really mean speed, speed of the user experience.
So when I first started working on this there

48
00:04:25.629 --> 00:04:30.090
really wasn't that much information out there
and I would try to go -- I started documenting

49
00:04:30.090 --> 00:04:35.129
things, writing books, blogging, trying to
go to other teams and convince them to focus

50
00:04:35.129 --> 00:04:40.250
on performance.
And it's kind of like QA or writing unit tests.

51
00:04:40.250 --> 00:04:47.250
Like try to sell unit tests -- time to build
unit tests to someone from marketing or sales.

52
00:04:47.539 --> 00:04:52.250
That's kind of hard to do, because it's hard
to visually see the benefit of that.

53
00:04:52.250 --> 00:04:56.940
So at the beginning it was kind of the same
thing with talking about make the Web site

54
00:04:56.940 --> 00:05:02.050
faster. Yeah, we need like a couple of people
to work for at least six months. And you won't

55
00:05:02.050 --> 00:05:06.879
see anything different on the site, it will
just feel faster. And believe me, that's really

56
00:05:06.879 --> 00:05:09.560
critical.
And they're like no, really we want you to

57
00:05:09.560 --> 00:05:12.569
add more flash.
[Laughter].

58
00:05:12.569 --> 00:05:19.569
&gt;&gt;Steve Souders: And so fast forward to 2010,
future of Web apps. We have Fred Wilson. How

59
00:05:21.550 --> 00:05:26.139
many people know Fred Wilson?
Like one of the most prolific bloggers. He's

60
00:05:26.139 --> 00:05:32.550
the number one VC out of New York City, out
of Union Square, very techy guy. But really

61
00:05:32.550 --> 00:05:37.150
his business is investment, funding startup
companies.

62
00:05:37.150 --> 00:05:42.860
Here he is speaking at a tech conference about
his 10 golden principles of successful Web

63
00:05:42.860 --> 00:05:47.509
apps. What's number one? Speed. He says, First
and foremost we believe that speed is more

64
00:05:47.509 --> 00:05:50.819
than a feature, speed is the most important
feature.

65
00:05:50.819 --> 00:05:57.189
And he goes on to talk about with their portfolio
companies they track all of the company's

66
00:05:57.189 --> 00:06:04.189
performance, speed, page load time for real
users. And that in their experience the data

67
00:06:04.370 --> 00:06:10.949
shows that when the speed drops off, the success
of the business drops off.

68
00:06:10.949 --> 00:06:16.150
And that's why they do this for all the portfolio
companies that they work with.

69
00:06:16.150 --> 00:06:23.099
And so I think that's to me like Web performance
has arrived. We have a VC talking at a tech

70
00:06:23.099 --> 00:06:28.000
conference about speed, like this was beautiful
to me. I start almost every slide deck with

71
00:06:28.000 --> 00:06:32.310
this slide.
And actually, a partner of Fred's spoke at

72
00:06:32.310 --> 00:06:38.689
the Velocity conference this week.
And in addition -- if that's not enough to

73
00:06:38.689 --> 00:06:42.560
have the number one VC out of New York City
talking about performance, I'm going to run

74
00:06:42.560 --> 00:06:48.039
through a bunch of case studies here that
correlate performance speed to the success

75
00:06:48.039 --> 00:06:53.539
of the business.
So here's -- about two years ago Bing and

76
00:06:53.539 --> 00:06:57.259
Google Search got up on stage at the same
time and talked about experiments they had

77
00:06:57.259 --> 00:07:03.460
run. Bing introduced intentionally a delay
in serving search results. They took it up

78
00:07:03.460 --> 00:07:08.249
to two seconds. At a two-second delay they
saw all their goodness metrics drop off. Most

79
00:07:08.249 --> 00:07:13.550
significantly revenue per user dropped off
four percent.

80
00:07:13.550 --> 00:07:18.449
And of course, these companies are doing this
on a very small sample size.

81
00:07:18.449 --> 00:07:24.599
So Google took this up to 400 milliseconds
at the max. Didn't see that much dropoff in

82
00:07:24.599 --> 00:07:29.620
searches per user, although at Google scale
that's a fairly significant dropoff.

83
00:07:29.620 --> 00:07:35.719
The thing that was really interesting about
this study was after they removed the delay,

84
00:07:35.719 --> 00:07:42.719
they kept that user group segmented and tracked
their usage. And it took I think six weeks

85
00:07:42.870 --> 00:07:48.909
for the usage, the searches per day, and other
goodness metrics, to resume where they were

86
00:07:48.909 --> 00:07:55.520
before the experiment started.
So the user's awareness of what the experience

87
00:07:55.520 --> 00:08:00.219
is like is something that gets ingrained and
lives with them and it takes a long time to

88
00:08:00.219 --> 00:08:06.860
build that and to recover from delays. So
it's important to stay on top of keeping your

89
00:08:06.860 --> 00:08:12.219
Web site fast.
And Yahoo ran a similar study. And for full

90
00:08:12.219 --> 00:08:18.029
page traffic, that means traffic where the
onload event actually fires, a 400-millisecond

91
00:08:18.029 --> 00:08:23.400
delay saw a five to nine percent dropoff in
traffic.

92
00:08:23.400 --> 00:08:29.050
Here Mozilla -- this is about a year old.
Mozilla, when you want to upgrade to Firefox

93
00:08:29.050 --> 00:08:36.050
and you're in Internet Explorer, you get the
IE landing page, and they made that IE Firefox

94
00:08:36.220 --> 00:08:43.220
landing page 2.2 seconds faster, and they
saw a 15% lift in Firefox downloads. So for

95
00:08:43.520 --> 00:08:47.420
them that's their business metric, being a
nonprofit.

96
00:08:47.420 --> 00:08:52.530
And this was a seminal study from Velocity
a few years ago. Shopzilla did a tremendous

97
00:08:52.530 --> 00:08:58.390
performance effort, taking their site from
seven seconds to about three seconds, and

98
00:08:58.390 --> 00:09:03.640
they saw conversion rate go up seven to 12
percent depending on the country.

99
00:09:03.640 --> 00:09:08.590
This is very significant. They saw the unique
users from search engine marketing more than

100
00:09:08.590 --> 00:09:14.770
double. And this was the first study that
showed another benefit in addition to the

101
00:09:14.770 --> 00:09:17.920
business metrics is operating costs going
down.

102
00:09:17.920 --> 00:09:24.680
So here we have the number of servers needed
to run the Web site after this optimization

103
00:09:24.680 --> 00:09:30.780
dropped. And that kind of makes sense because
like one of the optimizations is connecting

104
00:09:30.780 --> 00:09:35.390
scripts together, so instead of making seven
requests to my server, I'm only making one.

105
00:09:35.390 --> 00:09:41.040
Turn on Gzip so the amount of time it takes
for the response to get off the server box

106
00:09:41.040 --> 00:09:45.480
is lowered and so the server can handle a
higher QPS.

107
00:09:45.480 --> 00:09:50.880
And then following that a good friend of mine,
Bill Scott, when he was at Netflix, they had

108
00:09:50.880 --> 00:09:56.840
-- they didn't have Gzip turned on for some
reason. I can go into it after if people want

109
00:09:56.840 --> 00:10:01.060
to ask.
And he turned it on one day and the [Indiscernible]

110
00:10:01.060 --> 00:10:03.800
said the Web site is down, all we're serving
is the error page.

111
00:10:03.800 --> 00:10:07.470
And he said why do you think that?
And they said the traffic in our data server

112
00:10:07.470 --> 00:10:10.810
has dropped in half.
He said, Nope, we're serving everything, it's

113
00:10:10.810 --> 00:10:17.140
just that we turned on Gzip. So this is probably
six figures a month in a data center that

114
00:10:17.140 --> 00:10:23.570
they saved. Pretty significant.
Here's another example, Edmunds.com turned

115
00:10:23.570 --> 00:10:28.940
on -- added an expires header so that their
resources through their CDN could be cached

116
00:10:28.940 --> 00:10:35.060
and they saw their CDN traffic drop by a third.
So again, this is a six-figure maybe high

117
00:10:35.060 --> 00:10:42.060
five-figure savings per month from CDN costs.
And then not that recently anymore, this was

118
00:10:43.090 --> 00:10:48.190
about a year and a half ago, Google announced
that speed or latency was going to be taken

119
00:10:48.190 --> 00:10:54.150
into consideration for page rank. And that
was caveated, it's one of two hundred signals,

120
00:10:54.150 --> 00:10:58.340
it only effects about one percent of search
results, but still it's a consideration and

121
00:10:58.340 --> 00:11:03.430
page rank is really important.
All of these things about a year, year and

122
00:11:03.430 --> 00:11:09.690
a half ago I saw coming together and so I
coined a new catch phrase for this emerging

123
00:11:09.690 --> 00:11:16.290
industry called WPO. It stands for Web Performance
Optimization. And actually as I mentioned,

124
00:11:16.290 --> 00:11:21.180
I keep mentioning, we just had Velocity this
week, there were a number. Sequoia, Battery

125
00:11:21.180 --> 00:11:27.200
Ventures, Excel, Union Square were all there.
This industry is really growing up. There's

126
00:11:27.200 --> 00:11:31.160
a number of startups in this Web performance
space now.

127
00:11:31.160 --> 00:11:35.800
And the elevator pitch is it drives traffic
to your site. We see that with search engine

128
00:11:35.800 --> 00:11:42.450
marketing, with page rank. It improves the
user experience. You would think that making

129
00:11:42.450 --> 00:11:47.000
Web sites faster the user would get in and
out more quickly, and it's just the opposite.

130
00:11:47.000 --> 00:11:53.160
All of these studies show that page views
per session, session length all increase because

131
00:11:53.160 --> 00:11:58.490
the users are having a better experience.
It increases revenue. We saw stats on that

132
00:11:58.490 --> 00:12:03.180
with conversions, downloads, and it reduces
operating costs.

133
00:12:03.180 --> 00:12:09.000
So this all sounds pretty good, right?
Web PO is really taking off.

134
00:12:09.000 --> 00:12:15.670
All right, that's the preamble. How many people
here think fast Web sites are good?

135
00:12:15.670 --> 00:12:20.630
All right. So hopefully if you're having trouble
selling that -- if this is stuff that you

136
00:12:20.630 --> 00:12:24.510
want to work on and you're having trouble
selling that back home, you can take some

137
00:12:24.510 --> 00:12:29.760
of these case studies and show people back
home that this is a good investment. You'll

138
00:12:29.760 --> 00:12:33.980
actually get a positive ROI. And maybe these
will give a little guidance on what you can

139
00:12:33.980 --> 00:12:38.870
track on the business side to actually correlate
performance improvements with the goals of

140
00:12:38.870 --> 00:12:42.100
the business.
All right. So let's transition into the meat

141
00:12:42.100 --> 00:12:47.730
of the topic. I don't want to debate about
what HTML5 is. There's the spec. I also mean

142
00:12:47.730 --> 00:12:53.890
CSS3. It's the new stuff.
So I'm going to highlight a few things around

143
00:12:53.890 --> 00:13:00.890
HTML5 and CSS3 that I think are really important
to pay attention to from a performance perspective.

144
00:13:01.900 --> 00:13:08.900
So the first is if you want to optimize something
you need to be able to measure it. And right

145
00:13:09.450 --> 00:13:16.450
now what we'd really like to measure is the
user's perception of speed. Currently there's

146
00:13:18.360 --> 00:13:25.300
no JavaScript handler for brain activity.
So what we've been using as an industry -- as

147
00:13:25.300 --> 00:13:31.390
a proxy for that is the window onload event.
Now, the problem with that is, for example,

148
00:13:31.390 --> 00:13:36.780
if I do a Google search and I click on a search
result that takes me to Whole Foods, and I

149
00:13:36.780 --> 00:13:41.780
want to measure -- from Whole Foods' perspective,
they want to know how long it took for the

150
00:13:41.780 --> 00:13:46.180
user to click that link to when Whole Foods
was ready. And the problem is tracking the

151
00:13:46.180 --> 00:13:52.170
start time. How do you track the time that
the user started by clicking on that link?

152
00:13:52.170 --> 00:13:57.800
Because that's the user's perception time.
And what you can do is at the top of the Whole

153
00:13:57.800 --> 00:14:01.950
Foods page you can put a script lock that
takes a time measurement, but that totally

154
00:14:01.950 --> 00:14:06.440
ignores the time it takes for the request
to go up to the Whole Foods server, for it

155
00:14:06.440 --> 00:14:11.360
to stitch together all of the content and
send that back down to the browser.

156
00:14:11.360 --> 00:14:17.600
So about two years ago Google and Microsoft
formed this Web performance working group

157
00:14:17.600 --> 00:14:24.600
as part of the W3C, and the first task was
to create the Web timing spec, which is actually

158
00:14:24.890 --> 00:14:29.440
three specs, navigation timing, user timing,
resource timing.

159
00:14:29.440 --> 00:14:33.850
How many people here use navigation timing
to measure Web sites?

160
00:14:33.850 --> 00:14:38.680
Good. It's not good that there were so few
hands up. It's good because I'm going to talk

161
00:14:38.680 --> 00:14:43.590
about it a little bit.
So those of three and I'm going to talk about

162
00:14:43.590 --> 00:14:49.120
each one in a little bit more detail. They're
also working on a few other specs, page visibility

163
00:14:49.120 --> 00:14:53.670
I'll touch on quickly. Script-base animations
I'm not going to spend too much time on, but

164
00:14:53.670 --> 00:14:58.120
people are doing a lot of animation with JavaScript
and they're working on making that better.

165
00:14:58.120 --> 00:15:02.410
And efficient script yielding, since the browsers
are single threaded, if you have long running

166
00:15:02.410 --> 00:15:09.140
JavaScript it can really degrade the user
experience. So what can scripts do to mitigate

167
00:15:09.140 --> 00:15:11.970
that.
But let me talk about the timing specs. So

168
00:15:11.970 --> 00:15:18.900
navigation timing actually is out. The spec
is done and it's available today. If you look

169
00:15:18.900 --> 00:15:25.530
at window.performance, there's this timing
object. And you can do things like from the

170
00:15:25.530 --> 00:15:32.530
timing object you can get the navigation start
and the load event end, take the difference.

171
00:15:32.890 --> 00:15:37.430
And the nice thing is that the Web timing
spec gives us two main things. This is the

172
00:15:37.430 --> 00:15:43.430
first one. This is the time at which the -- the
epic time at which the user clicked on that

173
00:15:43.430 --> 00:15:50.430
link on Google. So now the user can -- the
Web site owner can get the full time from

174
00:15:50.870 --> 00:15:57.570
when the click happened to when the onload
event or whatever event you wanted to. And

175
00:15:57.570 --> 00:16:01.520
in fact if you put a little time stamp at
the top of the page you can break that into

176
00:16:01.520 --> 00:16:06.150
what I call the back end time, the time from
the click to when the first byte arrived and

177
00:16:06.150 --> 00:16:10.130
the time from the first byte to when the full
page loaded.

178
00:16:10.130 --> 00:16:14.600
And there's a bunch of other timings in there.
You can get DNS time and connection time.

179
00:16:14.600 --> 00:16:19.170
There are a bunch of time values that you
can get in there.

180
00:16:19.170 --> 00:16:23.530
So this has been out -- the spec was finished
probably about six months ago, maybe a little

181
00:16:23.530 --> 00:16:27.350
longer.
And I think IE 9 -- no, I think Chrome was

182
00:16:27.350 --> 00:16:32.930
the first to implement it. But it's in IE
9 and up, Firefox 7 and up. They had some

183
00:16:32.930 --> 00:16:39.820
bugs in the Firefox 7 in the early days, but
those are all fixed now. It's on Android.

184
00:16:39.820 --> 00:16:44.190
And I heard a month ago it's on Blackberry,
but I haven't tested that.

185
00:16:44.190 --> 00:16:48.700
And here's a good URL from Tony Gentilcore
that kind of explains how you could use it

186
00:16:48.700 --> 00:16:52.990
and some examples of getting different time
values.

187
00:16:52.990 --> 00:16:59.610
So one thing that's really cool is Google
is taking -- for page rank is taking time

188
00:16:59.610 --> 00:17:04.039
into consideration, but when they announce
that -- I'm really proud of the work from

189
00:17:04.039 --> 00:17:09.120
the make the Web faster team at Google, where
it wasn't like okay, we're going to hold you

190
00:17:09.120 --> 00:17:13.069
responsible for it, good luck. We also rolled
out several tools.

191
00:17:13.069 --> 00:17:20.069
In Webmaster tools you can go in there and
you can see how your site compares its speed,

192
00:17:20.510 --> 00:17:25.430
compares to the rest of the industry.
And really the folks who were going to get

193
00:17:25.430 --> 00:17:30.650
penalized from a page rank perspective are
going to be in the lower 10%, maybe even lower

194
00:17:30.650 --> 00:17:36.810
than that. So maybe you're not awesome, but
if you're in the top 50% you probably don't

195
00:17:36.810 --> 00:17:40.770
have too much to worry about there. So that's
a little help, but the other thing that's

196
00:17:40.770 --> 00:17:47.000
nice to get more granularity, if you use Google
analytics, we added this time measurement

197
00:17:47.000 --> 00:17:54.000
capability in Google Analytics. I think we
call it site speed -- yeah, site speed.

198
00:17:55.770 --> 00:18:01.760
Yeah, this screen dump is a little old. I
think the UI is a little difference now. But

199
00:18:01.760 --> 00:18:06.720
the nice thing is when we first launched it
you had to add a little bit more to your Google

200
00:18:06.720 --> 00:18:12.150
Analytics snippet, and then about three or
four months ago we turned it on for everyone.

201
00:18:12.150 --> 00:18:17.810
So even if you had no awareness of the site
speed, time measurement capability, you've

202
00:18:17.810 --> 00:18:21.810
been gathering data for about five months
now, four or five months. So you could go

203
00:18:21.810 --> 00:18:27.560
to Google Analytics and go and find this site
speed tab and you could get charts, and it's

204
00:18:27.560 --> 00:18:33.840
the usual Google Analytics slice and dice
capabilities by browser, by geographic region,

205
00:18:33.840 --> 00:18:37.480
by page, and you can see what your performance
is.

206
00:18:37.480 --> 00:18:42.640
This is my Web site, so I don't know what
was going on there, but that was awhile ago.

207
00:18:42.640 --> 00:18:48.070
See, now it's fast. Well, in November it was
fast.

208
00:18:48.070 --> 00:18:50.840
Thank you for that. I appreciate that.
[ Laughter ]

209
00:18:50.840 --> 00:18:56.250
&gt;&gt;Steve Souders: Oh, I think I probably -- now
it's on by default. Oh, it's only in browsers

210
00:18:56.250 --> 00:19:02.300
that support nav timing, so we really need
mobile browsers to start supporting this more.

211
00:19:02.300 --> 00:19:08.530
Oh, it's sampled. So by default it's a one
percent sampling rate.

212
00:19:08.530 --> 00:19:12.310
If you have a huge Web site, like one percent
is probably fine. And the guys have done a

213
00:19:12.310 --> 00:19:16.660
really smart thing. Like they don't start
it at midnight and if you're a huge Web site

214
00:19:16.660 --> 00:19:23.070
you've used your one percent by 12:15. They,
like, dole it out throughout the day. But

215
00:19:23.070 --> 00:19:30.070
if you're a smaller Web site, you can change
it with some Google Analytics commands to

216
00:19:30.780 --> 00:19:36.540
cover 100% of your Web site, but it's limited,
I think, to 10,000 measurements a day. But

217
00:19:36.540 --> 00:19:40.570
again, those will be sampled throughout the
day, so you won't get biases based on peak

218
00:19:40.570 --> 00:19:44.360
time and stuff like that.
And then I'm just going to talk really quick

219
00:19:44.360 --> 00:19:51.170
about the other two parts of the timing spec.
There's resource timing. And this is -- there's

220
00:19:51.170 --> 00:19:54.750
drafts of this available, but this hasn't
been nailed down. I don't think there's any

221
00:19:54.750 --> 00:19:59.540
browser that supports it yet because the draft
is -- the spec is still being defined.

222
00:19:59.540 --> 00:20:04.340
But this -- if you think about it, navigation
timing is basically this same information,

223
00:20:04.340 --> 00:20:08.890
but it's at the page level. It's really high.
And what we're doing with resource timing

224
00:20:08.890 --> 00:20:14.250
is we're bringing that down to every HTTP
request in the page. So for every HTTP request

225
00:20:14.250 --> 00:20:20.040
in the page you can get DNS lookup time, connection
time, total time for that to come back. This

226
00:20:20.040 --> 00:20:25.790
is going to be a great mechanism for if you're
using a CDN to track how your CDN -- or maybe

227
00:20:25.790 --> 00:20:30.620
you're testing out multiple CDN's, to see
how their performance is going.

228
00:20:30.620 --> 00:20:35.570
It does have to worry about security safeguards.
So you could have some kind of hack where,

229
00:20:35.570 --> 00:20:42.570
you know, on my Web site I have the logo from
some nefarious Web site. And when you land

230
00:20:43.010 --> 00:20:47.920
on my Web site I can actually see what the
DNS time is. And if the DNS time is zero,

231
00:20:47.920 --> 00:20:53.240
I know that you've been to this other Web
site. So there are some security safeguards

232
00:20:53.240 --> 00:20:59.260
with HTTP headers. Web sites can allow or
not allow cross-domain tracking of resource

233
00:20:59.260 --> 00:21:02.820
timing.
And then there's also user timing, which is

234
00:21:02.820 --> 00:21:08.740
really important for people building Web2O
apps, AJAXy stuff. Something like Gmail that

235
00:21:08.740 --> 00:21:14.150
is open for several hours, there's no concept
of a page load time. There's only one of those

236
00:21:14.150 --> 00:21:18.040
when you start it up.
So this is, if you're doing HXE stuff like

237
00:21:18.040 --> 00:21:24.140
compose, this will give you commands that
you can use to say the user is about to do

238
00:21:24.140 --> 00:21:29.410
a compose operation, let me -- let me mark
a start time and then when the compose is

239
00:21:29.410 --> 00:21:34.330
all done, you can mark an end time, you can
give it a label, and so it lets you define

240
00:21:34.330 --> 00:21:40.200
and track any timing episodes that you care
about in the Web apps that you are building.

241
00:21:40.200 --> 00:21:45.490
So it basically is like nav timing but it's
much more flexible and lets you define the

242
00:21:45.490 --> 00:21:50.790
start and stop times whenever you want in
your code.

243
00:21:50.790 --> 00:21:55.480
The other one that I mentioned that they are
working on is page visibility. This one is

244
00:21:55.480 --> 00:22:02.100
important from a performance perspective.
Mostly from a -- from an altruistic perspective,

245
00:22:02.100 --> 00:22:06.930
but it could also affect, you know, what you
are doing on your Web site. And so basically

246
00:22:06.930 --> 00:22:11.370
what the spec let's you do is detect when
your page is visible. So like one thing I

247
00:22:11.370 --> 00:22:16.180
do in the morning when I come in, since I
can't stand to wait for Web sites to load,

248
00:22:16.180 --> 00:22:21.480
is I have this script and I -- you know, I
boot up my machine, I load the script, it

249
00:22:21.480 --> 00:22:26.309
loads my 30 Web sites that I read every morning
and then I go get breakfast and when I come

250
00:22:26.309 --> 00:22:30.890
back, all of the pages are loaded and I can
just go through all of the tabs. But only

251
00:22:30.890 --> 00:22:36.800
the top tab is visible. And inevitably when
I come back, if I left my sound on, my office

252
00:22:36.800 --> 00:22:41.790
manager, you know, giving me a dirty look,
because there's some hidden tab that's playing

253
00:22:41.790 --> 00:22:46.700
video. And the sound -- or maybe multiple
tabs that are playing video and the sound

254
00:22:46.700 --> 00:22:52.130
is just annoying and it's like really? Like
you started the video, even though like the

255
00:22:52.130 --> 00:22:54.670
tab is not even visible? Like why did you
do that?

256
00:22:54.670 --> 00:23:01.670
And the page visibility API introduces a way
to detect whether or not the tab of the window

257
00:23:02.220 --> 00:23:06.340
is visible.
And so this is also really important, like,

258
00:23:06.340 --> 00:23:13.080
if you are tracking metrics, like page impressions.
If the user opened the tab but they're never

259
00:23:13.080 --> 00:23:17.330
going to go to it, but you counted it as an
impression, that's a miscount. Same thing

260
00:23:17.330 --> 00:23:24.330
with ads. Again, the example of video. You
might be doing something like showing them,

261
00:23:24.660 --> 00:23:29.700
you know, stock updates or the latest messages
from friends or you might be rotating through

262
00:23:29.700 --> 00:23:34.320
a carousel of photos and they're not looking
at it. So not only are you kind of -- like

263
00:23:34.320 --> 00:23:38.280
you might rotate through a carousel of photos
that started with their favorite photo, but

264
00:23:38.280 --> 00:23:43.450
by the time they opened the tab they are down
to their 5757th favorite photo and you have

265
00:23:43.450 --> 00:23:48.690
kind of ruined the experience for yourself.
So you could use it there.

266
00:23:48.690 --> 00:23:55.690
Um, the other thing that you can do is -- this
API can be used for pre-fetching resources.

267
00:23:58.390 --> 00:24:05.390
So the Web site owner can decide and -- the
Web site owner can decide if they want to

268
00:24:06.790 --> 00:24:13.370
pre-fetch resources maybe for the next page
and also if the page should be prerendered.

269
00:24:13.370 --> 00:24:19.260
This is something that Chrome does. So Chrome
can actually prerender a page in the background.

270
00:24:19.260 --> 00:24:25.620
But one of the problems with doing that is,
again, if there are ad impression counts or

271
00:24:25.620 --> 00:24:31.040
page impression counts that are firing, and
the page is being rendered in the background,

272
00:24:31.040 --> 00:24:37.620
and the user actually never sees it, that's
a miscount. So the page visibility API gives

273
00:24:37.620 --> 00:24:43.740
people controlling those metrics the ability
to only fire the metrics when it makes sense.

274
00:24:43.740 --> 00:24:49.440
And I think this is only in Chrome right now.
But what it looks like is you can say WebKit

275
00:24:49.440 --> 00:24:54.559
hidden is the property, you can look at to
see whether or not the tab is hidden and this

276
00:24:54.559 --> 00:25:01.559
is an event handler you can attach to to detect
when the page does become visible.

277
00:25:03.490 --> 00:25:10.490
So we had script defer in IE for years, but
now with HTML5 the async and defer attributes

278
00:25:12.179 --> 00:25:19.179
are officially supported across almost every
browser out there. I'm not going to go into

279
00:25:19.920 --> 00:25:26.140
it here but in fact I've talked for years
and written extensively about the impact that

280
00:25:26.140 --> 00:25:31.530
scripts have on the user experience.
So I mentioned earlier how the UI thread,

281
00:25:31.530 --> 00:25:37.809
you know, the UI is single threaded, the browser
is single threaded, so if you have JavaScript,

282
00:25:37.809 --> 00:25:43.800
for example, that takes three seconds to execute,
the user is clicking in the browser and they

283
00:25:43.800 --> 00:25:47.929
are trying to scroll the window and nothing
is happening because the JavaScript is blocking

284
00:25:47.929 --> 00:25:53.950
any of that interaction. And so -- so that
also happens when the script is being downloaded.

285
00:25:53.950 --> 00:25:58.630
So if you have a 500 k JavaScript payload
and the user has a slow connection, again,

286
00:25:58.630 --> 00:26:04.210
it can take seconds for that to download.
While that's downloading, the UI could be

287
00:26:04.210 --> 00:26:10.740
blocked. Unless you can do your script loading
asynchronously. So if you just do scriptsource

288
00:26:10.740 --> 00:26:17.740
equals main.js it's going to stop the HTML
parser from parsing past that script tag and

289
00:26:19.340 --> 00:26:24.660
it's also going to block rendering. No browser
in the world will render anything below a

290
00:26:24.660 --> 00:26:31.240
script tag until that script is downloaded
and parsed and executed. But you can use the

291
00:26:31.240 --> 00:26:38.200
async attribute which tells the browser to
start the download but to go ahead and continue

292
00:26:38.200 --> 00:26:45.200
parsing the HTML and rendering the DOM elements
in the page. So it gives the user feedback.

293
00:26:45.800 --> 00:26:49.970
It's a better user experience. The user can
see the page rendering, especially because

294
00:26:49.970 --> 00:26:54.610
a lot of times we put scripts in the heads
of our pages, which means the entire body

295
00:26:54.610 --> 00:26:59.750
is blocked from rendering until all of those
scripts are downloaded, parsed and executed.

296
00:26:59.750 --> 00:27:05.040
And so this tells the browser, download it
in the background, continue parsing; and as

297
00:27:05.040 --> 00:27:08.880
soon as the script arrives, parse and execute
it.

298
00:27:08.880 --> 00:27:14.920
So one -- two tricky things about this is
you can't have any document.write in this

299
00:27:14.920 --> 00:27:20.030
JavaScript code because parser is already
past that point. You are going to get very

300
00:27:20.030 --> 00:27:26.350
bad and varied results across browsers if
you do document.write in an async script.

301
00:27:26.350 --> 00:27:31.630
The other challenge with async is suppose
that I have three scripts, A, B, C, C depends

302
00:27:31.630 --> 00:27:38.630
on B, B depends on A. But A is probably like
jQuery, so might be my biggest script. C might

303
00:27:38.690 --> 00:27:42.650
be really tiny, so if I load all of these
async, which is the one that's going to come

304
00:27:42.650 --> 00:27:48.740
back first? C. If I loaded async, it's going
to be parsed and executed as soon as it comes

305
00:27:48.740 --> 00:27:53.670
back and it's going to get undefined symbol
errors because B might not be back and A might

306
00:27:53.670 --> 00:27:59.679
not be back. You can't just willy-nilly add
an async attribute to all of your script tags.

307
00:27:59.679 --> 00:28:03.830
But what you can do is you can use defer.
If it's JavaScript that isn't critical for

308
00:28:03.830 --> 00:28:09.230
rendering content to the page, and doesn't
have document.write can add the defer attribute.

309
00:28:09.230 --> 00:28:16.040
It's pretty similar. It says download it in
the background, let the parser continue parsing

310
00:28:16.040 --> 00:28:21.460
and rendering DOM elements. After the entire
page is done, parse and execute these deferred

311
00:28:21.460 --> 00:28:25.860
scripts and do it in the order that they were
listed in the page. And so if you have those

312
00:28:25.860 --> 00:28:30.990
interdependencies across scripts, defer is
a good fallback.

313
00:28:30.990 --> 00:28:37.990
But -- but this still doesn't give all of
the control that I think is really needed

314
00:28:38.260 --> 00:28:43.750
to build a good user experience for -- for
Web apps, especially on mobile.

315
00:28:43.750 --> 00:28:48.960
For example, one thing that I would like to
do is I would like to download maybe a big

316
00:28:48.960 --> 00:28:55.150
script, 100 k, 300 k, 500 k, but not parse
and execute it. It might be a script for something

317
00:28:55.150 --> 00:29:00.679
like popping up a div to compose a message
or address book stuff that is only needed

318
00:29:00.679 --> 00:29:06.620
if the user starts typing an email message.
But if I download that, as soon as it hits

319
00:29:06.620 --> 00:29:11.850
the browser, the parse and execute is going
to happen and it's going to lock up the UI.

320
00:29:11.850 --> 00:29:17.440
So I really want to get this JavaScript down
to the device, get it in cache, but parse

321
00:29:17.440 --> 00:29:20.690
and execute it, depending on what the user
does.

322
00:29:20.690 --> 00:29:25.400
The other thing that I would like to have
is a control over when the download happens.

323
00:29:25.400 --> 00:29:30.480
Right now the spec doesn't say when browser
should download the script. But if I've said

324
00:29:30.480 --> 00:29:36.470
defer, if I've said async, certainly if I've
said defer, I would like you to do this download,

325
00:29:36.470 --> 00:29:40.520
after everything more important is already
done, because there's a limited number of

326
00:29:40.520 --> 00:29:46.780
TCP connections that the browser will make,
and if you download scripts or multiple scripts,

327
00:29:46.780 --> 00:29:51.179
then things like the background image of the
page, the logo at the top of the page, might

328
00:29:51.179 --> 00:29:57.240
actually be pushed out because you are already
using the six TCP connections that most browsers

329
00:29:57.240 --> 00:30:03.520
allocate to a domain.
So we don't have control over those in markup,

330
00:30:03.520 --> 00:30:09.450
but there are techniques that you can use
to get that behavior. So this is one that

331
00:30:09.450 --> 00:30:16.450
Gmail wrote about quite a while ago. Gmail
mobile team. And it's a hack. I think it's

332
00:30:16.620 --> 00:30:21.070
a beautiful hack.
So what they did was in the page, they have

333
00:30:21.070 --> 00:30:26.260
-- you know, maybe 300 k of JavaScript. I'm
just making these numbers up. I don't know

334
00:30:26.260 --> 00:30:30.049
how much JavaScript Gmail has. It's probably
more than that. But they have a lot of JavaScript

335
00:30:30.049 --> 00:30:37.049
in here and they just wrap it in -- in comment
delimiters. So what happens is this will get

336
00:30:37.290 --> 00:30:43.240
downloaded to the browser, it will be cached,
it's already resident. But it's not parsed

337
00:30:43.240 --> 00:30:50.240
and executed. So -- so let's say this is compose
a new message JavaScript. It pops up in div,

338
00:30:51.530 --> 00:30:58.530
it formats everything, it does error detection
and things like that. So we don't really need

339
00:30:59.200 --> 00:31:04.090
this JavaScript to block the UI thread for
parse and execution until the user actually

340
00:31:04.090 --> 00:31:08.350
clicks on the compose button, which they may
never do during this session. So what we do

341
00:31:08.350 --> 00:31:13.980
is we download the code because we want it
on the device. When they click compose, especially

342
00:31:13.980 --> 00:31:18.730
on a phone, we don't want to wait to download
300 k of JavaScript, we don't want to make

343
00:31:18.730 --> 00:31:23.290
the user wait. So what we do is we download
it, you can even download it in the background.

344
00:31:23.290 --> 00:31:27.720
It's not going to block the UI thread when
it arrives. Now the user clicks compose, you

345
00:31:27.720 --> 00:31:32.690
have all of the JavaScript on the client and
now you just find the DOM element for the

346
00:31:32.690 --> 00:31:39.240
script tag, remove the comment delimiters
and eval the code. A lot of people say eval

347
00:31:39.240 --> 00:31:44.549
is evil. Doug Crawford is here today, I saw
him downstairs, he'll tell you that. Certainly

348
00:31:44.549 --> 00:31:49.760
eval is evil from a security perspective.
If you are eval'ing code that you didn't generate,

349
00:31:49.760 --> 00:31:53.870
that can produce really bad things. You wouldn't
want to do this with third party widgets and

350
00:31:53.870 --> 00:32:00.870
ads, et cetera. So this is code that you control,
that you generated. So from a security perspective,

351
00:32:01.710 --> 00:32:06.799
it's okay and the actual performance of eval
is less than 10% worse than just a script

352
00:32:06.799 --> 00:32:11.440
block. So from a performance perspective,
it's actually down like around one or two

353
00:32:11.440 --> 00:32:16.299
percent. From a performance perspective, it's
fine. So you control the code, performance-wise

354
00:32:16.299 --> 00:32:21.100
it's good. So this is a -- this is a really
nice hack.

355
00:32:21.100 --> 00:32:25.700
And it's perfect for pre-fetching JavaScript
that you might need but you are not sure.

356
00:32:25.700 --> 00:32:29.530
It's possible that you will never need it.
So don't block the UI thread, especially for

357
00:32:29.530 --> 00:32:36.530
large amounts of JavaScript.
You know, this -- might require a fair amount

358
00:32:36.580 --> 00:32:43.580
of rewriting on your Web site. So I wrote
something called ControlJS, that's open source,

359
00:32:44.110 --> 00:32:48.059
you can get it off my Web site. Several big
companies -- I was just at this conference,

360
00:32:48.059 --> 00:32:52.690
and I found that -- including Wal-Mart, I
found several big companies that were using

361
00:32:52.690 --> 00:32:56.330
this that I was really surprised at because
I don't do a lot of testing.

362
00:32:56.330 --> 00:33:01.010
[ Laughter ]
&gt;&gt;Steve Souders: I trust that they've done

363
00:33:01.010 --> 00:33:05.200
that.
And actually, who else -- Washington Post

364
00:33:05.200 --> 00:33:11.760
is using it. And I asked them to contribute
back the robustness changes they had to add.

365
00:33:11.760 --> 00:33:17.540
And so the thing that I like about this technique
is that it's all done in markup. So we can

366
00:33:17.540 --> 00:33:23.429
just change -- instead of script source, having
type text script, we would say text CJS, and

367
00:33:23.429 --> 00:33:28.340
instead of a source we have a data control.js
source, so this means that the browser will

368
00:33:28.340 --> 00:33:34.100
basically just ignore this and you can also
do it with inline scripts just by changing

369
00:33:34.100 --> 00:33:41.100
the type. Then you load control.js.
What it does is it crawls the DOM, and it

370
00:33:41.190 --> 00:33:46.500
finds these script nodes and it does the right
thing. It downloads it asynchronously, it

371
00:33:46.500 --> 00:33:50.790
does it in the background. Again, you would
only do this with scripts that aren't critical

372
00:33:50.790 --> 00:33:56.950
for generating the initial user experience
and scripts that do not have any document.write.

373
00:33:56.950 --> 00:34:03.380
But I think it's a little easier to get on
top of. You can even add this execute false,

374
00:34:03.380 --> 00:34:08.559
which says downloaded but don't parse and
execute it. And then later when the user,

375
00:34:08.559 --> 00:34:15.559
for example, clicks on the compose button,
you can say control.js execute script. So

376
00:34:16.239 --> 00:34:21.569
that's kind of a nice alternative. The other
thing I like about it, how many people here

377
00:34:21.569 --> 00:34:28.029
have played with -- with JavaScript loader,
script loaders, lab js or YUI lowered. Some

378
00:34:28.029 --> 00:34:33.409
people -- the thing that I find ironic about
all of the other alternatives out there is

379
00:34:33.409 --> 00:34:37.979
their goal is to help you load JavaScript
asynchronously. They do that with a helper

380
00:34:37.979 --> 00:34:41.929
script, but you have to load their helper
script synchronously.

381
00:34:41.929 --> 00:34:44.589
[ Laughter ]
&gt;&gt;Steve Souders: Anyone else think that's

382
00:34:44.589 --> 00:34:51.589
weird? Like, you know, synchronous loaded
scripts are bad. So you load our scripts synchronously

383
00:34:51.789 --> 00:34:54.109
and we will help you avoid that problem.
[ Laughter ]

384
00:34:54.109 --> 00:34:59.589
&gt;&gt;Steve Souders: Like -- so from the beginning,
one of the requirements of ControlJS was that

385
00:34:59.589 --> 00:35:05.049
you could load it asynchronously. So you would
use the Google Analytics, async loading pattern

386
00:35:05.049 --> 00:35:09.759
and load the script anywhere you want in a
page and everything will still work.

387
00:35:09.759 --> 00:35:16.079
So JavaScript is a really, really big problem.
I'm -- make sure that you look at how it's

388
00:35:16.079 --> 00:35:20.910
impacting your Web site and if possible adopt
some of these asynchronous loading techniques.

389
00:35:20.910 --> 00:35:27.369
Okay. Shifting gears, I wanted to talk about
app cache, which is good for offline apps

390
00:35:27.369 --> 00:35:32.589
and also for longer caching.
So again, the importance of the background

391
00:35:32.589 --> 00:35:39.589
photo. You are in the desert. You typically
don't have a good connection. So having the

392
00:35:40.569 --> 00:35:42.680
offline apps is really important.
[ Laughter ]

393
00:35:42.680 --> 00:35:49.680
&gt;&gt;Steve Souders: There we go, the groan. So
building offline apps is really cool. I think

394
00:35:51.910 --> 00:35:57.329
Google docs just announced that this week
or last week. It really helps with the user

395
00:35:57.329 --> 00:36:03.999
experience when you have a bad connection,
you are flying, whatever. But also people

396
00:36:03.999 --> 00:36:07.700
are using it from a performance perspective
for better caching.

397
00:36:07.700 --> 00:36:14.259
So this is a study that I did five or six
years ago with (saying name) when we were

398
00:36:14.259 --> 00:36:18.660
at Yahoo, it's been a long time, but I've
talked to people at other big Web companies

399
00:36:18.660 --> 00:36:23.900
who have run the same experiment and they
basically get the same results. So I encourage

400
00:36:23.900 --> 00:36:29.140
you to run it on your Web site. Basically
we put a hidden pixel in every page, we tracked

401
00:36:29.140 --> 00:36:36.140
how often people made a request with or without
an if-modified-since header. If they send

402
00:36:36.720 --> 00:36:41.160
the if-modified-since request, it means they
have it in the cache. If they don't, it means

403
00:36:41.160 --> 00:36:45.529
they don't have it in the cache. So we can
track how many people coming in, how many

404
00:36:45.529 --> 00:36:52.130
page views are done with a full cache, a prime
cache. Our resources are in their cache or

405
00:36:52.130 --> 00:36:55.019
with an empty cache, our resources are not
in their cache.

406
00:36:55.019 --> 00:37:01.229
I talk about in my best practices setting
a far futures expires header. Turns out even

407
00:37:01.229 --> 00:37:06.660
if you do that, browsers aren't going to keep
things around for that long or for whatever

408
00:37:06.660 --> 00:37:11.019
reason, users are going to come in and they're
not going to have everything in cache that

409
00:37:11.019 --> 00:37:15.819
you might expect.
So what we see here is that for page views,

410
00:37:15.819 --> 00:37:22.819
if you look at it from the page views perspective,
about 20% of page views on any given day are

411
00:37:23.160 --> 00:37:28.880
done with a -- with an empty cache. Right?
My resources are not in the cache.

412
00:37:28.880 --> 00:37:33.680
You can see on the first day, when we put
this pixel on the page, 100% of the pages

413
00:37:33.680 --> 00:37:38.470
had an empty cache because this image had
never been loaded before. After about two

414
00:37:38.470 --> 00:37:43.930
weeks, we hit a steady state and we can see
it's about 20%. We ran this on various properties

415
00:37:43.930 --> 00:37:48.759
at Yahoo that had different user metrics.
This was always about the same. This number

416
00:37:48.759 --> 00:37:54.759
fluctuated a little bit more, but it was always
between 40 and 60%. About half of your users

417
00:37:54.759 --> 00:38:00.400
come in at least once a day with an empty
cache. So why are these numbers different?

418
00:38:00.400 --> 00:38:05.299
Typically, users are doing multiple page views
in a session. So even if they have an empty

419
00:38:05.299 --> 00:38:10.259
cache, they will come in and have an empty
cache page view, which will show up here and

420
00:38:10.259 --> 00:38:14.479
show up here. But then they might do three
or four more page views, which are going to

421
00:38:14.479 --> 00:38:19.279
be a prime cache, because when they did their
empty cache page load stuff got put into the

422
00:38:19.279 --> 00:38:24.910
cache. So that's why these numbers are different.
But it still means people anchor on negative

423
00:38:24.910 --> 00:38:30.210
experience. So if half of your users were
coming in every day with an empty cache, and

424
00:38:30.210 --> 00:38:34.549
you are not taking that into consideration,
you are like, well, yeah, it's not 300 k image

425
00:38:34.549 --> 00:38:39.529
or script but it will be in the cache, for
about half of your users, it's not going to

426
00:38:39.529 --> 00:38:45.720
be in the cache. So you can run this experiment
yourself and you will get the same results.

427
00:38:45.720 --> 00:38:51.319
So the cache, even if you are doing far future
expires, the cache might not be doing what

428
00:38:51.319 --> 00:38:58.049
you think. And -- and here's a great study
from Guy Poe over at Blaze, now Akamai, where

429
00:38:58.049 --> 00:39:03.920
he shows that mobile caches are very small.
This is another reason why things you think

430
00:39:03.920 --> 00:39:08.670
should be in the cache won't be. This was
a study I did where I found that -- I like

431
00:39:08.670 --> 00:39:14.440
building Web apps and putting them on the
home screen and turned out in iOS if you do

432
00:39:14.440 --> 00:39:21.440
that the cache isn't used optimally. So you
can use app cache for caching.

433
00:39:23.019 --> 00:39:28.269
So the way they use app cache at this manifest
attribute, you give it a file name, which

434
00:39:28.269 --> 00:39:34.529
is your app cache. Manifest is a good name
I think we all intuitively recognize what

435
00:39:34.529 --> 00:39:40.150
we are going to see here. Here's your manifest
file. It has to start with this cache manifest

436
00:39:40.150 --> 00:39:44.229
header. We will talk about the revision number
in a second, but you'll want to add that.

437
00:39:44.229 --> 00:39:48.670
It's got these various sections, a cache section
says these are the things that I want you

438
00:39:48.670 --> 00:39:53.359
to put into app cache. The network session
says these are the things that you should

439
00:39:53.359 --> 00:40:00.359
never put into app cache. The fallback section
says if the user is online, then use this

440
00:40:01.130 --> 00:40:06.719
URL. But if they are offline, read this one
from app cache. So the browser, when the user

441
00:40:06.719 --> 00:40:11.380
is online, will download this one, but will
also download this one and save it into app

442
00:40:11.380 --> 00:40:15.140
cache. At least right now, you have to make
sure to give this a very specific content

443
00:40:15.140 --> 00:40:22.140
type. Text/cache-manifest. So it looks pretty
good. It turns out actually it's really, really,

444
00:40:22.690 --> 00:40:27.180
really hard and complicated to work with.
So here are some of the gotchas that you will

445
00:40:27.180 --> 00:40:31.960
probably run into. I know I did.
I didn't realize -- like, I never listed my

446
00:40:31.960 --> 00:40:38.640
HTML document itself, .php, .HTML in the manifest
file, so I just assumed it wouldn't be put

447
00:40:38.640 --> 00:40:43.259
into app cache.
But if your HTML document uses the manifest

448
00:40:43.259 --> 00:40:47.920
attribute, then it's going to be saved to
app cache. This was really confusing for me

449
00:40:47.920 --> 00:40:53.569
because I had a log-in box on the front page.
And if the user came in and their app cache

450
00:40:53.569 --> 00:40:59.430
was empty and they weren't logged in, the
logged-out version of the page would be saved;

451
00:40:59.430 --> 00:41:03.729
every time they came back, that's what they
would see even after logging in. So that's

452
00:41:03.729 --> 00:41:09.579
a little confusing. If anything in the manifest
list 404s, nothing is saved. You get about

453
00:41:09.579 --> 00:41:16.420
five meg, which is pretty good. Yeah, so this
is interesting, suppose you change one of

454
00:41:16.420 --> 00:41:20.930
the resources listed in the manifest file,
like an image, you would think that the next

455
00:41:20.930 --> 00:41:27.130
time the user opens the app, they would see
that new image. They don't. You actually have

456
00:41:27.130 --> 00:41:32.210
to change something in the manifest file to
make it different, and that's why the revision

457
00:41:32.210 --> 00:41:38.460
number was in there on the previous slide.
That's what I do is I have that automatically

458
00:41:38.460 --> 00:41:43.670
updated whenever I update through source code,
through my source code control system, it

459
00:41:43.670 --> 00:41:48.630
will automatically update that revision number,
so the manifest is always touched whenever

460
00:41:48.630 --> 00:41:55.630
I update a resource, and this was really confusing
to me. Even if you do, you know, rev the manifest

461
00:41:58.670 --> 00:42:04.210
file, the user still won't see the change
until the second time they open the app. So

462
00:42:04.210 --> 00:42:08.440
I think this is really interesting, and it's
a real gotcha', so I wanted to walk through

463
00:42:08.440 --> 00:42:15.440
it in more detail, so let's suppose you go
home today and you build mobile Web app that

464
00:42:15.509 --> 00:42:20.529
uses app cache, or a desktop app that uses
app cache, and it's got this awesome green

465
00:42:20.529 --> 00:42:27.529
logo that the designer gave you, and you list
that into your app cache manifest file, so

466
00:42:28.289 --> 00:42:35.289
you push that tonight, tomorrow, the first
user ever downloads your app, and the app

467
00:42:36.460 --> 00:42:41.099
cache is obviously empty. They've never seen
this before, and so the browser fetches the

468
00:42:41.099 --> 00:42:46.869
manifest file and in there the logo is listed
so the browser downloads that, puts it into

469
00:42:46.869 --> 00:42:53.519
app cache, and renders the app to the user
so the user sees the awesome green logo. So

470
00:42:53.519 --> 00:42:59.619
now suppose tomorrow night you go, you know,
I really think an orange logo would be better,

471
00:42:59.619 --> 00:43:05.239
so you push to your server this new orange
logo, and you remember to change the version

472
00:43:05.239 --> 00:43:12.239
number in the manifest file. So the logo is
new, the manifest file is new. And on -- today's

473
00:43:14.910 --> 00:43:21.910
Friday, so you do that Saturday night, so
on Sunday, the user -- same user loads the

474
00:43:22.670 --> 00:43:29.170
app again, and the browser says, okay, well,
this app has a manifest file associated with

475
00:43:29.170 --> 00:43:31.719
it. Do I have any of those resources in my
app cache?

476
00:43:31.719 --> 00:43:37.479
Oh, I do. I need logo.jif, or i have logo.jif
in my app cache; it's this pretty green logo.

477
00:43:37.479 --> 00:43:42.079
Even though I've already pushed an orange
logo to my server, the browser is ignoring

478
00:43:42.079 --> 00:43:48.229
that. That's why it can work offline. It can
say I have this stuff in app cache, let me

479
00:43:48.229 --> 00:43:55.210
load as much as I can without using the network.
And so it displays that app cache logo to

480
00:43:55.210 --> 00:44:02.180
the user. But now what it does is it's -- once
it's rendered the app with the old out-of-date

481
00:44:02.180 --> 00:44:08.049
logo, it fetches the manifest file, it detects
that it's changed and so then it checks all

482
00:44:08.049 --> 00:44:13.359
other resources in the manifest file and it
gets the new version of the logo which is

483
00:44:13.359 --> 00:44:20.359
orange, it saves that to app cache, so if
the user reloads the app, a second time, it

484
00:44:20.599 --> 00:44:25.079
will -- the browser will look in app cache
and now it has the orange logo, so it renders

485
00:44:25.079 --> 00:44:29.829
the orange logo to the user, it fetches the
manifest file which hasn't changed and so

486
00:44:29.829 --> 00:44:34.410
it's done. So it's really taken these two
loads -- after I update a resource it takes

487
00:44:34.410 --> 00:44:40.549
two loads for the user to see the changes.
Now, there is a work around to this, it's

488
00:44:40.549 --> 00:44:45.460
not that hard, but not that easy. There's
this update ready part. The implementation

489
00:44:45.460 --> 00:44:50.420
is pretty easy. I can track this. But it's
what do I want to do with the user experience?

490
00:44:50.420 --> 00:44:55.599
So in the background, the browser detected
that there was a new logo, and it fires this

491
00:44:55.599 --> 00:45:01.079
update ready, but are you going to tell the
user to like reload the app to see the changes?

492
00:45:01.079 --> 00:45:05.440
I don't know, you have to decide for yourself.
Maybe if it's just images it's not that important.

493
00:45:05.440 --> 00:45:10.359
If it's like an important JavaScript security
privacy fix, then, yeah, maybe you want to

494
00:45:10.359 --> 00:45:14.029
tell them to reload it, or you want to reload
it without even telling them, just reload

495
00:45:14.029 --> 00:45:21.029
the app. Another way to do improved caching
because we know the browser cache doesn't

496
00:45:21.349 --> 00:45:28.349
work super awesome is local storage. Really
simple API. Local storage is persistent across

497
00:45:28.599 --> 00:45:32.529
sessions. If you only care about sessions,
you can use session storage. It's about five

498
00:45:32.529 --> 00:45:39.529
meg. One warning, browser developers really
are worried about this getting too much use

499
00:45:40.769 --> 00:45:45.749
because it does a synchronous read. Some browsers
will actually read everything out of local

500
00:45:45.749 --> 00:45:50.130
storage, the first time you go to that page
during the session, and if you have a lot

501
00:45:50.130 --> 00:45:56.319
of stuff in local storage, again, it's single-threaded
so that can slow down the user experience.

502
00:45:56.319 --> 00:46:02.749
So I built this bookmark that lets you look
into what is stored in local storage, and

503
00:46:02.749 --> 00:46:07.430
I discovered a couple of interesting things
that Bing and Google search were doing, which

504
00:46:07.430 --> 00:46:12.249
I hadn't thought of, and it's very cool to
help with caching. So I think this is the

505
00:46:12.249 --> 00:46:19.249
Google search -- Google mobile search implementation.
The first time you do a search, the HTML document

506
00:46:19.789 --> 00:46:26.789
will return all of these inline script and
style blocks, a lot of JavaScript and CSS,

507
00:46:27.660 --> 00:46:33.369
and when it's done, it iterates over those
script tags and style tags that have IDs,

508
00:46:33.369 --> 00:46:39.039
and it takes the content of the block, and
writes it into local storage based on the

509
00:46:39.039 --> 00:46:45.979
ID of that element. So now, after I've done
this first search ever on my phone, I have

510
00:46:45.979 --> 00:46:52.489
blocks of JavaScript and CSS in my local storage,
so now let's say I do another -- oh, and the

511
00:46:52.489 --> 00:46:59.309
other thing it does is it sets a cookie that
says which blocks of JavaScript and CSS have

512
00:46:59.309 --> 00:47:04.519
been written into this user's local storage.
So now if I do another search, this cookie

513
00:47:04.519 --> 00:47:08.890
goes up to the server, and the server says,
oh, well, you're doing a search, I have to

514
00:47:08.890 --> 00:47:13.479
give you this block and that block and this
JavaScript and this CSS. Let me see what you

515
00:47:13.479 --> 00:47:17.900
already have in local storage. It looks at
the cookie and says, oh, you already have

516
00:47:17.900 --> 00:47:21.849
this block, I don't have to send you that,
I don't have to send you this CSS, and for

517
00:47:21.849 --> 00:47:28.849
-- in the case of mobile search, it drops
the download size from about 110K to just

518
00:47:29.259 --> 00:47:35.319
10K, because all that stuff is now in local
storage. And then when the lightweight page

519
00:47:35.319 --> 00:47:40.509
arrives, there's some JavaScript that will
pull all of these things out of local storage

520
00:47:40.509 --> 00:47:47.509
and write them into the page. So this is a
really cool way to get more persistent cache.

521
00:47:47.640 --> 00:47:53.569
Local storage is unaffected by other Web sites
whereas the shared browser cache, if the user

522
00:47:53.569 --> 00:47:58.479
visits a bunch of other Web sites that have
large resources, your content might get pushed

523
00:47:58.479 --> 00:48:04.509
out. So I did a quick survey using this is
what this -- I'm a good JavaScript hacker.

524
00:48:04.509 --> 00:48:09.640
I'm not a good UI designer. This is my awesome
storage or bookmark list, and you can see

525
00:48:09.640 --> 00:48:15.619
it lets you look at what's in the local storage
and session storage, tells you how big it

526
00:48:15.619 --> 00:48:21.039
is, how many items it is. So let's just do
a quick run through the Alexa Top 10 and see

527
00:48:21.039 --> 00:48:28.039
how local storage is being used. So here we
have -- Google search is using it on both

528
00:48:28.469 --> 00:48:35.469
mobile and desktop, so that's one. Bing is
using it on mobile. Facebook is using it on

529
00:48:36.329 --> 00:48:43.329
mobile. Yahoo is maybe using it a little bit,
but not really. We're not going to count that.

530
00:48:44.039 --> 00:48:51.039
YouTube, yeah, we'll count that. Quite a bit
of content on mobile. Amazon, no. Twitter?

531
00:48:51.180 --> 00:48:58.180
Yeah, okay, we'll count that. Five. LinkedIn,
no, I would say. eBay, no. MSN, no. So about

532
00:49:03.019 --> 00:49:08.769
five or six of the Alexa Top 10 are using
local storage, so that's an indicator that,

533
00:49:08.769 --> 00:49:12.869
you know, it's worth investigating. Why is
it more -- maybe used more prevalently on

534
00:49:12.869 --> 00:49:16.089
mobile?
You know, the experience of not having something

535
00:49:16.089 --> 00:49:21.729
in the cache in mobile is worse, because the
network connection speed is so slow, also

536
00:49:21.729 --> 00:49:26.900
the cache is smaller on mobile, so caching
isn't awesome on desktop, but is much better

537
00:49:26.900 --> 00:49:32.289
on mobile, so I think that's why these top
properties started using local storage on

538
00:49:32.289 --> 00:49:38.969
mobile, but I would expect to see this proliferate
on desktop apps as well. So I want to talk

539
00:49:38.969 --> 00:49:45.969
about font-face. Again, pay attention to the
photos, not to what I say. So, you know, fonts,

540
00:49:48.609 --> 00:49:53.979
using custom fonts can create a more compelling,
beautiful experience, but people haven't really

541
00:49:53.979 --> 00:49:59.239
paid attention to what it does, similar to
how scripts and style sheets can block a page,

542
00:49:59.239 --> 00:50:06.239
what custom font files do, and so I created
this table that here's the blog post, that

543
00:50:07.150 --> 00:50:12.979
shows how scripts and style sheets and fonts
can affect, and, you know, "blank below in

544
00:50:12.979 --> 00:50:19.979
red" means that everything using this font
or below it are going to be affected. Flash

545
00:50:21.599 --> 00:50:28.599
-- oh, delayed means -- blank is really bad.
It means like everything in the page is blank.

546
00:50:28.609 --> 00:50:34.549
Delayed means just the element that's using
the font file is affected. Flash means once

547
00:50:34.549 --> 00:50:40.539
the things -- things will render, but once
the resource arrives it has to be redrawn,

548
00:50:40.539 --> 00:50:45.940
and so it's kind of a jerky user experience,
things have to be rerenderred and repainted.

549
00:50:45.940 --> 00:50:50.759
So you can see the impact. Even the green
"good" is not really a good experience. And

550
00:50:50.759 --> 00:50:57.749
so you want to use fonts kind of carefully.
And it's kind of ironic, it's kind of how

551
00:50:57.749 --> 00:51:02.829
these async script loader libraries make you
load their scripts synchronously. When I talk

552
00:51:02.829 --> 00:51:07.569
to designers about why they're using custom
fonts, even though we know it has this impact

553
00:51:07.569 --> 00:51:11.930
on the user experience, they say, well, these
are the most important design elements in

554
00:51:11.930 --> 00:51:16.930
the page. I'm like, "so you want the most
important parts of the page to take the longest

555
00:51:16.930 --> 00:51:22.130
to render?"
Like, that doesn't make sense to me. So despite

556
00:51:22.130 --> 00:51:28.119
my warnings, custom fonts have taken off,
like they've more than doubled in the last

557
00:51:28.119 --> 00:51:34.789
year, this is a chart from the HTP archive.
So they're taking off. The good thing is the

558
00:51:34.789 --> 00:51:41.789
folks at Typekit and the Google fonts library
have done a lot of good work to mitigate the

559
00:51:42.349 --> 00:51:48.150
impact that custom fonts files have, but we
can still go farther. In fact, I think Google

560
00:51:48.150 --> 00:51:53.160
fonts library just announced custom fonts
a few months ago. If you don't need -- like

561
00:51:53.160 --> 00:51:57.719
if you're only using digits or other certain
characters, like it's just a word that you

562
00:51:57.719 --> 00:52:03.119
want to render in that font, you can actually
create a smaller font. The font files are

563
00:52:03.119 --> 00:52:10.119
typically like over 100K, so you can create
one that is just the characters that you need.

564
00:52:12.509 --> 00:52:18.709
The flash of unstyled text means you draw
text and then you have to redraw it, and so

565
00:52:18.709 --> 00:52:25.709
what I would propose is that browsers have
like an impatient fallback, like if -- I don't

566
00:52:25.809 --> 00:52:31.099
want to have this flash of my text, so I'm
going to wait 250 milliseconds for the font

567
00:52:31.099 --> 00:52:35.749
file. If it hasn't come back and we're drawing
in a default font, and even if the font files

568
00:52:35.749 --> 00:52:39.509
comes back later, I'm not going to redraw
it. I'll cache that font for the next time

569
00:52:39.509 --> 00:52:44.729
the user goes to the page, but I'm not going
to do that, and again, I think this is a behavior

570
00:52:44.729 --> 00:52:51.729
that the Google font library and Typekit loaders
do automatically for you. Yeah. And also,

571
00:52:55.239 --> 00:52:59.739
okay, I'm running short on time, so I'm going
to go a little faster. Font should be given

572
00:52:59.739 --> 00:53:05.430
a higher priority in caching. Browsers are
still just starting to pay attention to that,

573
00:53:05.430 --> 00:53:12.430
and even if a font is expired, I might want
to render with it, and do a "if modified since

574
00:53:13.039 --> 00:53:15.869
request", and then if I get back, "oh, not
modified?"

575
00:53:15.869 --> 00:53:20.219
It's okay, I've already rendered with a font.
All I have to do is validate it. Oh, good,

576
00:53:20.219 --> 00:53:25.569
I'm getting close to the end, so there's a
lot more stuff I didn't talk about. We -- you

577
00:53:25.569 --> 00:53:30.729
know, all of us spent a lot of time building
rounded corners that downloaded a bunch of

578
00:53:30.729 --> 00:53:35.479
images, so now you can do a lot of things
that used to require HTP traffic, you can

579
00:53:35.479 --> 00:53:42.479
do with CSS 3, so that's cool. You have to
be a little careful, these incur, you know,

580
00:53:42.650 --> 00:53:49.609
might incur a lot of CPU overhead or repaints.
You can use SVG and canvas instead of downloading

581
00:53:49.609 --> 00:53:55.369
images. Video tag could make starting up videos
faster. Web sockets, if you have a very chatty

582
00:53:55.369 --> 00:54:00.279
sort of app can be used. Web workers, if you
have like a lot of computation that you want

583
00:54:00.279 --> 00:54:05.900
to get out of the UI thread, you can use Web
workers, oh, for some things that we used

584
00:54:05.900 --> 00:54:11.880
to have to write a lot of JavaScript or HTML
for, you can do with these new built-in controls.

585
00:54:11.880 --> 00:54:18.880
Again, the photo, more, infinite number of
digits. History API, we used to have to implement

586
00:54:20.609 --> 00:54:25.200
this in JavaScript. Now we don't have to download
all that JavaScript. Ping is a way to avoid

587
00:54:25.200 --> 00:54:31.009
a redirect if you want to track something.
Don't use set time-out for animation. Use

588
00:54:31.009 --> 00:54:37.920
request animation frame. It will be faster.
You can use the native JSON parser, and here

589
00:54:37.920 --> 00:54:42.979
are some good resources to get more information
about this other HTML5 stuff. So what are

590
00:54:42.979 --> 00:54:46.769
the takeaways?
Speed matters. Hopefully we all agree about

591
00:54:46.769 --> 00:54:50.880
that. I saw you raise your hand before. So
I'm going to hold you to that. Pay attention

592
00:54:50.880 --> 00:54:55.339
to what's coming out of the Web performance
working group out of the W3C. You can use

593
00:54:55.339 --> 00:54:59.769
window.performance to track the timing on
your pages, and even if you haven't done that

594
00:54:59.769 --> 00:55:03.559
yet, if you're using Google Analytics, you
can go and see the data there. It's already

595
00:55:03.559 --> 00:55:09.779
been gathered for the last few months. JavaScript
blocking the UI thread is really critical.

596
00:55:09.779 --> 00:55:14.680
Try to get a lot of that stuff deferred or
async, and caching is really important. I

597
00:55:14.680 --> 00:55:19.479
think it's one of the most important things
for a fast user experience. Browsers are improving

598
00:55:19.479 --> 00:55:23.940
their cache. Mobile browsers have a lot of
room to catch up on, so you can try some of

599
00:55:23.940 --> 00:55:29.599
these other techniques. And be careful about
using font-face. So before I close out, I

600
00:55:29.599 --> 00:55:34.349
want to mention, if you like this kind of
performance stuff, I'm sorry, but you should

601
00:55:34.349 --> 00:55:40.069
have been at Velocity this week. We just finished
that Wednesday. But if you missed that, you

602
00:55:40.069 --> 00:55:43.949
could go to Web PERF days, the first ever,
but -- well, actually, that was yesterday.

603
00:55:43.949 --> 00:55:46.699
Okay, so you missed that one.
[ Laughter ]

604
00:55:46.699 --> 00:55:51.420
&gt;&gt;Steve Souders: Oh, okay, we've got Velocity
Europe coming up in October, so you might

605
00:55:51.420 --> 00:55:56.170
have to go a little farther, but -- and we'll
be back next year in June for Velocity. I

606
00:55:56.170 --> 00:56:02.390
also wanted to just mention this -- oh, I
added this like five minutes before I came

607
00:56:02.390 --> 00:56:09.319
on stage. How can I do this, like -- I don't
know, I have to go through them all. So (indiscernible)

608
00:56:09.319 --> 00:56:15.380
runs this performance calendar every year,
and O'Reilly took the most recent performance

609
00:56:15.380 --> 00:56:21.079
calendar and put it into a book, so this just
came out this week, and you can get most of

610
00:56:21.079 --> 00:56:26.759
this content on the blog for the performance
calendar, but the -- they were updated, and

611
00:56:26.759 --> 00:56:33.759
if you like books, you can get it in book
form here. So that's it. Thank you very much.

612
00:56:36.410 --> 00:56:41.539
[ Applause ]
&gt;&gt;Steve Souders: So I've got about four minutes,

613
00:56:41.539 --> 00:56:48.190
I would be happy to answer any questions and
I think they want you to use the mic. Everyone

614
00:56:48.190 --> 00:56:54.279
is heading out.
&gt;&gt;&gt; Would you care to expand upon font awesome?

615
00:56:54.279 --> 00:56:59.859
And also to resolve some of the issues of
pop-in, I found setting a fixed type for whatever

616
00:56:59.859 --> 00:57:04.529
text I decide is very nice.
&gt;&gt;Steve Souders: What's the first one? Expound

617
00:57:04.529 --> 00:57:08.289
on...
&gt;&gt;&gt; Font awesome, using fonts instead of sprites?

618
00:57:08.289 --> 00:57:15.289
&gt;&gt;Steve Souders: Oh, yeah, so you can create
a custom font, you know, file, that has little

619
00:57:18.719 --> 00:57:25.640
pictures, you know, kind of like wings -- what
is it on windows? The wings font, wingdings,

620
00:57:25.640 --> 00:57:30.869
yeah, so you can do that with a font, so if
you have like really small images that you're

621
00:57:30.869 --> 00:57:35.079
using now and you're downloading them as HTP
requests instead of images, instead you can

622
00:57:35.079 --> 00:57:38.789
download a font fall. It doesn't have to be
huge. Maybe you have 10 of those or 20 of

623
00:57:38.789 --> 00:57:45.789
those, and you can download those and use
those to draw those little images, those little

624
00:57:46.769 --> 00:57:51.749
sprites in the page for like maybe little
buttons or things like that, and so, you know,

625
00:57:51.749 --> 00:57:55.739
I think that's a great idea. You could also
use sprites. Sprites are maybe a little harder

626
00:57:55.739 --> 00:58:00.349
to do. You have to create the image and know
all the CSS, but the one thing I would say,

627
00:58:00.349 --> 00:58:04.979
if you're using any kind of font file, is
try to figure out a way to do it that doesn't

628
00:58:04.979 --> 00:58:10.359
block the page, like especially in IE. Custom
font files block rendering of everything in

629
00:58:10.359 --> 00:58:15.799
the page, so if you could do that lazily or
something like that, that would be good, and

630
00:58:15.799 --> 00:58:22.130
then the second one was...
&gt;&gt;&gt; Just a tip to deal with font snapping

631
00:58:22.130 --> 00:58:27.029
in after they loaded, the ugly hack of just
setting a fixed type for everything. So at

632
00:58:27.029 --> 00:58:30.079
least it doesn't like reflow.
&gt;&gt;Steve Souders: Yeah, yeah, you could do

633
00:58:30.079 --> 00:58:36.039
that. Yes, another question.
&gt;&gt;&gt; Yeah, you said mobile browsers don't support

634
00:58:36.039 --> 00:58:42.289
most of those features yet, custom, you know,
desktop browsers either, so how would we test

635
00:58:42.289 --> 00:58:45.519
them?
&gt;&gt;Steve Souders: I guess I wasn't clear. Everything

636
00:58:45.519 --> 00:58:51.359
I talked about is supported in mobile browsers,
pretty much, and, in fact, you're going to

637
00:58:51.359 --> 00:58:57.410
get -- I think that's another reason why we're
seeing more HTML5 stuff on mobile and desktop,

638
00:58:57.410 --> 00:59:03.789
because on desktop, there's still a lot more
lingering IE6, IE7 legacy browsers out there,

639
00:59:03.789 --> 00:59:07.539
so you're almost a little safer using the
cutting edge stuff on mobile than you are

640
00:59:07.539 --> 00:59:14.420
on desktop. The only thing I can think about
is I thought there was something -- well,

641
00:59:14.420 --> 00:59:21.420
the page visibility API is only in Chrome,
but all the timing stuff, local storage fonts,

642
00:59:21.459 --> 00:59:26.740
app cache, async and defer attributes, all
of that is supported on mobile too.

643
00:59:26.740 --> 00:59:32.160
&gt;&gt;&gt; Thank you.
&gt;&gt;Steve Souders: Yeah. Okay, let's go here.

644
00:59:32.160 --> 00:59:39.160
&gt;&gt;&gt; Let's see here. You were talking about
visibility and document.webkit hidden and

645
00:59:40.009 --> 00:59:45.579
how that relates with click tracking and stuff
like that. One click unsubscribes and e-mails

646
00:59:45.579 --> 00:59:51.319
and things like that, is that another way
that we can avoid being automatically unsubscribed?

647
00:59:51.319 --> 00:59:58.319
&gt;&gt;Steve Souders: Oh, oh, well, but how would
you -- how would you -- what's the scenario

648
01:00:00.549 --> 01:00:04.990
where you would render unsubscribed page without
the user seeing it?

649
01:00:04.990 --> 01:00:09.199
&gt;&gt;&gt; Well, if they're following links and pre-loading
in the background, you might follow --

650
01:00:09.199 --> 01:00:14.969
&gt;&gt;Steve Souders: Oh, yeah, the pre-rendering
I was talking about is the developer or user

651
01:00:14.969 --> 01:00:20.059
has explicitly asked to open a page, but we
can just know we can do it in the background.

652
01:00:20.059 --> 01:00:24.989
But, so, yeah, if you're crawling a page,
that could be something that you could do

653
01:00:24.989 --> 01:00:30.719
is to make sure not to -- you know, you could
instrument an unsubscribed link so that it

654
01:00:30.719 --> 01:00:34.759
only worked if the page was visible. Yeah.
&gt;&gt;&gt; Thank you.

655
01:00:34.759 --> 01:00:38.509
&gt;&gt;Steve Souders: Yeah.
&gt;&gt;&gt; What's your recommendation in terms of

656
01:00:38.509 --> 01:00:44.599
moving the script tags physically to the bottom
of the body tag versus using the defer script

657
01:00:44.599 --> 01:00:48.749
tag that you described?
&gt;&gt;Steve Souders: Yeah, I think both of those

658
01:00:48.749 --> 01:00:55.430
work. One thing that we -- I only have a few
seconds, so one thing we don't have time to

659
01:00:55.430 --> 01:01:01.859
talk about is the importance of the onload
event firing as quickly as possible, so in

660
01:01:01.859 --> 01:01:06.630
both cases with defer and async and putting
scripts at the bottom, you're going to block

661
01:01:06.630 --> 01:01:12.279
the onload link, the onload event from firing,
so really putting scripts at the bottom is

662
01:01:12.279 --> 01:01:18.390
almost the same as doing defer. It really
has more to do with kind of the size of your

663
01:01:18.390 --> 01:01:24.140
team. A lot of times there's, you know, 20
or 200 people working on a property, and so

664
01:01:24.140 --> 01:01:30.180
it's hard to get the message out to put scripts
at the bottom or like someone's code is only

665
01:01:30.180 --> 01:01:35.759
going to be executed at the top and be really
hard to give them a foothold in the top and

666
01:01:35.759 --> 01:01:40.150
give them also a foothold in the bottom and
make sure that both of those are done in sync,

667
01:01:40.150 --> 01:01:46.049
so if the only place like the logging or metrics
team has a place to -- a foothold in the page

668
01:01:46.049 --> 01:01:51.440
is at the top, they can get the same behavior
using the defer attribute as just putting

669
01:01:51.440 --> 01:01:55.880
the script tag at the bottom. Putting the
script tag at the bottom is another lightweight

670
01:01:55.880 --> 01:02:01.539
way to avoid that blocking of the UI thread.
Okay. So I should wrap up. Thank you very

671
01:02:01.539 --> 01:02:01.789
much.
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:03.820

2
00:00:03.820 --> 00:00:05.940
JUSTIN UBERTI: So what you all
think of the Google Glass

3
00:00:05.940 --> 00:00:07.247
Hangout this morning?

4
00:00:07.247 --> 00:00:10.110
[AUDIENCE CHEERING]

5
00:00:10.110 --> 00:00:13.260
JUSTIN UBERTI: What an amazing
way to show off the power of

6
00:00:13.260 --> 00:00:14.705
real-time communication.

7
00:00:14.705 --> 00:00:16.570
When I first heard about it,
they're going to jump out of

8
00:00:16.570 --> 00:00:19.260
an airship and have it all in a
Hangout, I was like, that's

9
00:00:19.260 --> 00:00:19.990
pretty incredible.

10
00:00:19.990 --> 00:00:21.800
But anyway, I'm Justin Uberti.

11
00:00:21.800 --> 00:00:25.420
And today, I'd like to tell
you all about WebRTC, a

12
00:00:25.420 --> 00:00:27.530
project to bring real-time
communication--

13
00:00:27.530 --> 00:00:29.100
RTC--

14
00:00:29.100 --> 00:00:30.350
to the open web platform.

15
00:00:30.350 --> 00:00:33.080
16
00:00:33.080 --> 00:00:37.240
So I currently work on the
WebRTC team here at Google,

17
00:00:37.240 --> 00:00:39.410
which is part of the
Chrome project.

18
00:00:39.410 --> 00:00:43.020
Before joining WebRTC, I was
the lead in the Google Talk

19
00:00:43.020 --> 00:00:45.480
team, where we built some really
exciting applications,

20
00:00:45.480 --> 00:00:48.500
and also learned a lot of really
hard lessons about what

21
00:00:48.500 --> 00:00:52.490
it takes to do these kinds
of apps in a browser.

22
00:00:52.490 --> 00:00:54.450
I also kind of learned that some
people on the internet

23
00:00:54.450 --> 00:00:56.710
think I have really
small hands.

24
00:00:56.710 --> 00:00:57.960
I don't get it.

25
00:00:57.960 --> 00:01:00.720
26
00:01:00.720 --> 00:01:02.670
So enough about me.

27
00:01:02.670 --> 00:01:04.180
Let me see what kind of
developers we have in the

28
00:01:04.180 --> 00:01:05.580
audience today.

29
00:01:05.580 --> 00:01:07.160
Raise your hand if you're
really familiar with the

30
00:01:07.160 --> 00:01:08.410
following technologies.

31
00:01:08.410 --> 00:01:10.490
32
00:01:10.490 --> 00:01:12.884
WebRTC?

33
00:01:12.884 --> 00:01:14.800
OK.

34
00:01:14.800 --> 00:01:17.090
HTML5?

35
00:01:17.090 --> 00:01:18.310
Good.

36
00:01:18.310 --> 00:01:19.560
WebSockets?

37
00:01:19.560 --> 00:01:21.530
38
00:01:21.530 --> 00:01:24.450
App Engine?

39
00:01:24.450 --> 00:01:25.608
SIP?

40
00:01:25.608 --> 00:01:27.700
OK.

41
00:01:27.700 --> 00:01:29.580
H 323?

42
00:01:29.580 --> 00:01:30.140
OK.

43
00:01:30.140 --> 00:01:32.070
You folks who raised your
hands, you have my

44
00:01:32.070 --> 00:01:33.320
condolences.

45
00:01:33.320 --> 00:01:40.170
46
00:01:40.170 --> 00:01:43.310
So what exactly is WebRTC?

47
00:01:43.310 --> 00:01:46.930
Well, let me tell you
a little story.

48
00:01:46.930 --> 00:01:48.790
A couple years ago, when we
are working on what would

49
00:01:48.790 --> 00:01:51.990
become Hangouts, the Chrome
team approached us.

50
00:01:51.990 --> 00:01:55.000
And they said, the open web
platform has some amazing

51
00:01:55.000 --> 00:01:56.460
technology.

52
00:01:56.460 --> 00:01:58.490
And people are building
incredible apps with it.

53
00:01:58.490 --> 00:02:01.030
But there's one big
gap remaining.

54
00:02:01.030 --> 00:02:04.220
To build apps like Google Video
Chat, you need plugins.

55
00:02:04.220 --> 00:02:07.160
And these plugins have all sorts
of problems, security,

56
00:02:07.160 --> 00:02:08.590
everything.

57
00:02:08.590 --> 00:02:11.500
What would it take to take the
stuff you built for Google

58
00:02:11.500 --> 00:02:13.620
Video Chat and Hangouts,
and make it part of

59
00:02:13.620 --> 00:02:16.410
the open web platform?

60
00:02:16.410 --> 00:02:19.440
Well, we said, it would
be really complicated.

61
00:02:19.440 --> 00:02:21.110
I mean, we'd have all
these technology

62
00:02:21.110 --> 00:02:22.250
issues to figure out.

63
00:02:22.250 --> 00:02:23.710
And we'd have to deal
with like codec

64
00:02:23.710 --> 00:02:25.870
licensing, and open sourcing.

65
00:02:25.870 --> 00:02:28.700
And most of all, we'd have to
work with other browser

66
00:02:28.700 --> 00:02:31.470
manufacturers and other industry
players to make an

67
00:02:31.470 --> 00:02:34.740
actual standard for something
that can be implemented across

68
00:02:34.740 --> 00:02:37.760
all browsers and across
the entire web.

69
00:02:37.760 --> 00:02:40.710
And so in typical Google
fashion, the response we got

70
00:02:40.710 --> 00:02:44.000
back was, sounds like a plan.

71
00:02:44.000 --> 00:02:46.090
When can we have it?

72
00:02:46.090 --> 00:02:48.110
So we got to work.

73
00:02:48.110 --> 00:02:51.290
Where we didn't have the right
technology pieces in house, we

74
00:02:51.290 --> 00:02:54.690
went out and we acquired state
of the art, the very best

75
00:02:54.690 --> 00:02:56.490
technology out there.

76
00:02:56.490 --> 00:02:59.030
We assembled these pieces
into a system.

77
00:02:59.030 --> 00:03:01.500
And as we started talking to
other people, and we talked to

78
00:03:01.500 --> 00:03:07.220
other browser manufacturers,
Firefox, Opera, Microsoft.

79
00:03:07.220 --> 00:03:10.150
We talked to people who would
build apps on this platform,

80
00:03:10.150 --> 00:03:12.360
people like Skype, people
like Cisco.

81
00:03:12.360 --> 00:03:16.220
And we talked to the typical
telecom providers, folks like

82
00:03:16.220 --> 00:03:18.800
Ericsson, AT&amp;T.

83
00:03:18.800 --> 00:03:22.590
They were all super excited
about this because it's

84
00:03:22.590 --> 00:03:26.040
potential, not just for the
web, but for the entire

85
00:03:26.040 --> 00:03:28.400
communications industry.

86
00:03:28.400 --> 00:03:31.700
So that's the premise of WebRTC,
RTC to build real-time

87
00:03:31.700 --> 00:03:34.720
communications into the fabric
of the web, where every

88
00:03:34.720 --> 00:03:37.300
browser has a built in, state
of the art communication

89
00:03:37.300 --> 00:03:42.460
stack, and create a new open
platform that any application

90
00:03:42.460 --> 00:03:44.160
and any device can use
to communicate.

91
00:03:44.160 --> 00:03:47.130
92
00:03:47.130 --> 00:03:48.760
So think about that.

93
00:03:48.760 --> 00:03:51.830
This is where we're having,
the ability to get the

94
00:03:51.830 --> 00:03:53.320
communications industry--

95
00:03:53.320 --> 00:03:55.840
a $2 trillion industry--

96
00:03:55.840 --> 00:03:58.080
moving at web speed.

97
00:03:58.080 --> 00:04:00.280
And not only will the developers
be able to build

98
00:04:00.280 --> 00:04:03.310
and deploy voice and video apps,
just like any other web

99
00:04:03.310 --> 00:04:06.340
app, but we'll also start to see
communication being built

100
00:04:06.340 --> 00:04:08.970
in as a feature to all
sorts of apps.

101
00:04:08.970 --> 00:04:12.575
In a game, the ability to see
the opponent's face right as

102
00:04:12.575 --> 00:04:14.320
you checkmate them.

103
00:04:14.320 --> 00:04:17.630
Or in customer service on a
website, a shopping website,

104
00:04:17.630 --> 00:04:20.980
to be able to talk to a customer
service rep live in

105
00:04:20.980 --> 00:04:24.620
person with a single click.

106
00:04:24.620 --> 00:04:28.220
As WebRTC takes hold across
computers and all sorts of

107
00:04:28.220 --> 00:04:32.170
devices, we have the real
ability to create the next

108
00:04:32.170 --> 00:04:35.270
generation phone network, where
every WebRTC enabled

109
00:04:35.270 --> 00:04:37.630
device can communicate
with amazing

110
00:04:37.630 --> 00:04:38.880
audio and video quality.

111
00:04:38.880 --> 00:04:41.800
112
00:04:41.800 --> 00:04:43.930
So take this quote
from NoJitter.

113
00:04:43.930 --> 00:04:47.045
This is a communications
industry blog.

114
00:04:47.045 --> 00:04:52.370
"WebRTC and HTML5 could enable
the same transformation for

115
00:04:52.370 --> 00:04:57.310
real time that the original
browser did for information."

116
00:04:57.310 --> 00:04:59.930
That's a pretty lofty
comparison.

117
00:04:59.930 --> 00:05:02.110
So how do we get there?

118
00:05:02.110 --> 00:05:05.170
Well first, we need to get
WebRTC in the hands of you,

119
00:05:05.170 --> 00:05:06.530
the developers.

120
00:05:06.530 --> 00:05:08.530
And here's where we're
at with that.

121
00:05:08.530 --> 00:05:12.940
The first WebRTC support is now
shipping in Chrome 21, the

122
00:05:12.940 --> 00:05:14.620
current Chrome Dev track.

123
00:05:14.620 --> 00:05:16.390
And also in Opera 12.

124
00:05:16.390 --> 00:05:18.970
We're expecting to have Firefox
join us before the end

125
00:05:18.970 --> 00:05:20.520
of the year.

126
00:05:20.520 --> 00:05:24.240
We've also brought WebRTC
support to Internet Explorer

127
00:05:24.240 --> 00:05:25.650
via ChromeFrame.

128
00:05:25.650 --> 00:05:28.470
And so we'll soon have
support across

129
00:05:28.470 --> 00:05:31.780
almost all desktop browsers.

130
00:05:31.780 --> 00:05:34.130
As this technology stabilizes,
we're also going to see web

131
00:05:34.130 --> 00:05:37.480
WebRTC start to appear in the
various mobile browsers.

132
00:05:37.480 --> 00:05:41.790
And for those building native
applications, either on

133
00:05:41.790 --> 00:05:45.030
desktop or mobile, we have
native versions of the WebRTC

134
00:05:45.030 --> 00:05:47.110
stack that are fully compatible
with their web

135
00:05:47.110 --> 00:05:48.360
counterparts.

136
00:05:48.360 --> 00:05:50.280
137
00:05:50.280 --> 00:05:53.270
So the functionality the WebRTC
offers falls into three

138
00:05:53.270 --> 00:05:55.180
categories.

139
00:05:55.180 --> 00:05:59.840
The first, MediaStreams, also
known as get user media, is

140
00:05:59.840 --> 00:06:02.450
about getting access to the
user's camera and mic.

141
00:06:02.450 --> 00:06:03.800
There are a lot of cool
apps that can be

142
00:06:03.800 --> 00:06:06.190
built with just this.

143
00:06:06.190 --> 00:06:08.970
Next the technology called
PeerConnection.

144
00:06:08.970 --> 00:06:11.830
This is the engine behind making
high quality peer to

145
00:06:11.830 --> 00:06:15.850
peer voice and video
calls on the web.

146
00:06:15.850 --> 00:06:17.280
Last is a new bit of
functionality called

147
00:06:17.280 --> 00:06:18.160
DataChannels.

148
00:06:18.160 --> 00:06:21.630
It's so new, the spec for this
hasn't fully stabilized yet.

149
00:06:21.630 --> 00:06:23.480
But it has incredible
potential.

150
00:06:23.480 --> 00:06:28.670
The ability for any web app to
be a P2P app, to exchange

151
00:06:28.670 --> 00:06:31.620
application data peer to peer.

152
00:06:31.620 --> 00:06:36.045
Now let's take a look at
each one of these.

153
00:06:36.045 --> 00:06:39.040
Now, if you're following along
at home, and you want to try

154
00:06:39.040 --> 00:06:41.600
out the things about the show,
and you're running Chrome, you

155
00:06:41.600 --> 00:06:43.860
want to turn on the flags to
enable MediaStreams and

156
00:06:43.860 --> 00:06:45.470
PeerConnection.

157
00:06:45.470 --> 00:06:50.430
If you go to About Flags in your
Chrome build, you'll see

158
00:06:50.430 --> 00:06:51.905
these options in a list.

159
00:06:51.905 --> 00:06:54.330
And you turn on MediaStream
and PeerConnection.

160
00:06:54.330 --> 00:06:57.510
In the Dev channel on Chrome
21, you won't see a

161
00:06:57.510 --> 00:07:00.800
MediaStream option, because
it's now on by default.

162
00:07:00.800 --> 00:07:02.420
And if you don't want to turn
this on for your existing

163
00:07:02.420 --> 00:07:05.850
version of Chrome, you can
download Google Chrome Canary

164
00:07:05.850 --> 00:07:07.810
and run it side by
side with your

165
00:07:07.810 --> 00:07:09.060
existing version of Chrome.

166
00:07:09.060 --> 00:07:11.452
167
00:07:11.452 --> 00:07:13.420
So first up, MediaStreams.

168
00:07:13.420 --> 00:07:17.170
169
00:07:17.170 --> 00:07:20.500
A MediaStream represents a media
source, and can contain

170
00:07:20.500 --> 00:07:24.130
multiple media tracks that
can be of various types.

171
00:07:24.130 --> 00:07:27.370
So for example, if we get a
MediaStream for the user's

172
00:07:27.370 --> 00:07:30.890
webcam and mic, we'll have a
single stream, but a track for

173
00:07:30.890 --> 00:07:35.020
video, and a track for audio, as
shown in the diagram here.

174
00:07:35.020 --> 00:07:37.540
Now, in a video conference,
we could have multiple

175
00:07:37.540 --> 00:07:39.200
MediaStreams.

176
00:07:39.200 --> 00:07:42.280
And one MediaStream would exist
for each participant,

177
00:07:42.280 --> 00:07:45.680
each one with an audio
and video track.

178
00:07:45.680 --> 00:07:48.270
Now, once we have a MediaStream
we need a way to

179
00:07:48.270 --> 00:07:49.520
actually play it out.

180
00:07:49.520 --> 00:07:52.390
And fortunately, we have an
easy way to play audio and

181
00:07:52.390 --> 00:07:54.930
video in HTML via
the aptly named,

182
00:07:54.930 --> 00:07:57.070
audio and video elements.

183
00:07:57.070 --> 00:07:59.470
Now, in order to plug a
MediaStream into these

184
00:07:59.470 --> 00:08:03.050
elements, we first need a way
to get a URL that references

185
00:08:03.050 --> 00:08:04.200
the MediaStream.

186
00:08:04.200 --> 00:08:07.700
Fortunately, there's a method
called create object URL that

187
00:08:07.700 --> 00:08:09.500
does just that.

188
00:08:09.500 --> 00:08:13.370
Plug that URL into a tag, and
then media will start to play.

189
00:08:13.370 --> 00:08:15.910
Now lastly, how do we get
the MediaStream for

190
00:08:15.910 --> 00:08:16.910
the webcam and mic?

191
00:08:16.910 --> 00:08:20.620
So there's a new API called
getUserMedia.

192
00:08:20.620 --> 00:08:23.770
In Chrome, it's prefixed
as WebKit getUserMedia.

193
00:08:23.770 --> 00:08:25.420
And the API is async.

194
00:08:25.420 --> 00:08:28.740
So you call it, it prompts the
user for permission to access

195
00:08:28.740 --> 00:08:29.270
their devices.

196
00:08:29.270 --> 00:08:30.740
We spend a lot of time worrying

197
00:08:30.740 --> 00:08:32.409
about privacy and security.

198
00:08:32.409 --> 00:08:35.630
And that gives you back a
MediaStream via callback once

199
00:08:35.630 --> 00:08:36.880
it's successful.

200
00:08:36.880 --> 00:08:39.240
201
00:08:39.240 --> 00:08:42.230
So here's that all
put together.

202
00:08:42.230 --> 00:08:47.595
Get user media, get a callback,
create URL, stuff it

203
00:08:47.595 --> 00:08:49.500
in a video tag.

204
00:08:49.500 --> 00:08:50.750
So let's see that in action.

205
00:08:50.750 --> 00:08:55.030
206
00:08:55.030 --> 00:08:57.310
So here we get prompted
for our camera.

207
00:08:57.310 --> 00:09:00.160
I'll pick my good camera
right here.

208
00:09:00.160 --> 00:09:04.140
And there it is.

209
00:09:04.140 --> 00:09:06.570
Webcam access right
in the browser.

210
00:09:06.570 --> 00:09:07.820
Pretty cool.

211
00:09:07.820 --> 00:09:11.610
212
00:09:11.610 --> 00:09:16.980
So now let's jazz it
up a little bit.

213
00:09:16.980 --> 00:09:18.900
So the first thing that
everybody does with

214
00:09:18.900 --> 00:09:21.640
getUserMedia is to make
a Photo Booth app.

215
00:09:21.640 --> 00:09:24.060
And we're not going to
be any exception.

216
00:09:24.060 --> 00:09:26.820
So let's add a button so that we
can draw the current video

217
00:09:26.820 --> 00:09:30.330
frame directly onto a campus,
just like a camera.

218
00:09:30.330 --> 00:09:32.980
So let's try that out.

219
00:09:32.980 --> 00:09:35.030
So here's our next sample.

220
00:09:35.030 --> 00:09:35.520
Get prompted.

221
00:09:35.520 --> 00:09:37.550
This time I'm going to tell it
to remember it, so I don't

222
00:09:37.550 --> 00:09:38.800
want you to do this again.

223
00:09:38.800 --> 00:09:41.860
224
00:09:41.860 --> 00:09:47.240
OK, and so give a big thumbs
up for the camera here.

225
00:09:47.240 --> 00:09:48.690
And there's our Photo Booth.

226
00:09:48.690 --> 00:09:54.920
227
00:09:54.920 --> 00:09:57.610
So of course, all good Photo
Booths need some

228
00:09:57.610 --> 00:09:59.320
sort of video effects.

229
00:09:59.320 --> 00:10:02.180
The web platform gives us some
great tools to do this.

230
00:10:02.180 --> 00:10:06.170
With CSS, we can apply a style
to any visual element, like a

231
00:10:06.170 --> 00:10:08.500
video tag or a canvas.

232
00:10:08.500 --> 00:10:11.950
So here, we can apply a black
and white effect, this built

233
00:10:11.950 --> 00:10:14.660
in webkit gray scale CSS.

234
00:10:14.660 --> 00:10:16.840
And so when the button is
clicked, we're going to apply

235
00:10:16.840 --> 00:10:20.430
that CSS class to the
video element.

236
00:10:20.430 --> 00:10:21.870
So I've made a demo.

237
00:10:21.870 --> 00:10:23.620
And I've got a couple more
effects in here.

238
00:10:23.620 --> 00:10:25.160
So let me show them
to you now.

239
00:10:25.160 --> 00:10:27.740
240
00:10:27.740 --> 00:10:28.370
So I start up.

241
00:10:28.370 --> 00:10:31.370
And since I've remembered the
preference, it doesn't need to

242
00:10:31.370 --> 00:10:32.510
prompt me again.

243
00:10:32.510 --> 00:10:35.320
So let me try, we got
sepia tone here.

244
00:10:35.320 --> 00:10:37.925
And let's see, there's blur.

245
00:10:37.925 --> 00:10:38.910
And there's black and white.

246
00:10:38.910 --> 00:10:40.765
And I like black and white,
it looks real serious.

247
00:10:40.765 --> 00:10:43.380
248
00:10:43.380 --> 00:10:45.660
So there's a lot of cool
stuff you can do

249
00:10:45.660 --> 00:10:46.910
just with these things.

250
00:10:46.910 --> 00:10:49.290
251
00:10:49.290 --> 00:10:53.760
Now, that's what you can do
with a few lines of code.

252
00:10:53.760 --> 00:10:56.800
But I want to show you now
a complete Photo Booth

253
00:10:56.800 --> 00:10:58.670
application that uses
this technology.

254
00:10:58.670 --> 00:11:00.940
And the app I'm about to show
you is called Webcam Toy.

255
00:11:00.940 --> 00:11:05.000
And it's written by a guy named
Paul Neave, who got

256
00:11:05.000 --> 00:11:08.200
involved with WebRTC in the
very, very beginning.

257
00:11:08.200 --> 00:11:12.400
And so this thing uses Canvas
and WebGL pixel shaders to do

258
00:11:12.400 --> 00:11:13.540
some really amazing effects.

259
00:11:13.540 --> 00:11:16.030
There's over 100 effects
in this app.

260
00:11:16.030 --> 00:11:17.480
So there's some really
cool ones.

261
00:11:17.480 --> 00:11:18.720
Like, let me show you.

262
00:11:18.720 --> 00:11:19.940
This one's one of my
favorites here.

263
00:11:19.940 --> 00:11:23.450
Snow, it comes down and it sort
of builds up and stuff.

264
00:11:23.450 --> 00:11:25.510
And you can kind of clear
it off and stuff.

265
00:11:25.510 --> 00:11:26.510
It's really cool.

266
00:11:26.510 --> 00:11:29.000
And let's see, what else?

267
00:11:29.000 --> 00:11:32.140
The sketch one, this is also
one of my favorites.

268
00:11:32.140 --> 00:11:35.090
But what I really want to do is
I'm going to take a picture

269
00:11:35.090 --> 00:11:37.640
this room so I can remember
this moment here.

270
00:11:37.640 --> 00:11:39.890
All right, what's
a good effect?

271
00:11:39.890 --> 00:11:41.140
I like this one.

272
00:11:41.140 --> 00:11:46.002
273
00:11:46.002 --> 00:11:48.970
[CAMERA SHUTTER SOUND]

274
00:11:48.970 --> 00:11:53.010
JUSTIN UBERTI: All right,
immortalized forever.

275
00:11:53.010 --> 00:11:56.700
OK, so one other thing that Paul
has done, though, is he's

276
00:11:56.700 --> 00:12:00.330
wired getUserMedia to do
real-time face recognition in

277
00:12:00.330 --> 00:12:01.580
JavaScript.

278
00:12:01.580 --> 00:12:10.500
279
00:12:10.500 --> 00:12:13.660
So here we have real-time face
detection running in

280
00:12:13.660 --> 00:12:14.610
JavaScript.

281
00:12:14.610 --> 00:12:17.760
Now, I never thought I would
be saying those words.

282
00:12:17.760 --> 00:12:21.530
But here it is, as long as
I look at the camera.

283
00:12:21.530 --> 00:12:23.730
So this kind of gives
a new meaning to

284
00:12:23.730 --> 00:12:26.320
Chrome's incognito mode.

285
00:12:26.320 --> 00:12:29.670
So as you can see, some amazing
things are possible

286
00:12:29.670 --> 00:12:32.170
when we combine WebRTC with the
rest of the web platform.

287
00:12:32.170 --> 00:12:39.390
288
00:12:39.390 --> 00:12:43.230
OK, so that's how we get
access to devices.

289
00:12:43.230 --> 00:12:45.290
Now PeerConnection Connection
will let us take those

290
00:12:45.290 --> 00:12:47.310
MediaStreams and send
them across the

291
00:12:47.310 --> 00:12:49.140
internet peer to peer.

292
00:12:49.140 --> 00:12:51.860
293
00:12:51.860 --> 00:12:56.643
So PeerConnection, as its name
indicates, is the API they use

294
00:12:56.643 --> 00:12:58.440
to set up peer to
peer sessions.

295
00:12:58.440 --> 00:13:01.270
And it handles all the tricky
parts you need to establish a

296
00:13:01.270 --> 00:13:05.390
connection and run audio/video
over it, establishing the P2P

297
00:13:05.390 --> 00:13:08.820
link, managing the various
audio and video codecs,

298
00:13:08.820 --> 00:13:11.080
encryption, tuning the
audio/video stream to make

299
00:13:11.080 --> 00:13:14.570
best use of the available
bandwidth.

300
00:13:14.570 --> 00:13:17.740
But before we get into how
PeerConnection works, let's

301
00:13:17.740 --> 00:13:20.830
take a look at a typical voice
video application.

302
00:13:20.830 --> 00:13:23.350
I have Google Talk, let's
set up a call.

303
00:13:23.350 --> 00:13:27.040
So the app wants to be able to
send the media directly to the

304
00:13:27.040 --> 00:13:27.640
other side.

305
00:13:27.640 --> 00:13:30.090
But in order to do so, it needs
to establish the direct

306
00:13:30.090 --> 00:13:32.720
link and the details of how
the media should be sent.

307
00:13:32.720 --> 00:13:35.500
And the way it does that is sort
of by randevuing through

308
00:13:35.500 --> 00:13:39.560
the cloud by sending signaling
messages over its connection

309
00:13:39.560 --> 00:13:42.720
using a protocol like
XMPP or SIP.

310
00:13:42.720 --> 00:13:45.140
And these messages are relayed
to the other side.

311
00:13:45.140 --> 00:13:47.890
This exchange of parameters
allows both sides to

312
00:13:47.890 --> 00:13:52.690
successfully randevu and
establish the call.

313
00:13:52.690 --> 00:13:55.810
Now, what we could have just
taken that logic and stuffed

314
00:13:55.810 --> 00:13:56.910
it into the browser.

315
00:13:56.910 --> 00:13:58.895
The app would just tell the
browser where to connect to

316
00:13:58.895 --> 00:14:01.930
and to establish a SIP or XMPP
connection, just like a

317
00:14:01.930 --> 00:14:03.430
desktop app.

318
00:14:03.430 --> 00:14:07.290
But this isn't my makes sense
for a couple reasons.

319
00:14:07.290 --> 00:14:08.740
The app already has
a connection to

320
00:14:08.740 --> 00:14:11.266
the cloud using HTTP.

321
00:14:11.266 --> 00:14:14.010
And if we bake the signaling
protocol into the browser,

322
00:14:14.010 --> 00:14:17.010
we'd have to pick one that
everybody could agree on.

323
00:14:17.010 --> 00:14:19.010
That doesn't seem too likely,
given the various apps that

324
00:14:19.010 --> 00:14:20.560
are out there.

325
00:14:20.560 --> 00:14:22.790
And lastly, this connection
would have to deal with all

326
00:14:22.790 --> 00:14:27.640
the proxy and Firewall issues
that HTTP has already solved.

327
00:14:27.640 --> 00:14:29.000
So we didn't do this.

328
00:14:29.000 --> 00:14:30.780
What did we do?

329
00:14:30.780 --> 00:14:33.040
So we have an approach
that's called JSEP--

330
00:14:33.040 --> 00:14:36.050
JavaScript Session Establishment
Protocol.

331
00:14:36.050 --> 00:14:38.280
And we thought, let's
put the minimum we

332
00:14:38.280 --> 00:14:39.620
need into the browser.

333
00:14:39.620 --> 00:14:42.620
In 2012, that's peer to peer
networking, codecs, and

334
00:14:42.620 --> 00:14:43.450
encryption.

335
00:14:43.450 --> 00:14:44.870
And let the app do
all the rest.

336
00:14:44.870 --> 00:14:47.160
The app can manage all the call
setup, using whatever

337
00:14:47.160 --> 00:14:49.000
mechanism it wants.

338
00:14:49.000 --> 00:14:51.450
The app will simply tell the
browser about the parameters

339
00:14:51.450 --> 00:14:54.440
it wants to use for the call
using things we call session

340
00:14:54.440 --> 00:14:56.370
descriptions.

341
00:14:56.370 --> 00:14:58.910
As long as the app has some
way to exchange session

342
00:14:58.910 --> 00:15:01.980
descriptions with the other
side, it can do this any way

343
00:15:01.980 --> 00:15:03.230
that it wants to.

344
00:15:03.230 --> 00:15:05.560
345
00:15:05.560 --> 00:15:11.500
So for example, we could use
App Engine and use XML HTTP

346
00:15:11.500 --> 00:15:14.675
Request to post the session
descriptions using an adjacent

347
00:15:14.675 --> 00:15:16.260
encoding to App Engine.

348
00:15:16.260 --> 00:15:18.940
And have App Engine deliver them
to the remote side using

349
00:15:18.940 --> 00:15:22.670
the App Engine channel API.

350
00:15:22.670 --> 00:15:25.850
Or we could actually implement
the SIP protocol in

351
00:15:25.850 --> 00:15:28.800
JavaScript, convert the session
descriptions to SIP

352
00:15:28.800 --> 00:15:31.180
messages and send them
to existing SIP

353
00:15:31.180 --> 00:15:32.460
equipment out there.

354
00:15:32.460 --> 00:15:34.730
And so there's a ton of existing
SIP equipment, the

355
00:15:34.730 --> 00:15:37.200
phone network, soft switches,
existing enterprise video

356
00:15:37.200 --> 00:15:38.310
conferencing equipment.

357
00:15:38.310 --> 00:15:42.760
And people are already using
this today to have SIP Interop

358
00:15:42.760 --> 00:15:46.110
with WebRTC without forcing
WebRTC to have SIP built in.

359
00:15:46.110 --> 00:15:48.680
360
00:15:48.680 --> 00:15:52.160
So the abstract PeerConnection
API allows us to handle either

361
00:15:52.160 --> 00:15:54.570
of these cases, along with a
whole set of others that I

362
00:15:54.570 --> 00:15:56.100
haven't mentioned.

363
00:15:56.100 --> 00:15:59.740
Now, the basic thing that a
PeerConnection needs is in

364
00:15:59.740 --> 00:16:02.720
local session description,
which holds the local

365
00:16:02.720 --> 00:16:05.910
parameters for the call in the
remote session description,

366
00:16:05.910 --> 00:16:08.030
which indicates the
remote parameters.

367
00:16:08.030 --> 00:16:12.110
It also needs the transport
candidates, which are the IP

368
00:16:12.110 --> 00:16:15.420
addresses and ports that the
remote side is reachable at.

369
00:16:15.420 --> 00:16:17.070
Sometimes these are included
within the session

370
00:16:17.070 --> 00:16:18.950
description.

371
00:16:18.950 --> 00:16:21.790
Now, I'm going to walk through
a call setup, and show how

372
00:16:21.790 --> 00:16:23.760
these parameters
are exchanged.

373
00:16:23.760 --> 00:16:27.890
One thing to note, the initial
parameters sent by the caller

374
00:16:27.890 --> 00:16:30.760
specify everything that a
caller is capable of.

375
00:16:30.760 --> 00:16:32.730
And we call that an offer.

376
00:16:32.730 --> 00:16:36.180
The response from the callee,
which indicates the negotiated

377
00:16:36.180 --> 00:16:38.500
or selected parameters,
is called an answer.

378
00:16:38.500 --> 00:16:49.990
379
00:16:49.990 --> 00:16:51.540
So here's the first thing.

380
00:16:51.540 --> 00:16:54.380
The app creates the local
session description, the

381
00:16:54.380 --> 00:16:58.680
offer, passes into the
PeerConnection API, and sends

382
00:16:58.680 --> 00:17:03.390
it to the remote side using
whatever mechanism it wants.

383
00:17:03.390 --> 00:17:07.000
The caller gets it and gives it
to the PeerConnection API

384
00:17:07.000 --> 00:17:09.869
as the remote description.

385
00:17:09.869 --> 00:17:13.119
Then, assuming that the callee
accepts the call, generates

386
00:17:13.119 --> 00:17:16.319
their own session description,
passes it into PeerConnection,

387
00:17:16.319 --> 00:17:19.569
and sends it back to the
caller as an answer.

388
00:17:19.569 --> 00:17:23.050
The caller gets that answer and
gives it to PeerConnection

389
00:17:23.050 --> 00:17:24.300
as a receive session
description.

390
00:17:24.300 --> 00:17:26.900
391
00:17:26.900 --> 00:17:29.050
Now, at this point, the browser
has everything it

392
00:17:29.050 --> 00:17:31.960
needs to establish the call, the
local session description,

393
00:17:31.960 --> 00:17:33.880
the remote session description,
the transport

394
00:17:33.880 --> 00:17:39.320
candidates, the P2P link gets
established, and media flows.

395
00:17:39.320 --> 00:17:42.750
So let's look at what this
looks like in code.

396
00:17:42.750 --> 00:17:45.950
The caller creates a
PeerConnection, plugs a

397
00:17:45.950 --> 00:17:50.000
MediaStream into it, which it
got from the getUserMedia API

398
00:17:50.000 --> 00:17:51.490
via add stream.

399
00:17:51.490 --> 00:17:54.770
It then creates an offer, plugs
it in, and sends it off

400
00:17:54.770 --> 00:17:56.620
to the callee.

401
00:17:56.620 --> 00:17:59.880
When the callee gets it, over
here on the right, it creates

402
00:17:59.880 --> 00:18:02.860
a PeerConnection, stuffs in
the offer via set remote

403
00:18:02.860 --> 00:18:05.660
description, and then creates
its own session description as

404
00:18:05.660 --> 00:18:10.230
an answer that it can send
back to the caller.

405
00:18:10.230 --> 00:18:13.110
The caller then gets its answer
on the left, sets call

406
00:18:13.110 --> 00:18:15.670
set remote description with the
received answer, and the

407
00:18:15.670 --> 00:18:16.920
set up is complete.

408
00:18:16.920 --> 00:18:20.700
409
00:18:20.700 --> 00:18:23.290
So let's see how this
looks like in code.

410
00:18:23.290 --> 00:18:25.690
We're going to do the
offer/answer dance here in a

411
00:18:25.690 --> 00:18:28.230
single web page with two
PeerConnections.

412
00:18:28.230 --> 00:18:31.060
Instead of sending these
messages across the internet,

413
00:18:31.060 --> 00:18:33.100
we're going to just stuff them
directly into the appropriate

414
00:18:33.100 --> 00:18:36.140
PeerConnection So let's
try this out.

415
00:18:36.140 --> 00:18:40.440
416
00:18:40.440 --> 00:18:41.690
Still like this incognito
mode.

417
00:18:41.690 --> 00:18:49.720
418
00:18:49.720 --> 00:18:50.640
OK.

419
00:18:50.640 --> 00:18:52.600
So we start up the camera.

420
00:18:52.600 --> 00:18:59.140
421
00:18:59.140 --> 00:19:01.180
And now, when we hit the call
button, we're going to spin up

422
00:19:01.180 --> 00:19:04.710
all the codec, P2P, crypto,
all that sort of stuff.

423
00:19:04.710 --> 00:19:07.750
And we should see the video
appear in the panel on the

424
00:19:07.750 --> 00:19:11.650
right as what the remote
user would see.

425
00:19:11.650 --> 00:19:13.783
Bang, there it is.

426
00:19:13.783 --> 00:19:15.050
Now, let me show
you that again.

427
00:19:15.050 --> 00:19:18.800
I'm going to hang it
up and call again.

428
00:19:18.800 --> 00:19:20.900
And there it goes.

429
00:19:20.900 --> 00:19:23.590
So you'll see that we have
this functionality.

430
00:19:23.590 --> 00:19:25.550
And as long as it's sending
session descriptions back and

431
00:19:25.550 --> 00:19:33.030
forth, the rest of it pretty
much manages itself.

432
00:19:33.030 --> 00:19:35.795
Now, that's kind of cheating.

433
00:19:35.795 --> 00:19:38.710
You know, passing the data back
and forth in a single web

434
00:19:38.710 --> 00:19:40.960
page isn't really that
interesting from

435
00:19:40.960 --> 00:19:41.760
a video call scenario.

436
00:19:41.760 --> 00:19:44.280
We want to call someone on the
other side of the planet, not

437
00:19:44.280 --> 00:19:45.390
in the same web page.

438
00:19:45.390 --> 00:19:48.150
So how are we to do This Well,
in order to make this into a

439
00:19:48.150 --> 00:19:51.040
real video calling app, we need
to send those session

440
00:19:51.040 --> 00:19:53.280
descriptions across
the internet.

441
00:19:53.280 --> 00:19:54.930
Now, let's look at how
we can do that.

442
00:19:54.930 --> 00:19:58.180
443
00:19:58.180 --> 00:20:00.440
So it's really easy
to send a session

444
00:20:00.440 --> 00:20:02.060
description to the cloud.

445
00:20:02.060 --> 00:20:04.340
We just make it into a string,
and shoot it off

446
00:20:04.340 --> 00:20:06.936
over XML HTTP Request.

447
00:20:06.936 --> 00:20:09.160
But how can we receive them?

448
00:20:09.160 --> 00:20:12.290
Especially when this is a
real-time application.

449
00:20:12.290 --> 00:20:13.630
The caller doesn't want
to sit there forever

450
00:20:13.630 --> 00:20:15.060
waiting for the callee.

451
00:20:15.060 --> 00:20:17.790
We don't want to spend a
lot of time polling.

452
00:20:17.790 --> 00:20:18.960
What can we do?

453
00:20:18.960 --> 00:20:21.750
Well, App Engine gives us
a great tool for this.

454
00:20:21.750 --> 00:20:25.480
The Channel API provides an easy
to use, server to client

455
00:20:25.480 --> 00:20:28.600
signaling path for pushing
session descriptions from the

456
00:20:28.600 --> 00:20:30.450
server to the client.

457
00:20:30.450 --> 00:20:33.810
And App Engine takes care
of all the details.

458
00:20:33.810 --> 00:20:36.910
No matter how many users you
have, or where users are in

459
00:20:36.910 --> 00:20:39.290
the world, you can use
the same simple API

460
00:20:39.290 --> 00:20:40.540
to send down messages.

461
00:20:40.540 --> 00:20:44.080
462
00:20:44.080 --> 00:20:45.195
So here's how it works.

463
00:20:45.195 --> 00:20:48.260
The first thing you do is
establish a channel.

464
00:20:48.260 --> 00:20:50.530
You can do this when serving
the web page to eliminate a

465
00:20:50.530 --> 00:20:51.470
round trip.

466
00:20:51.470 --> 00:20:54.670
So in the server, you simply
create a Channel API token and

467
00:20:54.670 --> 00:20:57.720
send it down in the
web page response.

468
00:20:57.720 --> 00:21:00.620
The app then uses the JavaScript
API with that token

469
00:21:00.620 --> 00:21:03.420
to bring up the back channel,
and you're ready to rock.

470
00:21:03.420 --> 00:21:05.310
You can send messages
from your server

471
00:21:05.310 --> 00:21:08.010
down to your client.

472
00:21:08.010 --> 00:21:12.100
So here we have Client B that
wants to send a message and

473
00:21:12.100 --> 00:21:15.450
link the session description
to Client A. It does so

474
00:21:15.450 --> 00:21:16.020
typically [? in the ?]

475
00:21:16.020 --> 00:21:19.420
POST using XML HTTP
Request to get the

476
00:21:19.420 --> 00:21:21.720
message up to App Engine.

477
00:21:21.720 --> 00:21:23.765
And then it codes an identifier
to indicate who it

478
00:21:23.765 --> 00:21:24.550
should be sent to.

479
00:21:24.550 --> 00:21:26.970
Now, your app can use the
identifier to find the right

480
00:21:26.970 --> 00:21:29.410
channel instance on
the server side.

481
00:21:29.410 --> 00:21:31.330
And once it does that, you
simply call [? send ?]

482
00:21:31.330 --> 00:21:31.775
the channel.

483
00:21:31.775 --> 00:21:34.680
And it gets pushed down to
Client A who receives it in a

484
00:21:34.680 --> 00:21:37.250
JavaScript callback,
super easy.

485
00:21:37.250 --> 00:21:40.470
486
00:21:40.470 --> 00:21:44.500
So here's a snippet that shows
how this all works.

487
00:21:44.500 --> 00:21:48.140
At the top, the client brings up
the back channel using the

488
00:21:48.140 --> 00:21:49.770
App Engine API.

489
00:21:49.770 --> 00:21:53.520
Then, when it gets an incoming
call message in its callback,

490
00:21:53.520 --> 00:21:56.610
we can set the remote and local
descriptions, create an

491
00:21:56.610 --> 00:21:59.400
answer, and then shoot
that back using XHR.

492
00:21:59.400 --> 00:22:04.340
493
00:22:04.340 --> 00:22:07.790
So these are some great little
examples to sort of show the

494
00:22:07.790 --> 00:22:09.970
basics of the API.

495
00:22:09.970 --> 00:22:13.440
But we also want to have a
complete video calling

496
00:22:13.440 --> 00:22:16.410
application, a reference sample
application, where we

497
00:22:16.410 --> 00:22:20.140
can show developers the
best ways to bring

498
00:22:20.140 --> 00:22:21.490
this stuff all together.

499
00:22:21.490 --> 00:22:23.670
And we also want it to be the
kind of application that we

500
00:22:23.670 --> 00:22:26.840
can use in our daily work, not
just a sample app, something

501
00:22:26.840 --> 00:22:29.910
that will be a full-fledged
reference application.

502
00:22:29.910 --> 00:22:32.730
So we created AppRTC.

503
00:22:32.730 --> 00:22:35.830
It runs on App Engine using
things like Channel API and

504
00:22:35.830 --> 00:22:40.040
Data Store, and shows how to use
the WebRTC APIs, handling

505
00:22:40.040 --> 00:22:43.760
session descriptions, making
call setup fast, and showing

506
00:22:43.760 --> 00:22:45.130
NAT Traversal works.

507
00:22:45.130 --> 00:22:47.725
And every AppRTC call
is fully encrypted.

508
00:22:47.725 --> 00:22:51.040
509
00:22:51.040 --> 00:22:54.940
Now, I really want to
show this to you.

510
00:22:54.940 --> 00:22:57.640
So we've got some people
on the team.

511
00:22:57.640 --> 00:22:59.800
And they've been working
really hard on

512
00:22:59.800 --> 00:23:03.250
some updates to AppRTC.

513
00:23:03.250 --> 00:23:06.000
Now, I want to just sort of
check in with them real quick

514
00:23:06.000 --> 00:23:09.620
and make sure that they're not
getting too stressed out.

515
00:23:09.620 --> 00:23:11.150
So let's do that now.

516
00:23:11.150 --> 00:23:23.330
517
00:23:23.330 --> 00:23:24.580
OK.

518
00:23:24.580 --> 00:23:33.130
519
00:23:33.130 --> 00:23:34.980
Hey, Ray.

520
00:23:34.980 --> 00:23:37.290
You look pretty relaxed there.

521
00:23:37.290 --> 00:23:40.560
Did you get that work done
I wanted you to do?

522
00:23:40.560 --> 00:23:41.945
RAY: Yep, yep, sure did.

523
00:23:41.945 --> 00:23:44.830
WebRTC and App Engine
took care of the

524
00:23:44.830 --> 00:23:45.630
most complicated stuff.

525
00:23:45.630 --> 00:23:49.970
So I'm done, Justin.

526
00:23:49.970 --> 00:23:52.560
JUSTIN UBERTI: Well, I mean,
let me say, it looks great.

527
00:23:52.560 --> 00:23:57.630
I mean, not just the app,
but also your pool.

528
00:23:57.630 --> 00:24:00.770
You know, I wish I could
swing by later.

529
00:24:00.770 --> 00:24:03.510
Anyway, I've got to get
back to the session.

530
00:24:03.510 --> 00:24:04.600
It's going great.

531
00:24:04.600 --> 00:24:07.090
And I'll let you get
back to relaxing.

532
00:24:07.090 --> 00:24:08.190
Catch you later, Ray.

533
00:24:08.190 --> 00:24:09.440
RAY: See you, Justin.

534
00:24:09.440 --> 00:24:12.750
535
00:24:12.750 --> 00:24:18.030
[APPLAUSE]

536
00:24:18.030 --> 00:24:20.860
JUSTIN UBERTI: So that's the
kind of quality that you can

537
00:24:20.860 --> 00:24:22.660
accomplish with WebRTC.

538
00:24:22.660 --> 00:24:25.940
Real calls across the
internet, right

539
00:24:25.940 --> 00:24:27.190
from your web browser.

540
00:24:27.190 --> 00:24:30.760
541
00:24:30.760 --> 00:24:34.490
OK, so we just showed how
to send audio and

542
00:24:34.490 --> 00:24:36.040
video peer to peer.

543
00:24:36.040 --> 00:24:38.710
But what if we just
want to send data?

544
00:24:38.710 --> 00:24:40.120
Well, enter DataChannels.

545
00:24:40.120 --> 00:24:42.820
546
00:24:42.820 --> 00:24:45.720
So DataChannels designed to
allow apps to exchange

547
00:24:45.720 --> 00:24:49.100
arbitrary application data
with low latency, high

548
00:24:49.100 --> 00:24:52.710
throughput and message rate,
and optionally unreliable

549
00:24:52.710 --> 00:24:54.950
semantics so you keep
chugging, even

550
00:24:54.950 --> 00:24:56.620
if you lose a packet.

551
00:24:56.620 --> 00:24:58.530
Now, there are lots of great
real world use cases that

552
00:24:58.530 --> 00:25:02.030
DataChannels are great for.

553
00:25:02.030 --> 00:25:04.770
If you have a game, and you want
to send the positions of

554
00:25:04.770 --> 00:25:07.240
bullets in a game, you don't
want to send that data over

555
00:25:07.240 --> 00:25:11.110
HTTP, to the server and back
with all the HTTP overhead.

556
00:25:11.110 --> 00:25:13.560
You can instead send it in a
very tight, efficient message

557
00:25:13.560 --> 00:25:15.910
over the peer to peer channel.

558
00:25:15.910 --> 00:25:19.270
For remote desktop apps, you can
do things like track the

559
00:25:19.270 --> 00:25:22.880
position of the mouse with
great responsiveness.

560
00:25:22.880 --> 00:25:24.700
And there's a lot of other
great examples.

561
00:25:24.700 --> 00:25:27.230
But one I particularly like
is the ability to create a

562
00:25:27.230 --> 00:25:29.720
secure, decentralized network.

563
00:25:29.720 --> 00:25:32.870
And you can imagine, in a place
were there's censorship

564
00:25:32.870 --> 00:25:35.630
of the internet, you could
provide this mechanism as a

565
00:25:35.630 --> 00:25:38.680
way where people can communicate
over a private

566
00:25:38.680 --> 00:25:39.930
encrypted channel.

567
00:25:39.930 --> 00:25:42.730
568
00:25:42.730 --> 00:25:47.330
So here are the key features
of the DataChannel.

569
00:25:47.330 --> 00:25:49.130
To set it up, we're going
to leverage the

570
00:25:49.130 --> 00:25:50.450
PeerConnection setup.

571
00:25:50.450 --> 00:25:52.350
You do this sort of offer/answer
dance.

572
00:25:52.350 --> 00:25:53.830
We'll get the channel
bootstrapped.

573
00:25:53.830 --> 00:25:55.840
But then you can create
multiple channels.

574
00:25:55.840 --> 00:25:59.670
And those channels can all be
either reliable or unreliable.

575
00:25:59.670 --> 00:26:02.990
In a game, you might want your
state updates to be reliable,

576
00:26:02.990 --> 00:26:06.930
but projectiles can be sent over
an unreliable channel.

577
00:26:06.930 --> 00:26:09.560
Security and congestion control
is built right in.

578
00:26:09.560 --> 00:26:11.720
The app gets this for free.

579
00:26:11.720 --> 00:26:14.910
And we've tried to make
developers lives easier by

580
00:26:14.910 --> 00:26:18.040
keeping a similar API
to WebSockets.

581
00:26:18.040 --> 00:26:21.460
So that code written to use a
WebSocket should work just as

582
00:26:21.460 --> 00:26:23.180
well when coupled with
a DataChannel.

583
00:26:23.180 --> 00:26:26.830
584
00:26:26.830 --> 00:26:31.520
So here's a simple usage
of DataChannels.

585
00:26:31.520 --> 00:26:34.270
We want to have two clients
exchanging data.

586
00:26:34.270 --> 00:26:36.060
They exchange session
descriptions to get the peer

587
00:26:36.060 --> 00:26:37.760
to peer link set up.

588
00:26:37.760 --> 00:26:39.430
And then, we're ready to go.

589
00:26:39.430 --> 00:26:40.210
We send the data.

590
00:26:40.210 --> 00:26:42.960
And it gets sent over the
internet using standard IETF

591
00:26:42.960 --> 00:26:47.270
protocols, SCTP, Datagram
TLS over UDP.

592
00:26:47.270 --> 00:26:50.410
It goes through a [? NAS ?],
it just works.

593
00:26:50.410 --> 00:26:53.700
This is going to be a
revolutionary technology.

594
00:26:53.700 --> 00:26:57.870
And here's what this
looks like in code.

595
00:26:57.870 --> 00:26:59.320
It's really simple.

596
00:26:59.320 --> 00:27:02.640
You just call on each side,
create DataChannel, you

597
00:27:02.640 --> 00:27:04.270
specify an identifier.

598
00:27:04.270 --> 00:27:07.240
This identifier is what allows
both channels to get connected

599
00:27:07.240 --> 00:27:11.820
together in the middle because
they're indicated by name.

600
00:27:11.820 --> 00:27:13.260
And then, once it's connected,
you just

601
00:27:13.260 --> 00:27:15.140
call/send on one side.

602
00:27:15.140 --> 00:27:17.440
And our message gets called on
the other side, just like

603
00:27:17.440 --> 00:27:19.150
WebSockets.

604
00:27:19.150 --> 00:27:21.480
Now, I wish I could show
this to you now.

605
00:27:21.480 --> 00:27:23.350
But as I mentioned before, we're
still finishing up the

606
00:27:23.350 --> 00:27:24.680
details of the spec.

607
00:27:24.680 --> 00:27:27.550
But expect to see this in Chrome
in the near future.

608
00:27:27.550 --> 00:27:30.960
609
00:27:30.960 --> 00:27:33.660
So you can also imagine
some more complicated

610
00:27:33.660 --> 00:27:36.160
topologies for this.

611
00:27:36.160 --> 00:27:39.150
If we want to distribute data
between multiple peers, we can

612
00:27:39.150 --> 00:27:41.960
create a mesh, where each
endpoint is connected to each

613
00:27:41.960 --> 00:27:43.130
other endpoint.

614
00:27:43.130 --> 00:27:45.760
If you're creating like a
multiplayer game, this is a

615
00:27:45.760 --> 00:27:49.300
really easy way to get
multiplayer functionality

616
00:27:49.300 --> 00:27:53.130
without having to have a big
server infrastructure.

617
00:27:53.130 --> 00:27:55.630
But you can also imagine some
other interesting things.

618
00:27:55.630 --> 00:27:58.100
You create a graph.

619
00:27:58.100 --> 00:28:00.900
And say you want to be able to
send down a lot of data from

620
00:28:00.900 --> 00:28:02.020
your service.

621
00:28:02.020 --> 00:28:05.830
Instead of having to send the
data n times by unicasting it

622
00:28:05.830 --> 00:28:10.290
to all your clients, you can
instead construct a tree, and

623
00:28:10.290 --> 00:28:14.960
use peer to peer to push the
data very efficient to all

624
00:28:14.960 --> 00:28:16.030
your clients.

625
00:28:16.030 --> 00:28:18.370
Since you control the
application, you can have the

626
00:28:18.370 --> 00:28:21.570
application take the data and
it's distributed to other

627
00:28:21.570 --> 00:28:23.570
peers that it might
be connected to.

628
00:28:23.570 --> 00:28:26.090
There will be some amazing
things that will be created as

629
00:28:26.090 --> 00:28:27.340
a result of this technology.

630
00:28:27.340 --> 00:28:30.280
631
00:28:30.280 --> 00:28:34.850
OK, so we went over a lot
of stuff really quickly.

632
00:28:34.850 --> 00:28:36.100
Let's review.

633
00:28:36.100 --> 00:28:42.630
634
00:28:42.630 --> 00:28:45.590
We're building real-time
communication into the fabric

635
00:28:45.590 --> 00:28:50.090
of the web, providing amazing
new voice, video, and peer to

636
00:28:50.090 --> 00:28:54.920
peer functionality in the open
web platform, and enabling the

637
00:28:54.920 --> 00:28:59.490
communications industry
to move at web speed.

638
00:28:59.490 --> 00:29:01.260
This is a really
exciting time.

639
00:29:01.260 --> 00:29:02.720
We're really excited
on the team.

640
00:29:02.720 --> 00:29:04.320
We can't wait to see the
apps you guys are

641
00:29:04.320 --> 00:29:05.570
going to build on this.

642
00:29:05.570 --> 00:29:07.660
643
00:29:07.660 --> 00:29:12.400
So MediaStreams are shipping
in Chrome 21.

644
00:29:12.400 --> 00:29:15.640
PeerConnection is in Chrome
20 behind a flag.

645
00:29:15.640 --> 00:29:17.540
But we're working hard to
try to stabilize it in

646
00:29:17.540 --> 00:29:20.020
time for Chrome 22.

647
00:29:20.020 --> 00:29:21.950
The DataChannel works is going
to follow along after that.

648
00:29:21.950 --> 00:29:24.930
And we expect to do this
by the end of the year.

649
00:29:24.930 --> 00:29:27.320
Opera is also shipping
MediaStreams now.

650
00:29:27.320 --> 00:29:30.470
And our friends at Mozilla, they
tell us they think that

651
00:29:30.470 --> 00:29:34.310
they get all this stuff done
by the end of the year.

652
00:29:34.310 --> 00:29:37.700
Now, for people using Internet
Explorer, we've got WebRTC

653
00:29:37.700 --> 00:29:38.860
running in ChromeFrame.

654
00:29:38.860 --> 00:29:41.030
And it works great.

655
00:29:41.030 --> 00:29:42.980
As we start to stabilize things,
we're also going to

656
00:29:42.980 --> 00:29:44.915
see stuff landing in
mobile browsers.

657
00:29:44.915 --> 00:29:47.580
And as I mentioned before, we
have native versions of the

658
00:29:47.580 --> 00:29:50.190
entire stack available for the
app builders out there.

659
00:29:50.190 --> 00:29:55.180
660
00:29:55.180 --> 00:29:58.415
So here's our resident Icelandic
team member, Tommy

661
00:29:58.415 --> 00:29:59.400
Gunnarsson.

662
00:29:59.400 --> 00:30:03.580
He's showing off AppRTC running
here in IE, courtesy

663
00:30:03.580 --> 00:30:05.290
of ChromeFrame.

664
00:30:05.290 --> 00:30:08.360
So for more information about
ChromeFrame you check it out

665
00:30:08.360 --> 00:30:10.590
at google.com/chromeframe.

666
00:30:10.590 --> 00:30:13.630
Now, incidentally, we might
be thinking, well what is

667
00:30:13.630 --> 00:30:14.760
Microsoft doing about
supporting

668
00:30:14.760 --> 00:30:16.190
this natively in IE?

669
00:30:16.190 --> 00:30:18.490
Well, I don't know for sure.

670
00:30:18.490 --> 00:30:21.540
But I saw a couple of WebRTC
related job postings show up

671
00:30:21.540 --> 00:30:23.630
on the Microsoft career
site in the past week.

672
00:30:23.630 --> 00:30:25.120
So I'm pretty sure
they're investing

673
00:30:25.120 --> 00:30:26.370
pretty heavily in this.

674
00:30:26.370 --> 00:30:29.230
675
00:30:29.230 --> 00:30:34.380
OK, so I'd like to show you
one more demo, or two more

676
00:30:34.380 --> 00:30:38.460
demos here of examples of what
third-party developers are

677
00:30:38.460 --> 00:30:40.025
doing with this technology.

678
00:30:40.025 --> 00:30:43.390
So the first is an application
called Twinsee.

679
00:30:43.390 --> 00:30:46.670
The team there has created a
WebRTC app that works on both

680
00:30:46.670 --> 00:30:48.610
web and on mobile.

681
00:30:48.610 --> 00:30:50.193
And I'm going to call them
up now using the app

682
00:30:50.193 --> 00:30:51.443
that they've built.

683
00:30:51.443 --> 00:31:23.900
684
00:31:23.900 --> 00:31:24.580
MALE SPEAKER: Hello.

685
00:31:24.580 --> 00:31:25.750
JUSTIN UBERTI: Hey, guys.

686
00:31:25.750 --> 00:31:29.880
You're live at Google
I/O 2012.

687
00:31:29.880 --> 00:31:31.130
MALE SPEAKER: Wow.

688
00:31:31.130 --> 00:31:34.540
689
00:31:34.540 --> 00:31:36.080
JUSTIN UBERTI: So tell me
about this app that

690
00:31:36.080 --> 00:31:38.180
you've built. .

691
00:31:38.180 --> 00:31:40.210
MALE SPEAKER: OK so let me
introduce ourselves.

692
00:31:40.210 --> 00:31:41.920
So I'm [? Michel Gien, ?]

693
00:31:41.920 --> 00:31:44.480
and I'm here with
[? Christian Giacomo. ?]

694
00:31:44.480 --> 00:31:48.310
And we founded Twinlife at the
beginning of this year.

695
00:31:48.310 --> 00:31:52.680
And the purpose of Twinlife
is connecting generations.

696
00:31:52.680 --> 00:31:57.730
So our focus right now is to
take Android tablets and smart

697
00:31:57.730 --> 00:32:02.130
TVs and make them usable by
older persons, so they can

698
00:32:02.130 --> 00:32:04.520
interact with their family,
their children and

699
00:32:04.520 --> 00:32:06.360
grandchildren.

700
00:32:06.360 --> 00:32:12.980
So our first building block is
this Twinsee service, which is

701
00:32:12.980 --> 00:32:17.710
made of an Android application,
using at the

702
00:32:17.710 --> 00:32:21.390
native WebRTC APIs,
which Christian

703
00:32:21.390 --> 00:32:22.860
integrated into Android.

704
00:32:22.860 --> 00:32:30.060
And web service, twinsee.net, to
connect users, whether they

705
00:32:30.060 --> 00:32:33.500
come from a Chrome browser, or
whether they come from a

706
00:32:33.500 --> 00:32:37.660
Twinsee application
on Android tablet.

707
00:32:37.660 --> 00:32:38.600
JUSTIN UBERTI: That's great.

708
00:32:38.600 --> 00:32:40.345
It feels like you guys
are right here in San

709
00:32:40.345 --> 00:32:41.800
Francisco with us.

710
00:32:41.800 --> 00:32:44.260
So when can I expect this
to be available?

711
00:32:44.260 --> 00:32:47.700
712
00:32:47.700 --> 00:32:50.760
MALE SPEAKER: Twinsee will be
available for public testing

713
00:32:50.760 --> 00:32:55.650
on the Android Market in
the August time frame.

714
00:32:55.650 --> 00:32:58.610
So I'll show you here
in the mirror.

715
00:32:58.610 --> 00:33:00.800
You can see that this
tablet we're using

716
00:33:00.800 --> 00:33:03.520
right now is Asus Prime.

717
00:33:03.520 --> 00:33:05.900
And so if you have any
questions, contact us at

718
00:33:05.900 --> 00:33:08.450
twinsee.net.

719
00:33:08.450 --> 00:33:10.180
JUSTIN UBERTI: OK, that
looks great, guys.

720
00:33:10.180 --> 00:33:12.470
MALE SPEAKER: I hope you're have
at Google I/O. I wish we

721
00:33:12.470 --> 00:33:14.860
were there.

722
00:33:14.860 --> 00:33:15.940
JUSTIN UBERTI: Looks
great, guys.

723
00:33:15.940 --> 00:33:17.070
Well, that's really exciting.

724
00:33:17.070 --> 00:33:18.750
I'll let you guys
get some sleep.

725
00:33:18.750 --> 00:33:21.612
Talk to you later.

726
00:33:21.612 --> 00:33:34.680
[APPLAUSE]

727
00:33:34.680 --> 00:33:35.580
JUSTIN UBERTI: OK.

728
00:33:35.580 --> 00:33:40.030
So the last thing I want to
show, I know a ton of you are

729
00:33:40.030 --> 00:33:43.630
using GitHub to host and
share your code.

730
00:33:43.630 --> 00:33:46.240
So that's why I'm really excited
to introduce this next

731
00:33:46.240 --> 00:33:50.690
app called GitTogether, which
brings real-time communication

732
00:33:50.690 --> 00:33:52.680
to the GitHub community.

733
00:33:52.680 --> 00:33:55.240
Now, the guys who built this
have been involved with WebRTC

734
00:33:55.240 --> 00:33:56.820
since the very beginning.

735
00:33:56.820 --> 00:33:58.170
Let's call them up now.

736
00:33:58.170 --> 00:34:00.990
And they can tell you about
how this works.

737
00:34:00.990 --> 00:34:03.910
These guys have been
working on this.

738
00:34:03.910 --> 00:34:06.380
They're creating not just an
application, but also a

739
00:34:06.380 --> 00:34:09.199
JavaScript framework that
allows a lot of

740
00:34:09.199 --> 00:34:11.920
simplifications to be done
for people who are WebRTC

741
00:34:11.920 --> 00:34:13.170
developers.

742
00:34:13.170 --> 00:34:17.100
743
00:34:17.100 --> 00:34:21.420
So that's everything for
WebRTC see today.

744
00:34:21.420 --> 00:34:23.800
We covered a lot of
stuff quickly.

745
00:34:23.800 --> 00:34:31.000
[APPLAUSE]

746
00:34:31.000 --> 00:34:32.170
JUSTIN UBERTI: Thank you.

747
00:34:32.170 --> 00:34:35.790
Oh, also, the GitTogether
is made by vline.com.

748
00:34:35.790 --> 00:34:38.969
Also, check out the Chrome
Developer sandbox.

749
00:34:38.969 --> 00:34:40.120
We've got some stuff
down there.

750
00:34:40.120 --> 00:34:42.969
There's a Voxeo, who is an
emergency response app being

751
00:34:42.969 --> 00:34:44.489
built using WebRTC.

752
00:34:44.489 --> 00:34:47.940
And we've also got a really
cool WebRTC based game

753
00:34:47.940 --> 00:34:48.380
called Who Am I?

754
00:34:48.380 --> 00:34:49.840
MIT

755
00:34:49.840 --> 00:34:50.790
Thank you all for coming.

756
00:34:50.790 --> 00:34:52.670
I'll be happy to answer any
questions that you might have.

757
00:34:52.670 --> 00:34:57.500
758
00:34:57.500 --> 00:35:01.120
Step up to the microphone, so
the video can record it.

759
00:35:01.120 --> 00:35:03.120
AUDIENCE: In a lot of your
slides, you had a dotted line

760
00:35:03.120 --> 00:35:06.340
between the two browsers
on the bottom.

761
00:35:06.340 --> 00:35:10.430
Is that an actual connection
somehow.

762
00:35:10.430 --> 00:35:13.210
I mean, if both of them are
behind a net firewall, how do

763
00:35:13.210 --> 00:35:16.250
you get the peer to peer
communication to go?

764
00:35:16.250 --> 00:35:19.110
Is there actually a server
there that's--

765
00:35:19.110 --> 00:35:22.480
JUSTIN UBERTI: So there's
a technology called ICE.

766
00:35:22.480 --> 00:35:25.240
And ICE is Interactive
Connectivity Establishment.

767
00:35:25.240 --> 00:35:28.120
And what it does is it basically
finds all the IP

768
00:35:28.120 --> 00:35:31.080
addresses that it can come up,
your local address, the

769
00:35:31.080 --> 00:35:34.425
address of your NAT or firewall,
or an address that

770
00:35:34.425 --> 00:35:36.310
could be hosted in
a data center.

771
00:35:36.310 --> 00:35:40.410
And it does interactive checks
to figure out what is the best

772
00:35:40.410 --> 00:35:44.340
path between the two peers
to establish data.

773
00:35:44.340 --> 00:35:48.180
In our experience with Google
Talk, we find that in about

774
00:35:48.180 --> 00:35:51.290
90% of the cases, we can
actually establish a peer to

775
00:35:51.290 --> 00:35:53.900
peer link, even if both
sides are behind NAT.

776
00:35:53.900 --> 00:35:58.120
The rules of NAT are such that
if we know the address of the

777
00:35:58.120 --> 00:36:00.380
other person's NAT, we can still
get that peer to peer

778
00:36:00.380 --> 00:36:03.025
link going between two
peers using UDP.

779
00:36:03.025 --> 00:36:05.590
780
00:36:05.590 --> 00:36:06.840
AUDIENCE: Thanks.

781
00:36:06.840 --> 00:36:09.560
782
00:36:09.560 --> 00:36:10.020
AUDIENCE: Hi.

783
00:36:10.020 --> 00:36:11.420
Can you talk about
codec support?

784
00:36:11.420 --> 00:36:13.820
Because I know you guys have
acquired GIPS, and with that

785
00:36:13.820 --> 00:36:14.830
came iLBC and iSAC.

786
00:36:14.830 --> 00:36:17.460
But are you going to do
something like Opus support,

787
00:36:17.460 --> 00:36:19.020
or something like that?

788
00:36:19.020 --> 00:36:22.540
JUSTIN UBERTI: So this is all
a big topic for the IETF.

789
00:36:22.540 --> 00:36:25.770
But what we are planning
support, assuming we can work

790
00:36:25.770 --> 00:36:30.790
out all the licensing details,
VP8 will be our open, royalty

791
00:36:30.790 --> 00:36:32.330
free video codec.

792
00:36:32.330 --> 00:36:35.080
And then, as far as all your
codecs are concerned, we'll

793
00:36:35.080 --> 00:36:38.900
support G.711 for legacy
interoperability.

794
00:36:38.900 --> 00:36:40.840
We'll support iSAC.

795
00:36:40.840 --> 00:36:45.000
And we hope to support Opus,
assuming that Microsoft can

796
00:36:45.000 --> 00:36:47.210
help us out in the
licensing front.

797
00:36:47.210 --> 00:36:50.450
AUDIENCE: And can you talk about
iLBC voice quality on an

798
00:36:50.450 --> 00:36:51.930
Android platform?

799
00:36:51.930 --> 00:36:54.090
Have you guys had good
luck with it?

800
00:36:54.090 --> 00:36:56.150
I mean, are you seeing good
performance relative to a

801
00:36:56.150 --> 00:36:57.860
general cell phone call?

802
00:36:57.860 --> 00:36:59.700
JUSTIN UBERTI: We have the
person who wrote iLBC here

803
00:36:59.700 --> 00:37:00.975
sitting in the audience.

804
00:37:00.975 --> 00:37:02.250
AUDIENCE: That guy,
right there?

805
00:37:02.250 --> 00:37:02.330
JUSTIN UBERTI: Yeah, that guy.

806
00:37:02.330 --> 00:37:03.700
AUDIENCE: OK, I'll
talk to him.

807
00:37:03.700 --> 00:37:06.680
Thank you.

808
00:37:06.680 --> 00:37:08.480
AUDIENCE: Hi.

809
00:37:08.480 --> 00:37:12.540
Simple question, I saw on the
first demo that you showed how

810
00:37:12.540 --> 00:37:15.110
to use video.

811
00:37:15.110 --> 00:37:18.440
Well, you didn't show about
audio, but I guess audio is

812
00:37:18.440 --> 00:37:20.900
also included.

813
00:37:20.900 --> 00:37:23.490
Only on one to one conversation,
is there a way

814
00:37:23.490 --> 00:37:25.110
to make it broadcast?

815
00:37:25.110 --> 00:37:28.920
For example, this show can be
seen on the web page by

816
00:37:28.920 --> 00:37:31.350
multiple users?

817
00:37:31.350 --> 00:37:35.230
JUSTIN UBERTI: Yeah, so a
PeerConnection creates a

818
00:37:35.230 --> 00:37:37.800
connection between yourself
and a remote peer.

819
00:37:37.800 --> 00:37:41.090
And if you want to have a
multi-way conversation,

820
00:37:41.090 --> 00:37:43.270
there's a couple ways
you can do this.

821
00:37:43.270 --> 00:37:45.690
The first thing is you could
have multiple PeerConnections

822
00:37:45.690 --> 00:37:49.140
and establish a full mesh,
like I show here.

823
00:37:49.140 --> 00:37:52.020
If you have four participants,
you establish three

824
00:37:52.020 --> 00:37:56.080
PeerConnections, one of each
remote participant.

825
00:37:56.080 --> 00:37:57.810
This doesn't scale
all the way up.

826
00:37:57.810 --> 00:37:59.310
So one of the other things that
you can do as you get to

827
00:37:59.310 --> 00:38:02.210
be in a large conference, is
actually have a central server

828
00:38:02.210 --> 00:38:04.970
and create like a star topology,
where the other

829
00:38:04.970 --> 00:38:09.180
side, instead of being a
browser, is actually a server.

830
00:38:09.180 --> 00:38:12.130
And then using the WebRTC tools,
you can create a server

831
00:38:12.130 --> 00:38:15.110
that could do multi-party.

832
00:38:15.110 --> 00:38:19.970
AUDIENCE: OK, I think maybe
I asked you wrongly.

833
00:38:19.970 --> 00:38:23.170
I'm only interested one party
who is transmitting.

834
00:38:23.170 --> 00:38:26.950
The other ones don't need
to talk, only to listen.

835
00:38:26.950 --> 00:38:30.150
So it's like UDP
in that sense.

836
00:38:30.150 --> 00:38:30.870
JUSTIN UBERTI: Right, right.

837
00:38:30.870 --> 00:38:31.520
Sorry.

838
00:38:31.520 --> 00:38:34.550
In that case, the other side
wouldn't even have to call

839
00:38:34.550 --> 00:38:35.490
getUserMedia.

840
00:38:35.490 --> 00:38:39.050
So the side who calls
getUserMedia can specify

841
00:38:39.050 --> 00:38:42.710
whether it wants video
and/or audio.

842
00:38:42.710 --> 00:38:44.080
But you won't need to call
getUserMedia at all.

843
00:38:44.080 --> 00:38:47.480
So if you want to receive only,
you just would not call

844
00:38:47.480 --> 00:38:51.100
getUserMedia, and you wouldn't
call AddStream on that side.

845
00:38:51.100 --> 00:38:53.718
And then you would just play.

846
00:38:53.718 --> 00:38:54.570
AUDIENCE: I see.

847
00:38:54.570 --> 00:38:55.400
OK, thank you.

848
00:38:55.400 --> 00:38:56.650
JUSTIN UBERTI: Sure.

849
00:38:56.650 --> 00:38:58.480
850
00:38:58.480 --> 00:39:00.650
AUDIENCE: So if you want to
stream to the server and save

851
00:39:00.650 --> 00:39:04.762
the recorded video, are there
components or libraries that

852
00:39:04.762 --> 00:39:06.310
are available?

853
00:39:06.310 --> 00:39:10.060
JUSTIN UBERTI: So I mean, if
you're familiar with media

854
00:39:10.060 --> 00:39:13.110
processing, you can build these
kind of servers using

855
00:39:13.110 --> 00:39:15.400
the WebRTC components.

856
00:39:15.400 --> 00:39:20.090
There is something in the WebRTC
spec for an API called

857
00:39:20.090 --> 00:39:21.570
Media Recorder.

858
00:39:21.570 --> 00:39:23.400
It's missing a lot of
detail right now.

859
00:39:23.400 --> 00:39:24.730
So it's not being implemented.

860
00:39:24.730 --> 00:39:27.590
But we expect, at some point in
time, there will be an easy

861
00:39:27.590 --> 00:39:28.690
way to do media recording.

862
00:39:28.690 --> 00:39:31.570
For right now, the easiest way
is to build a server, make a

863
00:39:31.570 --> 00:39:32.620
PeerConnection to it.

864
00:39:32.620 --> 00:39:35.010
And then you can then save
it out to a file there.

865
00:39:35.010 --> 00:39:37.180
AUDIENCE: So the component would
be the C++ libraries

866
00:39:37.180 --> 00:39:38.620
that you would bind
into your server?

867
00:39:38.620 --> 00:39:39.870
JUSTIN UBERTI: Yes.

868
00:39:39.870 --> 00:39:43.190
869
00:39:43.190 --> 00:39:46.130
AUDIENCE: I had a question about
whether Screen Sharing

870
00:39:46.130 --> 00:39:50.070
is still in consideration
as a video source?

871
00:39:50.070 --> 00:39:51.320
JUSTIN UBERTI: It
absolutely is.

872
00:39:51.320 --> 00:39:54.590
873
00:39:54.590 --> 00:39:57.560
The question is whether Screen
Sharing will be supported as a

874
00:39:57.560 --> 00:39:58.690
video source.

875
00:39:58.690 --> 00:40:01.340
And it's sort of one of these
things where we definitely

876
00:40:01.340 --> 00:40:03.760
want to support it, we have
the technology to do it.

877
00:40:03.760 --> 00:40:06.670
But in terms of making sure we
get something out there, v1

878
00:40:06.670 --> 00:40:08.586
will be just video only.

879
00:40:08.586 --> 00:40:11.310
AUDIENCE: [INAUDIBLE].

880
00:40:11.310 --> 00:40:13.060
JUSTIN UBERTI: You could also
do it with camera drivers.

881
00:40:13.060 --> 00:40:14.730
Although, the issue with camera
drivers is that their

882
00:40:14.730 --> 00:40:17.825
resolution will be artificially
limited.

883
00:40:17.825 --> 00:40:19.460
AUDIENCE: Do you have
plans to integrate

884
00:40:19.460 --> 00:40:22.190
with Server-Sent Events?

885
00:40:22.190 --> 00:40:23.440
JUSTIN UBERTI: Server-Sent
Events.

886
00:40:23.440 --> 00:40:25.348
887
00:40:25.348 --> 00:40:29.620
Are you specific about what
you have in mind there?

888
00:40:29.620 --> 00:40:33.890
AUDIENCE: Well, to get the
session exchange pushed back

889
00:40:33.890 --> 00:40:35.130
the answer.

890
00:40:35.130 --> 00:40:36.640
JUSTIN UBERTI: I think I'll have
to get back you on that.

891
00:40:36.640 --> 00:40:37.860
I'm not sure I'm familiar
enough with

892
00:40:37.860 --> 00:40:39.800
the Server-Sent Events.

893
00:40:39.800 --> 00:40:42.850
AUDIENCE: They're part of the
[INAUDIBLE] working group

894
00:40:42.850 --> 00:40:43.915
specifications.

895
00:40:43.915 --> 00:40:45.165
JUSTIN UBERTI: We can
talk afterwards.

896
00:40:45.165 --> 00:40:47.560
897
00:40:47.560 --> 00:40:48.170
AUDIENCE: Hi.

898
00:40:48.170 --> 00:40:51.970
There will be any SIP
integration in the future?

899
00:40:51.970 --> 00:40:55.340
Any way to make a phone
call using these API?

900
00:40:55.340 --> 00:40:56.860
JUSTIN UBERTI: Yeah, so we
actually have some demos--

901
00:40:56.860 --> 00:40:57.860
I didn't show them today--

902
00:40:57.860 --> 00:41:00.810
where you can actually make
a phone call to the PSTN.

903
00:41:00.810 --> 00:41:04.860
And there's a couple
ways you can do it.

904
00:41:04.860 --> 00:41:07.100
You can send JSON to your web
server, and have the web

905
00:41:07.100 --> 00:41:09.540
server then gateway
that to SIP.

906
00:41:09.540 --> 00:41:12.720
Or there's a product
called sipML5--

907
00:41:12.720 --> 00:41:14.010
sipml5.org--

908
00:41:14.010 --> 00:41:15.910
where they're actually
implementing a SIP stack

909
00:41:15.910 --> 00:41:17.760
within the browser itself.

910
00:41:17.760 --> 00:41:21.460
So it converts the session
descriptions to SIP messages

911
00:41:21.460 --> 00:41:23.140
right inside the web
application.

912
00:41:23.140 --> 00:41:27.750
So you can definitely do SIP
calls using this technology.

913
00:41:27.750 --> 00:41:28.030
AUDIENCE: Great.

914
00:41:28.030 --> 00:41:32.250
And there will be an SDK for
Android, or something?

915
00:41:32.250 --> 00:41:34.770
JUSTIN UBERTI: Yeah, we
have existing SDK.

916
00:41:34.770 --> 00:41:39.460
If you go to WebRTC.org, you
can download the code for

917
00:41:39.460 --> 00:41:40.685
running this on Android.

918
00:41:40.685 --> 00:41:41.920
AUDIENCE: Thank you very much.

919
00:41:41.920 --> 00:41:43.170
JUSTIN UBERTI: Sure.

920
00:41:43.170 --> 00:41:46.040
921
00:41:46.040 --> 00:41:46.380
OK.

922
00:41:46.380 --> 00:41:47.920
Thank you all for coming.

923
00:41:47.920 --> 00:41:53.513
[APPLAUSE]

WEBVTT

1
00:00:00.000 --> 00:00:08.850

2
00:00:08.850 --> 00:00:10.360
RAY CROMWELL: Good afternoon.

3
00:00:10.360 --> 00:00:12.990
How you guys doing?

4
00:00:12.990 --> 00:00:15.070
I'm looking around the room and
I'm seeing a lot of people

5
00:00:15.070 --> 00:00:18.490
who I think are either
passionate about GWT or Dart,

6
00:00:18.490 --> 00:00:21.480
because you could have been
downstairs getting your Nexus

7
00:00:21.480 --> 00:00:24.260
7, your Galaxy Nexus, and
your Nexus Q, but

8
00:00:24.260 --> 00:00:25.760
you're here in my session.

9
00:00:25.760 --> 00:00:28.570
So thanks for coming.

10
00:00:28.570 --> 00:00:31.110
This session is titled
"Migrating Code from GWT to

11
00:00:31.110 --> 00:00:34.700
Dart." And if you
might notice--

12
00:00:34.700 --> 00:00:36.010
I'm tech lead for GWT.

13
00:00:36.010 --> 00:00:37.710
My name is Ray Cromwell.

14
00:00:37.710 --> 00:00:39.670
So the first thing you might be
asking-- and I get this a

15
00:00:39.670 --> 00:00:42.240
lot-- before the session even
starts, is why Dart?

16
00:00:42.240 --> 00:00:44.360
Why am I even giving a Dart
session in the first place?

17
00:00:44.360 --> 00:00:46.290
I'm tech lead on GWT.

18
00:00:46.290 --> 00:00:48.720
Well first of all, actually,
I think Dart's

19
00:00:48.720 --> 00:00:49.770
a really cool language.

20
00:00:49.770 --> 00:00:53.030
And I'm a compiler geek so I
tend to like languages and

21
00:00:53.030 --> 00:00:54.240
language-oriented stuff.

22
00:00:54.240 --> 00:00:58.100
So I volunteered to give this
session, because to me,

23
00:00:58.100 --> 00:01:00.710
learning programming languages
is not about discussing which

24
00:01:00.710 --> 00:01:05.239
language is best, whether Dart
is better than JavaScript or

25
00:01:05.239 --> 00:01:06.850
better than Java and so on.

26
00:01:06.850 --> 00:01:10.580
Because every language that you
encounter has things that

27
00:01:10.580 --> 00:01:12.680
are good about them and
things that people

28
00:01:12.680 --> 00:01:14.190
will complain about.

29
00:01:14.190 --> 00:01:17.230
And so for each type of
application, there's always

30
00:01:17.230 --> 00:01:21.760
sort of a sweet spot, and Dart
is no exception to that.

31
00:01:21.760 --> 00:01:24.660
But it is a very cool language,
and it takes some of

32
00:01:24.660 --> 00:01:28.740
the best features from
JavaScript and Java and

33
00:01:28.740 --> 00:01:29.680
combines them into one.

34
00:01:29.680 --> 00:01:31.480
And I'll get to that later.

35
00:01:31.480 --> 00:01:33.050
I also think learning
new languages is

36
00:01:33.050 --> 00:01:33.750
good for your brain.

37
00:01:33.750 --> 00:01:36.580
Just like bilingualism and
spoken languages, if you learn

38
00:01:36.580 --> 00:01:37.990
multiple programming languages,
it's going to be

39
00:01:37.990 --> 00:01:39.070
good for your career.

40
00:01:39.070 --> 00:01:40.930
It's going to make you think
in different ways.

41
00:01:40.930 --> 00:01:43.080
And hopefully exposure to Dart
will make you think about

42
00:01:43.080 --> 00:01:45.860
designing web applications in
different ways, perhaps ways

43
00:01:45.860 --> 00:01:52.140
that are more structured, if
you're not a Java programmer.

44
00:01:52.140 --> 00:01:54.650
And finally, I don't really
think that you can evaluate a

45
00:01:54.650 --> 00:01:57.200
language unless you've
developed using it.

46
00:01:57.200 --> 00:02:00.740
A lot of times, you're online
and you'll see people having

47
00:02:00.740 --> 00:02:02.080
wars over programming
languages.

48
00:02:02.080 --> 00:02:04.310
My language is better
than yours.

49
00:02:04.310 --> 00:02:06.780
They'll microcriticize various
parts of the spec.

50
00:02:06.780 --> 00:02:10.360
But really, you'll never know
what's cool about a language

51
00:02:10.360 --> 00:02:13.250
or what sucks about it unless
you actually develop with it.

52
00:02:13.250 --> 00:02:17.950
And so this presentation is
designed to help you utilize

53
00:02:17.950 --> 00:02:22.390
what you already know, which is
hopefully Java and GWT, and

54
00:02:22.390 --> 00:02:26.670
get you up to speed on Dart as
fast as possible so you can

55
00:02:26.670 --> 00:02:28.730
try that experiment
out for yourself.

56
00:02:28.730 --> 00:02:31.100
And then you can make the
decision whether or not you

57
00:02:31.100 --> 00:02:33.760
think Dart is a good language
for you or GWT is a good

58
00:02:33.760 --> 00:02:35.615
language for you, or hand-coded
JavaScript's a good

59
00:02:35.615 --> 00:02:37.210
language for you.

60
00:02:37.210 --> 00:02:40.860
And so I want to try to map
concepts that you already know

61
00:02:40.860 --> 00:02:44.690
from Java and GWT into Dart so
that you'll understand things

62
00:02:44.690 --> 00:02:45.920
faster and quicker.

63
00:02:45.920 --> 00:02:49.170
I want to try to teach you some
Dart idioms and to get

64
00:02:49.170 --> 00:02:52.590
your feet wet in terms of
porting some existing GWT

65
00:02:52.590 --> 00:02:56.250
application constructs
into Dart.

66
00:02:56.250 --> 00:02:58.320
So what is Dart?

67
00:02:58.320 --> 00:03:01.260
We say it's a structured
language for web applications.

68
00:03:01.260 --> 00:03:04.510
But it's more than that, because
on the surface, it has

69
00:03:04.510 --> 00:03:06.380
the appearance of
being Java-like.

70
00:03:06.380 --> 00:03:09.860
But underneath it's a
dynamically typed language.

71
00:03:09.860 --> 00:03:10.820
So what does that mean?

72
00:03:10.820 --> 00:03:12.900
If you think of JavaScript--

73
00:03:12.900 --> 00:03:16.470
it means that you can refer to
things on an object, fields or

74
00:03:16.470 --> 00:03:18.720
invoke methods and so on,
regardless of what the

75
00:03:18.720 --> 00:03:19.900
declared type is.

76
00:03:19.900 --> 00:03:23.200
You might say it's a customer
object, but at run time you

77
00:03:23.200 --> 00:03:25.960
can still refer to that object
as if it was a totally

78
00:03:25.960 --> 00:03:26.490
different type.

79
00:03:26.490 --> 00:03:29.800
The type doesn't restrict
you from shooting

80
00:03:29.800 --> 00:03:31.860
yourself in the foot.

81
00:03:31.860 --> 00:03:35.620
But Dart goes a little bit
further, because although you

82
00:03:35.620 --> 00:03:39.860
can do that, you can also run,
optionally, your application

83
00:03:39.860 --> 00:03:40.680
in checked mode.

84
00:03:40.680 --> 00:03:43.260
And in checked mode, the
types do have meaning.

85
00:03:43.260 --> 00:03:45.250
And you will get runtime errors
if you, for example,

86
00:03:45.250 --> 00:03:48.580
try to access something on an
object or a class that wasn't

87
00:03:48.580 --> 00:03:50.030
there in that type.

88
00:03:50.030 --> 00:03:52.330
But in general, when you're
programing in Dart, unlike in

89
00:03:52.330 --> 00:03:55.740
Java, you should treat the
types like annotation or

90
00:03:55.740 --> 00:03:59.190
documentation for both people
reading the code and for

91
00:03:59.190 --> 00:04:01.890
machines that are processing
it, like tools.

92
00:04:01.890 --> 00:04:03.450
Dart's also a class-based

93
00:04:03.450 --> 00:04:04.790
object-oriented programming language.

94
00:04:04.790 --> 00:04:06.520
It's not a prototype-based
language.

95
00:04:06.520 --> 00:04:07.820
It's not functional language.

96
00:04:07.820 --> 00:04:11.320
It's class-based
object-oriented.

97
00:04:11.320 --> 00:04:14.860
But because it has a type
system and it's

98
00:04:14.860 --> 00:04:16.850
OO, it's very toolable.

99
00:04:16.850 --> 00:04:18.550
So one of the things you'll be
able to do is you'll be able

100
00:04:18.550 --> 00:04:21.190
to go out and get things like
the Dart Editor, which is

101
00:04:21.190 --> 00:04:24.670
based on the Eclipse framework,
or the latest

102
00:04:24.670 --> 00:04:27.730
IntelliJ plugin, and you'll
actually be able to get all of

103
00:04:27.730 --> 00:04:30.620
this nice stuff that you
like in Java in Dart.

104
00:04:30.620 --> 00:04:34.140
Command method completion, field
completion, refactoring,

105
00:04:34.140 --> 00:04:35.070
go to declaration--

106
00:04:35.070 --> 00:04:35.810
all those things are there.

107
00:04:35.810 --> 00:04:38.950
Things that are actually
typically hard to do in

108
00:04:38.950 --> 00:04:43.010
dynamic languages with
IDEs, you can do

109
00:04:43.010 --> 00:04:44.980
quite easily with Dart.

110
00:04:44.980 --> 00:04:47.560
And Dart has the option of
running either natively in the

111
00:04:47.560 --> 00:04:51.520
Dart VM or in any other browser
by using a Dart-to-JS

112
00:04:51.520 --> 00:04:55.590
compiler, which compiles
the JS just like GWT.

113
00:04:55.590 --> 00:04:57.520
So let's dive right in.

114
00:04:57.520 --> 00:04:59.740
Rather than teaching the
language spec, if you haven't

115
00:04:59.740 --> 00:05:02.170
seen any of the other sessions,
I'm just going to

116
00:05:02.170 --> 00:05:06.930
start off with Java and try to
transmorgify it into Dart.

117
00:05:06.930 --> 00:05:08.690
Let's see how that works out.

118
00:05:08.690 --> 00:05:11.350
So the first thing that's
different between Dart and

119
00:05:11.350 --> 00:05:15.250
Java is basically, there's no
access modifier keywords.

120
00:05:15.250 --> 00:05:18.580
So you can basically just remove
the private and public

121
00:05:18.580 --> 00:05:21.640
declarations and the code
will continue to work.

122
00:05:21.640 --> 00:05:23.550
The next thing is that
types are optional.

123
00:05:23.550 --> 00:05:27.490
So it's not-- we don't always
recommend removing types.

124
00:05:27.490 --> 00:05:30.180
I think well-written library
code should have the types

125
00:05:30.180 --> 00:05:31.860
there so when other people are
reading your code, they'll

126
00:05:31.860 --> 00:05:33.470
actually kind of know
the intent.

127
00:05:33.470 --> 00:05:35.640
But just to show you, we
can remove that string

128
00:05:35.640 --> 00:05:39.220
declaration, that Boolean field
declaration, and we end

129
00:05:39.220 --> 00:05:41.830
up with that.

130
00:05:41.830 --> 00:05:43.700
The other thing is that--

131
00:05:43.700 --> 00:05:44.880
and I actually like
this feature.

132
00:05:44.880 --> 00:05:47.400
This is one of my favorite
features of Dart.

133
00:05:47.400 --> 00:05:50.710
In Java, you write the same code
over and over and over

134
00:05:50.710 --> 00:05:52.540
again for initializing
constructors.

135
00:05:52.540 --> 00:05:53.800
You have a constructor.

136
00:05:53.800 --> 00:05:55.220
It takes three parameters.

137
00:05:55.220 --> 00:05:56.610
What is the first thing you
do in the body of the

138
00:05:56.610 --> 00:05:57.260
constructor?

139
00:05:57.260 --> 00:06:00.940
This dot x equals y, this dot a
equals b, and so on, right?

140
00:06:00.940 --> 00:06:02.470
The same thing--

141
00:06:02.470 --> 00:06:05.640
and a lot of languages have
this problem too, but Dart

142
00:06:05.640 --> 00:06:08.460
actually has a little bit of
syntactic sugar for this.

143
00:06:08.460 --> 00:06:12.490
So if you want to auto-assign
a parameter to a field, then

144
00:06:12.490 --> 00:06:15.660
you refer to the field in the
constructor parameter

145
00:06:15.660 --> 00:06:18.160
declaration with a
this qualifier.

146
00:06:18.160 --> 00:06:22.310
So here I'm saying this.name
and that's it, in the

147
00:06:22.310 --> 00:06:23.630
constructor parameter list.

148
00:06:23.630 --> 00:06:28.310
And basically the Dart VM or the
Dart compiler knows that

149
00:06:28.310 --> 00:06:32.470
that refers to the field name,
which has a string type, and

150
00:06:32.470 --> 00:06:35.820
it's going to autogenerate
this.name equals name for you.

151
00:06:35.820 --> 00:06:40.060
152
00:06:40.060 --> 00:06:46.290
In Java, if you have a block of
code in an if statement or

153
00:06:46.290 --> 00:06:48.690
a for statement that only has
one line, you now that you can

154
00:06:48.690 --> 00:06:51.360
eliminate the curly braces
and just put a semicolon.

155
00:06:51.360 --> 00:06:54.810
In Dart, even for method
declarations, you can

156
00:06:54.810 --> 00:06:56.630
eliminate the curly braces.

157
00:06:56.630 --> 00:07:01.360
So here is a method that only
has one line of code in it.

158
00:07:01.360 --> 00:07:04.540
And so the cat constructor just
equals greater-than and

159
00:07:04.540 --> 00:07:06.050
then an expression to
the right of it.

160
00:07:06.050 --> 00:07:09.410
161
00:07:09.410 --> 00:07:11.030
So Dart doesn't have packages.

162
00:07:11.030 --> 00:07:14.450
It has something that's not
exactly like a package.

163
00:07:14.450 --> 00:07:15.430
It's called a library.

164
00:07:15.430 --> 00:07:18.080
And so here we just delete
package com.foo and we just

165
00:07:18.080 --> 00:07:21.110
use #library('foo'), which is
basically saying the code

166
00:07:21.110 --> 00:07:22.370
below it is part of
that library.

167
00:07:22.370 --> 00:07:25.560
168
00:07:25.560 --> 00:07:29.420
Now I said that Dart doesn't
have access qualifiers, like

169
00:07:29.420 --> 00:07:30.560
public and private.

170
00:07:30.560 --> 00:07:34.860
But you can hide things
within a library.

171
00:07:34.860 --> 00:07:37.350
So you can make it so that no
one outside of the library foo

172
00:07:37.350 --> 00:07:38.600
can see a particular variable.

173
00:07:38.600 --> 00:07:42.400
And the way you do that is by
putting a leading underscore

174
00:07:42.400 --> 00:07:43.260
on the field name.

175
00:07:43.260 --> 00:07:48.390
So in this example, _name and
_iCanHazMeme are only visible

176
00:07:48.390 --> 00:07:53.740
to classes within
the library foo.

177
00:07:53.740 --> 00:07:55.750
So Dart doesn't have an import
statement like Java, but it

178
00:07:55.750 --> 00:07:57.050
does have #import.

179
00:07:57.050 --> 00:08:00.730
And with #import, basically,
you import libraries.

180
00:08:00.730 --> 00:08:02.940
And this is the syntax for it.

181
00:08:02.940 --> 00:08:04.030
So we're getting there.

182
00:08:04.030 --> 00:08:06.250
We're almost fully converted.

183
00:08:06.250 --> 00:08:10.040
So Dart has final fields,
but they're initialized

184
00:08:10.040 --> 00:08:11.210
differently than Java.

185
00:08:11.210 --> 00:08:13.960
They're using the C++-style
initializer list.

186
00:08:13.960 --> 00:08:16.520
So if you have some final
fields, they have to be

187
00:08:16.520 --> 00:08:18.560
assigned during construction.

188
00:08:18.560 --> 00:08:20.440
And so the way you do it is
you put a colon after the

189
00:08:20.440 --> 00:08:23.250
constructor and then a
comma-separated list of

190
00:08:23.250 --> 00:08:24.500
assignments.

191
00:08:24.500 --> 00:08:27.730
192
00:08:27.730 --> 00:08:29.230
Dart also has static fields.

193
00:08:29.230 --> 00:08:31.680
So you can see in this example,
UBER_CAT, we want it

194
00:08:31.680 --> 00:08:35.380
be a static, final, immutable
Cat, right,

195
00:08:35.380 --> 00:08:36.630
that everyone sees.

196
00:08:36.630 --> 00:08:39.640
197
00:08:39.640 --> 00:08:43.210
And you can initialize them to
be immutable or singleton--

198
00:08:43.210 --> 00:08:45.100
think of string interning
in Java--

199
00:08:45.100 --> 00:08:50.660
by using something Dart has
called a const constructor.

200
00:08:50.660 --> 00:08:53.310
So if you put the const keyword
in front of the Cat

201
00:08:53.310 --> 00:08:56.220
constructor, essentially what
this is saying is that there's

202
00:08:56.220 --> 00:09:02.510
only ever one instance of that
Cat with that parameter name.

203
00:09:02.510 --> 00:09:09.070
So if you construct a Cat and
the name is Mr. Tibbles, then

204
00:09:09.070 --> 00:09:10.840
there's only one instance
of Mr. Tibbles.

205
00:09:10.840 --> 00:09:13.340
And the next time you try to
allocate one, you'll still get

206
00:09:13.340 --> 00:09:14.300
the same instance.

207
00:09:14.300 --> 00:09:16.120
That means you can
use a reference

208
00:09:16.120 --> 00:09:19.690
comparison, for example.

209
00:09:19.690 --> 00:09:22.090
Another biggie, and this'll
probably be the biggest shock

210
00:09:22.090 --> 00:09:24.930
if you're coming from Java or
GWT, is that there's no

211
00:09:24.930 --> 00:09:27.340
function overloading in Dart.

212
00:09:27.340 --> 00:09:30.220
And so here's a typical
example of Java--

213
00:09:30.220 --> 00:09:34.320
the Money class, where it's
storing things as a

214
00:09:34.320 --> 00:09:35.810
fixed-point integer.

215
00:09:35.810 --> 00:09:38.560
Let's say multiplied by 100,
so it's in pennies.

216
00:09:38.560 --> 00:09:40.410
And so someone might have
three constructors.

217
00:09:40.410 --> 00:09:42.930
One that takes an int, one that
takes a string, and one

218
00:09:42.930 --> 00:09:44.390
that takes a double.

219
00:09:44.390 --> 00:09:45.900
And they might have some
overloaded methods.

220
00:09:45.900 --> 00:09:48.170
So down at the bottom we
have two add methods.

221
00:09:48.170 --> 00:09:51.870
One takes another Money class,
and one takes another Money

222
00:09:51.870 --> 00:09:57.910
class but optionally charges tax
before it adds the money.

223
00:09:57.910 --> 00:10:01.390
So Dart works around this
problem by introducing named

224
00:10:01.390 --> 00:10:02.440
constructors.

225
00:10:02.440 --> 00:10:05.120
So in Dart, your constructor
does not always have to have

226
00:10:05.120 --> 00:10:07.360
the same name as your
class itself.

227
00:10:07.360 --> 00:10:09.460
In Java, your constructor
for the Cat class is

228
00:10:09.460 --> 00:10:10.830
always called Cat.

229
00:10:10.830 --> 00:10:13.250
In Dart, you have a
constructor called

230
00:10:13.250 --> 00:10:16.030
Money.fromDouble and
Money.fromString.

231
00:10:16.030 --> 00:10:20.540
So the actual qualified
constructor name is itself an

232
00:10:20.540 --> 00:10:21.170
constructor.

233
00:10:21.170 --> 00:10:24.120
So someone, if they wanted to
create Money from a double,

234
00:10:24.120 --> 00:10:26.180
they'd say new Money.fromDouble

235
00:10:26.180 --> 00:10:27.430
and then the value.

236
00:10:27.430 --> 00:10:29.680
237
00:10:29.680 --> 00:10:33.390
Likewise, for the overloaded
method case, what we can do is

238
00:10:33.390 --> 00:10:35.950
we can collapse those two
methods into a single method

239
00:10:35.950 --> 00:10:38.090
because Dart has optional
parameters.

240
00:10:38.090 --> 00:10:40.430
So all you do to make a
parameter optional is you

241
00:10:40.430 --> 00:10:42.040
enclose it in square brackets.

242
00:10:42.040 --> 00:10:46.720
So now the original Money
class, which had two

243
00:10:46.720 --> 00:10:49.820
parameters, and then another
specialized version, which had

244
00:10:49.820 --> 00:10:52.090
the emitted parameter is
collapsed into a single method

245
00:10:52.090 --> 00:10:53.340
which has the optional
parameter.

246
00:10:53.340 --> 00:10:56.870
247
00:10:56.870 --> 00:10:59.470
And you could specify default
values for the parameters.

248
00:10:59.470 --> 00:11:02.180
So typically in Java, if you
have this case where you have

249
00:11:02.180 --> 00:11:04.672
two overloads, and one of them
is just an overload because

250
00:11:04.672 --> 00:11:07.550
you want to allow the person to
emit an optional parameter,

251
00:11:07.550 --> 00:11:11.130
you'd typically have one method
call the other and pass

252
00:11:11.130 --> 00:11:12.930
in the default value.

253
00:11:12.930 --> 00:11:14.790
Here you can just specify
the value.

254
00:11:14.790 --> 00:11:16.670
So I say in the default,
if you don't specify

255
00:11:16.670 --> 00:11:19.132
chargeTax is true.

256
00:11:19.132 --> 00:11:22.580
The government's gonna
love that.

257
00:11:22.580 --> 00:11:25.310
As a bonus, all optional
parameters are named

258
00:11:25.310 --> 00:11:25.870
parameters.

259
00:11:25.870 --> 00:11:28.190
So if you have a list of like
five optional parameters, and

260
00:11:28.190 --> 00:11:31.640
maybe you don't memorize the API
but you happen to know the

261
00:11:31.640 --> 00:11:34.860
names of the parameters, you
can specify the optional

262
00:11:34.860 --> 00:11:37.770
parameter by putting a colon
in front of its name.

263
00:11:37.770 --> 00:11:39.780
So I'm passing the chargeTax
parameter by

264
00:11:39.780 --> 00:11:41.030
saying chargeTax: false.

265
00:11:41.030 --> 00:11:45.420
266
00:11:45.420 --> 00:11:47.490
Here's an interesting thing.

267
00:11:47.490 --> 00:11:50.790
A lot of people complain about
Java, of people creating tons

268
00:11:50.790 --> 00:11:53.590
of factory service locator,
factory factory classes, and

269
00:11:53.590 --> 00:11:54.600
things like that.

270
00:11:54.600 --> 00:11:57.410
And factories and dependency
injection are very, very

271
00:11:57.410 --> 00:11:58.960
common in Java.

272
00:11:58.960 --> 00:12:01.300
And I think Dart recognized
this and said, we should

273
00:12:01.300 --> 00:12:04.530
provide a solution for
this that doesn't

274
00:12:04.530 --> 00:12:05.690
add a lot of bloat.

275
00:12:05.690 --> 00:12:08.380
And so what you can do is you
can designate a constructor as

276
00:12:08.380 --> 00:12:10.070
a factory constructor.

277
00:12:10.070 --> 00:12:13.640
So here we're saying the Money
constructor that takes an

278
00:12:13.640 --> 00:12:16.690
amount is a factory
constructor.

279
00:12:16.690 --> 00:12:19.430
And what it does is it says,
if the amount is equal to

280
00:12:19.430 --> 00:12:22.990
zero, then return this static
final interned instance of

281
00:12:22.990 --> 00:12:25.930
zero, else return a new
Money object that's

282
00:12:25.930 --> 00:12:27.490
constructed on the fly.

283
00:12:27.490 --> 00:12:29.650
And typically you might do this
if you want to use zero

284
00:12:29.650 --> 00:12:33.100
as a special value to use
reference equality.

285
00:12:33.100 --> 00:12:36.060
There's only ever one Money
object representing zero

286
00:12:36.060 --> 00:12:40.220
money, but other ones actually
have differing values.

287
00:12:40.220 --> 00:12:42.720
And so what happens is, when
you new the Money object it

288
00:12:42.720 --> 00:12:45.660
actually calls this method, and
the method actually can

289
00:12:45.660 --> 00:12:48.120
return a different object,
unlike a typical Java

290
00:12:48.120 --> 00:12:48.470
constructor.

291
00:12:48.470 --> 00:12:51.130
You can't return something from
the constructor that's

292
00:12:51.130 --> 00:12:52.460
different than the
object itself.

293
00:12:52.460 --> 00:12:55.530
294
00:12:55.530 --> 00:12:57.760
And Dart also has operator
overloading.

295
00:12:57.760 --> 00:13:00.380
So we can make that Money class
a little easier to use

296
00:13:00.380 --> 00:13:03.200
by overwriting operator+
on it.

297
00:13:03.200 --> 00:13:06.260
And now you can just say
money+money instead of

298
00:13:06.260 --> 00:13:07.510
money.add(money).

299
00:13:07.510 --> 00:13:11.950
300
00:13:11.950 --> 00:13:15.350
And finally, Dart has
getters and setters.

301
00:13:15.350 --> 00:13:18.170
So this is a typical
POJO, Plain Old Job

302
00:13:18.170 --> 00:13:20.650
Object bean, in Java.

303
00:13:20.650 --> 00:13:23.120
And so we have a field called
Amount, so naturally we have

304
00:13:23.120 --> 00:13:25.690
to write an int get amount that
returns _amount, and a

305
00:13:25.690 --> 00:13:27.600
setter for it.

306
00:13:27.600 --> 00:13:30.010
And then on the bottom, you
see method calls from it.

307
00:13:30.010 --> 00:13:35.360
Whereas in Dart, what you can
do is you can put a get

308
00:13:35.360 --> 00:13:38.030
keyword in front of the function
name and a set

309
00:13:38.030 --> 00:13:39.770
keyword in front
of the setter.

310
00:13:39.770 --> 00:13:42.440
And then what happens is you can
reference the object as if

311
00:13:42.440 --> 00:13:45.070
those were field references,
not method calls.

312
00:13:45.070 --> 00:13:48.380
And Dart will actually invoke
the getter methods for you.

313
00:13:48.380 --> 00:13:51.450
So this is kind of a less
boilerplate-y way of setting

314
00:13:51.450 --> 00:13:57.360
up fields with getters and
setters or properties.

315
00:13:57.360 --> 00:14:03.520
Let's talk about the type
system differences.

316
00:14:03.520 --> 00:14:05.620
So there's really only five
built-in types you need to

317
00:14:05.620 --> 00:14:06.660
worry about.

318
00:14:06.660 --> 00:14:08.270
There are two numeric types.

319
00:14:08.270 --> 00:14:10.320
There's int and double.

320
00:14:10.320 --> 00:14:11.830
And yes, you're reading
that right.

321
00:14:11.830 --> 00:14:14.710
The integer is infinite
precision, so you never have

322
00:14:14.710 --> 00:14:18.120
to worry about overflow
in your code.

323
00:14:18.120 --> 00:14:20.406
If you want to compute--

324
00:14:20.406 --> 00:14:23.430
boy, don't try to compute
Google because

325
00:14:23.430 --> 00:14:24.050
you'll run out of memory.

326
00:14:24.050 --> 00:14:27.080
But if you want to compute a
very large number, you can use

327
00:14:27.080 --> 00:14:29.090
integers to do it.

328
00:14:29.090 --> 00:14:32.760
Doubles are 64-bit IEEE-754
goodness.

329
00:14:32.760 --> 00:14:36.260
Typically you might have a
game or a lot of math or

330
00:14:36.260 --> 00:14:38.530
physics code, and they're
great to use for that.

331
00:14:38.530 --> 00:14:39.500
Dart does have a String.

332
00:14:39.500 --> 00:14:41.200
Class It has a bool type--

333
00:14:41.200 --> 00:14:42.830
not Boolean, but bool.

334
00:14:42.830 --> 00:14:46.200
And it has two fundamental
collection types that

335
00:14:46.200 --> 00:14:49.210
everybody uses, hopefully,
which is List and Map.

336
00:14:49.210 --> 00:14:52.960
And like every other language
except for Java, they have

337
00:14:52.960 --> 00:14:54.000
first-class support.

338
00:14:54.000 --> 00:14:59.060
So there are literals
for maps and lists

339
00:14:59.060 --> 00:15:00.050
built into the language.

340
00:15:00.050 --> 00:15:02.500
So you define a List literal
with square brackets, and you

341
00:15:02.500 --> 00:15:06.160
define a map with curly braces,
much like JSON and

342
00:15:06.160 --> 00:15:08.540
JavaScript.

343
00:15:08.540 --> 00:15:10.490
There's some big differences
with strings

344
00:15:10.490 --> 00:15:12.250
between Java and Dart.

345
00:15:12.250 --> 00:15:17.580
String support interpolation
in Dart-- so you can put a

346
00:15:17.580 --> 00:15:21.470
dollar sign and then a variable
name inside of any

347
00:15:21.470 --> 00:15:25.580
string, and Dart will substitute
that with the

348
00:15:25.580 --> 00:15:29.210
variable of the same name that's
in the same scope.

349
00:15:29.210 --> 00:15:30.590
But you can go a little
bit further, too.

350
00:15:30.590 --> 00:15:31.900
You could put a curly brace.

351
00:15:31.900 --> 00:15:36.320
And for example, you can invoke
a method call on that.

352
00:15:36.320 --> 00:15:38.640
If this looks familiar to you,
it looks very much like the

353
00:15:38.640 --> 00:15:41.160
expression language that's often
in many Java frameworks,

354
00:15:41.160 --> 00:15:45.810
like JSP and JSS and things
like that, or like Apache

355
00:15:45.810 --> 00:15:48.210
property substitution.

356
00:15:48.210 --> 00:15:52.130
One of the features I love most,
actually, is heredocs,

357
00:15:52.130 --> 00:15:54.850
and Dart was very good
to add that.

358
00:15:54.850 --> 00:15:57.700
And it's basically multi-line
strings that you can include

359
00:15:57.700 --> 00:16:00.260
verbatim in the code.

360
00:16:00.260 --> 00:16:02.430
And that's really, really useful
if you want to bake in

361
00:16:02.430 --> 00:16:05.730
some HTML or some CSS into your
app, and you don't have

362
00:16:05.730 --> 00:16:09.040
to worry about going in and
escaping every new line and

363
00:16:09.040 --> 00:16:09.860
all the other kind of stuff.

364
00:16:09.860 --> 00:16:13.810
You can kind of structure
DSL-specific syntaxes right

365
00:16:13.810 --> 00:16:15.350
into your Dart source code,
just by putting

366
00:16:15.350 --> 00:16:17.370
in a multiline string.

367
00:16:17.370 --> 00:16:20.170
And if you don't want
interpolation, because maybe

368
00:16:20.170 --> 00:16:22.430
you want literal dollar signs,
just put an @ in front of the

369
00:16:22.430 --> 00:16:24.050
string, and it turns it
off for that string.

370
00:16:24.050 --> 00:16:26.610
371
00:16:26.610 --> 00:16:29.110
I don't want to say a
lot about generics.

372
00:16:29.110 --> 00:16:32.730
Dart does have generics, but
they are radically simplified

373
00:16:32.730 --> 00:16:34.590
generics, which is
a good thing.

374
00:16:34.590 --> 00:16:37.240
Because Java generics--

375
00:16:37.240 --> 00:16:39.900
I mean, if anybody's played
around in Scala, this sounds

376
00:16:39.900 --> 00:16:41.900
like somebody whining, but Java
generics are actually

377
00:16:41.900 --> 00:16:43.940
kind of complicated, and a lot
of people don't understand the

378
00:16:43.940 --> 00:16:47.120
difference between covariants,
invariants, contravariants,

379
00:16:47.120 --> 00:16:49.140
wild cards, and things
like that.

380
00:16:49.140 --> 00:16:51.420
And as a result, most people
don't even use those features.

381
00:16:51.420 --> 00:16:53.670
I mean, if you're Joshua Bloch,
you use them in the

382
00:16:53.670 --> 00:16:56.900
Java collections classes, but if
you go look at most regular

383
00:16:56.900 --> 00:16:59.040
Java programmers, they
hardly ever use most

384
00:16:59.040 --> 00:17:00.740
of these extra features.

385
00:17:00.740 --> 00:17:03.780
And so Dart basically said,
why add all this extra

386
00:17:03.780 --> 00:17:04.530
complexity?

387
00:17:04.530 --> 00:17:07.829
Most people would just use
Foo if T So Dart only has

388
00:17:07.829 --> 00:17:11.430
covariants for generics.

389
00:17:11.430 --> 00:17:13.819
But Dart does not use erasure.

390
00:17:13.819 --> 00:17:17.660
So generics in Dart are
actual reified.

391
00:17:17.660 --> 00:17:19.190
You can check the
runtime types.

392
00:17:19.190 --> 00:17:23.510
So a Foo or a list of int--
you can actually check

393
00:17:23.510 --> 00:17:25.250
it to see what it is.

394
00:17:25.250 --> 00:17:27.079
And if you try to say,
is this a foo of

395
00:17:27.079 --> 00:17:28.960
string, it will say false.

396
00:17:28.960 --> 00:17:31.920
That's not the case in Java,
where if you have a list of T,

397
00:17:31.920 --> 00:17:34.850
a list of anything, basically
it's only really a list, and

398
00:17:34.850 --> 00:17:38.020
you actually cannot check
what it is at runtime.

399
00:17:38.020 --> 00:17:39.530
But in general, I would
say, don't worry

400
00:17:39.530 --> 00:17:40.890
too much about this.

401
00:17:40.890 --> 00:17:44.700
Things just kind of work, and
you don't have to worry too

402
00:17:44.700 --> 00:17:46.090
much about it.

403
00:17:46.090 --> 00:17:48.710
Generics in Dart are simple and
they work out of the box.

404
00:17:48.710 --> 00:17:53.310
And don't get yourself worried
about what's being left out.

405
00:17:53.310 --> 00:17:56.810
406
00:17:56.810 --> 00:17:58.920
The other-- and I want to say
the third favorite feature of

407
00:17:58.920 --> 00:18:03.080
mine is finally lexically
scoped closures.

408
00:18:03.080 --> 00:18:04.440
I wish Java had them.

409
00:18:04.440 --> 00:18:06.020
I wish Java 8 will have them.

410
00:18:06.020 --> 00:18:06.690
Hopefully they will.

411
00:18:06.690 --> 00:18:09.340
But yes.

412
00:18:09.340 --> 00:18:11.810
Bye-bye, anonymous classes,
and hello function types.

413
00:18:11.810 --> 00:18:14.630
So here is an example of
an apply function.

414
00:18:14.630 --> 00:18:16.760
It takes a list of integers and
applies the function to

415
00:18:16.760 --> 00:18:18.620
each thing in the list and
returns a new list.

416
00:18:18.620 --> 00:18:21.670
And so at the bottom I just
show a simple example.

417
00:18:21.670 --> 00:18:26.780
Apply an inline literal list of
1, 2, 3, 4, 5, a function

418
00:18:26.780 --> 00:18:29.280
which basically doubles
its input.

419
00:18:29.280 --> 00:18:35.840
So what you do to declare a
closure is you basically put

420
00:18:35.840 --> 00:18:39.135
the parameters in parentheses
with optional types, and then

421
00:18:39.135 --> 00:18:42.590
you put =&gt;, and then the
expression to be evaluated,

422
00:18:42.590 --> 00:18:43.270
the function body.

423
00:18:43.270 --> 00:18:45.280
You can use curly braces
there too if you want.

424
00:18:45.280 --> 00:18:50.020
425
00:18:50.020 --> 00:18:51.990
And you can make things a
little bit more readable

426
00:18:51.990 --> 00:18:53.270
because Dart has typedefs.

427
00:18:53.270 --> 00:18:56.220
So often, these function
declarations, if they're

428
00:18:56.220 --> 00:18:58.440
really complicated and take a
lot of parameters-- maybe have

429
00:18:58.440 --> 00:19:00.550
a function which takes functions
to functions, and

430
00:19:00.550 --> 00:19:02.250
things like that--

431
00:19:02.250 --> 00:19:04.060
you want to break them down
into separate steps.

432
00:19:04.060 --> 00:19:05.700
And with typedefs,
you can do that.

433
00:19:05.700 --> 00:19:11.070
So here I'm basically saying
that there is a function that

434
00:19:11.070 --> 00:19:14.705
takes an int and returns an int,
and I'm going to give it

435
00:19:14.705 --> 00:19:16.660
the name Transformer.

436
00:19:16.660 --> 00:19:19.860
And then my apply function
now, rather than saying--

437
00:19:19.860 --> 00:19:24.850
if you look at the previous
slide, it's int f(int arg))

438
00:19:24.850 --> 00:19:26.630
Now this says Transformer bay.

439
00:19:26.630 --> 00:19:29.370
440
00:19:29.370 --> 00:19:31.820
Maybe some of you get the
reference to that.

441
00:19:31.820 --> 00:19:33.750
And so then at the bottom, I
have another one where I say

442
00:19:33.750 --> 00:19:35.000
Transformer prime
= (x) =&gt; 2 * x.

443
00:19:35.000 --> 00:19:38.140
444
00:19:38.140 --> 00:19:40.750
And so it looks a little
more readable.

445
00:19:40.750 --> 00:19:44.220
You can document the typedef
and things like that.

446
00:19:44.220 --> 00:19:49.025
OK so that kind of covers the
language syntax case.

447
00:19:49.025 --> 00:19:51.940
Now I'm going to cover just some
of the API differences.

448
00:19:51.940 --> 00:19:55.140
So Dart has two collection
classes, as I mentioned

449
00:19:55.140 --> 00:19:57.620
before, and they
are generified.

450
00:19:57.620 --> 00:19:59.930
That's List and Map.

451
00:19:59.930 --> 00:20:02.670
And so in Dart, you can create
them in two ways.

452
00:20:02.670 --> 00:20:06.670
You can new them, with the new
operator, or you can construct

453
00:20:06.670 --> 00:20:09.840
them inline with literals,
which a lot of people do.

454
00:20:09.840 --> 00:20:13.810
That's a very common
thing to do.

455
00:20:13.810 --> 00:20:15.970
And you don't actually have to
worry about the underlying

456
00:20:15.970 --> 00:20:16.900
concrete types.

457
00:20:16.900 --> 00:20:19.470
So Map and List will be abstract
classes and there

458
00:20:19.470 --> 00:20:21.370
might be multiple
implementations of Map and

459
00:20:21.370 --> 00:20:22.960
List, but Dart will
pick a default

460
00:20:22.960 --> 00:20:23.770
implementation for you.

461
00:20:23.770 --> 00:20:26.170
In Java, you have to think,
am I going to use HashMap?

462
00:20:26.170 --> 00:20:27.940
Am I going to use
LinkedHashMap?

463
00:20:27.940 --> 00:20:30.260
And things like that.

464
00:20:30.260 --> 00:20:31.110
And then iteration--

465
00:20:31.110 --> 00:20:32.410
you have multiple
choices, right?

466
00:20:32.410 --> 00:20:35.170
So you can use what's called
external iteration, where you

467
00:20:35.170 --> 00:20:37.900
basically have your own for
loop, you ask for the length

468
00:20:37.900 --> 00:20:40.530
of the list, and you iterate
over it and you index into it

469
00:20:40.530 --> 00:20:42.670
like an array, like List[i].

470
00:20:42.670 --> 00:20:45.470
No operator overloading to
access list members.

471
00:20:45.470 --> 00:20:48.760
You don't have to
say List.get(i).

472
00:20:48.760 --> 00:20:51.930
Or you could use the
For In operators.

473
00:20:51.930 --> 00:20:53.180
You could say for (value
in list) {doSomething}.

474
00:20:53.180 --> 00:20:55.350
475
00:20:55.350 --> 00:20:59.900
Or you can use an internal
iterator, which is basically,

476
00:20:59.900 --> 00:21:02.970
you pass a closure to the
forEach method, and it will

477
00:21:02.970 --> 00:21:05.410
loop over the collection
internally and call your

478
00:21:05.410 --> 00:21:07.640
function for each member
of the list.

479
00:21:07.640 --> 00:21:10.580
And then there's equivalent
methods for Map.

480
00:21:10.580 --> 00:21:13.750
It's just that they take two
parameters for the forEach

481
00:21:13.750 --> 00:21:16.550
method, key and value, or you
have to get the set of keys

482
00:21:16.550 --> 00:21:20.110
and the set of values
to iterate over.

483
00:21:20.110 --> 00:21:20.320
All right.

484
00:21:20.320 --> 00:21:23.275
So now let's actually move on
to converting the actual GWT

485
00:21:23.275 --> 00:21:25.240
code over to Dart.

486
00:21:25.240 --> 00:21:28.690
And so let's first convert
a really simple example.

487
00:21:28.690 --> 00:21:30.600
Here's a "Hello World" in GWT.

488
00:21:30.600 --> 00:21:32.740
You have the onModuleLoad
function, and I'm going to

489
00:21:32.740 --> 00:21:35.000
call window.alert("Hello
World").

490
00:21:35.000 --> 00:21:38.430
What would this look
like in Dart?

491
00:21:38.430 --> 00:21:39.790
Really, really compact.

492
00:21:39.790 --> 00:21:43.140
So first thing is we import the
Dart HTML library so we

493
00:21:43.140 --> 00:21:46.700
can get the window function,
the alert function.

494
00:21:46.700 --> 00:21:50.410
Secondly, Dart's EntryPoint,
is the main function.

495
00:21:50.410 --> 00:21:51.580
So--

496
00:21:51.580 --> 00:21:53.280
whoops--

497
00:21:53.280 --> 00:21:53.910
what?

498
00:21:53.910 --> 00:21:56.230
There we go.

499
00:21:56.230 --> 00:21:58.860
Let me restart.

500
00:21:58.860 --> 00:22:02.590
I don't know why
that happened.

501
00:22:02.590 --> 00:22:03.840
Let's go back.

502
00:22:03.840 --> 00:22:12.090
503
00:22:12.090 --> 00:22:13.580
I have a lot of slides.

504
00:22:13.580 --> 00:22:16.020
OK.

505
00:22:16.020 --> 00:22:17.610
There we go.

506
00:22:17.610 --> 00:22:18.400
This one.

507
00:22:18.400 --> 00:22:21.230
And so if you look at this, you
have to declare a class.

508
00:22:21.230 --> 00:22:22.100
You have to implement
EntryPoint.

509
00:22:22.100 --> 00:22:24.070
You have to have an onModuleLoad
function with

510
00:22:24.070 --> 00:22:25.490
access qualifiers.

511
00:22:25.490 --> 00:22:27.400
And then you call
window.alert.

512
00:22:27.400 --> 00:22:29.510
Here you just declare a main
function and that basically

513
00:22:29.510 --> 00:22:32.270
runs whatever code
is specified.

514
00:22:32.270 --> 00:22:35.490
But a lot of times people are
going to structure a little

515
00:22:35.490 --> 00:22:37.590
more, because you don't want
everything running in main.

516
00:22:37.590 --> 00:22:40.620
So people might decide
to declare a class.

517
00:22:40.620 --> 00:22:43.480
So here I have a class called
Hello, and my equivalent of

518
00:22:43.480 --> 00:22:45.745
onModuleLoad is the
go function.

519
00:22:45.745 --> 00:22:48.290
And from main, I just
create that Hello

520
00:22:48.290 --> 00:22:49.558
instance and invoke go.

521
00:22:49.558 --> 00:22:52.630
522
00:22:52.630 --> 00:22:56.360
So this is a really important
point right now.

523
00:22:56.360 --> 00:22:59.300
So you know, Dart is
bleeding edge.

524
00:22:59.300 --> 00:23:02.130
And we're working hard on
it, and we're working

525
00:23:02.130 --> 00:23:02.980
as fast as we can.

526
00:23:02.980 --> 00:23:06.440
But we don't yet have a widget
library in the SDK that you

527
00:23:06.440 --> 00:23:07.360
can download today.

528
00:23:07.360 --> 00:23:08.810
One will be available soon.

529
00:23:08.810 --> 00:23:11.140
If you've seen some of the other
demos, like the Swarm

530
00:23:11.140 --> 00:23:12.890
app, there's some really
slick stuff going on.

531
00:23:12.890 --> 00:23:16.240
And that knowledge will
translate into an awesome

532
00:23:16.240 --> 00:23:17.340
widget library.

533
00:23:17.340 --> 00:23:19.780
But for now, we just have
DOM programming.

534
00:23:19.780 --> 00:23:24.360
And so I'm going to compare GWT
DOM program versus Dart

535
00:23:24.360 --> 00:23:24.800
DOM programming.

536
00:23:24.800 --> 00:23:28.200
So here is an example.

537
00:23:28.200 --> 00:23:31.490
I might have a div tag with
ID "button" in the HTML.

538
00:23:31.490 --> 00:23:34.100
So I'm going to add an
EventListener, a click

539
00:23:34.100 --> 00:23:36.910
EventListener, to
that div tag.

540
00:23:36.910 --> 00:23:38.990
And so here's the GWT
code that you have

541
00:23:38.990 --> 00:23:40.020
to write to do that.

542
00:23:40.020 --> 00:23:42.850
So you have to look it up by
going Document.get, which gets

543
00:23:42.850 --> 00:23:43.480
the document element.

544
00:23:43.480 --> 00:23:45.470
Then getElementByID
and the button.

545
00:23:45.470 --> 00:23:47.790
Then you have to sink the event
type event you want to

546
00:23:47.790 --> 00:23:50.790
listen to, so you use
DOM.sinkEvents.

547
00:23:50.790 --> 00:23:53.050
Then you have to set the
EventListener callback,

548
00:23:53.050 --> 00:23:56.610
DOM.setEventListener, and have
an anonymous inner class

549
00:23:56.610 --> 00:24:00.150
callback with a function
declared in it, which then has

550
00:24:00.150 --> 00:24:02.210
window.alert.

551
00:24:02.210 --> 00:24:05.320
So what would that look
like in Dart?

552
00:24:05.320 --> 00:24:10.040
You just say Query
("#ID").on.click.add and then

553
00:24:10.040 --> 00:24:11.655
a closure for the
EventHandler.

554
00:24:11.655 --> 00:24:12.770
Now there's a couple
of interesting

555
00:24:12.770 --> 00:24:13.870
things going on here.

556
00:24:13.870 --> 00:24:18.080
First of all, Dart has global
functions, and so not every

557
00:24:18.080 --> 00:24:19.830
method has to be part
of a class.

558
00:24:19.830 --> 00:24:24.105
So there's a global top-level
query function, and basically

559
00:24:24.105 --> 00:24:26.360
it kind of acts like the
dollar-sign function in

560
00:24:26.360 --> 00:24:27.720
jQuery, if you want to think
of it like that.

561
00:24:27.720 --> 00:24:31.530
So I'm looking up the button
with ID "button." And I'm

562
00:24:31.530 --> 00:24:32.870
going to get back an element.

563
00:24:32.870 --> 00:24:36.310
Now the element going to have a
magic field in it called on.

564
00:24:36.310 --> 00:24:39.410
And on is going to have a bunch
of setter properties--

565
00:24:39.410 --> 00:24:41.310
like I showed you setters
earlier--

566
00:24:41.310 --> 00:24:42.310
for each type of event.

567
00:24:42.310 --> 00:24:45.100
So here we've got one
called click--

568
00:24:45.100 --> 00:24:45.580
a setter.

569
00:24:45.580 --> 00:24:48.510
We've got one called mouseOver
and things like that.

570
00:24:48.510 --> 00:24:51.040
And each one of those is going
to have an add method on it.

571
00:24:51.040 --> 00:24:54.030
And so now, I'm just saying--

572
00:24:54.030 --> 00:24:58.790
for the element that I got back,
on click, give me back

573
00:24:58.790 --> 00:25:02.710
this click thing, which can then
allow me to add a closure

574
00:25:02.710 --> 00:25:04.600
to it, which will be called.

575
00:25:04.600 --> 00:25:07.090
And so that's basically how you
would write the same code.

576
00:25:07.090 --> 00:25:08.375
You look at it again--

577
00:25:08.375 --> 00:25:11.530
578
00:25:11.530 --> 00:25:12.780
it looks a lot more readable.

579
00:25:12.780 --> 00:25:16.570
580
00:25:16.570 --> 00:25:19.970
So that's basically converting
a Hello World and some simple

581
00:25:19.970 --> 00:25:21.160
DOM programming.

582
00:25:21.160 --> 00:25:23.980
This is kind of where
Dart is today.

583
00:25:23.980 --> 00:25:26.270
As I said, there's high-level
libraries that are on the way

584
00:25:26.270 --> 00:25:28.040
real soon now.

585
00:25:28.040 --> 00:25:30.510
But for now, it's really an
HTML5 experience, which is not

586
00:25:30.510 --> 00:25:31.980
always the worst thing.

587
00:25:31.980 --> 00:25:36.400
But here's the sort of
high-level mapping of what API

588
00:25:36.400 --> 00:25:38.200
in GWT corresponds to what
you have to do in Dart.

589
00:25:38.200 --> 00:25:40.790
So if you're using
com.google.gwt.dom, you're

590
00:25:40.790 --> 00:25:43.320
going to import the
dart:html library.

591
00:25:43.320 --> 00:25:46.790
If you're using UIBinder and
SafeHTMLTemplates and

592
00:25:46.790 --> 00:25:49.880
[INAUDIBLE] messages from GWT,
you're probably just going to

593
00:25:49.880 --> 00:25:53.080
use Dart string interpolation
to do the same thing.

594
00:25:53.080 --> 00:25:56.295
If you're doing server
communication, like GWT RPC or

595
00:25:56.295 --> 00:25:58.810
Request Factory, in Dart, right
now, today, you're going

596
00:25:58.810 --> 00:26:01.130
to use XMLHttpRequest.

597
00:26:01.130 --> 00:26:03.970
For widgets, of course,
GWT has widgets.

598
00:26:03.970 --> 00:26:05.530
For Dart, real soon now
there's going to

599
00:26:05.530 --> 00:26:06.910
be some cool stuff.

600
00:26:06.910 --> 00:26:13.300
And in multi-process, for using
WebWorkers, GWT has some

601
00:26:13.300 --> 00:26:16.450
third-party hacks that add
WebWorker support to GWT.

602
00:26:16.450 --> 00:26:20.670
Dart actually has WebWorkers
built in to the language as a

603
00:26:20.670 --> 00:26:23.890
first-class construct.

604
00:26:23.890 --> 00:26:25.470
They're called isolates.

605
00:26:25.470 --> 00:26:29.710
And so doing multi-process stuff
within Dart really has

606
00:26:29.710 --> 00:26:30.240
no equal anywhere.

607
00:26:30.240 --> 00:26:34.130
They make it really
easy to use.

608
00:26:34.130 --> 00:26:36.480
So let's try to get a little
more deeper and port something

609
00:26:36.480 --> 00:26:37.040
more complex.

610
00:26:37.040 --> 00:26:38.360
Let's try to port a widget.

611
00:26:38.360 --> 00:26:41.252
612
00:26:41.252 --> 00:26:43.905
Now widgets are written in many
different ways in GWT.

613
00:26:43.905 --> 00:26:46.726
I'm just going to focus on the
modern way people do widgets

614
00:26:46.726 --> 00:26:49.280
with GWT, which is
with UIBinder.

615
00:26:49.280 --> 00:26:52.810
And so the idea here is just
how can I take a GWT widget

616
00:26:52.810 --> 00:26:56.320
that I've written that uses
UIBinder to define its HTML

617
00:26:56.320 --> 00:26:59.825
structure and port that
over to Dart?

618
00:26:59.825 --> 00:27:02.450
And the general idea here is
just to take the UIBinder

619
00:27:02.450 --> 00:27:06.440
template and enclose it in
a multi-line string.

620
00:27:06.440 --> 00:27:11.090
Convert any of the ui:field
attributes to just be ID

621
00:27:11.090 --> 00:27:12.770
attributes on the elements.

622
00:27:12.770 --> 00:27:16.030
Then build a Dart class to
represent normally what GWT

623
00:27:16.030 --> 00:27:18.940
would generate to bind that
template, which is basically

624
00:27:18.940 --> 00:27:21.605
looking up the IDs and assigning
them to fields in

625
00:27:21.605 --> 00:27:23.070
your object.

626
00:27:23.070 --> 00:27:25.410
And then you'll have to
basically move the raw HTML

627
00:27:25.410 --> 00:27:30.330
resources, like CssResource, to
be external CSS by using a

628
00:27:30.330 --> 00:27:33.040
link tag to include the CSS.

629
00:27:33.040 --> 00:27:37.330
It's not a perfect solution, but
it's not horribly bad to

630
00:27:37.330 --> 00:27:38.440
port code like this.

631
00:27:38.440 --> 00:27:41.810
So here's an example.

632
00:27:41.810 --> 00:27:43.170
This is how it looks in Java.

633
00:27:43.170 --> 00:27:45.455
I have a UIBinder template
with a div tag.

634
00:27:45.455 --> 00:27:49.580
It says, Hello, &lt;span ui:
field = 'nameSpan' /&gt; .

635
00:27:49.580 --> 00:27:53.710
And then here I have a little
bit of code which basically

636
00:27:53.710 --> 00:27:57.930
calls setElement(UIBin
der.CreateandBindUi(this)).

637
00:27:57.930 --> 00:27:59.230
Now if you're GWT programmer,
you know

638
00:27:59.230 --> 00:28:00.920
this works some magic.

639
00:28:00.920 --> 00:28:04.690
And what happens is, is it
basically generates some code

640
00:28:04.690 --> 00:28:09.600
behind the scenes that will take
that UIBinder template,

641
00:28:09.600 --> 00:28:13.820
create a div tag, and inject
that HTML source, as an inner

642
00:28:13.820 --> 00:28:15.240
HTML, into it.

643
00:28:15.240 --> 00:28:16.840
And put it into the document.

644
00:28:16.840 --> 00:28:19.190
And then the next thing it will
do is it will go through

645
00:28:19.190 --> 00:28:21.060
and it will look up
that field, that

646
00:28:21.060 --> 00:28:23.730
UI field, the nameSpan.

647
00:28:23.730 --> 00:28:25.980
And when it finds that element,
it will store it in

648
00:28:25.980 --> 00:28:27.020
the field on your class.

649
00:28:27.020 --> 00:28:30.970
You can see here, this
nameSpan attribute.

650
00:28:30.970 --> 00:28:33.420
So this element will be looked
up in the DOM with

651
00:28:33.420 --> 00:28:36.940
getElementById and then
put there for you.

652
00:28:36.940 --> 00:28:38.810
So kind of like a dependency
injection.

653
00:28:38.810 --> 00:28:40.490
So we want to get
that into Dart.

654
00:28:40.490 --> 00:28:42.240
So how can we emulate that?

655
00:28:42.240 --> 00:28:45.340
So the first thing is, we remove
the top and bottom XML

656
00:28:45.340 --> 00:28:46.410
tags and replace them
with triple-quote.

657
00:28:46.410 --> 00:28:50.890
And so now we've just put it
into a multi-line string.

658
00:28:50.890 --> 00:28:56.530
And we replace the ui:field
with just id='nameSpan'.

659
00:28:56.530 --> 00:29:01.100
And then secondly, the next step
that we'd do is we would

660
00:29:01.100 --> 00:29:02.430
write a function--

661
00:29:02.430 --> 00:29:04.620
that you can see right here--

662
00:29:04.620 --> 00:29:11.440
which will first create a new
HTML element with the

663
00:29:11.440 --> 00:29:13.810
template, which we
defined up here.

664
00:29:13.810 --> 00:29:18.100
And what this new Element.html
does is it actually kind of

665
00:29:18.100 --> 00:29:21.570
creates a div and injects the
string as the innerHTML of it.

666
00:29:21.570 --> 00:29:24.390
So what you get back, basically,
is essentially what

667
00:29:24.390 --> 00:29:27.170
UIBinder was doing as a div
element with the HTML in it.

668
00:29:27.170 --> 00:29:32.250
And then once we get that, we
input it into the DOM, the

669
00:29:32.250 --> 00:29:35.620
next thing we're going to do is
run element.query on it and

670
00:29:35.620 --> 00:29:39.440
look up id nameSpan and then
assign it to the field

671
00:29:39.440 --> 00:29:40.620
nameSpan here.

672
00:29:40.620 --> 00:29:44.290
So GWT kind of automates that
part of it, which is

673
00:29:44.290 --> 00:29:46.310
automatically looking up the
element for you and then

674
00:29:46.310 --> 00:29:46.970
signing it.

675
00:29:46.970 --> 00:29:49.950
So you actually have to write
that code yourself here, but

676
00:29:49.950 --> 00:29:51.950
it's not too bad.

677
00:29:51.950 --> 00:29:54.720
But you could make it
expandable, extensible.

678
00:29:54.720 --> 00:29:59.170
So here I have one where we have
two nameSpan tags in my

679
00:29:59.170 --> 00:30:03.245
template and I would have
two fields, like a

680
00:30:03.245 --> 00:30:04.590
nameSpan1 and a nameSpan2.

681
00:30:04.590 --> 00:30:08.150
Instead of having fields on my
object, I use a map, a map

682
00:30:08.150 --> 00:30:11.950
from the id to the element.

683
00:30:11.950 --> 00:30:15.370
And then what I do is I extend
my setElementByTemplate

684
00:30:15.370 --> 00:30:18.690
function to take the template,
which was from up here, and

685
00:30:18.690 --> 00:30:23.610
take a list of ids to look
up, which were up here.

686
00:30:23.610 --> 00:30:25.340
And then what this is going to
do is it's going to inject

687
00:30:25.340 --> 00:30:29.080
this and then document.query
look up each one of those and

688
00:30:29.080 --> 00:30:30.480
inject them into
the map for me.

689
00:30:30.480 --> 00:30:33.330
And that's what this basically
does here.

690
00:30:33.330 --> 00:30:38.490
It loops over for each ID and
then it injects into the map,

691
00:30:38.490 --> 00:30:41.760
calling element.query
with the id.

692
00:30:41.760 --> 00:30:44.735
And so that's a way to sort
of make it extensible.

693
00:30:44.735 --> 00:30:47.700
So you could have an arbitrary
number of elements that are

694
00:30:47.700 --> 00:30:51.390
looked up and automatically
injected for you, so you can

695
00:30:51.390 --> 00:30:55.170
cache them and look
them up later.

696
00:30:55.170 --> 00:30:57.050
What about instantiated widgets,
though, right?

697
00:30:57.050 --> 00:30:59.790
So I just showed you
HTML tags that

698
00:30:59.790 --> 00:31:01.030
are in UIBinder templates.

699
00:31:01.030 --> 00:31:02.340
But you know that GWT
does a lot more.

700
00:31:02.340 --> 00:31:06.290
So for example, you might use
HTMLPanel, or Menu item, or

701
00:31:06.290 --> 00:31:08.090
Tree item, and things
like that.

702
00:31:08.090 --> 00:31:12.460
Well, if it's a basic leaf
widget in GWT, like an input,

703
00:31:12.460 --> 00:31:16.280
or a checkbox, or a text area,
or something, you can just

704
00:31:16.280 --> 00:31:19.030
replace those with the
HTML5 equivalents.

705
00:31:19.030 --> 00:31:21.710
In fact for GWT, even, we
recommend actually not using

706
00:31:21.710 --> 00:31:25.650
heavyweight widgets for stuff
that's just basic HTML5.

707
00:31:25.650 --> 00:31:28.270
It's just too much overhead.

708
00:31:28.270 --> 00:31:31.030
But if you have something like a
composite type that's really

709
00:31:31.030 --> 00:31:35.170
complex, like a menu
or a tree--

710
00:31:35.170 --> 00:31:37.430
yes, right now, you're going
to actually need to code

711
00:31:37.430 --> 00:31:38.470
replacements.

712
00:31:38.470 --> 00:31:40.090
The good news is you're only
going to do it once, but yeah,

713
00:31:40.090 --> 00:31:41.630
you're going to have to write
your own tree for now.

714
00:31:41.630 --> 00:31:45.430
And I expect that as Dart gets a
larger and larger community,

715
00:31:45.430 --> 00:31:49.590
even if Dart provides its own
widget library, probably other

716
00:31:49.590 --> 00:31:50.490
people are going to
write their own

717
00:31:50.490 --> 00:31:51.340
widget libraries too.

718
00:31:51.340 --> 00:31:55.360
Someone will have a fancy tree
or a fancy carousel widget or

719
00:31:55.360 --> 00:31:57.740
something that is not included
in the library.

720
00:31:57.740 --> 00:32:04.500
So for now, it's an HTML
experience, but things will

721
00:32:04.500 --> 00:32:05.100
get better.

722
00:32:05.100 --> 00:32:09.410
But if you think it's too hard
to port widgets, then there's

723
00:32:09.410 --> 00:32:12.960
an alternate pattern that
you can use to get your

724
00:32:12.960 --> 00:32:13.730
feet wet with Dart.

725
00:32:13.730 --> 00:32:19.710
Let's say you have an existing
GWT application and you want

726
00:32:19.710 --> 00:32:20.830
to kind of try out Dart.

727
00:32:20.830 --> 00:32:21.980
Maybe you want to write
a new page.

728
00:32:21.980 --> 00:32:24.780
You want to add a new page to
your application, like a

729
00:32:24.780 --> 00:32:28.610
settings screen or like a
feedback page or something.

730
00:32:28.610 --> 00:32:31.240
And you want to write that part
in Dart, but the entire

731
00:32:31.240 --> 00:32:32.550
rest of the part, you
want to keep in GWT.

732
00:32:32.550 --> 00:32:34.210
So you want to keep your
application running at all

733
00:32:34.210 --> 00:32:38.070
times and not throw everything
away and start from scratch.

734
00:32:38.070 --> 00:32:40.630
The good news is that if you use
the Activities and Places

735
00:32:40.630 --> 00:32:43.550
model that's been in GWT for a
while, or if you've always

736
00:32:43.550 --> 00:32:48.060
been using history tag routing,
then you could do

737
00:32:48.060 --> 00:32:49.240
this quite easily.

738
00:32:49.240 --> 00:32:51.220
And the way you could
do it is this.

739
00:32:51.220 --> 00:32:55.150
You have your GWT application
look for history state changes

740
00:32:55.150 --> 00:32:56.380
in the hashtag.

741
00:32:56.380 --> 00:32:59.370
And if the history change is
one of the things that your

742
00:32:59.370 --> 00:33:03.440
app understands, then route the
event to the existing GWT

743
00:33:03.440 --> 00:33:05.510
code that's going to
put up that page.

744
00:33:05.510 --> 00:33:08.300
But if it's something you don't
understand, then send a

745
00:33:08.300 --> 00:33:12.390
message or let it fall through
to a Dart application that's

746
00:33:12.390 --> 00:33:13.540
running in the same page.

747
00:33:13.540 --> 00:33:15.770
So you've source-scripted in the
GWT module and you've also

748
00:33:15.770 --> 00:33:17.810
source-scripted in your Dart
app, and they're both looking

749
00:33:17.810 --> 00:33:19.060
at the history.

750
00:33:19.060 --> 00:33:21.800
And if they agree not to step
on each other's toes, this

751
00:33:21.800 --> 00:33:22.580
could work very well.

752
00:33:22.580 --> 00:33:24.540
The Dart code could look at
it and go, well, I don't

753
00:33:24.540 --> 00:33:28.100
understand that history tag, so
GWT can probably take care

754
00:33:28.100 --> 00:33:28.700
of that one.

755
00:33:28.700 --> 00:33:31.060
But I see one that's destined
for me, like the feedback

756
00:33:31.060 --> 00:33:35.110
page, the new feedback page, so
I'm basically going to take

757
00:33:35.110 --> 00:33:38.650
over the main content
area of the page and

758
00:33:38.650 --> 00:33:40.810
replace it with my UI.

759
00:33:40.810 --> 00:33:41.580
Right?

760
00:33:41.580 --> 00:33:48.210
And so that gives you kind of a
very high-level integration

761
00:33:48.210 --> 00:33:51.100
point for putting Dart pages
into your existing GWT apps.

762
00:33:51.100 --> 00:33:53.800
763
00:33:53.800 --> 00:33:56.200
You could migrate page
at a time that way.

764
00:33:56.200 --> 00:33:58.720
Here's a picture, like you
might have a banking

765
00:33:58.720 --> 00:34:00.510
application.

766
00:34:00.510 --> 00:34:03.090
And so maybe you have an
existing bill payment service,

767
00:34:03.090 --> 00:34:06.180
and #billpay on the URL will
send you to the bill pay

768
00:34:06.180 --> 00:34:08.355
activity in the GWT app.

769
00:34:08.355 --> 00:34:11.010
But you're adding a new page,
which is banking, like maybe

770
00:34:11.010 --> 00:34:12.199
bank transfers.

771
00:34:12.199 --> 00:34:14.080
And so you've written
that one in Dart.

772
00:34:14.080 --> 00:34:17.970
So what you do is you just have
the Dart part of the app

773
00:34:17.970 --> 00:34:20.900
that's sitting in the page look
for #banking in the URL.

774
00:34:20.900 --> 00:34:24.199
And that's the signal for it
to actually take over the

775
00:34:24.199 --> 00:34:28.750
content area and install
its view.

776
00:34:28.750 --> 00:34:30.800
But if you do this, the very
next thing you're going to run

777
00:34:30.800 --> 00:34:33.040
into is, how do you share
application state?

778
00:34:33.040 --> 00:34:36.570
I mean, maybe the GWT app just
did something and now the Dart

779
00:34:36.570 --> 00:34:39.139
app actually has to get
what was changed.

780
00:34:39.139 --> 00:34:42.650
And so there are a number
of options for this.

781
00:34:42.650 --> 00:34:45.460
One option is, use
browser storage.

782
00:34:45.460 --> 00:34:50.060
So you could use IndexDB,
SessionStorage, or cookies and

783
00:34:50.060 --> 00:34:54.639
have GWT commit transient
session-oriented data, let's

784
00:34:54.639 --> 00:34:58.360
say the current account or
profile representing the user.

785
00:34:58.360 --> 00:35:01.260
Have it committed to IndexDB
storage in the browser.

786
00:35:01.260 --> 00:35:03.740
And then when Dart goes to kick
off its view, like you

787
00:35:03.740 --> 00:35:08.950
navigate to the banking page,
then it's going to read from

788
00:35:08.950 --> 00:35:11.980
the database and get things
related to the user, like his

789
00:35:11.980 --> 00:35:14.720
name, his current account,
authentication tokens to let

790
00:35:14.720 --> 00:35:17.090
him make transfers, and
things like that.

791
00:35:17.090 --> 00:35:19.610
The other option is, you could
put serialized data objects

792
00:35:19.610 --> 00:35:20.790
into the DOM.

793
00:35:20.790 --> 00:35:25.720
So if you want Dart to pick up
something that GWT has to send

794
00:35:25.720 --> 00:35:27.950
to it, one option is just create
an element, like a div

795
00:35:27.950 --> 00:35:31.240
element, use display none, and
put some data in there.

796
00:35:31.240 --> 00:35:34.660
And then give it an
id, like an id =

797
00:35:34.660 --> 00:35:35.780
data object or something.

798
00:35:35.780 --> 00:35:37.810
And then just have Dart
look it up and parse

799
00:35:37.810 --> 00:35:38.890
the JSON out of it.

800
00:35:38.890 --> 00:35:40.950
That's another option.

801
00:35:40.950 --> 00:35:43.150
Probably the cleanest mechanism

802
00:35:43.150 --> 00:35:44.370
is just to use messaging.

803
00:35:44.370 --> 00:35:47.480
So in the new HTML5 browsers.
you have window.postMessage().

804
00:35:47.480 --> 00:35:49.070
So you can use this
for communication

805
00:35:49.070 --> 00:35:50.170
between GWT and Dart.

806
00:35:50.170 --> 00:35:52.630
Have Dart listen on window
object for messages and just

807
00:35:52.630 --> 00:35:55.580
have GWT post messages, so you
can transfer data back and

808
00:35:55.580 --> 00:36:01.130
forth between the two running
apps that way.

809
00:36:01.130 --> 00:36:05.230
So one thing, as a GWT
programmer, you're probably

810
00:36:05.230 --> 00:36:08.820
wondering about is something
like JSNI.

811
00:36:08.820 --> 00:36:11.190
And we got a lot of mileage
out of that with GWT.

812
00:36:11.190 --> 00:36:14.880
Early on in GWT's adoption,
there were a lot of JavaScript

813
00:36:14.880 --> 00:36:15.690
libraries out there.

814
00:36:15.690 --> 00:36:17.690
We didn't have really
killer widgets.

815
00:36:17.690 --> 00:36:19.780
GWT widgets really looked
terrible out of the box.

816
00:36:19.780 --> 00:36:22.540
And so people we're going and
picking up jQuery or picking

817
00:36:22.540 --> 00:36:24.080
up Ext JS and things like
that and they were

818
00:36:24.080 --> 00:36:25.630
wrapping them with GWT.

819
00:36:25.630 --> 00:36:28.150
And that really held people over
until we could actually

820
00:36:28.150 --> 00:36:29.960
deliver better widgets
in later versions.

821
00:36:29.960 --> 00:36:32.450
And so you might be thinking,
well I'll do that for Dart.

822
00:36:32.450 --> 00:36:36.110
I'll use Dart and I'll wrap some
cool widgets until the

823
00:36:36.110 --> 00:36:38.270
Dart team delivers the
better widget set.

824
00:36:38.270 --> 00:36:41.910
Unfortunately, Dart does
not have JSNI.

825
00:36:41.910 --> 00:36:43.900
And there's a very good
reason for that.

826
00:36:43.900 --> 00:36:46.880
And so you might think of
Dart as it is today as

827
00:36:46.880 --> 00:36:48.800
a Dart-to-JS compiler.

828
00:36:48.800 --> 00:36:52.760
But Dart as it's envisioned is
actually a virtual machine

829
00:36:52.760 --> 00:36:56.720
that runs just like V8 does,
but it runs Dart code.

830
00:36:56.720 --> 00:36:58.810
And so because it's another
virtual machine in the

831
00:36:58.810 --> 00:37:00.320
browser, it's separate
from V8.

832
00:37:00.320 --> 00:37:01.500
It has a separate heap.

833
00:37:01.500 --> 00:37:03.920
So you can't just pass an object
reference from one to

834
00:37:03.920 --> 00:37:06.160
the other, because they live
in different memory spaces.

835
00:37:06.160 --> 00:37:08.030
Probably even different
process sandboxes.

836
00:37:08.030 --> 00:37:12.000
So that wouldn't be very
efficient, even if you could

837
00:37:12.000 --> 00:37:14.530
pull it off.

838
00:37:14.530 --> 00:37:19.870
But there still is a need for
you to make calls from Dart to

839
00:37:19.870 --> 00:37:20.970
JavaScript and vice versa.

840
00:37:20.970 --> 00:37:22.360
There's no question
about that.

841
00:37:22.360 --> 00:37:23.420
There is a need to do that.

842
00:37:23.420 --> 00:37:25.700
Like, you might want to interact
with the Maps API

843
00:37:25.700 --> 00:37:29.120
from Google, and there's
no Dart Maps API yet.

844
00:37:29.120 --> 00:37:31.720
And so there has to be
a way to do this.

845
00:37:31.720 --> 00:37:34.870
And fortunately, there
is a way to do it.

846
00:37:34.870 --> 00:37:37.150
There's an unofficial way--

847
00:37:37.150 --> 00:37:39.390
quite a few, actually, which
I'm going to show you.

848
00:37:39.390 --> 00:37:41.910
And I'm going to make you a
promise that we're actually

849
00:37:41.910 --> 00:37:44.840
working on it, and actually, a
real nice solution will be

850
00:37:44.840 --> 00:37:46.460
coming later down the pipe.

851
00:37:46.460 --> 00:37:49.910
So what are the ways
we can do this?

852
00:37:49.910 --> 00:37:51.875
Well one way is this
postMessage() communication,

853
00:37:51.875 --> 00:37:53.480
like I just discussed.

854
00:37:53.480 --> 00:37:57.410
So what you could do is you
could have JavaScript listen

855
00:37:57.410 --> 00:38:01.250
for window.onmessage, and
anything that basically comes

856
00:38:01.250 --> 00:38:04.090
in through a message, you
just run eval on it.

857
00:38:04.090 --> 00:38:07.310
And then likewise, in
the Dart world--

858
00:38:07.310 --> 00:38:09.290
this is Dart code here--

859
00:38:09.290 --> 00:38:11.970
you do postMessage, and in
there you put JavaScript.

860
00:38:11.970 --> 00:38:14.920
And then so the JavaScript event
handler gets triggered

861
00:38:14.920 --> 00:38:15.920
and it just runs eval.

862
00:38:15.920 --> 00:38:20.120
So I've made a call from Dart
to JavaScript in that way.

863
00:38:20.120 --> 00:38:22.080
It's not pretty, but it works.

864
00:38:22.080 --> 00:38:26.130
Another solution that people do,
because you have a little

865
00:38:26.130 --> 00:38:28.680
bit more control, is script
tag injections.

866
00:38:28.680 --> 00:38:32.310
So in Dart code, you could just
create a script tag, set

867
00:38:32.310 --> 00:38:36.330
its text attribute to be the
JavaScript text, and insert it

868
00:38:36.330 --> 00:38:39.080
into the body of the browser
document, and it

869
00:38:39.080 --> 00:38:41.820
will just be evaluated.

870
00:38:41.820 --> 00:38:45.040
But that's only uni-directional
communication,

871
00:38:45.040 --> 00:38:50.170
and you can't build an API if
you can't get any values back

872
00:38:50.170 --> 00:38:53.310
after you evaluate the code.

873
00:38:53.310 --> 00:38:55.850
You could have bi-directional
messaging.

874
00:38:55.850 --> 00:38:57.940
So I could send the message to
JavaScript, and it'll say,

875
00:38:57.940 --> 00:39:00.090
call this method on Google
Maps for me.

876
00:39:00.090 --> 00:39:03.560
Google Maps dot
setCurrentLongitude = 10.

877
00:39:03.560 --> 00:39:07.180
But the problem is, I can't get
any return value from that

878
00:39:07.180 --> 00:39:08.280
function back.

879
00:39:08.280 --> 00:39:10.930
You could make the JavaScript
then post the message back to

880
00:39:10.930 --> 00:39:13.420
Dart and have Dart listen for a
message, which then has the

881
00:39:13.420 --> 00:39:14.570
return value in it.

882
00:39:14.570 --> 00:39:16.680
And in that case, it would
look very much like

883
00:39:16.680 --> 00:39:22.120
asynchronous JSON-RPC back and
forth between the server.

884
00:39:22.120 --> 00:39:26.160
But the API that could be built
around that would look

885
00:39:26.160 --> 00:39:26.860
pretty nasty.

886
00:39:26.860 --> 00:39:29.400
For example, every getter and
setter would have to take a

887
00:39:29.400 --> 00:39:33.400
closure that would be called
back into with the return

888
00:39:33.400 --> 00:39:35.310
value when it was ready.

889
00:39:35.310 --> 00:39:37.160
You have got to remember,
the browser isn't always

890
00:39:37.160 --> 00:39:37.700
synchronous.

891
00:39:37.700 --> 00:39:40.120
So if you ask the browser to do
something, it could do it

892
00:39:40.120 --> 00:39:42.500
immediately, or actually,
it could do it

893
00:39:42.500 --> 00:39:44.480
at next event loop.

894
00:39:44.480 --> 00:39:48.190
And so you have to basically
pass it a callback because it

895
00:39:48.190 --> 00:39:50.450
could be executed
at a later time.

896
00:39:50.450 --> 00:39:55.830
And so this would lead to a
really poor API experience.

897
00:39:55.830 --> 00:39:59.400
But it turns out, there's
actually an API in a browser.

898
00:39:59.400 --> 00:40:02.790
It's one of the very few
synchronous XHRs or another

899
00:40:02.790 --> 00:40:07.950
that actually is synchronous,
meaning it actually blocks

900
00:40:07.950 --> 00:40:10.270
until it finishes executing.

901
00:40:10.270 --> 00:40:12.580
And it's called dispatchEvent().

902
00:40:12.580 --> 00:40:15.440
And what it allows you to do is
to fire off an event, like

903
00:40:15.440 --> 00:40:18.680
onClick or something like that,
and it will be handled

904
00:40:18.680 --> 00:40:19.320
immediately.

905
00:40:19.320 --> 00:40:23.000
Not the next time the browser
goes to the event loop, or

906
00:40:23.000 --> 00:40:26.020
after all the set timeouts
run, but right now.

907
00:40:26.020 --> 00:40:30.870
And so that gives us a hack or
sort of a doorway to get true

908
00:40:30.870 --> 00:40:33.220
synchronous bi-directional
messaging between Dart and

909
00:40:33.220 --> 00:40:34.140
JavaScript.

910
00:40:34.140 --> 00:40:37.980
And the essential way you'll
do it is this.

911
00:40:37.980 --> 00:40:43.120
You're going to invent a
new custom event name.

912
00:40:43.120 --> 00:40:44.250
And you can do that
in JavaScript.

913
00:40:44.250 --> 00:40:45.180
You can make your own events.

914
00:40:45.180 --> 00:40:47.720
You don't have to just use
onClick or mouseover.

915
00:40:47.720 --> 00:40:52.440
And I'll call it 'dartjsni',
just for GWT'S sake.

916
00:40:52.440 --> 00:40:54.050
And then what you're going to do
is you're going to register

917
00:40:54.050 --> 00:40:57.950
an event listener in Dart via
window.addEventListener and

918
00:40:57.950 --> 00:41:03.190
look for this 'dartjsni' event
to happen, and do something

919
00:41:03.190 --> 00:41:04.260
when it does happen.

920
00:41:04.260 --> 00:41:06.360
And then you're going to
construct a serialization

921
00:41:06.360 --> 00:41:07.740
format for RPC calls.

922
00:41:07.740 --> 00:41:09.830
Maybe you just take the method
name and all the arguments

923
00:41:09.830 --> 00:41:11.530
that you want to call and you
serialize them in a JSON

924
00:41:11.530 --> 00:41:13.300
object or something.

925
00:41:13.300 --> 00:41:16.680
And you have the callback
that's looking for that

926
00:41:16.680 --> 00:41:20.240
'dartjsni' event deserialize
it and evaluate it.

927
00:41:20.240 --> 00:41:22.540
Then you're going to invent
another event name-- let's

928
00:41:22.540 --> 00:41:24.260
call it 'returnjsni'--

929
00:41:24.260 --> 00:41:26.520
and it's going to take the
return value, serialize it,

930
00:41:26.520 --> 00:41:28.960
and then fire via
window.dispatchEvent this

931
00:41:28.960 --> 00:41:32.060
'returnjsni' event.

932
00:41:32.060 --> 00:41:34.980
And then in the Dart code,
you're going to be looking for

933
00:41:34.980 --> 00:41:40.110
window.OnDartjsni event handler,
and that's going to

934
00:41:40.110 --> 00:41:42.430
be the return value.

935
00:41:42.430 --> 00:41:44.730
And what makes this all work
is that when both sides use

936
00:41:44.730 --> 00:41:48.330
dispatchEvent(), there
is no asynchronicity.

937
00:41:48.330 --> 00:41:50.350
You fire the event and it
immediately evokes the

938
00:41:50.350 --> 00:41:51.660
callback on the JavaScript
side.

939
00:41:51.660 --> 00:41:54.100
The JavaScript side does the
evaluation and invokes

940
00:41:54.100 --> 00:41:56.550
dispatchEvent for 'returnjsni'
and it immediately runs the

941
00:41:56.550 --> 00:42:02.040
Dart event handler, all in
one synchronous loop.

942
00:42:02.040 --> 00:42:03.190
This is just a picture of it.

943
00:42:03.190 --> 00:42:05.240
It's probably not very
useful for you.

944
00:42:05.240 --> 00:42:06.985
But I tried to draw
how it would work.

945
00:42:06.985 --> 00:42:10.270
946
00:42:10.270 --> 00:42:12.320
I'm just going to skip
that picture for now.

947
00:42:12.320 --> 00:42:16.640
So you could make the
JSNI mappings even

948
00:42:16.640 --> 00:42:17.720
more natural, right?

949
00:42:17.720 --> 00:42:21.200
Like what if you just wanted
to have a Dart object, and

950
00:42:21.200 --> 00:42:24.580
when you refer on that Dart
object to any field or any

951
00:42:24.580 --> 00:42:27.830
method, it actually is kind of
a mirror or a proxy directly

952
00:42:27.830 --> 00:42:28.250
into JavaScript.

953
00:42:28.250 --> 00:42:30.600
It kind of represents a
JavaScript object on the other

954
00:42:30.600 --> 00:42:32.300
side of the fence.

955
00:42:32.300 --> 00:42:35.870
And so Dart has two features
that actually almost make this

956
00:42:35.870 --> 00:42:39.130
look completely natural and
almost like the JavaScript's

957
00:42:39.130 --> 00:42:39.820
not even involved.

958
00:42:39.820 --> 00:42:42.000
The first is operator
overloading.

959
00:42:42.000 --> 00:42:45.610
So you can implement
the operator[]--

960
00:42:45.610 --> 00:42:47.960
and here I have a class
called JsProxy--

961
00:42:47.960 --> 00:42:49.840
and it takes a field name.

962
00:42:49.840 --> 00:42:52.480
And then what you do is you
make that synchronous call

963
00:42:52.480 --> 00:42:54.720
over using that Dart
JSNI method I just

964
00:42:54.720 --> 00:42:56.140
described how you'd do.

965
00:42:56.140 --> 00:43:00.420
And you index the field name on
the object reference that

966
00:43:00.420 --> 00:43:04.690
you're holding on to, that this
proxy object represents.

967
00:43:04.690 --> 00:43:06.960
Dart has another feature I
haven't described yet.

968
00:43:06.960 --> 00:43:10.170
Because it's a dynamic language,
what I said earlier

969
00:43:10.170 --> 00:43:14.020
was is that you can try to
access or invoke anything on

970
00:43:14.020 --> 00:43:16.260
an object, even though it's the
wrong type, and it will

971
00:43:16.260 --> 00:43:17.850
still try it.

972
00:43:17.850 --> 00:43:20.240
And if it fails, it doesn't
fail completely.

973
00:43:20.240 --> 00:43:22.630
What it does is it invokes
noSuchMethod.

974
00:43:22.630 --> 00:43:24.700
So it's a magical method.

975
00:43:24.700 --> 00:43:27.070
You could put it on a Dart class
to override it, and it

976
00:43:27.070 --> 00:43:29.470
will be called for any method
that it can't find, that

977
00:43:29.470 --> 00:43:30.970
someone tried to invoke.

978
00:43:30.970 --> 00:43:35.040
And so in this way, you could
make a JsProxy class that can

979
00:43:35.040 --> 00:43:40.640
invoke any JavaScript method
that exists in the JSVM by

980
00:43:40.640 --> 00:43:42.190
defining a noSuchMethod.

981
00:43:42.190 --> 00:43:43.960
It takes the name of the method
someone's trying to

982
00:43:43.960 --> 00:43:45.660
invoke and a list of the
arguments, and then you just

983
00:43:45.660 --> 00:43:48.660
make a synchronous call using
what I just described in the

984
00:43:48.660 --> 00:43:49.670
previous slide.

985
00:43:49.670 --> 00:43:53.972
And it will return the value as
if that method existed on

986
00:43:53.972 --> 00:43:57.220
the JsProxy object by going to
JavaScript and asking it to

987
00:43:57.220 --> 00:43:59.130
evaluate it.

988
00:43:59.130 --> 00:44:01.450
So that's another interesting
idiom or

989
00:44:01.450 --> 00:44:04.900
example you could use.

990
00:44:04.900 --> 00:44:08.330
And if you wanted to invoke GWT
code directly from Dart or

991
00:44:08.330 --> 00:44:11.810
vice versa, I would advocate
using a library I wrote called

992
00:44:11.810 --> 00:44:12.990
GWT Exporter.

993
00:44:12.990 --> 00:44:16.150
And what that allows you to do
is to put @Export annotations

994
00:44:16.150 --> 00:44:18.190
on your classes and
Java methods.

995
00:44:18.190 --> 00:44:23.510
And what it does is it manually
declares JavaScript

996
00:44:23.510 --> 00:44:27.360
exports in the top-level window
object of the page.

997
00:44:27.360 --> 00:44:29.700
And then once you've got those
things exposed to JavaScript,

998
00:44:29.700 --> 00:44:32.760
then you can use the Dart JSNI
method technique I showed you

999
00:44:32.760 --> 00:44:35.810
to just call directly
into GWT.

1000
00:44:35.810 --> 00:44:38.560
Likewise, if you wanted to do
it the other way around, you

1001
00:44:38.560 --> 00:44:42.930
could export Dart functions into
JavaScript by writing a

1002
00:44:42.930 --> 00:44:46.895
JavaScript function which, when
invoked, uses the Dart

1003
00:44:46.895 --> 00:44:49.690
JSNI mechanism to send a message
over to Dart and say,

1004
00:44:49.690 --> 00:44:52.770
I'm invoking this method
on this Dart class.

1005
00:44:52.770 --> 00:44:57.610
However what I've just shown
you, it's really complicated

1006
00:44:57.610 --> 00:44:58.580
and it's kind of a hack.

1007
00:44:58.580 --> 00:45:01.070
And I would not advocate using
it, except for specialized

1008
00:45:01.070 --> 00:45:04.850
scenarios like trying to create
a really nice mapping

1009
00:45:04.850 --> 00:45:06.610
for, like, the Google Maps
library or some other

1010
00:45:06.610 --> 00:45:09.400
JavaScript library, where it
would be painful to have an

1011
00:45:09.400 --> 00:45:11.580
asynchronous approach.

1012
00:45:11.580 --> 00:45:13.680
Otherwise, I would suggest,
just use postMessage.

1013
00:45:13.680 --> 00:45:17.710
It's the easiest thing and
the least likely to fail.

1014
00:45:17.710 --> 00:45:20.410
And for the record, we actually
don't know how much

1015
00:45:20.410 --> 00:45:21.730
longer dispatch will
be around.

1016
00:45:21.730 --> 00:45:24.470
It could very well be that the
HTML5 committee could say

1017
00:45:24.470 --> 00:45:26.030
tomorrow, we're removing that.

1018
00:45:26.030 --> 00:45:28.610
1019
00:45:28.610 --> 00:45:33.310
So in summary I just wanted to
say that Dart is a cool new

1020
00:45:33.310 --> 00:45:35.040
dynamic language.

1021
00:45:35.040 --> 00:45:37.770
It takes some of the best things
from JavaScript, which

1022
00:45:37.770 --> 00:45:40.820
is the ability to start up
quickly without a compile

1023
00:45:40.820 --> 00:45:44.440
pass, to have the program
run even though

1024
00:45:44.440 --> 00:45:45.310
the types are wrong.

1025
00:45:45.310 --> 00:45:47.270
So you can iterate on
something, even

1026
00:45:47.270 --> 00:45:49.360
if you've got errors.

1027
00:45:49.360 --> 00:45:53.620
But also to allow the language
to be tooled and tested with

1028
00:45:53.620 --> 00:45:56.550
compile-time static
tool chains.

1029
00:45:56.550 --> 00:46:00.060
It offers a lightweight DOM
programming library for now,

1030
00:46:00.060 --> 00:46:02.650
but later on, it will have
a very rich library.

1031
00:46:02.650 --> 00:46:04.150
That's the whole point of
having a structured

1032
00:46:04.150 --> 00:46:05.120
programming language.

1033
00:46:05.120 --> 00:46:08.120
They invented all of this new
syntax for a type system.

1034
00:46:08.120 --> 00:46:09.610
They're going to build
a really rich

1035
00:46:09.610 --> 00:46:11.220
library to support it.

1036
00:46:11.220 --> 00:46:15.690
It's not going to be very raw
and basic like JavaScript.

1037
00:46:15.690 --> 00:46:17.590
Try converting some simple
GWT libraries.

1038
00:46:17.590 --> 00:46:18.230
Get your feet wet.

1039
00:46:18.230 --> 00:46:20.680
Pick the simplest thing in your
project and say, what

1040
00:46:20.680 --> 00:46:21.570
would this look like in Dart?

1041
00:46:21.570 --> 00:46:22.270
Just play around with it.

1042
00:46:22.270 --> 00:46:23.310
Have some fun.

1043
00:46:23.310 --> 00:46:24.570
Or integrate--

1044
00:46:24.570 --> 00:46:27.370
try to add a new page your app
by basically writing it in

1045
00:46:27.370 --> 00:46:30.950
Dart and using the hashtag
history routing to integrate

1046
00:46:30.950 --> 00:46:33.140
it into the page.

1047
00:46:33.140 --> 00:46:35.710
I would advocate, even if you're
not going to use Dart,

1048
00:46:35.710 --> 00:46:38.070
to look at the GWT Activities
and Places model if you're not

1049
00:46:38.070 --> 00:46:38.780
using it already.

1050
00:46:38.780 --> 00:46:41.310
Because it will help
you in the future.

1051
00:46:41.310 --> 00:46:45.800
And finally, if you're really
adventurous, try hacking a

1052
00:46:45.800 --> 00:46:48.730
Dart JSNI library.

1053
00:46:48.730 --> 00:46:51.590
You could probably release it,
and if you do it quick enough,

1054
00:46:51.590 --> 00:46:54.390
everyone might use it.

1055
00:46:54.390 --> 00:46:56.230
So that's my presentation.

1056
00:46:56.230 --> 00:46:58.340
Hope you guys got something
out of it.

1057
00:46:58.340 --> 00:47:00.660
And I'm open to taking
some questions.

1058
00:47:00.660 --> 00:47:08.830
[APPLAUSE]

1059
00:47:08.830 --> 00:47:09.050
AUDIENCE: Yeah.

1060
00:47:09.050 --> 00:47:12.480
You mentioned
internationalization and

1061
00:47:12.480 --> 00:47:13.760
string interpolation.

1062
00:47:13.760 --> 00:47:15.650
RAY CROMWELL: Yes.

1063
00:47:15.650 --> 00:47:19.293
AUDIENCE: I wonder, do you have
an example of that, like

1064
00:47:19.293 --> 00:47:21.170
how it works in Dart?

1065
00:47:21.170 --> 00:47:23.980
I'm using it in GWT, but to
migrate some stuff, I'm going

1066
00:47:23.980 --> 00:47:25.360
to need to move it do Dart.

1067
00:47:25.360 --> 00:47:27.260
RAY CROMWELL: Yeah, that's
a good question for me.

1068
00:47:27.260 --> 00:47:30.530
[INAUDIBLE], do you happen
to know the idiom for

1069
00:47:30.530 --> 00:47:31.878
doing that in Dart?

1070
00:47:31.878 --> 00:47:34.120
AUDIENCE: [INAUDIBLE]

1071
00:47:34.120 --> 00:47:35.660
RAY CROMWELL: What I was
thinking of, when I wrote

1072
00:47:35.660 --> 00:47:39.010
that, was basically using the
string interpolation to define

1073
00:47:39.010 --> 00:47:43.710
the templates like you would do
it in a Messages class in

1074
00:47:43.710 --> 00:47:48.420
GWT and basically create the
equivalent of a Dart

1075
00:47:48.420 --> 00:47:51.200
ResourceBundle but using
JSON structures.

1076
00:47:51.200 --> 00:47:54.000
And then write in a little
utility library to basically

1077
00:47:54.000 --> 00:47:56.710
perform the equivalent of what
gets code generated in GWT,

1078
00:47:56.710 --> 00:48:00.540
which is to take the template
and basically apply the JSON

1079
00:48:00.540 --> 00:48:02.596
to it to fill out
the template.

1080
00:48:02.596 --> 00:48:03.610
Yeah, sorry.

1081
00:48:03.610 --> 00:48:05.645
I probably should have fleshed
that out more.

1082
00:48:05.645 --> 00:48:08.260
I probably ran out of time,
doing my slides.

1083
00:48:08.260 --> 00:48:09.195
AUDIENCE: That's fine.

1084
00:48:09.195 --> 00:48:13.060
And I'm looking for something a
little bit more formal with

1085
00:48:13.060 --> 00:48:14.800
the Places and Activities.

1086
00:48:14.800 --> 00:48:16.720
Is there something like
that planned for Dart?

1087
00:48:16.720 --> 00:48:21.170
Or is it just like window.on
listening

1088
00:48:21.170 --> 00:48:22.630
for that native event?

1089
00:48:22.630 --> 00:48:24.690
RAY CROMWELL: Yeah I don't
know the answer to that.

1090
00:48:24.690 --> 00:48:28.440
But I believe the Dart team is
working on rich object models.

1091
00:48:28.440 --> 00:48:30.730
And they're probably looking
at MBC or MBP.

1092
00:48:30.730 --> 00:48:32.334
Do you happen to know, Vijay?

1093
00:48:32.334 --> 00:48:53.110
VIJAY:MENON: [INAUDIBLE]

1094
00:48:53.110 --> 00:48:55.220
RAY CROMWELL: So just in case no
one heard that, they built

1095
00:48:55.220 --> 00:48:57.670
a really nice application
called Swarm.

1096
00:48:57.670 --> 00:48:59.510
And what they're doing is
they're taking the lessons

1097
00:48:59.510 --> 00:49:02.470
learned from building that rich
UI and the way they've

1098
00:49:02.470 --> 00:49:05.840
organized it and basically
trying to extract the

1099
00:49:05.840 --> 00:49:08.320
libraries and the patterns out
of it that they're going to

1100
00:49:08.320 --> 00:49:09.010
use for Dart.

1101
00:49:09.010 --> 00:49:11.730
And so I don't think that
they have anything

1102
00:49:11.730 --> 00:49:12.920
today that's concrete.

1103
00:49:12.920 --> 00:49:18.730
But I do believe that-- because
Seth Ladd is heavily

1104
00:49:18.730 --> 00:49:23.830
involved in interacting with
the community who's

1105
00:49:23.830 --> 00:49:24.710
dealing with Dart.

1106
00:49:24.710 --> 00:49:28.040
And Seth is a really big fan
of MBC and MBP stuff.

1107
00:49:28.040 --> 00:49:31.050
So there probably will be
something that great.

1108
00:49:31.050 --> 00:49:33.190
But sorry, I don't
know the answer.

1109
00:49:33.190 --> 00:49:33.880
AUDIENCE: That's OK.

1110
00:49:33.880 --> 00:49:35.480
Last question, I promise.

1111
00:49:35.480 --> 00:49:38.930
When I last looked at Dart,
it said "Alpha" on it.

1112
00:49:38.930 --> 00:49:42.110
Do we know when it's going
to be promoted?

1113
00:49:42.110 --> 00:49:44.570
RAY CROMWELL: Is Lars
or Vijay here?

1114
00:49:44.570 --> 00:49:46.120
Vijay, do you want
to take that?

1115
00:49:46.120 --> 00:49:47.370
VIJAY MENON: [INAUDIBLE]

1116
00:49:47.370 --> 00:49:49.440
1117
00:49:49.440 --> 00:49:50.000
RAY CROMWELL: I'll
just repeat you.

1118
00:49:50.000 --> 00:49:53.395
VIJAY MENON: You can get an
official answer from Lars.

1119
00:49:53.395 --> 00:49:54.645
[INAUDIBLE]

1120
00:49:54.645 --> 00:49:56.790
1121
00:49:56.790 --> 00:49:57.760
RAY CROMWELL: Ah.

1122
00:49:57.760 --> 00:50:00.090
VIJAY MENON: My understanding
is that later this year,

1123
00:50:00.090 --> 00:50:03.357
there'll be more of an official
release, but I'm not

1124
00:50:03.357 --> 00:50:05.340
exactly sure we've said
what the date is

1125
00:50:05.340 --> 00:50:06.150
going to be on that.

1126
00:50:06.150 --> 00:50:07.700
AUDIENCE: OK.

1127
00:50:07.700 --> 00:50:08.600
RAY CROMWELL: So later this
year, there will be an

1128
00:50:08.600 --> 00:50:09.160
official answer.

1129
00:50:09.160 --> 00:50:11.400
But if you go talk to Lars,
just track him down--

1130
00:50:11.400 --> 00:50:14.290
he's kind of a very tall
guy with glasses--

1131
00:50:14.290 --> 00:50:16.000
he could probably give you
a more concrete answer.

1132
00:50:16.000 --> 00:50:17.730
But I do believe, at least
from my own personal

1133
00:50:17.730 --> 00:50:20.720
experience, the language spec
seems to be settling down very

1134
00:50:20.720 --> 00:50:21.215
nicely now.

1135
00:50:21.215 --> 00:50:23.170
And so it's probably
going to exit the

1136
00:50:23.170 --> 00:50:25.450
Alpha phase very soon.

1137
00:50:25.450 --> 00:50:25.710
AUDIENCE: Great.

1138
00:50:25.710 --> 00:50:25.940
Thank you.

1139
00:50:25.940 --> 00:50:27.130
RAY CROMWELL: But that shouldn't
dissuade you from

1140
00:50:27.130 --> 00:50:28.200
trying it, right?

1141
00:50:28.200 --> 00:50:30.180
Have some fun with it.

1142
00:50:30.180 --> 00:50:30.860
VIJAY MENON: OK.

1143
00:50:30.860 --> 00:50:31.360
Sorry.

1144
00:50:31.360 --> 00:50:33.890
Just to add in-- we do have
teams in Google who are

1145
00:50:33.890 --> 00:50:34.800
starting to use Dart.

1146
00:50:34.800 --> 00:50:37.910
So even though we're still
working on it, it's pretty

1147
00:50:37.910 --> 00:50:39.380
usable today.

1148
00:50:39.380 --> 00:50:40.740
They wouldn't be using
it if it wasn't.

1149
00:50:40.740 --> 00:50:43.480
1150
00:50:43.480 --> 00:50:43.965
AUDIENCE: Hi there.

1151
00:50:43.965 --> 00:50:46.630
Are there any legs to the rumor
that GWT is looking for

1152
00:50:46.630 --> 00:50:48.910
new intermediate language, and
that intermediate language

1153
00:50:48.910 --> 00:50:52.850
might be Dart?

1154
00:50:52.850 --> 00:50:53.810
RAY CROMWELL: Yeah, there's
nothing official.

1155
00:50:53.810 --> 00:50:55.120
There's been some
talk about that.

1156
00:50:55.120 --> 00:50:57.550
I know I've thought about it
personally, of building a Dart

1157
00:50:57.550 --> 00:50:58.530
back end for GWT.

1158
00:50:58.530 --> 00:51:04.440
So if and when Chrome actually
has the Dart VM built into it,

1159
00:51:04.440 --> 00:51:06.430
it might be the case that
either one of two

1160
00:51:06.430 --> 00:51:07.190
things might happen.

1161
00:51:07.190 --> 00:51:10.300
Either someone might build a
back-end for GWT that emits

1162
00:51:10.300 --> 00:51:12.890
Dart code, compiles the Dart,
just to take advantage of the

1163
00:51:12.890 --> 00:51:15.490
speed and start-up time
improvements that the Dart VM

1164
00:51:15.490 --> 00:51:16.810
will have over V8.

1165
00:51:16.810 --> 00:51:18.680
The other option, actually, and
I think this is probably

1166
00:51:18.680 --> 00:51:21.080
more likely, is that someone
will build a tool that

1167
00:51:21.080 --> 00:51:25.500
actually will help migrate Java
code to Dart in case you

1168
00:51:25.500 --> 00:51:28.430
want to basically port
some code over.

1169
00:51:28.430 --> 00:51:30.750
There are some difficulties in
compiling GWT code to Dart

1170
00:51:30.750 --> 00:51:32.080
because of JavaScript.

1171
00:51:32.080 --> 00:51:36.320
So you can imagine, any large
GWT application at sort of the

1172
00:51:36.320 --> 00:51:39.360
leaves of the program, deepest
down, is going to have JSNI

1173
00:51:39.360 --> 00:51:40.910
method calls to deal
with the browser.

1174
00:51:40.910 --> 00:51:44.210
And so those would have to be
replaced with the Dart library

1175
00:51:44.210 --> 00:51:44.880
equivalents.

1176
00:51:44.880 --> 00:51:48.740
So if someone's calling, like,
dom.getElementById, rather

1177
00:51:48.740 --> 00:51:52.350
than making a JSNI call there,
which would have to use this

1178
00:51:52.350 --> 00:51:54.640
hack, it would have to replace
it with the equivalent

1179
00:51:54.640 --> 00:51:58.260
dart:html library and call
the actual Dart method.

1180
00:51:58.260 --> 00:52:00.330
And it's certainly possible to
do that, but it would actually

1181
00:52:00.330 --> 00:52:03.280
be a lot of mapping work.

1182
00:52:03.280 --> 00:52:04.020
But yeah.

1183
00:52:04.020 --> 00:52:05.080
We've talked about it.

1184
00:52:05.080 --> 00:52:07.210
If I have nothing
official to say.

1185
00:52:07.210 --> 00:52:09.820
AUDIENCE: Thank you.

1186
00:52:09.820 --> 00:52:11.450
AUDIENCE: Do you think
there's going to--

1187
00:52:11.450 --> 00:52:13.020
when they finally get
to release, will

1188
00:52:13.020 --> 00:52:14.250
they have the widgets?

1189
00:52:14.250 --> 00:52:18.960
And will they be similar to
what GWT has already?

1190
00:52:18.960 --> 00:52:19.970
RAY CROMWELL: They
probably will be.

1191
00:52:19.970 --> 00:52:21.900
So I don't know, actually, the
timeline on the widgets.

1192
00:52:21.900 --> 00:52:24.840
But I know what their philosophy
and intention is.

1193
00:52:24.840 --> 00:52:26.680
And so their philosophy and
intention is actually to

1194
00:52:26.680 --> 00:52:29.260
deliver widgets that probably
go far beyond what GWT has.

1195
00:52:29.260 --> 00:52:33.500
So GWT, when it started,
basically they wanted it to be

1196
00:52:33.500 --> 00:52:34.460
more like JavaScript.

1197
00:52:34.460 --> 00:52:36.115
We didn't want to be very
opinionated about what the

1198
00:52:36.115 --> 00:52:38.740
widgets looked like, so the
first GWT widgets were very

1199
00:52:38.740 --> 00:52:40.100
ugly out of the box.

1200
00:52:40.100 --> 00:52:41.820
They didn't provide very
much styling at all.

1201
00:52:41.820 --> 00:52:43.830
Later, we got some sense
knocked into us, and we

1202
00:52:43.830 --> 00:52:45.720
realized most programmers
can't take the time to

1203
00:52:45.720 --> 00:52:46.930
actually style all
their widgets.

1204
00:52:46.930 --> 00:52:48.930
We should provide some default
that actually looks

1205
00:52:48.930 --> 00:52:49.720
reasonable.

1206
00:52:49.720 --> 00:52:50.620
And we did that.

1207
00:52:50.620 --> 00:52:52.910
But still, it's nothing compared
to what Sencha has,

1208
00:52:52.910 --> 00:52:53.480
for example.

1209
00:52:53.480 --> 00:52:54.210
Right?

1210
00:52:54.210 --> 00:52:56.340
And so that was probably
a mistake

1211
00:52:56.340 --> 00:52:58.920
early in the GWT design.

1212
00:52:58.920 --> 00:53:02.060
The Dart team, I think, is
eyeing the fact that people

1213
00:53:02.060 --> 00:53:04.690
want to design apps and they
want to design them to be

1214
00:53:04.690 --> 00:53:06.810
productive, and they want
to wow their consumers.

1215
00:53:06.810 --> 00:53:08.600
And so you need not just
a widget library.

1216
00:53:08.600 --> 00:53:10.890
You need a very sexy widget
library out of the box.

1217
00:53:10.890 --> 00:53:14.450
And so they're actually aiming
to make something that's very

1218
00:53:14.450 --> 00:53:15.660
lickable, something that
you're going to

1219
00:53:15.660 --> 00:53:16.780
love out of the box.

1220
00:53:16.780 --> 00:53:18.050
And it's going to be
very opinionated.

1221
00:53:18.050 --> 00:53:20.970
So the slider widget is going
to look the way the Dart

1222
00:53:20.970 --> 00:53:23.450
user-interface designer
wants it to look.

1223
00:53:23.450 --> 00:53:25.290
And it might not look the way
you want it to look, but it's

1224
00:53:25.290 --> 00:53:26.920
probably going to look
really sweet.

1225
00:53:26.920 --> 00:53:29.210
And so that's basically what
they're looking at.

1226
00:53:29.210 --> 00:53:32.384
Am I summarizing correctly,
Vijay?

1227
00:53:32.384 --> 00:53:33.350
OK.

1228
00:53:33.350 --> 00:53:35.210
I'm actually not part of the
Dart team, so I don't want to

1229
00:53:35.210 --> 00:53:35.956
speak too much about it.

1230
00:53:35.956 --> 00:53:38.050
But I overheard some
conversations.

1231
00:53:38.050 --> 00:53:38.315
OK?

1232
00:53:38.315 --> 00:53:39.140
You have another?

1233
00:53:39.140 --> 00:53:42.990
AUDIENCE: Also, I've got a lot
of applications on App Engine.

1234
00:53:42.990 --> 00:53:48.850
And is there a pattern or
something that I can use to

1235
00:53:48.850 --> 00:53:50.492
migrate it to that?

1236
00:53:50.492 --> 00:53:51.710
RAY CROMWELL: You're talking
about App Engine?

1237
00:53:51.710 --> 00:53:54.410
AUDIENCE: App Engine using
RequestFactory.

1238
00:53:54.410 --> 00:53:55.850
RAY CROMWELL: Oh, yeah.

1239
00:53:55.850 --> 00:53:58.380
I actually was going to
discuss this in the

1240
00:53:58.380 --> 00:54:00.690
presentation, but I realized
later I had too many slides

1241
00:54:00.690 --> 00:54:01.540
and I ran out of time.

1242
00:54:01.540 --> 00:54:05.110
But if you're using
RequestFactory, actually--

1243
00:54:05.110 --> 00:54:05.870
I should take this offline.

1244
00:54:05.870 --> 00:54:06.780
There's an extra bonus.

1245
00:54:06.780 --> 00:54:09.580
Because RequestFactory's
JSON-based, it's very possible

1246
00:54:09.580 --> 00:54:13.270
to make Dart client code work
with JSON RequestFactory stuff

1247
00:54:13.270 --> 00:54:14.260
on the server.

1248
00:54:14.260 --> 00:54:15.640
It's not true for GWT-RPC.

1249
00:54:15.640 --> 00:54:18.680
GWT-RPC is very tightly tied
in to the Java type system.

1250
00:54:18.680 --> 00:54:19.860
RequestFactory isn't.

1251
00:54:19.860 --> 00:54:22.790
So actually, it's possible
to make a Dart code call

1252
00:54:22.790 --> 00:54:25.170
server-side Java RequestFactory
code.

1253
00:54:25.170 --> 00:54:29.090
And so maybe I can catch you
offline and discuss that.

1254
00:54:29.090 --> 00:54:31.815
AUDIENCE: Thank you.

1255
00:54:31.815 --> 00:54:32.250
AUDIENCE: OK.

1256
00:54:32.250 --> 00:54:35.870
So my question would be about
GWT-RPC, so you already

1257
00:54:35.870 --> 00:54:36.740
answered it.

1258
00:54:36.740 --> 00:54:43.060
So there's some way to
invoke GWT-RPC calls?

1259
00:54:43.060 --> 00:54:44.170
RAY CROMWELL: Yes.

1260
00:54:44.170 --> 00:54:47.070
That would be kind of difficult
to pull off.

1261
00:54:47.070 --> 00:54:49.810
I could see you constructing
something that would invoke

1262
00:54:49.810 --> 00:54:53.460
it, but I would see it being
hard to actually deal with the

1263
00:54:53.460 --> 00:54:54.620
return value.

1264
00:54:54.620 --> 00:55:00.690
So there are Android clients
that actually invoke GWT-RPC

1265
00:55:00.690 --> 00:55:03.680
because Android also is Java, so
they can deal with the fact

1266
00:55:03.680 --> 00:55:05.740
that when the return value comes
back and it says, like,

1267
00:55:05.740 --> 00:55:09.480
it's an array list of doubles or
something, the classes for

1268
00:55:09.480 --> 00:55:11.800
decoding an array list of
doubles are already present in

1269
00:55:11.800 --> 00:55:13.630
the runtime of Dalvik, right?

1270
00:55:13.630 --> 00:55:16.720
With Dart, if you invoke some
server-side call and you get

1271
00:55:16.720 --> 00:55:20.600
back an array of things that are
Java types, right, there's

1272
00:55:20.600 --> 00:55:22.900
not necessarily something to
map to decode those and

1273
00:55:22.900 --> 00:55:25.130
demarshal them into
on the Dart side.

1274
00:55:25.130 --> 00:55:26.210
So it's a little
more difficult.

1275
00:55:26.210 --> 00:55:28.740
But invoking I could see.

1276
00:55:28.740 --> 00:55:31.180
As long as your API actually
uses mostly primitive things,

1277
00:55:31.180 --> 00:55:34.160
like longs, and integers, and
strings, and so on, or maybe

1278
00:55:34.160 --> 00:55:36.840
POJOs, I think you could
pull it off.

1279
00:55:36.840 --> 00:55:39.085
But if you catch me outside, I
might have some suggestions.

1280
00:55:39.085 --> 00:55:39.400
AUDIENCE: OK.

1281
00:55:39.400 --> 00:55:39.851
Cool.

1282
00:55:39.851 --> 00:55:42.110
Thanks.

1283
00:55:42.110 --> 00:55:43.154
RAY CROMWELL: OK.

1284
00:55:43.154 --> 00:55:44.810
AUDIENCE: Hello?

1285
00:55:44.810 --> 00:55:45.560
At [INAUDIBLE]

1286
00:55:45.560 --> 00:55:46.630
Google our [INAUDIBLE]

1287
00:55:46.630 --> 00:55:49.900
we have many talks about Google
Web Toolkit and we have

1288
00:55:49.900 --> 00:55:53.870
a separate section in
developers' handbooks about

1289
00:55:53.870 --> 00:55:55.210
Google Web Toolkit.

1290
00:55:55.210 --> 00:55:58.580
And now it seems [INAUDIBLE]

1291
00:55:58.580 --> 00:56:02.280
session, which mentioned
Google Web Toolkit.

1292
00:56:02.280 --> 00:56:06.795
So I want to ask,
is GWT is dead?

1293
00:56:06.795 --> 00:56:08.130
RAY CROMWELL: No.

1294
00:56:08.130 --> 00:56:09.960
I been asked this
question a lot.

1295
00:56:09.960 --> 00:56:15.700
And if you look at Google, for
example, a lot of Google's top

1296
00:56:15.700 --> 00:56:17.280
properties, actually,
like AdWords--

1297
00:56:17.280 --> 00:56:21.240
97% of their revenue comes
from the AdWords team.

1298
00:56:21.240 --> 00:56:24.050
And AdWords uses GWT for their
campaign management tool.

1299
00:56:24.050 --> 00:56:26.820
And so it's impractical for us
to say that GWT was dead,

1300
00:56:26.820 --> 00:56:28.010
first of all.

1301
00:56:28.010 --> 00:56:31.010
Second of all, Google
is about choice.

1302
00:56:31.010 --> 00:56:32.070
The company's about choice.

1303
00:56:32.070 --> 00:56:32.960
You know, App Engine,
for example.

1304
00:56:32.960 --> 00:56:34.630
We offer Java.

1305
00:56:34.630 --> 00:56:36.830
We offer Go.

1306
00:56:36.830 --> 00:56:37.860
We offer Python.

1307
00:56:37.860 --> 00:56:39.920
Well, we released Go
recently, right?

1308
00:56:39.920 --> 00:56:42.010
Does that mean that Guido van
Rossum is out of a job and

1309
00:56:42.010 --> 00:56:42.810
Python is dead?

1310
00:56:42.810 --> 00:56:43.370
No.

1311
00:56:43.370 --> 00:56:45.530
It just means that there's
another option for developers.

1312
00:56:45.530 --> 00:56:48.350
And so what I would say for GWT
is that we're not going to

1313
00:56:48.350 --> 00:56:49.730
take GWT away from you.

1314
00:56:49.730 --> 00:56:52.140
And we're still going to support
JavaScript development

1315
00:56:52.140 --> 00:56:56.480
for V8, and we're still going
to support GWT development.

1316
00:56:56.480 --> 00:56:59.220
But we're also offering this new
option that might entice

1317
00:56:59.220 --> 00:57:01.550
some people, maybe some people
who don't like JavaScript.

1318
00:57:01.550 --> 00:57:03.650
Or maybe they're people who like
JavaScript, but they want

1319
00:57:03.650 --> 00:57:04.810
better tools for JavaScript.

1320
00:57:04.810 --> 00:57:07.170
They want a really nice
IDE for something

1321
00:57:07.170 --> 00:57:08.010
that's a dynamic language.

1322
00:57:08.010 --> 00:57:09.170
There's Dart for you.

1323
00:57:09.170 --> 00:57:12.540
Or maybe they like Java, but
maybe they're getting tired of

1324
00:57:12.540 --> 00:57:13.590
doing enterprise apps.

1325
00:57:13.590 --> 00:57:17.450
So nothing's changing
with GWT.

1326
00:57:17.450 --> 00:57:20.590
In fact, if you attend my
session on Friday, there is

1327
00:57:20.590 --> 00:57:23.360
actually some nice news that's
going to be announced with

1328
00:57:23.360 --> 00:57:26.406
respect to GWT's future.

1329
00:57:26.406 --> 00:57:28.760
AUDIENCE: OK.

1330
00:57:28.760 --> 00:57:31.410
RAY CROMWELL: Anything else?

1331
00:57:31.410 --> 00:57:31.740
OK.

1332
00:57:31.740 --> 00:57:33.230
Thanks for coming, and--

1333
00:57:33.230 --> 00:57:37.110
[APPLAUSE]

1334
00:57:37.110 --> 00:57:38.080
RAY CROMWELL: You're welcome.

1335
00:57:38.080 --> 00:57:41.000
Be safe on your way down rushing
to get your devices.

1336
00:57:41.000 --> 00:57:42.250
Don't trip and fall.

1337
00:57:42.250 --> 00:57:45.263
WEBVTT

1
00:00:04.150 --> 00:00:06.970
&gt;&gt;Jorge Lucangeli Obes: Good morning, everyone,
and thanks for joining the session. My name

2
00:00:06.970 --> 00:00:11.799
is Jorge, and I work with the Chrome Security
team. Today I'll be talking about how to make

3
00:00:11.799 --> 00:00:17.039
Chrome apps and extensions be more secure.
And as the subtitle of the talk says, we want

4
00:00:17.039 --> 00:00:21.189
to focus on keeping the users of these apps
and extensions safe.

5
00:00:21.189 --> 00:00:27.250
Now, a lot of work has been done, not only
by Google, but by other browser vendors as

6
00:00:27.250 --> 00:00:33.050
well, to make browsers more secure.
What does this mean? It's harder now for a

7
00:00:33.050 --> 00:00:37.750
malicious Web site, any random Web site to
compromise a browser in a way in which it

8
00:00:37.750 --> 00:00:42.230
would allow the attacker to execute arbitrary
code in the user's device.

9
00:00:42.230 --> 00:00:48.350
However, in order to also protect the user's
data, the data that the user keeps in your

10
00:00:48.350 --> 00:00:54.540
Web app or Chrome app or Chrome extension,
we need the help of you, the developers. The

11
00:00:54.540 --> 00:00:58.980
browser by itself cannot completely protect
the user's data from attack.

12
00:00:58.980 --> 00:01:05.939
Now, the good news is that the Web platform
itself has been exposed to untrusted content

13
00:01:05.939 --> 00:01:11.210
or malicious content basically from the start.
That doesn't mean we're always scared about

14
00:01:11.210 --> 00:01:15.640
this malicious content, but we've made a lot
of progress integrating features that allow

15
00:01:15.640 --> 00:01:21.820
developers to make their Web apps more secure.
However, we haven't seen the level of adoption

16
00:01:21.820 --> 00:01:26.830
that we would have liked. And an objective
of the session is to tell you about these

17
00:01:26.830 --> 00:01:31.400
features so that you can use them and make
your applications more secure. The browser,

18
00:01:31.400 --> 00:01:36.830
together with the application developers,
will really make applications secure.

19
00:01:36.830 --> 00:01:43.830
Now, of course, a 45-minute long talk is not
enough to cover every single aspect of Web

20
00:01:45.090 --> 00:01:48.880
app security, so I'm going to focus on the
client side. I'm going to try to go over the

21
00:01:48.880 --> 00:01:54.210
features that can be leveraged both by regular
Web apps, by Chrome apps, Chrome extensions,

22
00:01:54.210 --> 00:02:00.640
even the ones that run offline.
Now, I talked about the Web platform and how

23
00:02:00.640 --> 00:02:05.330
we have incorporated features that help developers
make more secure Web apps. I'm going to focus

24
00:02:05.330 --> 00:02:10.640
on two of them which we believe, the security
community at large believe provide the best

25
00:02:10.640 --> 00:02:15.749
bang for the buck.
Number one, content security policy. If people

26
00:02:15.749 --> 00:02:22.150
here attended a talk on Wednesday about Manifest
Version 2 and Extensions Version 2, they probably

27
00:02:22.150 --> 00:02:27.349
have heard about CSP. And they probably also
have heard about HTML5 sandboxed iFrames.

28
00:02:27.349 --> 00:02:31.389
I'm going to talk about these two technologies
and show how you use them, common pitfalls

29
00:02:31.389 --> 00:02:38.079
that occur when you use them, so that you
can leave the talk and at least if you leave

30
00:02:38.079 --> 00:02:42.219
the talk and try to use some of these features
in your apps and extensions, I will be very,

31
00:02:42.219 --> 00:02:47.409
very happy indeed.
Now, before going in-depth into the features

32
00:02:47.409 --> 00:02:51.889
I want to take a couple of seconds to go over
the same origin policy real quick. The same

33
00:02:51.889 --> 00:02:58.889
origin policy is the basic security policy
that browsers and user agents try to get Web

34
00:03:00.499 --> 00:03:05.629
sites to comply to in the Web. And the same
origin policy basically says that two objects

35
00:03:05.629 --> 00:03:10.469
can interact directly if and only if they
belong to the same origin. An origin, which

36
00:03:10.469 --> 00:03:17.299
is taken from the URI of those subjects by
looking into the schema, the host and the

37
00:03:17.299 --> 00:03:21.989
port of that URI.
Now, the good thing about talking and reasoning

38
00:03:21.989 --> 00:03:27.510
about origins is that the most common security
vulnerabilities can be described in terms

39
00:03:27.510 --> 00:03:32.019
of origins. When untrusted content or script
gains the authority or runs in the context

40
00:03:32.019 --> 00:03:35.159
of a particular origin, we talk about cross-site
scripting.

41
00:03:35.159 --> 00:03:39.900
When a possibly malicious origin gets the
network access privileges, the Web request

42
00:03:39.900 --> 00:03:43.909
privileges of another origin, we talk about
cross-site request forgery. And for some reason

43
00:03:43.909 --> 00:03:47.969
which I don't understand, people really like
to say cross-site scripting with an X and

44
00:03:47.969 --> 00:03:51.199
cross-site request forgery with a C. I will
never get that.

45
00:03:51.199 --> 00:03:57.199
Now, a lot of the features that I'm going
to talk about today can be very easily implemented

46
00:03:57.199 --> 00:04:03.779
in an extensions manifest or a Chrome apps
manifest. But after helping many teams at

47
00:04:03.779 --> 00:04:08.989
Google write more secure apps and extensions,
either for Chrome or for Chrome OS, I notice

48
00:04:08.989 --> 00:04:14.319
that people made the same mistakes over and
over again not because they didn't know what

49
00:04:14.319 --> 00:04:20.049
they had to do, but because there's some tricky,
like, nuances that one has to know in order

50
00:04:20.049 --> 00:04:27.049
to make CSP or sandbox iFrames work correctly.
So I wrote a very simple app, which I call

51
00:04:27.949 --> 00:04:34.460
Manifest Lint. Not very creative, but that's
what I got. It will highlight sections of

52
00:04:34.460 --> 00:04:39.400
the manifest that are okay from a security
perspective and sections that might need help.

53
00:04:39.400 --> 00:04:43.900
In this case I am feeding the actual manifest
of the Manifest Lint application to itself

54
00:04:43.900 --> 00:04:47.879
and it's telling me that I'm not setting a
content security policy. Now, I will go deeper

55
00:04:47.879 --> 00:04:54.370
into content security policy in a couple of
slides.

56
00:04:54.370 --> 00:04:57.960
But first I want to show you what happens
when one develops an application and doesn't

57
00:04:57.960 --> 00:05:04.960
really take into account security.
Now, I wrote this application in time to demo

58
00:05:05.270 --> 00:05:12.270
it at I/O, and one could wonder what happens
if the application takes a manifest in that

59
00:05:13.400 --> 00:05:18.360
text area and displays the highlighted manifest
on the other side.

60
00:05:18.360 --> 00:05:24.199
Now, what happens if the application receives
a manifest that is not necessarily benign,

61
00:05:24.199 --> 00:05:30.960
that is malicious or malformed? Well, let's
try that. I'm going to switch video, and if

62
00:05:30.960 --> 00:05:35.330
I cannot make this demo work after what Sergey
did on Wednesday, I'm going to feel really,

63
00:05:35.330 --> 00:05:38.539
really bad.
[ Laughter ]

64
00:05:38.539 --> 00:05:45.539
&gt;&gt;Jorge Lucangeli Obes: Okay. Awesome.
Now, the extension -- the app basically takes

65
00:05:48.970 --> 00:05:53.409
a manifest and displays it highlighted on
the other side. It also saves the manifests

66
00:05:53.409 --> 00:05:59.240
to local storage so that I can bring them
back and not have to input them all the time.

67
00:05:59.240 --> 00:06:06.240
Now, what happens if I input this manifest?
I hope -- yeah, font size is okay.

68
00:06:07.210 --> 00:06:12.050
Which has a very weird description. It's got
HTML tags in its description and image tag

69
00:06:12.050 --> 00:06:19.050
and JavaScript. It's not looking good.
If I input this manifest into my extension,

70
00:06:23.409 --> 00:06:29.240
nothing will happen, but maybe eventually
the user might go over a part of the manifest

71
00:06:29.240 --> 00:06:35.250
and I hope it reads, but that's one of the
things that's stored in local storage.

72
00:06:35.250 --> 00:06:42.250
Now, we don't expect just random input to
be able to read local storage of the application.

73
00:06:43.669 --> 00:06:47.780
And in this case it's just manifest. It's
not really secret or private, but this could

74
00:06:47.780 --> 00:06:53.990
be user's data, private data, email, whatever,
anything that's stored in the app or the extensions

75
00:06:53.990 --> 00:07:00.990
origin is now available just one confusion,
one trick away from an attacker.

76
00:07:02.590 --> 00:07:09.590
I'm going to go back to the slides.
What's the problem? That's the problem. I'm

77
00:07:17.960 --> 00:07:24.960
using eval to parse JSON and I'm using inner
HTML to display the highlighted manifest.

78
00:07:26.300 --> 00:07:33.300
Now, I'm not going to go very deep into what
the exploit does, but it's basically using

79
00:07:34.499 --> 00:07:41.080
the fact that I'm using inner HTML to inject
script into the application that is triggered

80
00:07:41.080 --> 00:07:46.370
when the user mouses over the image.
Now, since I'm -- since the use of inner HTML

81
00:07:46.370 --> 00:07:50.629
basically allows me to inject any sort of
tag or script that I want, that's basically

82
00:07:50.629 --> 00:07:56.779
giving a straight way for an attacker to get
malicious input into my application.

83
00:07:56.779 --> 00:08:00.819
And this is where content security policy
comes in.

84
00:08:00.819 --> 00:08:05.949
In a nutshell, content security policy is
a way for me, the application or extension

85
00:08:05.949 --> 00:08:12.949
developer, to tell the browser, only allow
me, the application, to load resources or

86
00:08:13.710 --> 00:08:20.680
script from this whitelist or trusted sources.
Now, it might be -- might sound kind of weird

87
00:08:20.680 --> 00:08:26.449
since I'm telling the browser to restrict
what I'm -- what me, the application, is allowed

88
00:08:26.449 --> 00:08:33.449
to do, but since we've seen in the demo that
it's very easy to hijack the behavior of an

89
00:08:33.880 --> 00:08:40.880
application, it's a very powerful tool, CSP,
and it allows me to -- beforehand to say I

90
00:08:41.350 --> 00:08:48.150
don't want to be able to load anything outside
of these trusted sources.

91
00:08:48.150 --> 00:08:54.710
By doing this, by not allowing the application
to load script or resources from untrusted

92
00:08:54.710 --> 00:09:01.710
sources, we prevent most cross-site scripting
attacks; however, in order to be able to tell

93
00:09:04.200 --> 00:09:09.600
whether the script or the resource that we
are loading actually belongs in the whitelist

94
00:09:09.600 --> 00:09:15.470
or not, we need to be able to tell where that
script comes from. And the problem is that

95
00:09:15.470 --> 00:09:22.470
we are not always able to do that if the script
that we're loading is included in-line, in

96
00:09:23.320 --> 00:09:26.500
the application.
There's no way for the browser to tell whether

97
00:09:26.500 --> 00:09:33.500
inline script has been put there by the developer
or has been injected due to a bug in the application.

98
00:09:37.090 --> 00:09:42.320
The only way in which CSP can fulfill its
purpose and actually block things that are

99
00:09:42.320 --> 00:09:49.320
not in the whitelist is to ban all the uses
of inline script or features in JavaScript

100
00:09:49.700 --> 00:09:56.080
that turn strings into code because you can
never be sure whether the inline script was

101
00:09:56.080 --> 00:09:59.950
malicious or not or whether the string that's
been turned into code by eval is malicious

102
00:09:59.950 --> 00:10:04.210
or not.
Now, how do we use it? If you're writing Chrome

103
00:10:04.210 --> 00:10:10.760
app or in extension it's really, really simple.
You just add one line to the manifest called,

104
00:10:10.760 --> 00:10:16.100
very creatively, content security policy.
And a content security policy itself is just

105
00:10:16.100 --> 00:10:21.090
a list of allowed sources for different types
of resources.

106
00:10:21.090 --> 00:10:25.890
In this case what we're saying is that by
default the application is only allowed to

107
00:10:25.890 --> 00:10:32.890
load resources from its own origin. That's
what the, quote, self quote, token says.

108
00:10:33.490 --> 00:10:38.500
Now in case of scripts we want to allow the
application to load scripts from its own origin,

109
00:10:38.500 --> 00:10:45.500
the extension package, as well as the googleapis.com
site.

110
00:10:45.500 --> 00:10:52.500
And in case of styles, CSP does include a
token called unsafe inline, also with quotes.

111
00:10:53.840 --> 00:11:00.740
This can -- this can be used to turn off the
requirement for a script not to be inline;

112
00:11:00.740 --> 00:11:05.880
however, if we use an unsafe inline token
in the script source line we're basically

113
00:11:05.880 --> 00:11:12.040
defeating the purpose of CSP. We are not gaining
any advantage.

114
00:11:12.040 --> 00:11:17.260
Styles are not the same thing in the sense
that they don't directly execute code.

115
00:11:17.260 --> 00:11:24.260
And in most cases it's the trade-off between
not being able to use inline style and the

116
00:11:24.310 --> 00:11:30.850
possible exposure to malicious CSS. And buggy
parsing CSS code in the browser is really

117
00:11:30.850 --> 00:11:35.200
not that problematic.
The most important thing in this case is we

118
00:11:35.200 --> 00:11:40.970
cannot load script from anywhere else but
those two sources.

119
00:11:40.970 --> 00:11:47.970
Now, if I try to load this, my application,
with this new manifest, I'm not going to do

120
00:11:48.100 --> 00:11:53.680
it in the computer because the text of a JavaScript
console is very hard to make bigger. So that's

121
00:11:53.680 --> 00:12:00.680
exactly what Chrome prints if I try to load
my existing application with this new manifest.

122
00:12:01.580 --> 00:12:06.430
And it's basically saying what we expected
it to say. If content security policy doesn't

123
00:12:06.430 --> 00:12:10.880
allow inline script, then, of course, Chrome
is refusing to run inline script. If content

124
00:12:10.880 --> 00:12:14.880
security policy doesn't allow in-line event
handling, which is basically the same as in-line

125
00:12:14.880 --> 00:12:19.710
script, it's JavaScript code that's included
in-line in HTML.

126
00:12:19.710 --> 00:12:24.080
And Chrome has complained about one more thing.
It complaining about the fact that I'm loading

127
00:12:24.080 --> 00:12:29.710
jQuery or HTTP.
Now, in a regular Web site this wouldn't necessarily

128
00:12:29.710 --> 00:12:34.010
be a problem since you're already loading
the Web site over HTTP. The fact that you're

129
00:12:34.010 --> 00:12:38.850
loading script over HTTP, it's really not
that problematic. However, if you're running

130
00:12:38.850 --> 00:12:44.060
on extensions, extensions get more privileged
access to the browser compared to regular

131
00:12:44.060 --> 00:12:48.000
sites. They have access to APIs. The normal
sites don't have access to.

132
00:12:48.000 --> 00:12:52.820
If you're leading script over HTTP, you're
exposed to what we call mine-in-the-middle

133
00:12:52.820 --> 00:12:59.660
attacks. If you're using your extension at
a Starbucks hot spot, then any person sitting

134
00:12:59.660 --> 00:13:06.220
at that Starbucks hot spot can intercept the
loading of that -- that script loading over

135
00:13:06.220 --> 00:13:11.280
HTTP, change it and make you run malicious
script in the origin of your extension, which

136
00:13:11.280 --> 00:13:16.400
has privileged access to the browser's API.
And as we've seen, from there to stealing

137
00:13:16.400 --> 00:13:21.990
private data is just some code away.
Now, we need to change, of course, these few

138
00:13:21.990 --> 00:13:28.990
things in order to make my teeny-tiny application
work with CSP.

139
00:13:30.170 --> 00:13:36.450
That's basically what we're going to do.
I change the jQuery loading to load over HTTP,

140
00:13:36.450 --> 00:13:43.450
which is a source that I have enabled in CSP.
And I'm going to -- I'm going to extract all

141
00:13:46.260 --> 00:13:51.470
my JavaScript code into a .js file, which
is something I should have done in the beginning.

142
00:13:51.470 --> 00:13:56.730
Best practices for Web development call for
separation of the structure of the document

143
00:13:56.730 --> 00:14:00.810
in HTTP, the behavior in JavaScript and the
style in CSS.

144
00:14:00.810 --> 00:14:06.450
This is the easy part. I also have to get
rid of inline event handling, which I can

145
00:14:06.450 --> 00:14:13.450
very easily translate to native JavaScript
using a bit of jQuery magic.

146
00:14:13.570 --> 00:14:20.570
I'm saying that the lint function is going
to be the handler of the link that I use to

147
00:14:20.890 --> 00:14:27.890
tell my application to process the manifest.
And finally, I have to change my eval function

148
00:14:28.100 --> 00:14:31.760
into JSON parse.
Now, I didn't use the fact that the application

149
00:14:31.760 --> 00:14:38.570
was using eval to run my exploit. I just used
the fact that it was running HTML; however,

150
00:14:38.570 --> 00:14:42.870
since the application was using eval to parse
JSON, instead of doing crazy things with tasks,

151
00:14:42.870 --> 00:14:47.990
I could just send a JavaScript statement as
a manifest.

152
00:14:47.990 --> 00:14:54.990
Now, that would have been slightly cheating
in my opinion because there needs to be at

153
00:14:57.470 --> 00:15:02.180
least an impression of, well, this could have
seemed like a regular manifest in order for

154
00:15:02.180 --> 00:15:07.570
the exploit chain to be somewhat credible.
If I'm just telling the user to paste something

155
00:15:07.570 --> 00:15:11.950
that starts with alert as a manifest, then
I'm kind of cheating.

156
00:15:11.950 --> 00:15:18.950
The good thing is that I'm not going to get
rid of inner HTML. And now we'll see why.

157
00:15:19.370 --> 00:15:26.370
I don't really need to get rid of inner HTML,
although it would be very good to do.

158
00:15:26.700 --> 00:15:33.700
What happens if I try to do the same thing?
Just so you see that I'm not faking it, I'm

159
00:15:34.680 --> 00:15:41.680
going to go back to the demo and I'm going
to try to load the same -- it happens.

160
00:15:44.300 --> 00:15:51.300
We broke everything.
I'm going to use exactly the same manifest

161
00:15:56.500 --> 00:16:00.420
in the safe version of the application that
loads with the content security policy that

162
00:16:00.420 --> 00:16:07.420
you guys have seen. If I try to do that, it
will load, but if I mouse over the little

163
00:16:07.510 --> 00:16:14.510
square, which have the onload attribute, nothing
happens. And the console, which clearly you

164
00:16:14.600 --> 00:16:19.340
guys cannot read that, but it says "Refuse
to execute event handler because of content

165
00:16:19.340 --> 00:16:23.550
security policy." So I'm protected, which
is really cool.

166
00:16:23.550 --> 00:16:30.550
It's the same thing that is on the slide,
my demo failure slide.

167
00:16:32.970 --> 00:16:39.970
And the interesting thing is that the way
I see it, CSP allows the application or extension

168
00:16:41.610 --> 00:16:48.610
developer to rely on the browser as a safety
net. I'm pretty sure that I covered every

169
00:16:50.790 --> 00:16:57.790
single base, I'm pretty sure that I tied every
loose end, but just in case I haven't, please,

170
00:16:57.800 --> 00:17:01.290
you browser, make sure that I don't screw
up.

171
00:17:01.290 --> 00:17:05.949
This is what I'm talking about when I say
that application developers and browser developers

172
00:17:05.949 --> 00:17:09.030
have to work together in order to protect
users.

173
00:17:09.030 --> 00:17:15.189
The browser can make sure that your application
never uses unsafe script. You guys have to

174
00:17:15.189 --> 00:17:22.189
use the feature that the browser provides
in order to allow the browser to do this.

175
00:17:22.439 --> 00:17:28.490
Now, people might say, "Well, that's a really,
really simple app. It doesn't really do anything

176
00:17:28.490 --> 00:17:35.490
useful." And you might very well be right.
So I want to move over to something that's

177
00:17:35.640 --> 00:17:42.320
very dear to my heart, which is the Chrome
OS document viewer. We applied these two security

178
00:17:42.320 --> 00:17:46.710
features to the Chrome OS document viewer.
The Chrome OS document viewer allows Chrome

179
00:17:46.710 --> 00:17:53.710
OS users to open a lot of different document
types, including Office files, online on their

180
00:17:53.860 --> 00:17:57.840
Chrome OS devices directly from the Chrome
OS file manager.

181
00:17:57.840 --> 00:18:03.730
Everything runs on the Web/Chrome platform
and it runs offline.

182
00:18:03.730 --> 00:18:08.920
Now, when the developers of the development
viewer were working on the application, we

183
00:18:08.920 --> 00:18:15.110
wanted to make sure that it was a safe application.
Opening Office documents, it's dangerous,

184
00:18:15.110 --> 00:18:19.260
and we wanted to make sure that we could do
it in a safe way.

185
00:18:19.260 --> 00:18:25.150
So the first thing the developers did was
apply a content security policy to this app

186
00:18:25.150 --> 00:18:28.550
or extension.
In this case it's an app.

187
00:18:28.550 --> 00:18:34.440
It doesn't really change that much from what
I did with my demo app, but it's interesting

188
00:18:34.440 --> 00:18:39.270
that they are also using unsafe inline for
styles, and this makes a lot of sense because

189
00:18:39.270 --> 00:18:45.180
if you're writing a document viewer you cannot
really predict what kinds of crazy document

190
00:18:45.180 --> 00:18:49.390
formatting the author of those documents might
do.

191
00:18:49.390 --> 00:18:54.100
So you need to create script -- sorry, styles
on the fly dynamically and load them inline.

192
00:18:54.100 --> 00:18:59.290
Now, in this case, again, this is a matter
of it's a trade-off between the functionality

193
00:18:59.290 --> 00:19:04.750
of the application, basic functionality of
the application, which is displaying the styles

194
00:19:04.750 --> 00:19:09.220
that are included in the document I want to
view, and security, which is I'm not really

195
00:19:09.220 --> 00:19:16.220
happy with loading inline CSS because it might
open me to be -- to injection for malicious

196
00:19:16.830 --> 00:19:23.830
CSS, but we trust the CSS parser in Chrome.
If killing inline styles kills the purpose

197
00:19:24.750 --> 00:19:28.760
of a document viewer, then we need to allow
it. Security is always, most of the times,

198
00:19:28.760 --> 00:19:35.760
about tradeoffs.
Another interesting thing is that I'm using

199
00:19:36.990 --> 00:19:43.780
a couple more resource sources that I haven't
shown before, which are image source, which

200
00:19:43.780 --> 00:19:49.520
of course governs which images can be loaded
by the application. And I'm using blob URIs

201
00:19:49.520 --> 00:19:53.480
for images. I going to come back to blob URIs.
I wanted to show it today so it stays in your

202
00:19:53.480 --> 00:19:58.370
mind. I'm going to come back to blob URIs.
I'm also using frame source. Now content security

203
00:19:58.370 --> 00:20:03.460
policy includes more types of sources. There's
a bunch of them. I'm not going to go over

204
00:20:03.460 --> 00:20:08.430
them, but if you type content security policy
in Google it takes you directly to the list

205
00:20:08.430 --> 00:20:14.500
of it.
Now we come probably the crucial part of the

206
00:20:14.500 --> 00:20:21.500
talk. Which is -- CSP is awesome, and it really
prevents cross-site scripting, but we haven't

207
00:20:21.670 --> 00:20:25.620
seen that much adoption by the development
community.

208
00:20:25.620 --> 00:20:32.620
So the only way we saw to make this really
happen was to force, to make a default CSP

209
00:20:34.750 --> 00:20:41.750
policy apply by default when absent extensions
start using Manifest V2. Now, if people here

210
00:20:43.309 --> 00:20:47.680
attended the talk on Wednesday about Manifest
V2, they probably have an idea of what the

211
00:20:47.680 --> 00:20:53.690
schedule will look like for Manifest V2. I'm
going to go over the schedule again, but let's

212
00:20:53.690 --> 00:20:59.100
see exactly what exactly is forced by Manifest
V2 in terms of CSP.

213
00:20:59.100 --> 00:21:04.280
The first line, script source self, object
source self, it's going to be the default,

214
00:21:04.280 --> 00:21:11.280
unchangeable, "unloosenable". CSP policy that's
going to be used in all (indiscernible) extensions

215
00:21:12.000 --> 00:21:18.030
that use Manifest V2. The reason for this
is the same that I've been talking about.

216
00:21:18.030 --> 00:21:24.530
If -- if your upper extension loads inline
script, the browser cannot really tell whether

217
00:21:24.530 --> 00:21:29.770
the script that is executing comes from a
trusted source or not. The same thing happens

218
00:21:29.770 --> 00:21:36.770
with plug-ins. If we cannot -- if you are
loading a plug-in over HTTP, and you run on

219
00:21:36.840 --> 00:21:41.590
public Wi-Fi, then the plug-in that you are
getting in your extension does not necessarily

220
00:21:41.590 --> 00:21:45.120
look like the plug-in that you thought you
were getting. It might have been changed in

221
00:21:45.120 --> 00:21:51.710
transit and you can have no way of telling.
Both scripts and plug-ins run code in the

222
00:21:51.710 --> 00:21:56.370
context of your extension. If we cannot be
sure that that code is trusted, we cannot

223
00:21:56.370 --> 00:21:58.950
give that code the privileges that the extension
has.

224
00:21:58.950 --> 00:22:05.950
So that's going to be the default. However,
in both cases, since we trust the resources

225
00:22:06.080 --> 00:22:13.080
that we load over HTTPS, it's allowed to include
HTTPS sources both as script source and as

226
00:22:13.260 --> 00:22:18.320
plug-in source. You can load plug-ins and
scripts over HTTPS because it's very much

227
00:22:18.320 --> 00:22:21.930
guaranteed that the scripts you're going to
get is the script that you actually want to

228
00:22:21.930 --> 00:22:26.690
get.
One more thing that you can do with CSP, which

229
00:22:26.690 --> 00:22:33.170
is interesting, is that when you write Chrome
apps and extensions, you use host permissions

230
00:22:33.170 --> 00:22:37.620
in order to govern which Web sites you can
inject content script into, but those same

231
00:22:37.620 --> 00:22:44.620
permissions govern which hosts you can do
XHR requests to. If you need to do XHR requests

232
00:22:45.670 --> 00:22:50.340
to a smaller number of hosts than what you
need to inject the script into, you can further

233
00:22:50.340 --> 00:22:57.059
restrict the hosts that you allow XHR requests
to happen against by using the connect source

234
00:22:57.059 --> 00:23:04.059
directly. It might seem like not a very big
deal, but security is always about restricting

235
00:23:04.260 --> 00:23:09.090
privilege, allowing things to have the least
amount of privilege possible so that if something

236
00:23:09.090 --> 00:23:16.059
goes wrong, a compromise happens, the thing
that gets compromised will never be able to

237
00:23:16.059 --> 00:23:20.250
do more than it was allowed to do in the beginning.
That's basically what we're trying to do with

238
00:23:20.250 --> 00:23:27.250
CSP. Now, this is basically how it's going
to happen with Manifest V2. Chrome 21, which

239
00:23:28.300 --> 00:23:34.550
goes to stable in mid August, it's going to
block uploading new items to the Chrome Web

240
00:23:34.550 --> 00:23:41.550
store that have Manifest V1. With Chrome 23
that goes stable in early November, even existing

241
00:23:43.480 --> 00:23:50.290
items that use Manifest Version 1 will not
be able to be updated to new version. And

242
00:23:50.290 --> 00:23:56.300
Chrome will stop packaging apps and extensions
that have Manifest V1.

243
00:23:56.300 --> 00:24:03.300
Now in the beginning of 2013, we will remove
Manifest Version 1 items from search results,

244
00:24:03.830 --> 00:24:10.830
so that they are very, very hard to find.
In the middle, beginning of Q2 of 2013, we

245
00:24:11.340 --> 00:24:17.690
will completely remove all Manifest V1 items
from the Chrome Web store and eventually Chrome

246
00:24:17.690 --> 00:24:24.690
will refuse to load them at all, whatsoever.
Now, it's almost a year from now, right, until

247
00:24:25.400 --> 00:24:32.400
it doesn't really work anymore and the changes
are not really that big. But the important

248
00:24:33.510 --> 00:24:37.530
thing is that this is the only way that we
can guarantee that your users and the users

249
00:24:37.530 --> 00:24:42.950
of Chrome browser and the Chrome extension
and the Chrome platform don't get compromised.

250
00:24:42.950 --> 00:24:49.059
It's not necessarily because the application
developer is writing a malicious app, but

251
00:24:49.059 --> 00:24:55.559
it's for the attacker to have a way in, you
just have to make one mistake. For -- for

252
00:24:55.559 --> 00:25:01.670
the browser/app to win, you have to -- you
have to tie every single loose end, so it's

253
00:25:01.670 --> 00:25:07.870
an uphill battle. But we have some tools that
help us win the battle and we really need

254
00:25:07.870 --> 00:25:14.010
you guys to start using these tools.
Now, the other good thing about CSP is that

255
00:25:14.010 --> 00:25:21.010
it's also available or in fact it came up
as a solution for the regular drive-by Web.

256
00:25:21.230 --> 00:25:25.960
It's currently supported in Firefox and Chrome
using the X content security policy in the

257
00:25:25.960 --> 00:25:32.960
case of Firefox and the X WebKit CSP in Chrome.
Eventually, we hope this will be supported

258
00:25:33.630 --> 00:25:40.630
in all browsers.
Now, there's some more issues that can come

259
00:25:47.179 --> 00:25:52.220
up with CSP. And I wanted to take a couple
of minutes to discuss them.

260
00:25:52.220 --> 00:25:59.220
An issue that we have seen a lot with CSP
is how we talked about how it completely balanced

261
00:25:59.890 --> 00:26:05.620
the use of eval because there's no way of
telling where that string that's being turned

262
00:26:05.620 --> 00:26:09.390
into code comes from. It's the same problem
as within inline script. The browser cannot

263
00:26:09.390 --> 00:26:14.920
be sure whether that script is actually something
the application developer wrote and not something

264
00:26:14.920 --> 00:26:21.050
that a malicious user wrote.
The problem is that many Web frameworks use

265
00:26:21.050 --> 00:26:26.860
eval to do templating, for example, and if
we ban eval, then these things are not going

266
00:26:26.860 --> 00:26:33.720
to work. And in effect, there's a very cool
starter kit for ember.js that basically brings

267
00:26:33.720 --> 00:26:40.720
up single-header (indiscernible) page using
the templating engine for ember.js which is

268
00:26:41.500 --> 00:26:45.500
handlebars.
Now if we use operate, very, very recently

269
00:26:45.500 --> 00:26:50.890
content security policy similar to the one
that we used before, we are allowing loading

270
00:26:50.890 --> 00:26:57.890
scripts over HTTPS, we are allowing inline
styles. This is basically what the ember.js

271
00:27:01.090 --> 00:27:08.090
-- what the ember.js index -- index HTML page
looks like. It's true we are allowing the

272
00:27:08.740 --> 00:27:13.720
loading of that script, everything else is
loading from the extensions on package. But

273
00:27:13.720 --> 00:27:18.600
if we try to load it, we get a very, very,
very nasty error which basically says something

274
00:27:18.600 --> 00:27:25.600
like code generation from scripts is disallowed
in this context. It also points us to a source

275
00:27:25.890 --> 00:27:32.890
file and a line, which basically says something
like function applies, something, something.

276
00:27:33.309 --> 00:27:39.360
This is never going to work with a CSP policy
that actually does work as intended. Now,

277
00:27:39.360 --> 00:27:46.360
there are two ways around this. Way number
one is for this frameworks to move away from

278
00:27:46.360 --> 00:27:53.360
eval and other code generation functions.
Now, if you are actually writing the new package

279
00:27:54.250 --> 00:28:00.820
apps and using Manifest Version 2 as we introduced
during I/O, there's another way of doing this,

280
00:28:00.820 --> 00:28:07.820
which is using new attribute for manifest,
which is called sandbox. Which I'm not going

281
00:28:08.950 --> 00:28:14.840
to go into specifically in the version that's
used in the manifest. I'm going to cover it

282
00:28:14.840 --> 00:28:21.840
more generally, so that it can be used also
in the drive-by Web.

283
00:28:22.500 --> 00:28:29.500
Before moving on to the next, to HTML5 sandbox
iFrames, a very big CSP don't, unsafe in-line

284
00:28:29.780 --> 00:28:34.860
and unsafe eval or script source, completely
defeat the purpose of CSP. Please don't do

285
00:28:34.860 --> 00:28:41.450
it. If you need to do this, you probably are
doing something not wrong, but you are doing

286
00:28:41.450 --> 00:28:47.100
something insecurely. So please think again.
If you need to include this in your CSP policy,

287
00:28:47.100 --> 00:28:51.230
then please, please, think about why you need
to do it.

288
00:28:51.230 --> 00:28:56.549
Now, the good thing about CSP is that it provides
a very effectively live place for resources,

289
00:28:56.549 --> 00:29:02.440
but it's not very granular. It's either you
are allowed to load this or you're not. What

290
00:29:02.440 --> 00:29:09.120
we would like to have is a way of maybe running
script in our application, but not giving

291
00:29:09.120 --> 00:29:14.250
that script access to the extensions or the
applications origin. It seems like there's

292
00:29:14.250 --> 00:29:18.380
nothing in between. It's either not running
at all or running and giving complete access

293
00:29:18.380 --> 00:29:25.000
to user's data and everything. That's where
HTML5 sandbox iFrames come from. What we would

294
00:29:25.000 --> 00:29:30.080
like to do is to load that script, execute
it, but execute it in a different origin than

295
00:29:30.080 --> 00:29:34.640
the actual application or extension origins.
In fact, let's go even further. We want to

296
00:29:34.640 --> 00:29:39.210
run it in an origin that's different from
any other origin out there. We call those

297
00:29:39.210 --> 00:29:45.360
unique origins. They are by definition different
from any other origin there is.

298
00:29:45.360 --> 00:29:52.360
This is where the HTML5 iFrame sandbox attribute
comes in. It allows loading resources, content

299
00:29:52.820 --> 00:29:59.820
or script safely inside an iFrame that will
get less privilege than a regular iFrame.

300
00:30:00.440 --> 00:30:04.750
And we can completely control which of these
privileges we give back and which ones we

301
00:30:04.750 --> 00:30:11.440
keep away from the iFrame.
Now, it's as simple as using the sandbox attribute

302
00:30:11.440 --> 00:30:18.440
on a regular iFrame. If we do that, the code
that we load inside the iFrame will be restricted

303
00:30:18.920 --> 00:30:24.340
in this way. It will live in a unique origin,
so we won't be able to access directly the

304
00:30:24.340 --> 00:30:31.280
application of the extensions, DOM structure
or script or anything. It actually -- if we

305
00:30:31.280 --> 00:30:37.880
don't do anything else, it won't even be allowed
to run scripts at all. Or submit forms. Or

306
00:30:37.880 --> 00:30:44.440
navigate the top page. Or load plug-ins. Or
create pop-ups. Now, almost all of those things

307
00:30:44.440 --> 00:30:50.299
can be re-enabled individually by giving arguments
to the sandbox attribute. Except the loading

308
00:30:50.299 --> 00:30:57.299
of plug-ins, which so far cannot be re-enabled.
Now, I said that we might want to use sandbox

309
00:30:58.440 --> 00:31:05.440
iFrames to run script in a different origin.
So going back to the Chrome OS document viewer,

310
00:31:10.340 --> 00:31:17.340
what the document viewer developers did was
run most of the JavaScript that displayed

311
00:31:17.840 --> 00:31:24.840
the final document inside a sandbox iFrame.
And why did they do this? Well, even though

312
00:31:24.929 --> 00:31:30.500
we might be pretty confident about the JavaScript
that we wrote, if there's no need for that

313
00:31:30.500 --> 00:31:35.059
JavaScript to directly access all of the private
information that an application such as a

314
00:31:35.059 --> 00:31:40.840
document viewer might have, why give it that
privilege? If it doesn't need it? If anything

315
00:31:40.840 --> 00:31:45.530
goes wrong with the JavaScript that I wrote,
which if I'm parsing a document, as heavy

316
00:31:45.530 --> 00:31:50.010
as like a spreadsheet or something like that,
a lot of things can probably go wrong.

317
00:31:50.010 --> 00:31:56.280
So since that code doesn't need to access
every single file that I'm using in my document

318
00:31:56.280 --> 00:32:00.730
viewer, let's just not give it access to that.
Let's just give it the one file that it needs

319
00:32:00.730 --> 00:32:05.440
to display, so if anything goes wrong, it
cannot go and steal every single file that

320
00:32:05.440 --> 00:32:12.370
I own and ship it away to somewhere.
So that's what the document viewer developers

321
00:32:12.370 --> 00:32:17.870
did. They kept most of the document viewer
inside of a sandbox iFrame, which was only

322
00:32:17.870 --> 00:32:24.870
allowed to run script, and load pop-ups, but
nothing else, no forms, no plug-ins, nothing.

323
00:32:25.820 --> 00:32:31.580
In this way, if anything goes wrong with that
code, the JavaScript will not be able to access

324
00:32:31.580 --> 00:32:35.669
the extension or the apps origin where probably
the rest of the document, the user's documents

325
00:32:35.669 --> 00:32:42.669
live. And this is a very good thing.
Now, inside the sandboxed iFrame, there's

326
00:32:42.870 --> 00:32:48.850
really not that much that changes. This code
is basically loading a lot of JavaScript to

327
00:32:48.850 --> 00:32:52.940
do its job, to parse the document, and display
the document. But it looks like every other

328
00:32:52.940 --> 00:32:59.440
single web app that might be out there, except
for one teeny tiny detail, which comes from

329
00:32:59.440 --> 00:33:06.240
the fact that that JavaScript code lives inside
a unique origin. There's no way for the JavaScript

330
00:33:06.240 --> 00:33:10.160
code outside of the Sandbox and the JavaScript
code inside the sandbox to talk directly.

331
00:33:10.160 --> 00:33:17.160
They need to use some sort of inter-origin
API. And the most recent inter-origin API

332
00:33:17.780 --> 00:33:24.780
that they can use, of course, is postMessage.
It's explicitly designed to -- 
in a very JavaScript-y way, with asynchronous

333
00:33:35.340 --> 00:33:40.330
message handling.
Now, this is what -- this is what -- what

334
00:33:40.330 --> 00:33:47.330
message handling function might look for postMessage
in the drive-by Web. The thing is that it

335
00:33:47.500 --> 00:33:54.500
is for security reasons, it is good to check
if the message that I got over postMessage

336
00:33:54.650 --> 00:34:00.230
is being sent to me and that's what the event
origin tells me. When you post a message using

337
00:34:00.230 --> 00:34:07.230
postMessage, you say I'm intending this origin
to be the recipient. When you get the message

338
00:34:07.480 --> 00:34:14.480
you say, hey, was I the recipient? Is event.origin
the source that I expected? Since they live

339
00:34:17.239 --> 00:34:23.729
in unique origins, their origin is known,
so we cannot really use that to make sure

340
00:34:23.729 --> 00:34:30.729
that both sides of the postMessage interaction
are who they are. But still is the only way

341
00:34:30.799 --> 00:34:37.799
we have to talk to a sandboxed iFrame, so
we are going to have to use it anyways.

342
00:34:38.479 --> 00:34:43.970
Inside the iFrame, we just need to get our
parent window and postMessage to that. Outside

343
00:34:43.970 --> 00:34:48.819
the iFrame, we just need to actually find
the iFrame, get its content window and postMessage

344
00:34:48.819 --> 00:34:55.819
to that.
Now, again, the objective of sandboxed iFrames

345
00:34:57.180 --> 00:35:02.989
is to be able to use script that we might
not be comfortable with accessing our origin

346
00:35:02.989 --> 00:35:07.809
but we might need to use it to set up a particular
aspect of our application. In the case of

347
00:35:07.809 --> 00:35:12.619
the document viewer, the script was displaying
the final document to a user, but it had no

348
00:35:12.619 --> 00:35:19.619
need to access every single other document.
By running it in a unique origin, we guaranteed

349
00:35:20.539 --> 00:35:25.430
that even if anything that -- anything that
went wrong, even if something that we didn't

350
00:35:25.430 --> 00:35:31.069
think could go wrong actually did go wrong,
there was no way for that code, even if it

351
00:35:31.069 --> 00:35:35.450
was compromised, to access any other document.
Which is a very good thing. You don't want

352
00:35:35.450 --> 00:35:42.009
one malformed document that you want it to
see to steal every other single document that

353
00:35:42.009 --> 00:35:48.890
you have.
A very -- other very important thing, more

354
00:35:48.890 --> 00:35:55.890
don'ts. Security is filled with don'ts. If
we can both restrict the limitation of not

355
00:35:57.700 --> 00:36:03.009
running script and the limitation of running
in a unique origin, we can do it, we can do

356
00:36:03.009 --> 00:36:10.009
them both at the same time. However, if we
do them both at the same time, since the iFrame

357
00:36:10.440 --> 00:36:17.039
will be living in the same origin as the enclosing
page and JavaScript will be allowed to run

358
00:36:17.039 --> 00:36:22.269
inside the iFrame, there's nothing preventing
that JavaScript running inside the iFrame.

359
00:36:22.269 --> 00:36:26.650
To get a reference to the actual iFrame, since
it's living in the same origin, and just take

360
00:36:26.650 --> 00:36:33.650
the Sandbox out of it, out. So either never
use those two together, because again as with

361
00:36:34.989 --> 00:36:39.339
unsafe inline and unsafe eval, you are completing
defeating the purpose of the sandbox in the

362
00:36:39.339 --> 00:36:46.339
first place or make sure that the script that
you are including doesn't have code that can

363
00:36:48.099 --> 00:36:54.420
do this. You might not -- it's -- you might
not be sure that your script will not fail

364
00:36:54.420 --> 00:36:59.049
with a malformed office document, but you
can be sure that it's not actually searching

365
00:36:59.049 --> 00:37:04.470
for iFrames and removing sandbox attributes.
So sandbox iFrame don't. Please don't do this

366
00:37:04.470 --> 00:37:08.630
because it defeats the purpose and as many
people say, a false sense of security is even

367
00:37:08.630 --> 00:37:11.910
worse than being insecure. So please don't
do this.

368
00:37:11.910 --> 00:37:16.819
Now, I mentioned at the beginning of the talk
that I wanted to cover some common issues

369
00:37:16.819 --> 00:37:21.579
and pitfalls that came up when people tried
to do this in actual applications and I'm

370
00:37:21.579 --> 00:37:26.619
going to go over those real quick.
We talked about most the CSP restrictions,

371
00:37:26.619 --> 00:37:33.619
the really only really -- the only actual
pain point that we found was the use of eval

372
00:37:36.190 --> 00:37:40.799
for templating (indiscernible) -- everything
else, even if it takes some work, is just

373
00:37:40.799 --> 00:37:46.999
a matter of constructing script and constructing
event handling from HTML files. It shouldn't

374
00:37:46.999 --> 00:37:53.999
be impossible. We talked about how -- about
how once we get stuff into a different origin

375
00:37:54.220 --> 00:37:59.210
so that it doesn't have access to the user's
data, we need to talk to it as if it were

376
00:37:59.210 --> 00:38:03.849
a different origin because it actually is,
so we need to use inter-origin communication

377
00:38:03.849 --> 00:38:10.569
mechanisms such as postMessage.
Now, I want to go over some weird interactions

378
00:38:10.569 --> 00:38:14.950
that can happen when you use both CSP and
sandboxed iFrames at the same time, which

379
00:38:14.950 --> 00:38:20.289
might not be evident when you start using
them, but it's good to know about them so

380
00:38:20.289 --> 00:38:23.619
that you can know what to do when they actually
show up, if you decide to use that, which

381
00:38:23.619 --> 00:38:30.279
you should.
This is what the final manifest for the Chrome

382
00:38:30.279 --> 00:38:35.089
OS document viewer roughly looks like. They
managed to implement both sandbox iFrames

383
00:38:35.089 --> 00:38:40.700
and CSP in document viewer app, which makes
it really secure. I'm very happy opening a

384
00:38:40.700 --> 00:38:46.559
file in -- sorry -- in the document viewer
because it means that the actual document

385
00:38:46.559 --> 00:38:51.849
that I'm viewing has almost no access to anything
else on my system and that's something that's

386
00:38:51.849 --> 00:38:56.779
very cool from a security standpoint, because
if anything goes wrong, there's nothing else

387
00:38:56.779 --> 00:39:03.609
that can be accessed. Nothing can be stolen.
Nothing can be affected, which is cool. What

388
00:39:03.609 --> 00:39:09.249
happens, the key thing to realize is that
once we get the sandbox iFrame inside a unique

389
00:39:09.249 --> 00:39:15.839
origin, when that iFrame tries to load resources
from the browser's perspective, it will look

390
00:39:15.839 --> 00:39:22.839
as if those requests came from outside the
extension. Because the iFrame is not going

391
00:39:23.259 --> 00:39:29.200
to be living in the extensions origin. Now,
with manifest V1, you were allowed to load

392
00:39:29.200 --> 00:39:36.200
everything you wanted from any origin. In
manifest V2, if an origin different from the

393
00:39:36.390 --> 00:39:40.150
extensions or the apps origin tries to load
a resource from the app, the browser will

394
00:39:40.150 --> 00:39:47.150
forbid that, and that's where Web access resources
come from. If we want to load from the session

395
00:39:48.460 --> 00:39:55.460
package, we need to list it in Web accessible
resources. And also, this also applies not

396
00:39:57.299 --> 00:40:04.299
only to the main Web accessible resources
line, it also applies to CSP. The things that

397
00:40:04.599 --> 00:40:11.599
we're loading inside the sandbox iFrame, those
requests will not look as if they came from

398
00:40:12.059 --> 00:40:18.450
the extension or the app. They will look as
if they came from a different origin. So CSP

399
00:40:18.450 --> 00:40:25.450
will not allow those requests to go forward
by matching the "self" token in the CSP line.

400
00:40:27.779 --> 00:40:34.779
It will actually need to match that to a different
line that will have Chrome extension URI as

401
00:40:34.819 --> 00:40:41.819
-- the Chrome extension URI as its URI. Now,
if you are running the new package apps that

402
00:40:44.930 --> 00:40:50.759
come with the apps V2, that we introduced
for I/O, there's a slightly simpler way to

403
00:40:50.759 --> 00:40:55.769
do this, which I'm not going to have time
to explain that talk. But there was a talk

404
00:40:55.769 --> 00:41:01.349
on Wednesday that explained it in more depth,
and if anybody wants to learn about that,

405
00:41:01.349 --> 00:41:08.349
please feel free to find me after the talk.
But the core point to remember is that once

406
00:41:09.479 --> 00:41:14.479
we manage to get stuff into the sandbox iFrame,
it's running inside and encouraging, then

407
00:41:14.479 --> 00:41:19.920
it will have -- it will live in origin for
everything, even for resource loading, and

408
00:41:19.920 --> 00:41:26.920
that might need to have us change some of
the CSP policies that we are using. And again,

409
00:41:28.670 --> 00:41:34.200
we're seeing that I'm using -- or the document
viewer developers were URIs for images and

410
00:41:34.200 --> 00:41:39.809
the reason that that happens is that not only
we kept script in a different origin from

411
00:41:39.809 --> 00:41:45.219
our main application origin, we also put it
in a unique origin, which is slightly different

412
00:41:45.219 --> 00:41:51.400
than just a different origin. Unique origins
cannot access any persistent local storage.

413
00:41:51.400 --> 00:41:58.249
No HTML5 APIs, no persistent local storage.
Now, imagine if you're obligation developer

414
00:41:58.249 --> 00:42:05.079
and you had a great idea for a Chromized document
viewer, and you want to display documents

415
00:42:05.079 --> 00:42:10.279
that might have images inside them. These
images are probably encoded inside the documents

416
00:42:10.279 --> 00:42:17.279
in some way which we don't really care about,
but if you're not doing your processing, or

417
00:42:18.589 --> 00:42:24.950
some of your processing inside the sandbox
iFrame, you need a way to get that information

418
00:42:24.950 --> 00:42:30.849
inside the iFrame. You might be extracting
the images outside the iFrame, or even better,

419
00:42:30.849 --> 00:42:37.849
in a different iFrame. And you need a way
to provide that -- to get that information

420
00:42:38.869 --> 00:42:44.650
inside the iFrame. Now, the only way you have
to actually communicate with the code inside

421
00:42:44.650 --> 00:42:49.759
the iFrame is by using post message. So you
might say, well, I'll have to take the binary

422
00:42:49.759 --> 00:42:55.539
data from the image, turn it into Base64,
ship it over using post message, decode it

423
00:42:55.539 --> 00:43:02.420
back to binary inside the iFrame. That works.
Not very performant. You have two Base64 to

424
00:43:02.420 --> 00:43:09.420
binary conversions that you don't really need,
and that's where typed arrays come in. JavaScript

425
00:43:11.210 --> 00:43:18.210
actually can deal perfectly well with binary
data. You just create an array buffer, the

426
00:43:18.289 --> 00:43:25.289
size you need in this case, 8 bytes, and then
you can cover that array buffer with different

427
00:43:25.380 --> 00:43:31.989
what we call views which allow you to manipulate
that array buffer using different data types.

428
00:43:31.989 --> 00:43:38.969
In this case we can manipulate it either as
an array of signed bytes or as an array of

429
00:43:38.969 --> 00:43:45.969
signed 32 bit, but the best way about -- the
best thing array buffers is that they can

430
00:43:46.749 --> 00:43:53.749
very easily be turned into objects that can
be loaded in the browser. If the code outside

431
00:43:55.789 --> 00:44:01.450
the iFrame or inside a different iFrame sends
us an array buffer over post message, we can

432
00:44:01.450 --> 00:44:07.719
easily turn it into a blob, and then we can
create a URL -- a URL from that blob that

433
00:44:07.719 --> 00:44:12.219
will look something like that. We don't really
care what it looks like. We really care about

434
00:44:12.219 --> 00:44:17.890
the fact that it can be used as a source for
all sorts of tasks. This is how the document

435
00:44:17.890 --> 00:44:24.890
viewer developers manage to do the parsing
of the documents in one sandbox, and displaying

436
00:44:26.400 --> 00:44:32.549
in the document in a different sandbox, passing
binary data back and forth using a very efficient

437
00:44:32.549 --> 00:44:39.549
mechanism that doesn't need any encoding whatsoever.
Not only that, once you get the blob URI inside

438
00:44:39.950 --> 00:44:46.329
the sandbox, you can use it all the times
you want. It's a way of getting a URI pointing

439
00:44:46.329 --> 00:44:53.329
directly to a chunk of bytes in the browser's
memory. This made possible to write a very

440
00:44:53.979 --> 00:44:59.390
secure document viewer app and still keep
all the functionality that one would expect

441
00:44:59.390 --> 00:45:06.390
from a document viewer.
Now, I mostly talked about JavaScript today.

442
00:45:08.920 --> 00:45:13.739
Good news is that the Chrome platform also
includes a way of getting all these same security

443
00:45:13.739 --> 00:45:20.739
guarantees for native code. There were a lot
of talks about (NaCl) Native Client, in I/O,

444
00:45:22.579 --> 00:45:29.579
your -- you will probably find them, the videos
online after I/O ends. (NaCl) allows you to

445
00:45:30.559 --> 00:45:35.499
get all the same guaranties that we can give
for JavaScript code running inside a sandbox

446
00:45:35.499 --> 00:45:40.950
iFrame for native code, native C or C++ code.
And the best thing is that the communication

447
00:45:40.950 --> 00:45:46.650
with this sandbox code uses the same interface
that you can use to talk to JavaScript which

448
00:45:46.650 --> 00:45:52.190
is a post message based API. So you can get
the same guaranties that you can get with

449
00:45:52.190 --> 00:45:58.979
sandbox JavaScript, no access to the application's
origin, using the same API. Your JavaScript

450
00:45:58.979 --> 00:46:05.979
code can both talk to JavaScript or to native
code with the same security guaranties. Now,

451
00:46:06.960 --> 00:46:13.960
take aways, and we'll move into questions.
Please, please, please, use CSP. Please. Let

452
00:46:15.039 --> 00:46:22.039
Chrome, the browser, be the safety net. Just
make some very small changes, move scripts

453
00:46:23.559 --> 00:46:29.920
out of HTML, removing line handling -- inline
handling and stop worrying. As long as you

454
00:46:29.920 --> 00:46:36.920
do stuff this way, the browser will take care
of not allowing malicious script to go through.

455
00:46:37.089 --> 00:46:43.509
This removes -- this blocks most cases of
cross-site scripting. It does. Because a browser

456
00:46:43.509 --> 00:46:48.249
can make sure that this doesn't happen in
only one place. You have to make sure it doesn't

457
00:46:48.249 --> 00:46:52.849
happen in every single way -- place you use
inner HTML or e-mail or server or everything.

458
00:46:52.849 --> 00:46:59.849
Let us let the browser help the app make sure
that this doesn't happen. And if you need

459
00:47:00.029 --> 00:47:05.539
to run script that you're not comfortable
with, you don't really want it to be able

460
00:47:05.539 --> 00:47:11.029
to access the application or the extension's
origin, put it in a sandbox iFrame. That's

461
00:47:11.029 --> 00:47:16.479
what they are for. It will run very happily,
talk over post message, but if anything goes

462
00:47:16.479 --> 00:47:22.559
wrong, it won't have any other privilege.
It won't be able to access anything in the

463
00:47:22.559 --> 00:47:26.039
extension of the app's origin. That's a good
thing.

464
00:47:26.039 --> 00:47:31.549
Thank you for joining the session.
[ Applause ]

465
00:47:31.549 --> 00:47:38.549
&gt;&gt;Jorge Lucangeli Obes: That's my e-mail.
My public Google+ account. The slides are

466
00:47:39.880 --> 00:47:45.890
going to be posted. I saw some people taking
pictures of the slides. Don't worry. And,

467
00:47:45.890 --> 00:47:51.739
yeah, we're open for questions. There's mics,
yeah. There's mics.

468
00:47:51.739 --> 00:47:57.450
&gt;&gt;&gt; Hey, so good talk. My question is a bit
of a tangent, though. Have you guys seen very

469
00:47:57.450 --> 00:48:03.789
many actually malicious Chrome Apps or extensions?
&gt;&gt;Jorge Lucangeli Obes: We take out approximately

470
00:48:03.789 --> 00:48:10.630
a dozen malicious extensions either per day
or per week from the Chrome store, yes.

471
00:48:10.630 --> 00:48:15.640
&gt;&gt;&gt; Okay. What kind of attack patterns do
they use in general, if can you tell us?

472
00:48:15.640 --> 00:48:20.349
&gt;&gt;Jorge Lucangeli Obes: No. It's probably
better to contact press, yes.

473
00:48:20.349 --> 00:48:25.769
&gt;&gt;&gt; Okay. Okay. Fair enough. Thanks.
&gt;&gt;Jorge Lucangeli Obes: More questions?

474
00:48:25.769 --> 00:48:32.769
No more questions? Don't be shy.
&gt;&gt;&gt; So what's wrong with attributes that have

475
00:48:38.289 --> 00:48:45.180
JavaScript code in them, if they're just in
the static source of the page, as opposed

476
00:48:45.180 --> 00:48:50.459
to being injected via inner HTML or the DOM
API?

477
00:48:50.459 --> 00:48:55.099
&gt;&gt;Jorge Lucangeli Obes: For the browser?
From the browser's perspective?

478
00:48:55.099 --> 00:49:02.099
There's no difference. So the browser -- the
browser doesn't know that the -- the on mouse-over

479
00:49:04.289 --> 00:49:10.099
script that I added in the first demo is actually
malicious. I want the browser to be able to

480
00:49:10.099 --> 00:49:16.259
-- I would like the browser to be able to
block anything that got injected by inner

481
00:49:16.259 --> 00:49:23.259
HTML as opposed to stuff that got injected
-- that got put there statically in the page.

482
00:49:24.829 --> 00:49:28.749
But there's -- in reality, there's no way
of telling the difference. Once the DOM tree

483
00:49:28.749 --> 00:49:35.049
gets built, it's the same thing. Right?
The thing to include using inner HTML becomes

484
00:49:35.049 --> 00:49:40.900
part of the DOM tree just as everything else
you included statically in the page. So the

485
00:49:40.900 --> 00:49:47.869
browser cannot really tell the difference
between those two scripts. We can -- if -- we

486
00:49:47.869 --> 00:49:52.680
can discuss it after.
&gt;&gt;&gt; Okay. Good idea.

487
00:49:52.680 --> 00:49:57.459
&gt;&gt;&gt; This question is more related to your
talk. So you talk about using the X content

488
00:49:57.459 --> 00:50:04.459
security policy header in the talk. Recently
the IATF deprecated the X prefix for headers.

489
00:50:04.479 --> 00:50:09.469
Do you know if Google is like trying to move
toward standardizing what that header is?

490
00:50:09.469 --> 00:50:15.410
&gt;&gt;Jorge Lucangeli Obes: Eventually -- no.
Eventually we want to standardize. I'm not

491
00:50:15.410 --> 00:50:22.410
exactly sure what the timeline is for that,
but there's definitely people you can ask

492
00:50:22.700 --> 00:50:25.759
that if you want to. I can tell who you can
ask.

493
00:50:25.759 --> 00:50:29.890
&gt;&gt;&gt; Okay. Sure. Thanks.
&gt;&gt;Jorge Lucangeli Obes: Right there.

494
00:50:29.890 --> 00:50:35.079
&gt;&gt;&gt; I'm curious if you know the status of
CSP support in browsers other than Chrome.

495
00:50:35.079 --> 00:50:41.229
&gt;&gt;Jorge Lucangeli Obes: I don't.
&gt;&gt;&gt; Kind of a continuation from that: What's

496
00:50:41.229 --> 00:50:45.930
the status of this in the Android WebView?
&gt;&gt;Jorge Lucangeli Obes: That's a very good

497
00:50:45.930 --> 00:50:51.279
question that should be asked to Android developers.
Yeah.

498
00:50:51.279 --> 00:50:58.279
&gt;&gt;&gt; Hey, sorry, look, I think a big raisin
for not allowing inline JavaScript is because

499
00:51:02.459 --> 00:51:09.119
you're basically assuming that it's all malicious
and you've got this policy to say if it's

500
00:51:09.119 --> 00:51:14.349
not -- if any JavaScripts come from anywhere
else apart from where we said, malicious,

501
00:51:14.349 --> 00:51:20.400
right, even if it isn't. Is there much effort
going into actually determining whether JavaScript

502
00:51:20.400 --> 00:51:24.200
is malicious or not?
&gt;&gt;Jorge Lucangeli Obes: You probably run very,

503
00:51:24.200 --> 00:51:28.339
very quickly into, like, halting problem stuff,
right?

504
00:51:28.339 --> 00:51:33.700
That's basically the case. You cannot have
a way of telling what source code does that

505
00:51:33.700 --> 00:51:35.759
is 100% accurate so --
&gt;&gt;&gt; Yeah.

506
00:51:35.759 --> 00:51:41.279
&gt;&gt;Jorge Lucangeli Obes: The only way to make
sure that -- it goes back to the same thing:

507
00:51:41.279 --> 00:51:47.700
For an attacker to win, you just need one
bug, and in order for the rest of the people

508
00:51:47.700 --> 00:51:53.469
to win, you need to tie every single loose
end, and going down a path that basically

509
00:51:53.469 --> 00:51:58.819
has a lot of false positives and false negatives,
and very hard rules, it's just opening the

510
00:51:58.819 --> 00:52:04.759
door for not one bug, but a million bugs,
so we want to cut the problem from the root,

511
00:52:04.759 --> 00:52:11.759
and since it's perfectly okay, there's no
major differences except for evil, let's just

512
00:52:12.759 --> 00:52:17.549
do what's safe for the user. It's -- it's
exactly the same. It's just -- instead of

513
00:52:17.549 --> 00:52:23.479
having in HTML, do it in JavaScript, instead
of having it in code, do it in our .js files,

514
00:52:23.479 --> 00:52:27.589
and we can guaranty -- we can guaranty, we
can say this is not going to is happen, ever,

515
00:52:27.589 --> 00:52:32.989
ever, ever. No exceptions.
&gt;&gt;&gt; Well, unless your JavaScript on your server

516
00:52:32.989 --> 00:52:38.819
gets compromised. You can still be pulling
it in from trusted sources but it's been compromised

517
00:52:38.819 --> 00:52:40.069
anyway.
&gt;&gt;Jorge Lucangeli Obes: Well, exactly, but,

518
00:52:40.069 --> 00:52:45.049
I mean, since -- it should -- would have to
be compromised either in the Web site that

519
00:52:45.049 --> 00:52:51.269
is serving over HTTPS or in the actual expansion
package, which is a couple of orders of magnitude

520
00:52:51.269 --> 00:52:55.519
higher than just sitting at a Starbucks WiFi
and running something.

521
00:52:55.519 --> 00:52:59.900
&gt;&gt;&gt; Which sort of gives rise to actually checking
whether the JavaScript itself is malicious.

522
00:52:59.900 --> 00:53:03.650
&gt;&gt;Jorge Lucangeli Obes: Yes.
&gt;&gt;&gt; So you kind of need to do it eventually.

523
00:53:03.650 --> 00:53:05.130
&gt;&gt;Jorge Lucangeli Obes: But again, tradeoff,
right?

524
00:53:05.130 --> 00:53:08.660
&gt;&gt;&gt; Yeah.
&gt;&gt;Jorge Lucangeli Obes: We can make sure that

525
00:53:08.660 --> 00:53:14.200
by -- there were some stats -- there was a
very interesting paper by a group -- a research

526
00:53:14.200 --> 00:53:21.200
group at Berkeley that got published in the
beginning of 2012, by restricting inline JavaScript,

527
00:53:22.259 --> 00:53:29.259
and restricting HTTPS or HTTP script loading,
you could completely eliminate 95% of all

528
00:53:32.579 --> 00:53:39.579
the vulnerabilities in the top 100 extensions
in the Chrome Web store. Now, the tradeoff

529
00:53:39.839 --> 00:53:46.839
for that is incredibly good. It's just a couple
of simple changes that are still best practices

530
00:53:48.089 --> 00:53:51.420
for Web app development get rid of 95% of
the vulnerabilities.

531
00:53:51.420 --> 00:53:53.640
&gt;&gt;&gt; Yeah.
&gt;&gt;Jorge Lucangeli Obes: It's like we need

532
00:53:53.640 --> 00:54:00.640
to do this. Guys, we need to do this. Guys
and girls, of course.

533
00:54:01.929 --> 00:54:04.019
&gt;&gt;&gt; Can we get -- sorry.
&gt;&gt;Jorge Lucangeli Obes: That's okay.

534
00:54:04.019 --> 00:54:07.509
&gt;&gt;&gt; Can we get CSP to work in IE using Chrome
Frame, maybe?

535
00:54:07.509 --> 00:54:11.650
&gt;&gt;Jorge Lucangeli Obes: That's a very good
question to which I don't know the answer

536
00:54:11.650 --> 00:54:14.640
with, but I'm going find the answer because
it is a very good question.

537
00:54:14.640 --> 00:54:20.450
&gt;&gt;&gt; I'm following you so post it.
&gt;&gt;Jorge Lucangeli Obes: Okay. I'll post it.

538
00:54:20.450 --> 00:54:21.999
Good.
&gt;&gt;&gt; Great, thanks.

539
00:54:21.999 --> 00:54:28.059
&gt;&gt;&gt; So you mentioned that because of blocks
eval, you know, blocks templating use cases,

540
00:54:28.059 --> 00:54:31.660
I think I did catch -- so what's the alternative
do you do on something like client side templating?

541
00:54:31.660 --> 00:54:35.910
&gt;&gt;Jorge Lucangeli Obes: So the alternative
-- two alternatives: Number one, try to make

542
00:54:35.910 --> 00:54:42.910
templating people more like from evil. Alternative
number two, if you are writing and one of

543
00:54:44.559 --> 00:54:49.319
the new package apps for the Chrome platform,
this doesn't work in the drive-by Web, just

544
00:54:49.319 --> 00:54:54.770
for the Chrome platform, you are able to say
in the manifest using the sandbox attribute

545
00:54:54.770 --> 00:55:01.770
-- in the manifest, not in the iFrame, in
the manifest, you are able to say this document,

546
00:55:01.900 --> 00:55:07.680
when it's loaded inside an iFrame or in a
window, it should be put in something very

547
00:55:07.680 --> 00:55:14.680
similar to a sandbox iFrame; however, in this
new sandbox document, you cannot remove the

548
00:55:18.769 --> 00:55:23.559
same origin restriction. You cannot say, hey,
this has to live in the same origin. You cannot

549
00:55:23.559 --> 00:55:29.999
do that. Since we don't allow that in the
Chrome platform version of sandbox iFrames,

550
00:55:29.999 --> 00:55:35.589
we can't allow evil. What we don't want to
do is to say you can run evil and you can

551
00:55:35.589 --> 00:55:40.349
also remove the same origin restriction. So
if you do it through the manifest, you can

552
00:55:40.349 --> 00:55:46.710
apply a different kind of security policy
to that document you loaded inside the sandbox

553
00:55:46.710 --> 00:55:53.049
-- sandbox which can never ever live in the
same origin as your application. If you want

554
00:55:53.049 --> 00:56:00.049
to go over the code, we can check it out outside.
But if you search for sandbox in the new version

555
00:56:00.410 --> 00:56:04.819
2 documentation, it's right there.
&gt;&gt;&gt; Okay. Thank you.

556
00:56:04.819 --> 00:56:10.140
&gt;&gt;Jorge Lucangeli Obes: I think we are good
to go. Thank you.

557
00:56:10.140 --> 00:56:10.730
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:00.090

2
00:00:00.090 --> 00:00:01.030
NICK BRAY: Hello.

3
00:00:01.030 --> 00:00:02.300
My name is Nick Bray.

4
00:00:02.300 --> 00:00:03.470
I'm a software engineer.

5
00:00:03.470 --> 00:00:05.930
And I'm working on
Native Client.

6
00:00:05.930 --> 00:00:07.460
This is, unfortunately,
where dinner parties

7
00:00:07.460 --> 00:00:08.810
get a little awkward.

8
00:00:08.810 --> 00:00:10.440
So Nick, what's Native Client?

9
00:00:10.440 --> 00:00:13.680
10
00:00:13.680 --> 00:00:14.880
It's a developer thing.

11
00:00:14.880 --> 00:00:16.170
It's part of Chrome.

12
00:00:16.170 --> 00:00:17.420
I work on Chrome.

13
00:00:17.420 --> 00:00:19.830
14
00:00:19.830 --> 00:00:21.620
That's usually a fairly
soul-crushing thing.

15
00:00:21.620 --> 00:00:24.640
But fortunately, this isn't
a dinner party.

16
00:00:24.640 --> 00:00:27.050
And we can talk about
interesting things.

17
00:00:27.050 --> 00:00:29.910
So when I say "interesting,"
what I mean is--

18
00:00:29.910 --> 00:00:31.850
you get to drink from
the fire hose.

19
00:00:31.850 --> 00:00:33.720
So we're going to be discussing
address space.

20
00:00:33.720 --> 00:00:35.700
We're going to be discussing
instructions, assembly

21
00:00:35.700 --> 00:00:37.110
language, that kind of thing.

22
00:00:37.110 --> 00:00:40.290
I will try to make sure everyone
can follow along,

23
00:00:40.290 --> 00:00:43.450
even if you don't have a huge
amount of background in this.

24
00:00:43.450 --> 00:00:45.270
But we're going to get into
the nitty gritty technical

25
00:00:45.270 --> 00:00:48.950
details of how Native
Client works.

26
00:00:48.950 --> 00:00:52.170
Before we do this, of course,
the only kind thing to do is

27
00:00:52.170 --> 00:00:55.330
give a bit of an overview and
say how this fits in, why

28
00:00:55.330 --> 00:00:57.400
we're doing it, what's
important here.

29
00:00:57.400 --> 00:01:00.700
So one big thing we keep saying
is that Native Client

30
00:01:00.700 --> 00:01:03.330
allows native code to be safe
and secure as JavaScript.

31
00:01:03.330 --> 00:01:07.800
And this is a very compressed
tag line, which unless you

32
00:01:07.800 --> 00:01:10.690
actually know what's going on
behind the scenes, you aren't

33
00:01:10.690 --> 00:01:12.050
quite sure what that means.

34
00:01:12.050 --> 00:01:14.020
So one picture is worth
a thousand words.

35
00:01:14.020 --> 00:01:15.930
And this is a picture, which
you probably are familiar

36
00:01:15.930 --> 00:01:18.710
with, is whenever you try to run
a piece of native code on

37
00:01:18.710 --> 00:01:21.240
a computer, you get a
scary dialog box, or

38
00:01:21.240 --> 00:01:22.000
run from the web.

39
00:01:22.000 --> 00:01:25.590
So say someone tries to install
an NPAPI plug-in on

40
00:01:25.590 --> 00:01:29.000
your computer or even download
an EXE from the Internet, then

41
00:01:29.000 --> 00:01:31.820
try to run it, well, the
operating system is typically

42
00:01:31.820 --> 00:01:34.350
skeptical of any binary which
is coming from the network.

43
00:01:34.350 --> 00:01:36.540
And says, hey wait, you probably
shouldn't do this,

44
00:01:36.540 --> 00:01:38.170
but what do I know?

45
00:01:38.170 --> 00:01:40.040
You can do it anyways.

46
00:01:40.040 --> 00:01:43.240
So the problem with this is that
most users really cannot

47
00:01:43.240 --> 00:01:46.640
evaluate whether they should
click Run or not.

48
00:01:46.640 --> 00:01:50.130
And you sometimes lose 60 to
90% of your users when they

49
00:01:50.130 --> 00:01:51.730
get this dialog box.

50
00:01:51.730 --> 00:01:54.330
And even if they do hit Run,
then suddenly a lot of

51
00:01:54.330 --> 00:01:55.530
burden is on you.

52
00:01:55.530 --> 00:01:57.750
The burden becomes on you as
the developer to make sure

53
00:01:57.750 --> 00:02:00.650
that this piece of native code
you installed on your customer

54
00:02:00.650 --> 00:02:03.780
system is actually safe and
secure and doesn't become an

55
00:02:03.780 --> 00:02:06.290
attack vector where someone
exploits your customers

56
00:02:06.290 --> 00:02:07.710
because you made a mistake.

57
00:02:07.710 --> 00:02:12.090
So native code, understandably,
is very scary,

58
00:02:12.090 --> 00:02:14.400
especially when you get
these dialog boxes.

59
00:02:14.400 --> 00:02:17.290
So does the story end there,
Native Client?

60
00:02:17.290 --> 00:02:19.070
Should we be doing this?

61
00:02:19.070 --> 00:02:22.410
As it turns out, it isn't native
code itself which is

62
00:02:22.410 --> 00:02:23.000
the problem.

63
00:02:23.000 --> 00:02:24.810
It's the fact that my
presentation has not been

64
00:02:24.810 --> 00:02:27.360
refreshed, and the bullet
points aren't fading in.

65
00:02:27.360 --> 00:02:28.610
Hold on a second.

66
00:02:28.610 --> 00:02:37.811
67
00:02:37.811 --> 00:02:39.550
OK, back in business.

68
00:02:39.550 --> 00:02:42.280
So the problem is that the
operating system has a very

69
00:02:42.280 --> 00:02:46.220
different notion of security
than the web does.

70
00:02:46.220 --> 00:02:49.520
So say I'm browsing a website
to watch videos of cats,

71
00:02:49.520 --> 00:02:51.870
because that's what we all do,
we just don't admit it.

72
00:02:51.870 --> 00:02:56.300
And then suddenly I notice my
tax return being uploaded to a

73
00:02:56.300 --> 00:02:58.080
Russian website.

74
00:02:58.080 --> 00:03:00.530
So this right here
is a Windows API

75
00:03:00.530 --> 00:03:03.000
call to open a file.

76
00:03:03.000 --> 00:03:06.030
So really, this Russian website
does not need my tax

77
00:03:06.030 --> 00:03:08.580
return in order for me to
watch videos of cats.

78
00:03:08.580 --> 00:03:10.730
So there's something seriously
wrong here.

79
00:03:10.730 --> 00:03:13.800
But as it turns out, operating
systems are secure.

80
00:03:13.800 --> 00:03:15.760
They just think that any
program running on your

81
00:03:15.760 --> 00:03:18.750
computer is acting
on your behalf.

82
00:03:18.750 --> 00:03:21.610
So because you can open your
own spreadsheet, it assumes

83
00:03:21.610 --> 00:03:25.270
that any native program should
have access to it.

84
00:03:25.270 --> 00:03:27.580
The web figured out this is
probably not the way things

85
00:03:27.580 --> 00:03:30.170
should run when you're loading
other people's programs.

86
00:03:30.170 --> 00:03:33.260
So instead they say that the
program is operating on behalf

87
00:03:33.260 --> 00:03:34.570
of the website.

88
00:03:34.570 --> 00:03:36.880
And it should only do things
which you authorize the

89
00:03:36.880 --> 00:03:39.320
website to do.

90
00:03:39.320 --> 00:03:41.480
What this means, of course, is
that if you load native code

91
00:03:41.480 --> 00:03:43.530
and it can talk to the operating
system, it can just

92
00:03:43.530 --> 00:03:45.340
blow right past the browser.

93
00:03:45.340 --> 00:03:47.600
And that is the fundamental
problem with native code, is

94
00:03:47.600 --> 00:03:51.490
it can do things that your web
browser says is unsafe.

95
00:03:51.490 --> 00:03:53.530
Another problem, which isn't
immediately apparent, is this

96
00:03:53.530 --> 00:03:56.630
is a Windows API call
to open a file.

97
00:03:56.630 --> 00:03:59.480
And imagine if you were, say,
writing a nice application to

98
00:03:59.480 --> 00:04:02.780
view cat videos, which also
happens to upload files.

99
00:04:02.780 --> 00:04:05.880
Well, suddenly you have a cross-
platform support issue.

100
00:04:05.880 --> 00:04:08.290
You can open the files on
Windows, but are you going to

101
00:04:08.290 --> 00:04:09.180
support Mac builds?

102
00:04:09.180 --> 00:04:10.720
Are you going to support
Linux builds?

103
00:04:10.720 --> 00:04:12.790
I mean, honestly, when you're
writing malware, it becomes a

104
00:04:12.790 --> 00:04:14.150
huge problem.

105
00:04:14.150 --> 00:04:15.810
Of course, there's some
honest developers who

106
00:04:15.810 --> 00:04:16.769
have the same problem.

107
00:04:16.769 --> 00:04:19.220
And that's, when I distribute
native code, how do I make

108
00:04:19.220 --> 00:04:21.290
sure it actually
runs on all the

109
00:04:21.290 --> 00:04:23.540
operating systems out there?

110
00:04:23.540 --> 00:04:25.920
Another thing, again, which
isn't immediately obvious, is

111
00:04:25.920 --> 00:04:27.440
this is a synchronous call.

112
00:04:27.440 --> 00:04:30.100
A lot of operating system APIs
were designed back in the days

113
00:04:30.100 --> 00:04:32.230
where synchronous blocking
of things

114
00:04:32.230 --> 00:04:33.640
seemed like a good idea.

115
00:04:33.640 --> 00:04:36.740
But with the advent of browsers
and JavaScript, a

116
00:04:36.740 --> 00:04:39.570
decision was made to eliminate
the use of threads for the

117
00:04:39.570 --> 00:04:42.450
most part within a single
JavaScript environment, a

118
00:04:42.450 --> 00:04:43.620
single document.

119
00:04:43.620 --> 00:04:45.440
And instead, everything was
single-threaded with

120
00:04:45.440 --> 00:04:46.860
asynchronous callbacks.

121
00:04:46.860 --> 00:04:49.710
So APIs have had to change in
order to support the web.

122
00:04:49.710 --> 00:04:52.320
Whenever you open a file on the
web, you, in fact, give it

123
00:04:52.320 --> 00:04:54.100
a callback to call you back.

124
00:04:54.100 --> 00:04:59.020
So, the big crux of Native
Client is making you talk to

125
00:04:59.020 --> 00:05:01.930
the web browser instead of
talking to the operating

126
00:05:01.930 --> 00:05:05.260
system, and in fact making it
impossible to talk to the

127
00:05:05.260 --> 00:05:06.510
operating system.

128
00:05:06.510 --> 00:05:08.560
129
00:05:08.560 --> 00:05:11.170
So this is an example of what
a native program talking to

130
00:05:11.170 --> 00:05:12.350
the web browser would
look like.

131
00:05:12.350 --> 00:05:14.690
It's a little ugly, but
it's from real code.

132
00:05:14.690 --> 00:05:16.370
And well, real code is ugly.

133
00:05:16.370 --> 00:05:20.180
So this is an example of doing
a URL request to get the page

134
00:05:20.180 --> 00:05:22.660
www.google.com.

135
00:05:22.660 --> 00:05:25.070
It's analogous to what we were
seeing with opening a file.

136
00:05:25.070 --> 00:05:27.030
But it's a different
API, and it's

137
00:05:27.030 --> 00:05:29.120
routed through the browser.

138
00:05:29.120 --> 00:05:33.070
So Native Client provides a
bunch of APIs for I/O that are

139
00:05:33.070 --> 00:05:35.300
mediated through the browser
through an API called the

140
00:05:35.300 --> 00:05:36.950
Pepper Plugin API.

141
00:05:36.950 --> 00:05:39.530
The Pepper Plugin API you can
think of as a successor to the

142
00:05:39.530 --> 00:05:41.990
Netscape Plugin API, where
things we've learned in the

143
00:05:41.990 --> 00:05:45.170
meantime, such as 3D graphics
are good, have been

144
00:05:45.170 --> 00:05:45.910
incorporated.

145
00:05:45.910 --> 00:05:48.950
And instead of just drawing to
a random window, you can now

146
00:05:48.950 --> 00:05:51.420
delegate to the browser and say
here's some 3D content,

147
00:05:51.420 --> 00:05:52.610
just like WebGL.

148
00:05:52.610 --> 00:05:55.120
So ultimately, the Pepper Plugin
API gives you a lot of

149
00:05:55.120 --> 00:05:57.680
functionality similar
to JavaScript.

150
00:05:57.680 --> 00:06:01.190
As you can think, all the APIs
that JavaScript has to open

151
00:06:01.190 --> 00:06:04.940
URLs, to draw 3D content, it's
also exposed to native code

152
00:06:04.940 --> 00:06:06.190
through Pepper.

153
00:06:06.190 --> 00:06:08.080
154
00:06:08.080 --> 00:06:10.910
Not everything is I/O. So if you
want to spin up a thread

155
00:06:10.910 --> 00:06:13.030
or do things like that, that
actually occurs within a

156
00:06:13.030 --> 00:06:13.830
single process.

157
00:06:13.830 --> 00:06:15.100
You don't need to talk
to the browser,

158
00:06:15.100 --> 00:06:16.450
don't need it's approval.

159
00:06:16.450 --> 00:06:18.860
And for that, we've used
the POSIX API.

160
00:06:18.860 --> 00:06:21.750
So you can spawn threads
and do similar things.

161
00:06:21.750 --> 00:06:25.650
So if your code's running on
Linux, you can port the I/O to

162
00:06:25.650 --> 00:06:26.760
use Pepper.

163
00:06:26.760 --> 00:06:29.330
And more or less, everything
else should look

164
00:06:29.330 --> 00:06:31.570
relatively the same.

165
00:06:31.570 --> 00:06:33.810
And why are we doing this?

166
00:06:33.810 --> 00:06:36.030
The ultimate goal is no
scary dialog box.

167
00:06:36.030 --> 00:06:37.580
You can just run the code.

168
00:06:37.580 --> 00:06:39.680
It follows the web safety rules,
so you don't have to

169
00:06:39.680 --> 00:06:40.660
warn the user.

170
00:06:40.660 --> 00:06:41.940
It's part a seamless
experience.

171
00:06:41.940 --> 00:06:45.010
And in fact, most users won't
know the running NaCl.

172
00:06:45.010 --> 00:06:48.150
We have a lot of games in the
web store now, which we aren't

173
00:06:48.150 --> 00:06:48.950
trumpeting NaCl.

174
00:06:48.950 --> 00:06:50.970
It's just you can run bastion
on your computer now.

175
00:06:50.970 --> 00:06:53.710
176
00:06:53.710 --> 00:06:56.670
So the life cycle of a Native
Client application has three

177
00:06:56.670 --> 00:06:57.710
distinct stages.

178
00:06:57.710 --> 00:06:59.040
The first stage is what
the developer

179
00:06:59.040 --> 00:07:00.230
does on their computer.

180
00:07:00.230 --> 00:07:04.000
So you can get a bunch of
sources, existing library.

181
00:07:04.000 --> 00:07:06.170
Or say you've written a game,
and you want to port the game,

182
00:07:06.170 --> 00:07:07.660
run it on the web.

183
00:07:07.660 --> 00:07:10.590
You do supporting work on your
C files, and then you use a

184
00:07:10.590 --> 00:07:13.850
modified version of GCC,
which we provide.

185
00:07:13.850 --> 00:07:15.130
There's one wrinkle on this.

186
00:07:15.130 --> 00:07:18.060
And that's that you need to
use a version of GCC that

187
00:07:18.060 --> 00:07:20.870
targets binaries for different
platforms--

188
00:07:20.870 --> 00:07:22.930
or different architectures,
I should say, chip

189
00:07:22.930 --> 00:07:23.820
architectures.

190
00:07:23.820 --> 00:07:26.810
So the binaries that are
produced are OS independent,

191
00:07:26.810 --> 00:07:31.710
but for the moment, they have a
architecture, an instruction

192
00:07:31.710 --> 00:07:33.730
architecture set dependency.

193
00:07:33.730 --> 00:07:38.130
So for this talk, I'm going to
show you the internals for the

194
00:07:38.130 --> 00:07:40.670
x86-64 sandboxing model.

195
00:07:40.670 --> 00:07:43.890
And you can think that the
x86-32 and the ARM sandboxing

196
00:07:43.890 --> 00:07:46.230
models are quite similar.

197
00:07:46.230 --> 00:07:50.670
The details differ, but
spiritually they're the same.

198
00:07:50.670 --> 00:07:52.130
At the end of the year,
we're going to have a

199
00:07:52.130 --> 00:07:54.590
product called PNaCl.

200
00:07:54.590 --> 00:07:56.020
I should've defined this
a little earlier.

201
00:07:56.020 --> 00:07:59.530
When I say NaCl, I mean
Native Client.

202
00:07:59.530 --> 00:08:02.650
And I've just use this term so
much, I use it automatically.

203
00:08:02.650 --> 00:08:05.430
So I need to make very sure
that everyone knows I mean

204
00:08:05.430 --> 00:08:06.220
Native Client.

205
00:08:06.220 --> 00:08:09.540
So PNaCl, Portable Native,
Client, P-NaCl, is going to

206
00:08:09.540 --> 00:08:12.510
use an LLVM-based tool chain,
which will allow you to ship

207
00:08:12.510 --> 00:08:15.560
bit code, platform independent
bit code, across the wire.

208
00:08:15.560 --> 00:08:17.740
And that'll get translated to
whatever architecture you want

209
00:08:17.740 --> 00:08:18.940
to use on the computer.

210
00:08:18.940 --> 00:08:21.860
So that'll be roughly
the end of the year.

211
00:08:21.860 --> 00:08:26.060
And at the bottom level, what
we're going to talk about

212
00:08:26.060 --> 00:08:27.260
today remains the same.

213
00:08:27.260 --> 00:08:29.800
So the interchange format will
change, but the sandboxing

214
00:08:29.800 --> 00:08:32.580
model, the inner mechanics,
is going to stay the same.

215
00:08:32.580 --> 00:08:36.840
So this modified version of GCC
outputs code which we can

216
00:08:36.840 --> 00:08:38.640
later statically analyze.

217
00:08:38.640 --> 00:08:39.919
And we'll get into
what this is.

218
00:08:39.919 --> 00:08:42.150
We call it validation.

219
00:08:42.150 --> 00:08:44.450
Once you compile this code, you
upload it to a web server,

220
00:08:44.450 --> 00:08:45.490
just like a normal web app.

221
00:08:45.490 --> 00:08:47.640
In fact, it looks a lot
like a normal web app.

222
00:08:47.640 --> 00:08:48.710
You have an HTML file.

223
00:08:48.710 --> 00:08:49.780
You can have JavaScript.

224
00:08:49.780 --> 00:08:51.390
You can have CSS.

225
00:08:51.390 --> 00:08:53.810
And then within that app, you
have an embed tag somewhere.

226
00:08:53.810 --> 00:08:56.970
And the embed tag pulls in the
Native Client executable, and

227
00:08:56.970 --> 00:08:58.360
it can talk with the rest
of the web page.

228
00:08:58.360 --> 00:09:03.970
So you can make a UI
with HTML elements.

229
00:09:03.970 --> 00:09:06.890
And finally, at the end,
there is the user.

230
00:09:06.890 --> 00:09:08.940
The user is running a browser
on the computer.

231
00:09:08.940 --> 00:09:12.490
The browser loads the page,
loads the embed tag, pulls in

232
00:09:12.490 --> 00:09:15.040
the Native Client executable.

233
00:09:15.040 --> 00:09:16.200
So the question to
ask at this point

234
00:09:16.200 --> 00:09:18.020
is, where's the security?

235
00:09:18.020 --> 00:09:21.360
Ultimately, the user wants to
say that this application I'm

236
00:09:21.360 --> 00:09:24.230
running on the network isn't
going to harm my computer.

237
00:09:24.230 --> 00:09:26.230
So how are we are able to
make that assertion?

238
00:09:26.230 --> 00:09:29.810
We actually can't say that
about the compiler.

239
00:09:29.810 --> 00:09:32.530
So the compiler tries to output
code, which we can

240
00:09:32.530 --> 00:09:34.120
verify as safe.

241
00:09:34.120 --> 00:09:37.550
But we don't trust it, because
at the end of the day who

242
00:09:37.550 --> 00:09:38.990
knows what the developer's
intending.

243
00:09:38.990 --> 00:09:41.105
They could just have an
arbitrary binary blob that

244
00:09:41.105 --> 00:09:42.870
they put together with
the hex editor.

245
00:09:42.870 --> 00:09:45.720
And when the user gets it, they
have to look at it and

246
00:09:45.720 --> 00:09:47.770
verify it's safe before
they run it.

247
00:09:47.770 --> 00:09:50.380
And similarly, even if
it isn't malicious,

248
00:09:50.380 --> 00:09:52.300
compilers have bugs.

249
00:09:52.300 --> 00:09:55.560
So GCC, LLVM, very complex
pieces of software.

250
00:09:55.560 --> 00:09:59.000
They were not written with
safety in mind to begin with.

251
00:09:59.000 --> 00:10:01.220
So saying that these compilers
are going to produce perfect

252
00:10:01.220 --> 00:10:03.520
code, that's a bad assumption
to make.

253
00:10:03.520 --> 00:10:06.590
Instead, on the web browser, we
look at the code before we

254
00:10:06.590 --> 00:10:09.410
run it and apply some simple
rules to try to verify it's

255
00:10:09.410 --> 00:10:12.000
safe rather than saying this
big complicated piece of

256
00:10:12.000 --> 00:10:14.000
software is where
the safety is.

257
00:10:14.000 --> 00:10:16.760
258
00:10:16.760 --> 00:10:21.010
When Native Client actually runs
an EXE, the process model

259
00:10:21.010 --> 00:10:22.330
looks a little bit like this.

260
00:10:22.330 --> 00:10:25.740
So what you think of as the web
browser, what you see is

261
00:10:25.740 --> 00:10:27.020
called the browser process.

262
00:10:27.020 --> 00:10:29.500
And that's just a normal
application running on your

263
00:10:29.500 --> 00:10:31.230
computer, talking with the OS.

264
00:10:31.230 --> 00:10:35.860
But every time Chrome visits a
new domain, it usually splits

265
00:10:35.860 --> 00:10:38.840
it off into its own process
and says there is a render

266
00:10:38.840 --> 00:10:42.460
process for the specific site,
which can do all the

267
00:10:42.460 --> 00:10:45.100
JavaScript execution, all the
rendering of the DOM.

268
00:10:45.100 --> 00:10:47.100
And we're going to try to
keep sites separate.

269
00:10:47.100 --> 00:10:50.690
So if one site is compromised,
it rattles around in its own

270
00:10:50.690 --> 00:10:54.300
process and has a much harder
time attacking another site,

271
00:10:54.300 --> 00:10:56.790
stealing your credentials from
your banking system,

272
00:10:56.790 --> 00:10:57.860
or things like that.

273
00:10:57.860 --> 00:11:00.050
So these renderer processes run
in something called the

274
00:11:00.050 --> 00:11:01.730
Chrome Sandbox.

275
00:11:01.730 --> 00:11:04.800
The Chrome Sandbox, you can
think of it as deprivileging

276
00:11:04.800 --> 00:11:06.050
the processes.

277
00:11:06.050 --> 00:11:09.480
It says, hey, if these processes
ask for your tax

278
00:11:09.480 --> 00:11:12.300
return, that's probably
a bad idea.

279
00:11:12.300 --> 00:11:15.470
So don't trust them, don't
give it to them.

280
00:11:15.470 --> 00:11:17.120
So you'd think that this
solves most of the

281
00:11:17.120 --> 00:11:18.730
problems for NaCl.

282
00:11:18.730 --> 00:11:21.910
But as it turns out, we're
following a pattern called

283
00:11:21.910 --> 00:11:23.440
defense in depth.

284
00:11:23.440 --> 00:11:26.910
We try to build layers, each of
which is secure on its own.

285
00:11:26.910 --> 00:11:29.410
And if one of those layers
fails, the other should catch

286
00:11:29.410 --> 00:11:30.920
the problem.

287
00:11:30.920 --> 00:11:32.600
And there's actually some
subtle problems with the

288
00:11:32.600 --> 00:11:34.770
sandbox I'm not going
to get fully into.

289
00:11:34.770 --> 00:11:38.180
But Native Client tries to
provide an inner sandbox

290
00:11:38.180 --> 00:11:39.800
inside its own process.

291
00:11:39.800 --> 00:11:42.460
So when you have an embed tag
in the web page, instead of

292
00:11:42.460 --> 00:11:44.450
running the Native Client
executable inside the render

293
00:11:44.450 --> 00:11:47.510
process, it spins up yet another
process, and then

294
00:11:47.510 --> 00:11:50.820
applies the inner sandbox to
make sure it never can--

295
00:11:50.820 --> 00:11:54.690
or we try to make sure it can
never do anything bad.

296
00:11:54.690 --> 00:11:57.270
So for the rest of this
presentation, I'm going to be

297
00:11:57.270 --> 00:11:58.740
talking about the
inner sandbox.

298
00:11:58.740 --> 00:12:00.280
I'm going to be talking
about what

299
00:12:00.280 --> 00:12:02.350
happens in the NaCl process.

300
00:12:02.350 --> 00:12:06.400
Now, there's a lot of little
pieces that build up in order

301
00:12:06.400 --> 00:12:09.950
for us to verify that the
process isn't talking with the

302
00:12:09.950 --> 00:12:12.150
operating system, or more
correctly, the code that's

303
00:12:12.150 --> 00:12:15.250
loaded across the network is not
talking directly with the

304
00:12:15.250 --> 00:12:16.230
operating system.

305
00:12:16.230 --> 00:12:19.470
And we can do very controlled
calls to provide services that

306
00:12:19.470 --> 00:12:22.430
are needed.

307
00:12:22.430 --> 00:12:25.180
So the first step in this
journey is being able to

308
00:12:25.180 --> 00:12:28.050
understand what code we have.

309
00:12:28.050 --> 00:12:29.240
So you'd think this is easy.

310
00:12:29.240 --> 00:12:30.550
You've done assembly language.

311
00:12:30.550 --> 00:12:32.030
You see a lot of instructions.

312
00:12:32.030 --> 00:12:34.900
And we just look at the
instructions and say, bad

313
00:12:34.900 --> 00:12:35.430
instruction.

314
00:12:35.430 --> 00:12:37.070
We're not running it.

315
00:12:37.070 --> 00:12:38.400
End of the story.

316
00:12:38.400 --> 00:12:40.960
However, computers see the world
in a different way than

317
00:12:40.960 --> 00:12:41.740
humans usually do.

318
00:12:41.740 --> 00:12:45.070
And that's that native code
is a stream of bytes.

319
00:12:45.070 --> 00:12:47.220
And they start executing
the stream of bytes--

320
00:12:47.220 --> 00:12:50.660
pull in bytes, execute, pull
in more bytes, execute.

321
00:12:50.660 --> 00:12:52.595
And if we really want to
understand what the processor

322
00:12:52.595 --> 00:12:55.380
is doing, we have to disassemble
the code.

323
00:12:55.380 --> 00:12:58.160
We have to look at it from the
CPU's point of view and see

324
00:12:58.160 --> 00:13:01.080
what it's going to execute.

325
00:13:01.080 --> 00:13:04.300
So before we get into why this
is all difficult, the question

326
00:13:04.300 --> 00:13:05.440
is, what are we looking for?

327
00:13:05.440 --> 00:13:08.880
What instructions do we
not want to execute?

328
00:13:08.880 --> 00:13:12.070
The first one which I've been
harping on is syscall.

329
00:13:12.070 --> 00:13:15.150
So syscall, just as a
convention, on the right I

330
00:13:15.150 --> 00:13:18.670
will have the bytes that these
instructions compile into.

331
00:13:18.670 --> 00:13:20.760
So syscall is a two-byte
instruction.

332
00:13:20.760 --> 00:13:23.680
And what this does is, it says,
hey, operating system, I

333
00:13:23.680 --> 00:13:25.920
want you provide a
service for me.

334
00:13:25.920 --> 00:13:29.720
And without the outer sandbox,
without the Chrome sandbox,

335
00:13:29.720 --> 00:13:31.900
there is very obvious problems
here, is that you can open

336
00:13:31.900 --> 00:13:33.630
files, do all sorts
of bad things.

337
00:13:33.630 --> 00:13:35.910
But even with the Chrome
sandbox, there are still a lot

338
00:13:35.910 --> 00:13:36.830
of problems.

339
00:13:36.830 --> 00:13:41.480
So there's a recently publicized
vulnerability in

340
00:13:41.480 --> 00:13:46.460
the Intel implementation of the
x86-64 architecture, where

341
00:13:46.460 --> 00:13:49.810
the sysexit return-- so in the
operating system return from

342
00:13:49.810 --> 00:13:53.820
assist call, if you set it up
in such a clever way, you

343
00:13:53.820 --> 00:13:56.030
could cause it to overwrite
arbitrary memory inside the

344
00:13:56.030 --> 00:14:00.080
operating system and result in
a exploit, where you could

345
00:14:00.080 --> 00:14:02.430
escalate privileges in
the operating system.

346
00:14:02.430 --> 00:14:06.810
So the silicon itself
allowed an attack on

347
00:14:06.810 --> 00:14:08.250
the operating system.

348
00:14:08.250 --> 00:14:09.840
The bottom line is, we
simply do not want

349
00:14:09.840 --> 00:14:10.930
to make these calls.

350
00:14:10.930 --> 00:14:12.880
These calls are the gateway
to the operating system.

351
00:14:12.880 --> 00:14:14.230
They are an attack surface.

352
00:14:14.230 --> 00:14:16.400
So even if we're in a
de-privilege process, we don't

353
00:14:16.400 --> 00:14:19.260
want to make them in
the first place.

354
00:14:19.260 --> 00:14:20.480
Another interesting
instruction.

355
00:14:20.480 --> 00:14:23.930
This is actually a fairly old
example, but famous, is the

356
00:14:23.930 --> 00:14:25.410
FOOF instruction.

357
00:14:25.410 --> 00:14:29.840
The FOOF instruction, because
it starts with F-O-O-F, had

358
00:14:29.840 --> 00:14:33.420
this nasty habit of actually
freezing your entire computer

359
00:14:33.420 --> 00:14:35.560
when executed on an
older Pentium.

360
00:14:35.560 --> 00:14:39.990
So under the hood what was going
on is it applied a lock,

361
00:14:39.990 --> 00:14:42.780
and then it tried to execute
an invalid instruction.

362
00:14:42.780 --> 00:14:46.250
And it never recovered
and unlocked so your

363
00:14:46.250 --> 00:14:47.790
entire CPU hung up.

364
00:14:47.790 --> 00:14:50.020
So if you talk to some security
people, they'll say,

365
00:14:50.020 --> 00:14:52.160
well, this isn't really a
security vulnerability.

366
00:14:52.160 --> 00:14:54.990
Because, well, you know, you
aren't using your bank account

367
00:14:54.990 --> 00:14:56.980
information to some
random hacker.

368
00:14:56.980 --> 00:14:59.060
But if you think about it from
a web perspective, do you

369
00:14:59.060 --> 00:15:01.240
really want to surf to a web
page and have to power cycle

370
00:15:01.240 --> 00:15:01.850
your computer?

371
00:15:01.850 --> 00:15:02.890
It's bad.

372
00:15:02.890 --> 00:15:05.470
So there is these classes of
instructions that again we

373
00:15:05.470 --> 00:15:08.260
want to blacklist and say if
we encounter these in an

374
00:15:08.260 --> 00:15:11.080
executable, obviously the
person's up to no good.

375
00:15:11.080 --> 00:15:13.860
So syscalls, FOOF instructions,
we're not going

376
00:15:13.860 --> 00:15:16.460
to mess with them and just
reject the binary out right

377
00:15:16.460 --> 00:15:18.590
and not run it.

378
00:15:18.590 --> 00:15:20.310
So there's a third class
of instruction,

379
00:15:20.310 --> 00:15:22.470
which is a little weird.

380
00:15:22.470 --> 00:15:25.700
And if you just look at this
instruction, all it does is

381
00:15:25.700 --> 00:15:27.790
multiply a bunch of
numbers together.

382
00:15:27.790 --> 00:15:28.980
Perfectly safe.

383
00:15:28.980 --> 00:15:30.570
There's no problem with this.

384
00:15:30.570 --> 00:15:33.520
Well, as it turns out, the one
wrinkle here is that this is

385
00:15:33.520 --> 00:15:38.350
part of a new instruction set,
the SSE4 instruction set.

386
00:15:38.350 --> 00:15:40.880
So if you're running on a
computer that doesn't support

387
00:15:40.880 --> 00:15:43.670
this instruction set, what
happens when you try to

388
00:15:43.670 --> 00:15:45.440
execute it?

389
00:15:45.440 --> 00:15:48.240
So in theory, it should just
halt the process, but has

390
00:15:48.240 --> 00:15:51.620
everyone really tested every
invalid instruction possible

391
00:15:51.620 --> 00:15:52.770
on every chip?

392
00:15:52.770 --> 00:15:55.670
So instead of running this risk,
instead what we do when

393
00:15:55.670 --> 00:15:57.960
we encounter it, instead of
rejecting the program, we

394
00:15:57.960 --> 00:16:00.570
simply write over it with
halt instructions.

395
00:16:00.570 --> 00:16:04.250
So a well-formed executable
should not try to execute this

396
00:16:04.250 --> 00:16:06.160
instruction if it's
not supported.

397
00:16:06.160 --> 00:16:08.290
But if it does, because we
overwrote it with halt

398
00:16:08.290 --> 00:16:11.960
instructions, that causes the
execution to stop when it

399
00:16:11.960 --> 00:16:14.720
encounters it, just like it
theoretically should if the

400
00:16:14.720 --> 00:16:17.940
instruction was not supported
by the processor.

401
00:16:17.940 --> 00:16:20.460
So overall, Native Client is
looking for a variety of

402
00:16:20.460 --> 00:16:24.250
instructions that wants to say
either don't run the program,

403
00:16:24.250 --> 00:16:27.780
or overwrite this to be
sure that we're safe.

404
00:16:27.780 --> 00:16:29.720
So how do we find these
instructions?

405
00:16:29.720 --> 00:16:32.290
That's the crucial step.

406
00:16:32.290 --> 00:16:34.250
So previously, I said it's
a stream of bytes.

407
00:16:34.250 --> 00:16:35.630
And you're taking chunks
out of the stream of

408
00:16:35.630 --> 00:16:36.440
bytes as you go.

409
00:16:36.440 --> 00:16:39.630
And that's nice until you
realize that you aren't just

410
00:16:39.630 --> 00:16:41.070
going in one direction.

411
00:16:41.070 --> 00:16:43.050
You can occasionally hit
a jump that'll take you

412
00:16:43.050 --> 00:16:44.680
somewhere else in
the execution.

413
00:16:44.680 --> 00:16:46.010
And it could be an
arbitrary byte.

414
00:16:46.010 --> 00:16:47.330
So there's two classes
of jumps we're

415
00:16:47.330 --> 00:16:48.150
going to deal with.

416
00:16:48.150 --> 00:16:51.110
One is direct jumps, jumps where
you know the address

417
00:16:51.110 --> 00:16:53.830
that you're going to, and
indirect jumps, where your

418
00:16:53.830 --> 00:16:56.620
address is calculated from data,
and you may not know

419
00:16:56.620 --> 00:16:59.480
exactly where you're
going upfront.

420
00:16:59.480 --> 00:17:02.530
So here's an example of a
problematic direct jump.

421
00:17:02.530 --> 00:17:04.270
So two instructions here.

422
00:17:04.270 --> 00:17:08.890
The first instruction loads a
constant into a register.

423
00:17:08.890 --> 00:17:11.770
Now, this is a strange constant,
but we'll assume the

424
00:17:11.770 --> 00:17:13.710
programmer knows what they're
doing, and they have some

425
00:17:13.710 --> 00:17:15.790
reason for that constant.

426
00:17:15.790 --> 00:17:20.920
And then the next instruction
jumps backwards 4 bytes.

427
00:17:20.920 --> 00:17:24.020
So on the surface, this
should be OK.

428
00:17:24.020 --> 00:17:26.230
But the fundamental problem is
that the move instruction

429
00:17:26.230 --> 00:17:30.130
right before the jump backwards
is 5 bytes.

430
00:17:30.130 --> 00:17:32.890
So you're actually jumping back
into the middle of the

431
00:17:32.890 --> 00:17:34.820
move instruction.

432
00:17:34.820 --> 00:17:37.790
So if we look at how the
processor sees this instead of

433
00:17:37.790 --> 00:17:42.280
how our human eyes see the
assembly instruction, it first

434
00:17:42.280 --> 00:17:45.490
sees the byte b8 and says, oh,
b8, that's a move constant

435
00:17:45.490 --> 00:17:47.610
into eax instruction.

436
00:17:47.610 --> 00:17:50.130
And then there's going to be
4 bytes following it, which

437
00:17:50.130 --> 00:17:51.080
define a constant.

438
00:17:51.080 --> 00:17:53.420
So it happily pulls out the
constant, moves in the

439
00:17:53.420 --> 00:17:55.020
register, goes on.

440
00:17:55.020 --> 00:17:58.070
Then it says, oh, there's a
jump backwards 4 bytes.

441
00:17:58.070 --> 00:18:00.730
It's actually a jump backwards 6
bytes, because the processor

442
00:18:00.730 --> 00:18:03.250
calculates from the end of the
instruction, whereas the

443
00:18:03.250 --> 00:18:05.660
assembly language calculates
from the beginning.

444
00:18:05.660 --> 00:18:06.940
Just a detail, but
some people may

445
00:18:06.940 --> 00:18:08.260
find it a little confusing.

446
00:18:08.260 --> 00:18:11.520
So you jump backwards 4 bytes,
and then the processor happily

447
00:18:11.520 --> 00:18:13.780
starts executing what
it previously

448
00:18:13.780 --> 00:18:15.610
treated as a constant.

449
00:18:15.610 --> 00:18:18.070
So it says oh, 0f 05.

450
00:18:18.070 --> 00:18:18.850
Hey, that's a syscall.

451
00:18:18.850 --> 00:18:20.170
Let me do a syscall.

452
00:18:20.170 --> 00:18:21.880
And then suddenly, you don't.

453
00:18:21.880 --> 00:18:24.650
And then it sees a jump, which
nicely takes you out past the

454
00:18:24.650 --> 00:18:27.460
previous jump, and you go on
with your normal execution.

455
00:18:27.460 --> 00:18:30.870
So in one single instruction,
we managed to smuggle in two

456
00:18:30.870 --> 00:18:32.860
additional instructions,
which just entirely

457
00:18:32.860 --> 00:18:34.670
compromised your system.

458
00:18:34.670 --> 00:18:36.720
So Native Client doesn't
play this game.

459
00:18:36.720 --> 00:18:39.760
If it ever detects a program
trying to jump into what it

460
00:18:39.760 --> 00:18:42.820
previously thought was an
instruction, it says I'm not

461
00:18:42.820 --> 00:18:43.590
going to run this program.

462
00:18:43.590 --> 00:18:44.450
I'm not going to touch it.

463
00:18:44.450 --> 00:18:46.450
Obviously, you're doing
something sketchy.

464
00:18:46.450 --> 00:18:50.940
So if you generate code like
this, we don't run it.

465
00:18:50.940 --> 00:18:52.870
The other class of jumps
are indirect jumps.

466
00:18:52.870 --> 00:18:54.290
These are a little harder.

467
00:18:54.290 --> 00:18:56.450
Because you don't know exactly
where you're going.

468
00:18:56.450 --> 00:18:58.630
So how do we tell if we're
jumping inside an

469
00:18:58.630 --> 00:19:00.860
instruction or not?

470
00:19:00.860 --> 00:19:03.930
So this is a C example of where
indirect jumps come in.

471
00:19:03.930 --> 00:19:05.610
You take a function pointer.

472
00:19:05.610 --> 00:19:07.720
You call the function pointer.

473
00:19:07.720 --> 00:19:11.580
So if you look at the assembly
language, this is very

474
00:19:11.580 --> 00:19:12.700
simplified, assuming
you have an

475
00:19:12.700 --> 00:19:14.720
aggressive optimizing compiler.

476
00:19:14.720 --> 00:19:18.200
You do a direct call to a known
address, which we don't

477
00:19:18.200 --> 00:19:18.990
know what it is.

478
00:19:18.990 --> 00:19:20.700
So it's not fully
disassembled.

479
00:19:20.700 --> 00:19:23.550
And then the return value ends
up in rax, the register.

480
00:19:23.550 --> 00:19:27.330
And then you say, yeah, just
call that, whatever it is.

481
00:19:27.330 --> 00:19:29.100
So if we were being aggressive,
we could do some

482
00:19:29.100 --> 00:19:31.540
deep analysis, try to figure
out what the pointer could

483
00:19:31.540 --> 00:19:32.570
possibly point to.

484
00:19:32.570 --> 00:19:33.390
But that's hard.

485
00:19:33.390 --> 00:19:34.570
That's expensive.

486
00:19:34.570 --> 00:19:37.290
So instead, a much simpler
thing to do is look at

487
00:19:37.290 --> 00:19:40.400
individual instructions and
say can we infer from the

488
00:19:40.400 --> 00:19:42.370
sequence if what we're
doing is safe?

489
00:19:42.370 --> 00:19:45.740
So what we're saying is that
this function pointer could be

490
00:19:45.740 --> 00:19:47.680
a random number for
all we care.

491
00:19:47.680 --> 00:19:50.375
Can we make jumping to
a random number safe?

492
00:19:50.375 --> 00:19:53.490
Can we make sure that jumping to
a random number doesn't get

493
00:19:53.490 --> 00:19:56.640
us inside an instruction?

494
00:19:56.640 --> 00:19:59.400
So the first step, which may not
make sense until you see

495
00:19:59.400 --> 00:20:03.360
the second step, is any pointer,
any function pointer,

496
00:20:03.360 --> 00:20:05.690
any instruction pointer that
we're going to jump to, we

497
00:20:05.690 --> 00:20:08.350
first put a mask on it.

498
00:20:08.350 --> 00:20:11.140
And that mask says, drop
the lower 5 bits.

499
00:20:11.140 --> 00:20:13.950
Set the lower 5 bits to 0.

500
00:20:13.950 --> 00:20:15.430
So how does this help us out?

501
00:20:15.430 --> 00:20:17.570
What it means is that instead
of being able to jump

502
00:20:17.570 --> 00:20:23.950
anywhere, we can instead jump
to every 32 bytes, 1/32 of

503
00:20:23.950 --> 00:20:24.430
everywhere.

504
00:20:24.430 --> 00:20:26.690
And this isn't immediately
obvious how it

505
00:20:26.690 --> 00:20:28.040
improves our lives.

506
00:20:28.040 --> 00:20:30.440
But we modified a
compiler, right?

507
00:20:30.440 --> 00:20:33.450
So we can tell the compiler
that instead of having

508
00:20:33.450 --> 00:20:37.310
instructions that could move
over or lap over the 32-byte

509
00:20:37.310 --> 00:20:39.960
boundaries, any time you would
potentially omit an

510
00:20:39.960 --> 00:20:42.910
instruction that overlaps the
boundary, nudge it down a

511
00:20:42.910 --> 00:20:43.590
little bit.

512
00:20:43.590 --> 00:20:46.200
Stick in extra operations
that do nothing.

513
00:20:46.200 --> 00:20:48.990
And then we know that any time
you do an indirect jump to a

514
00:20:48.990 --> 00:20:51.600
32-byte boundary, you will be
hitting the start of an

515
00:20:51.600 --> 00:20:55.010
instruction instead of the
middle of an instruction.

516
00:20:55.010 --> 00:20:58.440
So the mask allows you to jump
to known safe locations, even

517
00:20:58.440 --> 00:21:01.570
if you don't know what
those locations are.

518
00:21:01.570 --> 00:21:03.110
Here's a more concrete
example.

519
00:21:03.110 --> 00:21:05.660
Here is that funky move again
with that constant.

520
00:21:05.660 --> 00:21:08.730
And if you generated it so that
it overlapped the 32-byte

521
00:21:08.730 --> 00:21:11.060
boundary, an indirect
jump could again

522
00:21:11.060 --> 00:21:12.420
execute this syscall.

523
00:21:12.420 --> 00:21:18.270
Because it would go to a mov 32
address, see the 0f 05, and

524
00:21:18.270 --> 00:21:20.230
boom, there goes your
tax return.

525
00:21:20.230 --> 00:21:24.720
So instead, the validation
algorithm require would reject

526
00:21:24.720 --> 00:21:26.780
this, because it overlaps
the boundary.

527
00:21:26.780 --> 00:21:29.440
Instead the compiler would
generate this extra

528
00:21:29.440 --> 00:21:32.420
no-operation and move the
instruction down.

529
00:21:32.420 --> 00:21:35.030
So the combination of not
allowing direct jumps inside

530
00:21:35.030 --> 00:21:37.590
that instruction and making
sure that no instructions

531
00:21:37.590 --> 00:21:40.610
overlap 32-byte boundaries allow
you to know where all

532
00:21:40.610 --> 00:21:44.650
the control flow in your
program is going.

533
00:21:44.650 --> 00:21:46.600
Aha, you say, but I'm
a clever hacker.

534
00:21:46.600 --> 00:21:48.750
I can modify the code after
you validate it.

535
00:21:48.750 --> 00:21:51.500
So validation just happens
at the beginning.

536
00:21:51.500 --> 00:21:53.460
We say, we'll look
at the code.

537
00:21:53.460 --> 00:21:56.820
If it's good to go, we'll
let you run the code.

538
00:21:56.820 --> 00:21:59.900
So, to prevent code
modification, we say any time

539
00:21:59.900 --> 00:22:02.480
we have a chunk of data, which
represents code, it's going to

540
00:22:02.480 --> 00:22:05.830
be readable and executable
when you don't have the

541
00:22:05.830 --> 00:22:07.510
permissions to write it.

542
00:22:07.510 --> 00:22:09.850
So everything that goes through
the validator, once we

543
00:22:09.850 --> 00:22:12.430
know what it does, we make sure
it keeps doing what we

544
00:22:12.430 --> 00:22:14.390
know it does.

545
00:22:14.390 --> 00:22:15.360
Aha, you say.

546
00:22:15.360 --> 00:22:17.110
But what about things
that aren't code?

547
00:22:17.110 --> 00:22:20.200
So I can just do a buffer
overflow somewhere, jump to

548
00:22:20.200 --> 00:22:23.120
that buffer overflow, start
executing it, and I just

549
00:22:23.120 --> 00:22:24.950
executed code you haven't
validated.

550
00:22:24.950 --> 00:22:28.580
Well, again, every piece of data
we make sure can be read

551
00:22:28.580 --> 00:22:31.360
and written, but not executed.

552
00:22:31.360 --> 00:22:34.450
So this plugs the hole for
self-modifying code.

553
00:22:34.450 --> 00:22:35.930
So I just lied to you.

554
00:22:35.930 --> 00:22:39.840
And that's that things can
change after the initial setup

555
00:22:39.840 --> 00:22:40.410
of the program.

556
00:22:40.410 --> 00:22:42.390
So you can load dynamic
libraries.

557
00:22:42.390 --> 00:22:45.270
You can have just-in-time
compilers which emit new code

558
00:22:45.270 --> 00:22:48.030
and actually modify the code
in very controlled ways.

559
00:22:48.030 --> 00:22:50.360
But how you do that is
kind of complicated.

560
00:22:50.360 --> 00:22:52.320
Because you need to make sure
that if there's multiple

561
00:22:52.320 --> 00:22:56.340
threads, you never get memory
de-coherency, where you

562
00:22:56.340 --> 00:22:57.980
execute an instruction
which is in the

563
00:22:57.980 --> 00:22:59.930
middle of being modified.

564
00:22:59.930 --> 00:23:01.980
At the end of this presentation,
I'll have a link

565
00:23:01.980 --> 00:23:02.880
to the research papers.

566
00:23:02.880 --> 00:23:05.810
So if you're really interested
in how we do memory safe code

567
00:23:05.810 --> 00:23:08.110
modification, you can read
up or ask me afterwards.

568
00:23:08.110 --> 00:23:10.640
But for this presentation, we're
going to ignore this

569
00:23:10.640 --> 00:23:13.640
rather large, ugly issue.

570
00:23:13.640 --> 00:23:18.370
Another thing is that mprotect
is now security-critical.

571
00:23:18.370 --> 00:23:21.250
So syscalls, we've thought about
all the damage we could

572
00:23:21.250 --> 00:23:22.150
do with them.

573
00:23:22.150 --> 00:23:24.930
But now we can start doing
indirect damage like

574
00:23:24.930 --> 00:23:27.860
unprotecting a page, writing it,
then boom, we're executing

575
00:23:27.860 --> 00:23:30.260
code that is invalid.

576
00:23:30.260 --> 00:23:33.440
Similarly, there's other
syscalls like GetProcessID,

577
00:23:33.440 --> 00:23:35.690
not immediately obvious why
they're dangerous, but they

578
00:23:35.690 --> 00:23:38.370
can be used to escalate attacks
by knowing where

579
00:23:38.370 --> 00:23:39.270
you're going from.

580
00:23:39.270 --> 00:23:41.720
So the name of the game is
white-listing, only allowing

581
00:23:41.720 --> 00:23:44.805
functionality we know is safe
instead of saying, eh, do a

582
00:23:44.805 --> 00:23:46.055
syscall , whatever.

583
00:23:46.055 --> 00:23:48.210
584
00:23:48.210 --> 00:23:51.330
So that's the basics of how we
allow code to be decompiled.

585
00:23:51.330 --> 00:23:54.280
And if you actually start
looking at how this affects

586
00:23:54.280 --> 00:23:55.850
calling and returning a
function, there's some

587
00:23:55.850 --> 00:23:57.890
interesting things that
get shaken out.

588
00:23:57.890 --> 00:23:59.270
So I'm going to do
in the reverse.

589
00:23:59.270 --> 00:24:01.450
I'm going to show how you
return from a function.

590
00:24:01.450 --> 00:24:03.880
Then I'm going to show how you
call it, because the return

591
00:24:03.880 --> 00:24:05.130
impacts the call.

592
00:24:05.130 --> 00:24:07.460
593
00:24:07.460 --> 00:24:09.360
So usually, returning from
a function is a single

594
00:24:09.360 --> 00:24:10.400
instruction.

595
00:24:10.400 --> 00:24:14.980
Return, pop an address off the
stack, jumps to that address,

596
00:24:14.980 --> 00:24:17.230
and you're back to where
you called from.

597
00:24:17.230 --> 00:24:20.120
So you could call the same
function for multiple places.

598
00:24:20.120 --> 00:24:23.190
So the call records where you
called from on the stack in

599
00:24:23.190 --> 00:24:24.800
order to be able to
return to it.

600
00:24:24.800 --> 00:24:29.040
But implicitly, this is
an indirect jump.

601
00:24:29.040 --> 00:24:32.400
So a malicious program could
stick a random number on the

602
00:24:32.400 --> 00:24:35.870
stack and then jump instead of
calling to the function.

603
00:24:35.870 --> 00:24:37.940
And then when the function
returned, who

604
00:24:37.940 --> 00:24:39.090
knows where you are.

605
00:24:39.090 --> 00:24:41.290
So there is a type of exploit
called return-oriented

606
00:24:41.290 --> 00:24:44.710
programming, which uses this
kind of thing where the

607
00:24:44.710 --> 00:24:46.695
returns can be repurposed
for jumping

608
00:24:46.695 --> 00:24:48.890
to arbitrary locations.

609
00:24:48.890 --> 00:24:50.550
So we can try to fix this.

610
00:24:50.550 --> 00:24:54.200
We can manually pop the return
address off the stack, mask

611
00:24:54.200 --> 00:24:56.980
it, just like we should for
indirect jumps, push it back

612
00:24:56.980 --> 00:24:58.860
on the stack, and then return.

613
00:24:58.860 --> 00:24:59.950
So problem solved.

614
00:24:59.950 --> 00:25:01.230
Well, no.

615
00:25:01.230 --> 00:25:02.490
I mentioned threads earlier.

616
00:25:02.490 --> 00:25:04.840
And threads are a big problem
because there could be another

617
00:25:04.840 --> 00:25:07.520
thread in the background trying
to smash the stack.

618
00:25:07.520 --> 00:25:10.700
And so between the moment where
you push the address on

619
00:25:10.700 --> 00:25:14.180
the stack and when you return,
the memory could get changed

620
00:25:14.180 --> 00:25:16.880
out from under you, and you
could end up anywhere.

621
00:25:16.880 --> 00:25:17.920
Who knows where?

622
00:25:17.920 --> 00:25:20.760
So we can't really trust any
addresses in memory.

623
00:25:20.760 --> 00:25:23.180
We can only trust addresses
in registers.

624
00:25:23.180 --> 00:25:26.090
So what this means is that in
order to return, we can't use

625
00:25:26.090 --> 00:25:27.230
the return instruction.

626
00:25:27.230 --> 00:25:31.090
We pop off the stack, mask it,
and then jump to the address.

627
00:25:31.090 --> 00:25:33.900
This has a few consequences,
like branch prediction is a

628
00:25:33.900 --> 00:25:34.980
little harder.

629
00:25:34.980 --> 00:25:38.480
And we're using more bytes
to do the same operation.

630
00:25:38.480 --> 00:25:41.870
So I mentioned earlier that
the sandboxing schemes for

631
00:25:41.870 --> 00:25:43.670
different architectures
were different.

632
00:25:43.670 --> 00:25:45.870
And this is largely due to the
fact that we are trying to

633
00:25:45.870 --> 00:25:49.940
minimize the cost and tailor
it to each architecture.

634
00:25:49.940 --> 00:25:52.850
So we try to keep the number
of bytes per sandbox

635
00:25:52.850 --> 00:25:55.640
instruction as low as possible
through being horrendously

636
00:25:55.640 --> 00:25:57.570
clever about how
we mask things.

637
00:25:57.570 --> 00:25:59.745
And if you want to talk about
this, again, we can talk about

638
00:25:59.745 --> 00:26:02.640
it afterwards, about clever
instruction encodings.

639
00:26:02.640 --> 00:26:03.840
So return.

640
00:26:03.840 --> 00:26:06.940
A very basic instruction is
actually dangerous because

641
00:26:06.940 --> 00:26:13.680
it's doing an indirect jump
to a location from memory.

642
00:26:13.680 --> 00:26:15.060
So bad idea.

643
00:26:15.060 --> 00:26:18.280
We have to do it explicitly.

644
00:26:18.280 --> 00:26:23.580
So whenever we have masks, it
becomes critical that we don't

645
00:26:23.580 --> 00:26:25.690
bypass the mask.

646
00:26:25.690 --> 00:26:28.930
So we may have two instructions,
the mask and

647
00:26:28.930 --> 00:26:29.990
then the jump.

648
00:26:29.990 --> 00:26:32.010
But if there's some other jump
which goes between the

649
00:26:32.010 --> 00:26:34.400
instructions, it doesn't
actually violate what I talked

650
00:26:34.400 --> 00:26:35.620
about previously.

651
00:26:35.620 --> 00:26:38.020
I said you can't jump
into an instruction.

652
00:26:38.020 --> 00:26:40.350
But if you jump between these
two instructions that are

653
00:26:40.350 --> 00:26:42.050
critical for safety,
suddenly you just

654
00:26:42.050 --> 00:26:42.970
stripped off the mask.

655
00:26:42.970 --> 00:26:44.900
The entire security
model fails.

656
00:26:44.900 --> 00:26:47.270
And you have a problem.

657
00:26:47.270 --> 00:26:48.780
We call these
pseudo-instructions.

658
00:26:48.780 --> 00:26:50.880
So whenever we have a sequence
of instructions which is

659
00:26:50.880 --> 00:26:53.760
security critical, we say treat
it just like it was an

660
00:26:53.760 --> 00:26:54.870
instruction.

661
00:26:54.870 --> 00:26:58.480
So direct jumps cannot jump
inside a pseudo-instruction.

662
00:26:58.480 --> 00:27:01.150
Indirect jumps cannot jump
inside a pseudo-instruction,

663
00:27:01.150 --> 00:27:04.580
which means that the entire
pseudo-instruction has to not

664
00:27:04.580 --> 00:27:09.220
cross a 32-byte boundary.

665
00:27:09.220 --> 00:27:12.990
As a terminology, we
call this bundling.

666
00:27:12.990 --> 00:27:18.960
So what does this mean for
calling a function?

667
00:27:18.960 --> 00:27:21.590
If you just call it like you
expected, just from the middle

668
00:27:21.590 --> 00:27:25.320
of a bundle somewhere,
you do the call.

669
00:27:25.320 --> 00:27:26.180
You know, you see
the mask here.

670
00:27:26.180 --> 00:27:27.910
You see the indirect jump.

671
00:27:27.910 --> 00:27:29.630
And then where do
you return to?

672
00:27:29.630 --> 00:27:32.690
The problem is that the mask
drops the lower 5 bits of the

673
00:27:32.690 --> 00:27:36.230
address, so you aren't returning
to the address that

674
00:27:36.230 --> 00:27:38.800
was pushed on the stack
if those lower bits

675
00:27:38.800 --> 00:27:40.430
were not all zeroes.

676
00:27:40.430 --> 00:27:44.800
So you end up returning to the
beginning of the bundle where

677
00:27:44.800 --> 00:27:45.850
the call was from.

678
00:27:45.850 --> 00:27:47.420
And this is obviously
not what you want.

679
00:27:47.420 --> 00:27:49.840
This starts to look a bit like
an infinite loop unless you

680
00:27:49.840 --> 00:27:50.710
account for it.

681
00:27:50.710 --> 00:27:52.790
Where you really want it to
return is immediately after

682
00:27:52.790 --> 00:27:53.950
the instruction.

683
00:27:53.950 --> 00:27:58.630
So the work-around for this is
that whenever you have a call,

684
00:27:58.630 --> 00:28:01.510
you pat it down to the very
end of the bundle.

685
00:28:01.510 --> 00:28:05.020
And this means that the return
address is at the beginning of

686
00:28:05.020 --> 00:28:06.500
the very next bundle.

687
00:28:06.500 --> 00:28:09.150
So when you mask it, when you
drop the lower 5 bits, it

688
00:28:09.150 --> 00:28:11.190
doesn't change it at all.

689
00:28:11.190 --> 00:28:16.130
So all these instruction
sequences that we're showing

690
00:28:16.130 --> 00:28:19.860
in fact should not change the
correctness of the program.

691
00:28:19.860 --> 00:28:23.030
They are simply there for the
validator to say, oh, yep, I

692
00:28:23.030 --> 00:28:24.600
can prove that this is safe.

693
00:28:24.600 --> 00:28:27.870
And if somehow garbage data gets
in here, I know that I'm

694
00:28:27.870 --> 00:28:29.500
going to be jumping
to a known place.

695
00:28:29.500 --> 00:28:32.420
But in normal operation, the
compiler will stick everything

696
00:28:32.420 --> 00:28:35.490
on 32-byte aligned boundaries
that we need to jump to

697
00:28:35.490 --> 00:28:36.740
indirectly.

698
00:28:36.740 --> 00:28:39.590
699
00:28:39.590 --> 00:28:41.860
OK, so yet again, I lied.

700
00:28:41.860 --> 00:28:43.480
I seem to be a serial
liar here.

701
00:28:43.480 --> 00:28:46.090
I apologize.

702
00:28:46.090 --> 00:28:48.020
There's more going on
in the process than

703
00:28:48.020 --> 00:28:49.210
just this bit of code.

704
00:28:49.210 --> 00:28:52.130
We can validate a lot of code,
but as it turns out, there's

705
00:28:52.130 --> 00:28:54.090
other code and data in
the process that

706
00:28:54.090 --> 00:28:55.730
we don't fully control.

707
00:28:55.730 --> 00:28:58.210
It needs to be there
so we can use it.

708
00:28:58.210 --> 00:29:02.120
So we have a world where we
have a single process with

709
00:29:02.120 --> 00:29:05.540
code we don't trust and
code that we do trust.

710
00:29:05.540 --> 00:29:10.130
So this is the general view
of what I've shown so far.

711
00:29:10.130 --> 00:29:12.410
There's untrusted code
and untrusted data.

712
00:29:12.410 --> 00:29:15.280
And what I mean by untrusted
is this code is coming from

713
00:29:15.280 --> 00:29:17.040
somewhere across the wire.

714
00:29:17.040 --> 00:29:20.310
And instead of having to have
this dialog box that says,

715
00:29:20.310 --> 00:29:21.730
well, you're running
at your own risk.

716
00:29:21.730 --> 00:29:23.280
Instead, we validate it.

717
00:29:23.280 --> 00:29:25.000
And then we say this conforms
to our rules.

718
00:29:25.000 --> 00:29:27.970
So we'll run it without having
to place trust in it.

719
00:29:27.970 --> 00:29:31.960
We will enforce the security
instead of trusting, so

720
00:29:31.960 --> 00:29:34.850
untrusted code, untrusted
data.

721
00:29:34.850 --> 00:29:38.130
Well, every time you launch a
process, the operating system

722
00:29:38.130 --> 00:29:40.100
likes to stick in some code.

723
00:29:40.100 --> 00:29:42.510
So you can talk with the
operating system.

724
00:29:42.510 --> 00:29:44.870
And we could do something really
nasty, like try to

725
00:29:44.870 --> 00:29:46.540
overwrite this, kick it out.

726
00:29:46.540 --> 00:29:48.430
But we're going to need
it eventually.

727
00:29:48.430 --> 00:29:50.220
We're going to need
to do something.

728
00:29:50.220 --> 00:29:52.540
Simply living within the
sandbox isn't enough.

729
00:29:52.540 --> 00:29:56.310
So down the road, we're going
to need to talk to the NTDLL

730
00:29:56.310 --> 00:29:58.210
on Windows, for instance.

731
00:29:58.210 --> 00:30:01.390
But we don't want the untrusted
code to do it.

732
00:30:01.390 --> 00:30:03.590
Similarly, we're going to be
talking with a web browser.

733
00:30:03.590 --> 00:30:07.220
So the easiest way to do this
is load the DLL for the web

734
00:30:07.220 --> 00:30:08.700
browser in the process.

735
00:30:08.700 --> 00:30:11.120
So we can call the same
functionality to talk between

736
00:30:11.120 --> 00:30:13.690
processes that Chrome uses.

737
00:30:13.690 --> 00:30:15.380
There's also trusted data.

738
00:30:15.380 --> 00:30:18.580
So when we're running the
sandbox, we have to keep track

739
00:30:18.580 --> 00:30:20.590
of things like where
code is mapped.

740
00:30:20.590 --> 00:30:24.110
Because if the untrusted code
says, well, there's actually

741
00:30:24.110 --> 00:30:26.540
no code there, so why don't
you map code there again?

742
00:30:26.540 --> 00:30:28.360
Then we could get weird
overwrites, partial

743
00:30:28.360 --> 00:30:29.340
instructions.

744
00:30:29.340 --> 00:30:30.470
So there's bookkeeping data.

745
00:30:30.470 --> 00:30:33.040
And if you could clobber that
data, if you could go there

746
00:30:33.040 --> 00:30:35.940
and say overwrite the table
for where all the code is,

747
00:30:35.940 --> 00:30:37.600
then the untrusted code
could start doing,

748
00:30:37.600 --> 00:30:40.740
again, very bad things.

749
00:30:40.740 --> 00:30:44.650
What we need to do is we need to
make sure all the execution

750
00:30:44.650 --> 00:30:47.860
and all the data access that
can be done directly by the

751
00:30:47.860 --> 00:30:52.040
untrusted code only happens
within a confined region that

752
00:30:52.040 --> 00:30:55.370
doesn't include NTDLL, that
doesn't include Chrome DLL,

753
00:30:55.370 --> 00:30:58.700
that doesn't include any bit of
code or data which could be

754
00:30:58.700 --> 00:31:00.850
used as an exploit.

755
00:31:00.850 --> 00:31:05.010
So on 64-bit systems, this is a
4-gigabyte range of memory.

756
00:31:05.010 --> 00:31:08.190
And we reserve one of the
registers, R15, to point to

757
00:31:08.190 --> 00:31:10.530
the bottom of this range.

758
00:31:10.530 --> 00:31:12.790
So one of our security-critical
properties

759
00:31:12.790 --> 00:31:15.330
is that R15 cannot
be overwritten by

760
00:31:15.330 --> 00:31:16.510
the entrusted code.

761
00:31:16.510 --> 00:31:18.610
So as the validator goes
through, it looks for anything

762
00:31:18.610 --> 00:31:20.310
that can modify R15.

763
00:31:20.310 --> 00:31:23.020
And if something does, it
goes, nope, not going

764
00:31:23.020 --> 00:31:24.900
to deal with it.

765
00:31:24.900 --> 00:31:27.020
A thing you may note also is
that this is a 4-gigabyte

766
00:31:27.020 --> 00:31:30.850
range, which happens to be 2 of
32, which allows us to do

767
00:31:30.850 --> 00:31:33.820
some horrendously clever stuff
to make our masking as small

768
00:31:33.820 --> 00:31:34.260
as possible.

769
00:31:34.260 --> 00:31:37.130
We'll get into that
in a second.

770
00:31:37.130 --> 00:31:39.330
So here's a scenario that
we have to worry about.

771
00:31:39.330 --> 00:31:41.740
What happens when the untrusted
code tries to jump

772
00:31:41.740 --> 00:31:43.790
outside the sandbox?

773
00:31:43.790 --> 00:31:47.010
So it can't do a direct jump
outside this constrained

774
00:31:47.010 --> 00:31:50.870
range, because the validator
can't see the target.

775
00:31:50.870 --> 00:31:53.180
And because it can't see the
target, it can't tell whether

776
00:31:53.180 --> 00:31:55.770
it's in the middle of an
instruction, so it says, no.

777
00:31:55.770 --> 00:31:58.140
But it could do an
indirect jump.

778
00:31:58.140 --> 00:32:00.840
So it could do an indirect
jump to a 32-byte aligned

779
00:32:00.840 --> 00:32:02.610
boundary somewhere in NTDLL.

780
00:32:02.610 --> 00:32:04.390
And we have to allow this,
because you could be loading

781
00:32:04.390 --> 00:32:05.470
shared libraries.

782
00:32:05.470 --> 00:32:08.630
So you may not know where the
code is before you load it.

783
00:32:08.630 --> 00:32:11.120
So what we have to do is we have
to make sure the indirect

784
00:32:11.120 --> 00:32:14.460
jumps only fall within this
constrained range.

785
00:32:14.460 --> 00:32:16.870
So how do we do that?

786
00:32:16.870 --> 00:32:20.010
We have to confine the jumps
to the 4-gigabyte range.

787
00:32:20.010 --> 00:32:20.800
Here's an example.

788
00:32:20.800 --> 00:32:22.070
It's just an empty function.

789
00:32:22.070 --> 00:32:24.390
What's happening implicitly
here, however,

790
00:32:24.390 --> 00:32:25.690
is that it's returning.

791
00:32:25.690 --> 00:32:28.710
And as we went through all these
explanations, this is

792
00:32:28.710 --> 00:32:30.510
what a return eventually
looks like.

793
00:32:30.510 --> 00:32:33.060
There's this masked indirect
jump back to

794
00:32:33.060 --> 00:32:34.700
wherever you came from.

795
00:32:34.700 --> 00:32:37.200
But this could go into NTDLL.

796
00:32:37.200 --> 00:32:39.400
How do we fix it?

797
00:32:39.400 --> 00:32:43.280
So we confine it by masking
it and dropping

798
00:32:43.280 --> 00:32:45.190
the upper 32 bits.

799
00:32:45.190 --> 00:32:47.820
So we boil it down to
a 32-bit address.

800
00:32:47.820 --> 00:32:49.350
Then we add the offset.

801
00:32:49.350 --> 00:32:51.370
And then we actually use that.

802
00:32:51.370 --> 00:32:53.690
So remember I was saying
horrendously clever?

803
00:32:53.690 --> 00:32:55.960
This is not really
self-promotion.

804
00:32:55.960 --> 00:32:57.760
When I was doing this
presentation, I had to work

805
00:32:57.760 --> 00:33:00.000
through exactly how these
instructions worked.

806
00:33:00.000 --> 00:33:01.250
It's actually pretty
interesting.

807
00:33:01.250 --> 00:33:04.240
So the "and" right here
is doing a 32-bit

808
00:33:04.240 --> 00:33:05.580
operation on a register.

809
00:33:05.580 --> 00:33:09.890
And then later the register is
being used as a 64-bit value.

810
00:33:09.890 --> 00:33:12.550
So doing the 32-bit operation
implicitly

811
00:33:12.550 --> 00:33:14.700
zeroes the upper bits.

812
00:33:14.700 --> 00:33:17.970
And this allows the actual "and"
to be packed down into a

813
00:33:17.970 --> 00:33:19.720
single byte data.

814
00:33:19.720 --> 00:33:22.740
So it says, it's going to
be e0 sign extended.

815
00:33:22.740 --> 00:33:25.220
And then I'll implicitly drop
the upper 32 bits, because

816
00:33:25.220 --> 00:33:26.740
it's a 32-bit operation.

817
00:33:26.740 --> 00:33:30.600
Then you do a full 64-bit add
and a full 64-bit jump.

818
00:33:30.600 --> 00:33:34.300
So the cost of this is about
8 bytes as opposed 2 bytes.

819
00:33:34.300 --> 00:33:36.540
So there's a bit of overhead for
doing it this way, but we

820
00:33:36.540 --> 00:33:37.640
know where it's going.

821
00:33:37.640 --> 00:33:39.790
We know it's only going to be
within the confined region.

822
00:33:39.790 --> 00:33:42.640
And we know it's only going to
be to a 32-byte boundary.

823
00:33:42.640 --> 00:33:44.970
And we know there's going to
be no instructions that are

824
00:33:44.970 --> 00:33:47.930
overlapping those 32-byte
boundaries.

825
00:33:47.930 --> 00:33:51.090
The next thing to worry about is
reading and writing bits of

826
00:33:51.090 --> 00:33:54.800
data that are outside
this confined range.

827
00:33:54.800 --> 00:33:56.950
Writing is obviously
a problem.

828
00:33:56.950 --> 00:33:58.500
If you can write to something,
you can change it.

829
00:33:58.500 --> 00:33:59.610
You can control it.

830
00:33:59.610 --> 00:34:02.020
It makes attacks much easier.

831
00:34:02.020 --> 00:34:07.060
Reading, debatably it's not an
attack, but this can be used

832
00:34:07.060 --> 00:34:09.060
to help attacks.

833
00:34:09.060 --> 00:34:11.420
So if you can poke around
memory, find where things are,

834
00:34:11.420 --> 00:34:14.460
then you can do much more
controlled jumps, much more

835
00:34:14.460 --> 00:34:17.080
dangerous intended
actions than just

836
00:34:17.080 --> 00:34:19.860
jumping around randomly.

837
00:34:19.860 --> 00:34:22.790
So how do we confine
data access?

838
00:34:22.790 --> 00:34:24.540
Here's an example
of a C function.

839
00:34:24.540 --> 00:34:27.239
We're just taking a function
pointer, and we're writing a

840
00:34:27.239 --> 00:34:30.510
constant to that pointer
wherever it may be.

841
00:34:30.510 --> 00:34:32.030
Thus far, we haven't
talked about

842
00:34:32.030 --> 00:34:34.219
sandboxing rights at all.

843
00:34:34.219 --> 00:34:37.000
So the Intel instruction for
doing this just says move this

844
00:34:37.000 --> 00:34:40.210
constant to wherever the memory
address points to.

845
00:34:40.210 --> 00:34:43.489
So to sandbox it, we do
something similar to jumps.

846
00:34:43.489 --> 00:34:47.820
We mask it by moving a 32-bit
register to itself.

847
00:34:47.820 --> 00:34:50.530
So again, we rely on the
implicit zeroing

848
00:34:50.530 --> 00:34:51.370
of the upper bits.

849
00:34:51.370 --> 00:34:53.980
But since we don't need to
discard the lower bits, it's

850
00:34:53.980 --> 00:34:55.000
just a move.

851
00:34:55.000 --> 00:34:56.690
Simple enough.

852
00:34:56.690 --> 00:35:00.750
And then we do a complicated
addressing mode, which

853
00:35:00.750 --> 00:35:06.190
actually adds R15 simultaneously
with moving the

854
00:35:06.190 --> 00:35:08.500
constant to the address
that's computed.

855
00:35:08.500 --> 00:35:13.270
So this move instruction is
saying add R15 to rax and then

856
00:35:13.270 --> 00:35:16.830
multiply rax by 1,
and there you go.

857
00:35:16.830 --> 00:35:20.380
Instead of 5 bytes to do this
move constant, we got 9 bytes.

858
00:35:20.380 --> 00:35:22.360
Not too bad.

859
00:35:22.360 --> 00:35:23.820
There's a little curious
thing here, though.

860
00:35:23.820 --> 00:35:26.030
There's that multiplier.

861
00:35:26.030 --> 00:35:28.860
So we know that rax is a
32-bit value, but that

862
00:35:28.860 --> 00:35:30.960
multiplier can be up to 8.

863
00:35:30.960 --> 00:35:33.740
So we aren't actually operating
within a 4-gigabyte

864
00:35:33.740 --> 00:35:36.180
range, we're potentially
doing a write

865
00:35:36.180 --> 00:35:38.960
to 8 times 4 gigabytes?

866
00:35:38.960 --> 00:35:41.170
And there's ways you can rack
it up even further with

867
00:35:41.170 --> 00:35:42.440
constant offsets.

868
00:35:42.440 --> 00:35:47.600
So we could tweak this a little
harder and do the mask

869
00:35:47.600 --> 00:35:50.070
and get rid of the
multiplications, but sometimes

870
00:35:50.070 --> 00:35:51.880
compilers just like
to generate these.

871
00:35:51.880 --> 00:35:54.340
And the more features you get
rid of, the slower the code's

872
00:35:54.340 --> 00:35:55.660
going to be.

873
00:35:55.660 --> 00:35:58.570
So instead of trying to do
instruction sequences that are

874
00:35:58.570 --> 00:36:04.480
safer, we actually say, well,
40 to 44 gigabytes on either

875
00:36:04.480 --> 00:36:08.580
side of this confined range,
we're going to mark as--

876
00:36:08.580 --> 00:36:09.680
we own it.

877
00:36:09.680 --> 00:36:11.080
So you can't use it.

878
00:36:11.080 --> 00:36:13.420
So you aren't actually
allocating the memory.

879
00:36:13.420 --> 00:36:17.840
You're just marking it as no one
gets this memory but us.

880
00:36:17.840 --> 00:36:19.590
And it's illegal to read.

881
00:36:19.590 --> 00:36:20.550
It's illegal to write.

882
00:36:20.550 --> 00:36:21.770
It's illegal to jump to.

883
00:36:21.770 --> 00:36:23.540
It doesn't exist.

884
00:36:23.540 --> 00:36:28.170
So if you can do a memory access
which is outside this

885
00:36:28.170 --> 00:36:31.720
4-gigabyte range, you get caught
by the guard region.

886
00:36:31.720 --> 00:36:34.420
And that's how we allow these
addressing modes.

887
00:36:34.420 --> 00:36:37.100
And just as a funny side note,
sometimes we get people

888
00:36:37.100 --> 00:36:40.010
benchmarking Native Client
and say, you take over 80

889
00:36:40.010 --> 00:36:41.820
gigabytes of memory!

890
00:36:41.820 --> 00:36:45.190
And we're like, do you have over
80 gigabytes of memory?

891
00:36:45.190 --> 00:36:46.710
But really what they're looking
at is they're looking

892
00:36:46.710 --> 00:36:50.900
at address space usage rather
than actual memory usage.

893
00:36:50.900 --> 00:36:53.590
894
00:36:53.590 --> 00:36:56.170
So we can't do anything fun.

895
00:36:56.170 --> 00:36:58.320
We can just go inside
the sandbox.

896
00:36:58.320 --> 00:36:58.980
How do we get out?

897
00:36:58.980 --> 00:37:02.720
How do we actually request the
URL like I showed in the

898
00:37:02.720 --> 00:37:04.530
beginning of this
presentation?

899
00:37:04.530 --> 00:37:08.960
To do that, at the bottom of
the sandbox Native Client

900
00:37:08.960 --> 00:37:11.910
inserts a bit of code called
the trampoline.

901
00:37:11.910 --> 00:37:14.240
Now the trampoline is code that
would not normally be

902
00:37:14.240 --> 00:37:17.700
validated, but allows you to do
a controlled jump outside

903
00:37:17.700 --> 00:37:18.720
the sandbox.

904
00:37:18.720 --> 00:37:22.020
So there's a trampoline entry
for each service we provide,

905
00:37:22.020 --> 00:37:23.710
such as spawning threads.

906
00:37:23.710 --> 00:37:25.480
And when you want that, you
jump to the trampoline.

907
00:37:25.480 --> 00:37:28.540
And the trampoline jumps you out
into Chrome DLL, where we

908
00:37:28.540 --> 00:37:30.320
provide an implementation
for that.

909
00:37:30.320 --> 00:37:33.020
So the set of trampoline calls
you have, which are analogous

910
00:37:33.020 --> 00:37:35.900
to syscalls, are the same
on every platform.

911
00:37:35.900 --> 00:37:41.390
So in one swoop, we are
providing a cross-platform API

912
00:37:41.390 --> 00:37:47.390
and controlling exactly what
services the native code gets.

913
00:37:47.390 --> 00:37:50.700
The trampoline itself, again,
is small, but in some ways

914
00:37:50.700 --> 00:37:52.020
overly clever.

915
00:37:52.020 --> 00:37:55.840
And we take a constant address,
stick it in a

916
00:37:55.840 --> 00:38:00.270
register, and then call
that address.

917
00:38:00.270 --> 00:38:02.290
And there's a few things
going on here.

918
00:38:02.290 --> 00:38:06.060
One is that we do the move into
the register instead of

919
00:38:06.060 --> 00:38:10.490
doing a direct call, so that
it's easier to patch the code

920
00:38:10.490 --> 00:38:12.820
as we know exactly the address
we're going to.

921
00:38:12.820 --> 00:38:14.790
And in fact, we can make that
address the same for all the

922
00:38:14.790 --> 00:38:15.800
trampolines.

923
00:38:15.800 --> 00:38:17.790
So if you have multiple
trampolines going to the same

924
00:38:17.790 --> 00:38:21.050
place, since direct jumps are
relative, you'd have to do a

925
00:38:21.050 --> 00:38:22.660
lot of math and make sure
that you're jumping

926
00:38:22.660 --> 00:38:23.370
to the right address.

927
00:38:23.370 --> 00:38:25.750
But here we just jump to
a constant address.

928
00:38:25.750 --> 00:38:28.140
Another thing is that it's a
call instead of a jump, so we

929
00:38:28.140 --> 00:38:31.620
can have a trace of where the
syscall's coming from.

930
00:38:31.620 --> 00:38:33.790
So we know, oh, we're going
through trampoline 4,

931
00:38:33.790 --> 00:38:36.350
therefore, we know what
service we're getting.

932
00:38:36.350 --> 00:38:38.390
And then finally at the
end, there's a halt.

933
00:38:38.390 --> 00:38:41.640
So even though we're doing a
call, we never return to where

934
00:38:41.640 --> 00:38:42.270
we called from.

935
00:38:42.270 --> 00:38:44.310
It's just a method to
trace the address of

936
00:38:44.310 --> 00:38:45.530
where we came from.

937
00:38:45.530 --> 00:38:48.800
So if anyone returns from inside
the system code, it's

938
00:38:48.800 --> 00:38:49.840
going to hit the halt, and it's

939
00:38:49.840 --> 00:38:52.140
going to prevent execution.

940
00:38:52.140 --> 00:38:55.210
This is all interesting because
it's within 13 bytes.

941
00:38:55.210 --> 00:38:57.760
So this means that the
trampoline fits within the

942
00:38:57.760 --> 00:39:00.030
32-byte bundle.

943
00:39:00.030 --> 00:39:04.470
And this means that indirect
jumps will never go inside the

944
00:39:04.470 --> 00:39:04.940
trampoline.

945
00:39:04.940 --> 00:39:06.840
They can only go to the start
to the trampoline.

946
00:39:06.840 --> 00:39:10.610
And this is what allows us to
do safe exits outside of the

947
00:39:10.610 --> 00:39:13.110
NaCl sandbox.

948
00:39:13.110 --> 00:39:16.870
So putting it all together, this
is the API call which I

949
00:39:16.870 --> 00:39:18.000
started with.

950
00:39:18.000 --> 00:39:19.690
It is loading a URL.

951
00:39:19.690 --> 00:39:23.300
So to do this, the untrusted
code initiates it by jumping

952
00:39:23.300 --> 00:39:27.150
to the trampoline and saying
I want to do this request.

953
00:39:27.150 --> 00:39:29.740
The trampoline takes
it to Chrome DLL.

954
00:39:29.740 --> 00:39:32.750
Chrome DLL has an implementation
that says, OK,

955
00:39:32.750 --> 00:39:35.130
native code wants to
do a URL request.

956
00:39:35.130 --> 00:39:38.140
Well, I can't do it myself
because I'm running inside the

957
00:39:38.140 --> 00:39:39.340
Chrome sandbox.

958
00:39:39.340 --> 00:39:42.160
So instead, what I have to do
is I have to talk to the

959
00:39:42.160 --> 00:39:44.850
Chrome browser via the
render process.

960
00:39:44.850 --> 00:39:47.030
So to do that, I'm going to need
to do some inter-process

961
00:39:47.030 --> 00:39:48.110
communication.

962
00:39:48.110 --> 00:39:50.830
So it talks to the operating
system and says, hey, send

963
00:39:50.830 --> 00:39:53.875
this bit of the data to the
renderer process, and then it

964
00:39:53.875 --> 00:39:54.770
will know what to do with it.

965
00:39:54.770 --> 00:39:56.830
And at that point, it's
out of NaCl's control.

966
00:39:56.830 --> 00:40:00.040
It's just however the JavaScript
call would be.

967
00:40:00.040 --> 00:40:01.290
Same paths.

968
00:40:01.290 --> 00:40:03.430
969
00:40:03.430 --> 00:40:05.630
That is Native Client
in a nutshell.

970
00:40:05.630 --> 00:40:07.310
And I hope you all
followed that.

971
00:40:07.310 --> 00:40:10.640
And we have questions
afterwards, if you don't.

972
00:40:10.640 --> 00:40:12.640
There's more to this.

973
00:40:12.640 --> 00:40:15.190
As I mentioned before, dynamic
code loading in JIT, memory

974
00:40:15.190 --> 00:40:18.180
consistency, making the
sandboxing model work is a

975
00:40:18.180 --> 00:40:19.440
whole other ball of wax.

976
00:40:19.440 --> 00:40:21.090
I find it very fascinating.

977
00:40:21.090 --> 00:40:23.930
I hope you guys look into it.

978
00:40:23.930 --> 00:40:25.630
Portable Native Client.

979
00:40:25.630 --> 00:40:28.070
This is the future.

980
00:40:28.070 --> 00:40:30.497
Bit code, LLVM tool
chain, fixes, the

981
00:40:30.497 --> 00:40:33.040
architecture-specific issues
we have now, but you

982
00:40:33.040 --> 00:40:33.720
still can use it.

983
00:40:33.720 --> 00:40:35.700
You can write applications
now and switch to

984
00:40:35.700 --> 00:40:36.950
PNaCl when it's available.

985
00:40:36.950 --> 00:40:39.130
986
00:40:39.130 --> 00:40:41.230
You may have noticed that
nothing in this presentation

987
00:40:41.230 --> 00:40:43.700
really has to be inside
the browser.

988
00:40:43.700 --> 00:40:46.600
So this is a technical solution,
the sandboxing,

989
00:40:46.600 --> 00:40:48.070
software for the isolation.

990
00:40:48.070 --> 00:40:51.690
There have been some projects
to use the same sandboxing

991
00:40:51.690 --> 00:40:55.080
technology to, for instance, run
computation in the cloud.

992
00:40:55.080 --> 00:40:57.850
Or to just say, you know,
I don't want to audit

993
00:40:57.850 --> 00:40:58.790
this piece of code.

994
00:40:58.790 --> 00:41:02.590
Well, I'll just throw it in the
sandbox, and that way, I

995
00:41:02.590 --> 00:41:04.840
know that the third-party code
is going to be much more

996
00:41:04.840 --> 00:41:08.110
contained than it
would otherwise.

997
00:41:08.110 --> 00:41:09.310
Recommended reading.

998
00:41:09.310 --> 00:41:11.750
So every time we give a NaCl
talk, we point people to

999
00:41:11.750 --> 00:41:12.860
gonacl.com.

1000
00:41:12.860 --> 00:41:16.130
This is a developer-oriented
site, where you download the

1001
00:41:16.130 --> 00:41:20.460
compiler, the SDK tutorials
about how to get you started.

1002
00:41:20.460 --> 00:41:22.910
This talk was a little
technical, more

1003
00:41:22.910 --> 00:41:25.470
research-based, so we have a
bunch of research papers, too.

1004
00:41:25.470 --> 00:41:26.860
I point you towards those.

1005
00:41:26.860 --> 00:41:30.660
If you Google gonacl or Native
Client research papers, you'll

1006
00:41:30.660 --> 00:41:32.180
get these URLs.

1007
00:41:32.180 --> 00:41:34.660
And my favorite one is actually
"A Tale of Two

1008
00:41:34.660 --> 00:41:37.700
Pwnies." So every year
or so, there's a

1009
00:41:37.700 --> 00:41:39.640
browser security contest.

1010
00:41:39.640 --> 00:41:43.350
And this year, Chrome
had two exploits.

1011
00:41:43.350 --> 00:41:46.220
One of them actually touched
NaCl but did not break it.

1012
00:41:46.220 --> 00:41:48.080
So they used NaCl as
an attack platform

1013
00:41:48.080 --> 00:41:49.580
to hit the GPU process.

1014
00:41:49.580 --> 00:41:52.450
And I myself actually learned
a lot from reading this.

1015
00:41:52.450 --> 00:41:55.790
And it's really eye-opening to
see how many layers and levels

1016
00:41:55.790 --> 00:41:58.660
you have to get through to
do a modern exploit.

1017
00:41:58.660 --> 00:42:00.470
The one that involved
NaCl was six.

1018
00:42:00.470 --> 00:42:03.230
The other one was 10 because
they had to chain that many

1019
00:42:03.230 --> 00:42:04.930
different vulnerabilities
together to

1020
00:42:04.930 --> 00:42:06.650
actually get an exploit.

1021
00:42:06.650 --> 00:42:08.780
So security, very interesting
field.

1022
00:42:08.780 --> 00:42:10.562
I strongly suggest you
read that paper.

1023
00:42:10.562 --> 00:42:13.240
1024
00:42:13.240 --> 00:42:14.130
Now the fun part.

1025
00:42:14.130 --> 00:42:15.828
Questions.

1026
00:42:15.828 --> 00:42:28.060
[APPLAUSE]

1027
00:42:28.060 --> 00:42:29.610
AUDIENCE: Thanks for
the presentation.

1028
00:42:29.610 --> 00:42:30.670
NICK BRAY: My pleasure.

1029
00:42:30.670 --> 00:42:32.560
AUDIENCE: Out of all of I/O,
it's probably the most

1030
00:42:32.560 --> 00:42:34.920
interesting, funnest one that
I've ever been to, so that was

1031
00:42:34.920 --> 00:42:35.400
really cool.

1032
00:42:35.400 --> 00:42:38.350
I've known NaCl for about
an hour and a half.

1033
00:42:38.350 --> 00:42:41.830
I was wondering, does it matter
what version of CIUs?

1034
00:42:41.830 --> 00:42:48.350
Does NaCl care whether
it's C99 or C90?

1035
00:42:48.350 --> 00:42:49.790
NICK BRAY: It doesn't even
matter if you use a

1036
00:42:49.790 --> 00:42:51.180
C-compiler.

1037
00:42:51.180 --> 00:42:54.480
So you can actually hand-write
NaCl code, and it'll run.

1038
00:42:54.480 --> 00:42:57.840
But we provide compilers that
generate code that's

1039
00:42:57.840 --> 00:42:58.920
compatible.

1040
00:42:58.920 --> 00:43:02.920
So I think our version
of GCC supports C99.

1041
00:43:02.920 --> 00:43:04.246
Do you know?

1042
00:43:04.246 --> 00:43:06.120
Yeah, I think, so
you can use C99.

1043
00:43:06.120 --> 00:43:09.430
It's whatever GCC supports,
really.

1044
00:43:09.430 --> 00:43:10.650
AUDIENCE: The one question
I had was about

1045
00:43:10.650 --> 00:43:11.950
the indirect jumps.

1046
00:43:11.950 --> 00:43:15.560
And it sounds like you are
relying on the compiler to put

1047
00:43:15.560 --> 00:43:18.180
everything on 32-bit
boundaries.

1048
00:43:18.180 --> 00:43:20.100
That seems to me like the
only position where

1049
00:43:20.100 --> 00:43:21.130
a handwritten exploit--

1050
00:43:21.130 --> 00:43:25.490
I mean, you were assuming that
all the code coming in would

1051
00:43:25.490 --> 00:43:27.170
allow jumps to 32-byte
boundaries.

1052
00:43:27.170 --> 00:43:30.350
But if I were to hand-write some
asm that a jump into a

1053
00:43:30.350 --> 00:43:32.850
32-bit boundary was a actually
a bad execution, how do you

1054
00:43:32.850 --> 00:43:34.320
manage that?

1055
00:43:34.320 --> 00:43:35.430
NICK BRAY: Validation.

1056
00:43:35.430 --> 00:43:38.260
So while we're going through
looking at what the

1057
00:43:38.260 --> 00:43:41.950
instructions are, we record
where they are, too.

1058
00:43:41.950 --> 00:43:45.010
So internally, you can think
that we have a bit factor,

1059
00:43:45.010 --> 00:43:47.200
which contains a bit
for each byte.

1060
00:43:47.200 --> 00:43:49.990
And every time we see an
instruction start, we say,

1061
00:43:49.990 --> 00:43:51.410
boom, there's a bit.

1062
00:43:51.410 --> 00:43:53.580
So whenever we have a
direct jump we say,

1063
00:43:53.580 --> 00:43:54.870
is the bit set there?

1064
00:43:54.870 --> 00:43:56.520
We actually have to do this
after we see all the

1065
00:43:56.520 --> 00:43:57.110
instructions.

1066
00:43:57.110 --> 00:43:59.770
But in the final thing, we go,
OK, here's all the jump

1067
00:43:59.770 --> 00:44:02.000
targets, here's all the
instructions, starts--

1068
00:44:02.000 --> 00:44:02.830
AUDIENCE: But what about
the indirect

1069
00:44:02.830 --> 00:44:05.180
jumps into the 32 byte--

1070
00:44:05.180 --> 00:44:06.850
NICK BRAY: We do that
on the fly.

1071
00:44:06.850 --> 00:44:10.340
So you say, OK, while I'm
parsing this instruction, I

1072
00:44:10.340 --> 00:44:12.740
notice that it's overlapping
the 32-byte boundary.

1073
00:44:12.740 --> 00:44:13.300
Boom, that's bad.

1074
00:44:13.300 --> 00:44:14.810
AUDIENCE: OK.

1075
00:44:14.810 --> 00:44:18.030
So you also make sure that all
32-byte boundary instructions,

1076
00:44:18.030 --> 00:44:20.350
whatever is at a 32-byte
boundary is also safe.

1077
00:44:20.350 --> 00:44:21.600
NICK BRAY: Yes.

1078
00:44:21.600 --> 00:44:23.910
1079
00:44:23.910 --> 00:44:26.300
AUDIENCE: So it looks like
you're creating a 4-gig memory

1080
00:44:26.300 --> 00:44:26.950
limit again.

1081
00:44:26.950 --> 00:44:30.410
Didn't we just get
rid of that?

1082
00:44:30.410 --> 00:44:33.430
NICK BRAY: It depends on
how you look at it.

1083
00:44:33.430 --> 00:44:35.740
So there's all sorts
of devices.

1084
00:44:35.740 --> 00:44:37.740
But what you're really saying
is, can I get more

1085
00:44:37.740 --> 00:44:39.690
than 4 gigs of memory?

1086
00:44:39.690 --> 00:44:42.400
And the answer is we could
change the sandboxing model,

1087
00:44:42.400 --> 00:44:44.570
but there would be performance
implications.

1088
00:44:44.570 --> 00:44:47.260
So a lot of the clever things
we were doing with dropping

1089
00:44:47.260 --> 00:44:49.710
the upper 32 bits, suddenly
you're carting

1090
00:44:49.710 --> 00:44:52.060
around 8-byte constants.

1091
00:44:52.060 --> 00:44:54.680
And that's a generally
bad thing.

1092
00:44:54.680 --> 00:44:56.440
So has it been a problem?

1093
00:44:56.440 --> 00:44:58.810
And the answer is, we haven't
really had any developers

1094
00:44:58.810 --> 00:45:00.220
complain about it.

1095
00:45:00.220 --> 00:45:03.470
We've been living under the
4-gig limit so long, that it's

1096
00:45:03.470 --> 00:45:04.970
not been an issue.

1097
00:45:04.970 --> 00:45:07.010
Plus do you really want an
application in your web

1098
00:45:07.010 --> 00:45:09.000
browser consuming that
much memory?

1099
00:45:09.000 --> 00:45:10.270
Eh, most the time, not.

1100
00:45:10.270 --> 00:45:11.984
There are some applications
that you write that

1101
00:45:11.984 --> 00:45:12.300
you may want to.

1102
00:45:12.300 --> 00:45:14.070
AUDIENCE: In five years,
certainly?

1103
00:45:14.070 --> 00:45:15.670
NICK BRAY: Yeah.

1104
00:45:15.670 --> 00:45:18.040
So sandboxing models
are flexible.

1105
00:45:18.040 --> 00:45:21.590
And once we get PNaCl running,
we can take another look at

1106
00:45:21.590 --> 00:45:23.778
generating a new sandboxing
model or

1107
00:45:23.778 --> 00:45:26.400
something along those lines.

1108
00:45:26.400 --> 00:45:28.940
AUDIENCE: Kind of a
related question.

1109
00:45:28.940 --> 00:45:34.720
You, at the beginning, showed
x64, x86, and ARM.

1110
00:45:34.720 --> 00:45:37.930
On x86, you obviously can't
do the same kind of jump

1111
00:45:37.930 --> 00:45:40.310
constraint because you are--

1112
00:45:40.310 --> 00:45:44.090
if you're on 32-bit x86,
you're then limited.

1113
00:45:44.090 --> 00:45:47.790
You're going to reduce your
memory space by far more and

1114
00:45:47.790 --> 00:45:49.950
lose a very precious register.

1115
00:45:49.950 --> 00:45:51.390
NICK BRAY: One gig.

1116
00:45:51.390 --> 00:45:53.800
And you don't lose precious
registers.

1117
00:45:53.800 --> 00:45:57.660
We do something very perverse
on 32-bit Intel.

1118
00:45:57.660 --> 00:45:59.410
We use segment registers.

1119
00:45:59.410 --> 00:46:01.530
So we're bringing back all
these things that you

1120
00:46:01.530 --> 00:46:01.830
thought were dead.

1121
00:46:01.830 --> 00:46:03.545
AUDIENCE: Awesome.

1122
00:46:03.545 --> 00:46:05.350
NICK BRAY: So, for those of you
who don't know, segment

1123
00:46:05.350 --> 00:46:08.680
registers say this is the range
of memory you can use.

1124
00:46:08.680 --> 00:46:13.980
So we say, OK, 256 megs for
code, 1 gig for data.

1125
00:46:13.980 --> 00:46:16.500
If you jump outside
this, boom.

1126
00:46:16.500 --> 00:46:19.020
And then we say you can't change
the segment registers

1127
00:46:19.020 --> 00:46:20.120
while you're running.

1128
00:46:20.120 --> 00:46:22.900
This has a few weird
implications, like most people

1129
00:46:22.900 --> 00:46:23.920
thought they were dead.

1130
00:46:23.920 --> 00:46:27.180
So the Intel atom processor
for instance, they didn't

1131
00:46:27.180 --> 00:46:28.990
spend so much time supporting
segment registers.

1132
00:46:28.990 --> 00:46:31.630
They do lip service, but then
when you actually use them in

1133
00:46:31.630 --> 00:46:34.520
nonstandard ways, it
slows down a lot.

1134
00:46:34.520 --> 00:46:36.500
AUDIENCE: Thanks.

1135
00:46:36.500 --> 00:46:37.240
AUDIENCE: Hi.

1136
00:46:37.240 --> 00:46:38.100
It's a great project.

1137
00:46:38.100 --> 00:46:40.090
I love it.

1138
00:46:40.090 --> 00:46:43.380
It is very perverse though, in
some ways, as you're going

1139
00:46:43.380 --> 00:46:45.460
through all of these things.

1140
00:46:45.460 --> 00:46:51.060
I was just wondering, with the
LLVM thing that you're going

1141
00:46:51.060 --> 00:46:54.420
to be doing, does it get easier
now that you control

1142
00:46:54.420 --> 00:46:55.570
the instruction set?

1143
00:46:55.570 --> 00:46:58.190
I mean, can you somehow do
something to make this whole

1144
00:46:58.190 --> 00:47:00.470
process simpler?

1145
00:47:00.470 --> 00:47:02.980
NICK BRAY: Define the "whole
process simpler."

1146
00:47:02.980 --> 00:47:04.300
AUDIENCE: The verification
process.

1147
00:47:04.300 --> 00:47:09.900
I mean, since you control the
intermediate format, is there

1148
00:47:09.900 --> 00:47:12.760
some way to--

1149
00:47:12.760 --> 00:47:16.460
will it become simpler when
you get to the LLVM model?

1150
00:47:16.460 --> 00:47:17.480
NICK BRAY: The big problem
is that we

1151
00:47:17.480 --> 00:47:19.620
can't trust the compiler.

1152
00:47:19.620 --> 00:47:21.110
So we can't audit it.

1153
00:47:21.110 --> 00:47:23.120
We can't verify that it's--

1154
00:47:23.120 --> 00:47:25.240
you know, it should generate
the code we want.

1155
00:47:25.240 --> 00:47:27.630
But at the end of the day, what
we do is, we have to have

1156
00:47:27.630 --> 00:47:29.810
validation be the last
line of defense.

1157
00:47:29.810 --> 00:47:32.860
So if the code doesn't look
safe, we don't run it.

1158
00:47:32.860 --> 00:47:36.500
And we make no assumptions
about its providence.

1159
00:47:36.500 --> 00:47:42.000
So what LLVM would allow us to
do is do more creative things.

1160
00:47:42.000 --> 00:47:44.460
Right now, the binary that's
shipped across the wire is

1161
00:47:44.460 --> 00:47:46.830
something that we've stabilized
and we said this is

1162
00:47:46.830 --> 00:47:48.610
what we're going to support.

1163
00:47:48.610 --> 00:47:50.880
Once we start supporting bit
code, then we can generate

1164
00:47:50.880 --> 00:47:52.340
other sandboxing models.

1165
00:47:52.340 --> 00:47:54.940
We can generate other
interesting low-level things.

1166
00:47:54.940 --> 00:47:57.690
And it decouples us and gives
us a lot of flexibility.

1167
00:47:57.690 --> 00:48:00.040
But at the bottom level, there's
going to have to be

1168
00:48:00.040 --> 00:48:03.010
some algorithm that goes through
and says does this

1169
00:48:03.010 --> 00:48:04.690
native code look right?

1170
00:48:04.690 --> 00:48:06.620
And if it doesn't,
out of there.

1171
00:48:06.620 --> 00:48:08.320
And once LLVM's in
the picture, it

1172
00:48:08.320 --> 00:48:10.070
should always look right.

1173
00:48:10.070 --> 00:48:11.410
But we are going to
bank on that.

1174
00:48:11.410 --> 00:48:12.810
We're going to always
have the last line.

1175
00:48:12.810 --> 00:48:15.790
AUDIENCE: Will the bit code be
actual LLVM byte code, or will

1176
00:48:15.790 --> 00:48:19.250
you have something of
your own nature?

1177
00:48:19.250 --> 00:48:21.790
NICK BRAY: I think the plan
is actual LLVM byte code.

1178
00:48:21.790 --> 00:48:25.050
1179
00:48:25.050 --> 00:48:28.057
AUDIENCE: That was actually very
similar to the question I

1180
00:48:28.057 --> 00:48:29.360
was going to ask.

1181
00:48:29.360 --> 00:48:32.705
When you're going through the
initial design for NaCl, why

1182
00:48:32.705 --> 00:48:38.042
did you choose native code
versus LLVM or comparing it to

1183
00:48:38.042 --> 00:48:40.630
the JVMs and what they do?

1184
00:48:40.630 --> 00:48:42.100
NICK BRAY: Why choose
native code instead

1185
00:48:42.100 --> 00:48:45.340
of everything else?

1186
00:48:45.340 --> 00:48:48.360
AUDIENCE: Was it to have a
simpler just run- time

1187
00:48:48.360 --> 00:48:51.030
environment, not have to
have an actual JIT?

1188
00:48:51.030 --> 00:48:52.280
NICK BRAY: Yep.

1189
00:48:52.280 --> 00:48:54.060
1190
00:48:54.060 --> 00:48:57.340
Part of the view was
compatibility, because we have

1191
00:48:57.340 --> 00:48:59.470
a lot of infrastructure
for native code.

1192
00:48:59.470 --> 00:49:02.150
So if we're just running native
code, a lot of that

1193
00:49:02.150 --> 00:49:06.160
should be analogous, fairly
straightforward.

1194
00:49:06.160 --> 00:49:07.980
Less overhead.

1195
00:49:07.980 --> 00:49:09.700
You can access certain
intrinsic

1196
00:49:09.700 --> 00:49:11.350
instructions directly.

1197
00:49:11.350 --> 00:49:12.570
You can do threads.

1198
00:49:12.570 --> 00:49:15.250
You don't have to solve
all these ugly

1199
00:49:15.250 --> 00:49:16.940
issues at the VM level.

1200
00:49:16.940 --> 00:49:20.130
Instead, you can just validate
it and let it rip instead of

1201
00:49:20.130 --> 00:49:22.730
trying to have a larger surface
area, which you are

1202
00:49:22.730 --> 00:49:25.270
trying to prove is safe.

1203
00:49:25.270 --> 00:49:28.230
Part of it was also
a technical issue.

1204
00:49:28.230 --> 00:49:30.280
We realized, hey,
we CAN do this.

1205
00:49:30.280 --> 00:49:32.630
So how can we bring
it to the web?

1206
00:49:32.630 --> 00:49:34.750
So we finally realized
native code

1207
00:49:34.750 --> 00:49:36.420
doesn't have to be unsafe.

1208
00:49:36.420 --> 00:49:38.060
And what are the
opportunities?

1209
00:49:38.060 --> 00:49:39.170
So we've been seeing
a lot of people

1210
00:49:39.170 --> 00:49:40.590
port games, for instance.

1211
00:49:40.590 --> 00:49:43.250
And when you spend how many
years writing native code, and

1212
00:49:43.250 --> 00:49:46.510
you want to port it, well, you
don't want to jump through too

1213
00:49:46.510 --> 00:49:47.920
many hoops.

1214
00:49:47.920 --> 00:49:51.520
You can try to do weird cross
compiles into JavaScript VMs,

1215
00:49:51.520 --> 00:49:54.640
but, it works some
of the time.

1216
00:49:54.640 --> 00:49:57.630
Instead, why don't you just run
the native code, and call

1217
00:49:57.630 --> 00:49:59.520
the browser instead of the OS.

1218
00:49:59.520 --> 00:50:01.400
That's the general philosophy,
is trying to keep the surface

1219
00:50:01.400 --> 00:50:05.090
area small and trying to make
it as close to other native

1220
00:50:05.090 --> 00:50:07.680
code development as possible.

1221
00:50:07.680 --> 00:50:08.130
AUDIENCE: Cool.

1222
00:50:08.130 --> 00:50:09.630
Thanks.

1223
00:50:09.630 --> 00:50:10.560
AUDIENCE: I've got
two questions.

1224
00:50:10.560 --> 00:50:12.790
I think they're both small.

1225
00:50:12.790 --> 00:50:14.940
Trampolines got me thinking.

1226
00:50:14.940 --> 00:50:17.840
Do you have any dev tools that
would de-bug what's going on,

1227
00:50:17.840 --> 00:50:20.330
so that you can see in the
inspector that, OK, it's

1228
00:50:20.330 --> 00:50:23.600
making it HTTP requests
and so on?

1229
00:50:23.600 --> 00:50:25.500
NICK BRAY: De-buggers are
something we're working on.

1230
00:50:25.500 --> 00:50:27.320
They're harder than
you'd expect.

1231
00:50:27.320 --> 00:50:30.420
Because they've made many silly
assumptions that native

1232
00:50:30.420 --> 00:50:33.180
code just happens to work the
way native code does.

1233
00:50:33.180 --> 00:50:36.300
So the moment we start adding
this R15 register to offset

1234
00:50:36.300 --> 00:50:39.500
everything, there's been a lot
of work to try to get the

1235
00:50:39.500 --> 00:50:40.750
de-buggers to get all
the right symbols.

1236
00:50:40.750 --> 00:50:42.530
AUDIENCE: I'm thinking on a much
higher level actually.

1237
00:50:42.530 --> 00:50:45.220
If you're coming as a web
developer looking at things in

1238
00:50:45.220 --> 00:50:47.780
the inspector, what's going
on in this web page?

1239
00:50:47.780 --> 00:50:49.180
What is it doing?

1240
00:50:49.180 --> 00:50:53.080
Can I see what stuff is it
requesting on the web?

1241
00:50:53.080 --> 00:50:56.650
NICK BRAY: At the moment,
half and half.

1242
00:50:56.650 --> 00:50:59.970
So whenever you're doing
a Pepper call, that

1243
00:50:59.970 --> 00:51:00.930
usually gets traced.

1244
00:51:00.930 --> 00:51:05.570
So every time you see a URL
load, Chrome has the console

1245
00:51:05.570 --> 00:51:06.900
of all network activity.

1246
00:51:06.900 --> 00:51:08.080
And it will get logged
in that.

1247
00:51:08.080 --> 00:51:10.470
So you're mediating through
the browser, so all the

1248
00:51:10.470 --> 00:51:11.820
instrumentation the
browser has.

1249
00:51:11.820 --> 00:51:14.275
What's actually going on inside
the native process is a

1250
00:51:14.275 --> 00:51:16.200
little more opaque than I'd
like at this point.

1251
00:51:16.200 --> 00:51:19.880
And we're thinking about ways
to expose health and metrics

1252
00:51:19.880 --> 00:51:21.450
and pull that out
of the process.

1253
00:51:21.450 --> 00:51:22.560
AUDIENCE: That's awesome.

1254
00:51:22.560 --> 00:51:25.410
The second question is, so
you're defending against all

1255
00:51:25.410 --> 00:51:28.090
these things that are unsafe
from the system's perspective.

1256
00:51:28.090 --> 00:51:32.150
But are you having any checks
and bounds on stuff that's

1257
00:51:32.150 --> 00:51:35.800
causing infinite loops that
just eat the CPU?

1258
00:51:35.800 --> 00:51:36.510
That kind of stuff.

1259
00:51:36.510 --> 00:51:36.800
NICK BRAY: Nope.

1260
00:51:36.800 --> 00:51:39.220
AUDIENCE: OK.

1261
00:51:39.220 --> 00:51:41.640
Thanks.

1262
00:51:41.640 --> 00:51:43.820
AUDIENCE: This is similar to
the question before last.

1263
00:51:43.820 --> 00:51:47.270
Once you move into the LLVM
world and you're sending

1264
00:51:47.270 --> 00:51:50.290
basically Virtual Machine
instructions and calling a

1265
00:51:50.290 --> 00:51:54.660
limited API, how would you say
that PNaCl would compare to

1266
00:51:54.660 --> 00:51:58.390
Java or dot-net?

1267
00:51:58.390 --> 00:52:02.560
NICK BRAY: One thing about LLVM
is it's a bit misnamed.

1268
00:52:02.560 --> 00:52:05.230
So the Virtual Machine
name came

1269
00:52:05.230 --> 00:52:07.290
earlier in its life cycle.

1270
00:52:07.290 --> 00:52:10.270
And it's more a compiler
IR than it is,

1271
00:52:10.270 --> 00:52:12.270
strictly speaking, a VM.

1272
00:52:12.270 --> 00:52:13.990
There's some
architecture-specific things

1273
00:52:13.990 --> 00:52:16.640
that have got leaked into it,
which have had to be hammered

1274
00:52:16.640 --> 00:52:19.420
out in order to use it as
an interchange format.

1275
00:52:19.420 --> 00:52:22.800
So how would byte code
compare against VMs?

1276
00:52:22.800 --> 00:52:26.480
1277
00:52:26.480 --> 00:52:28.380
It's an interesting question.

1278
00:52:28.380 --> 00:52:30.530
I think the only real answer
I would add to

1279
00:52:30.530 --> 00:52:32.430
that is surface area.

1280
00:52:32.430 --> 00:52:36.260
Securing a VM is going to be
much harder than validating

1281
00:52:36.260 --> 00:52:38.780
native code and just use
the model that's there.

1282
00:52:38.780 --> 00:52:41.550
And the VM will likely be
slower, give or take

1283
00:52:41.550 --> 00:52:45.520
just-in-time compilers,
how well those do.

1284
00:52:45.520 --> 00:52:49.330
AUDIENCE: So does the validator
in PNaCl work on

1285
00:52:49.330 --> 00:52:50.110
native code still?

1286
00:52:50.110 --> 00:52:53.280
Or is it still validating
LLVM code?

1287
00:52:53.280 --> 00:52:56.010
NICK BRAY: We validate all
native code before we run it.

1288
00:52:56.010 --> 00:53:00.170
So PNaCl you can think of as
largely a translator, which is

1289
00:53:00.170 --> 00:53:02.330
I'm going to take this bit
code, then turn it into

1290
00:53:02.330 --> 00:53:04.460
machine code.

1291
00:53:04.460 --> 00:53:05.960
And then we pass it off
to the validator.

1292
00:53:05.960 --> 00:53:08.490
The validator says, OK, you
did your job right.

1293
00:53:08.490 --> 00:53:10.540
You're good to go.

1294
00:53:10.540 --> 00:53:11.790
AUDIENCE: Thanks.

1295
00:53:11.790 --> 00:53:17.120
1296
00:53:17.120 --> 00:53:19.960
AUDIENCE: Have you done any
benchmarking on the difference

1297
00:53:19.960 --> 00:53:24.820
between the unmodified code
that you do, like adding

1298
00:53:24.820 --> 00:53:27.620
padding and replacing things
with pseudo-instructions,

1299
00:53:27.620 --> 00:53:30.380
versus the modified version?

1300
00:53:30.380 --> 00:53:31.160
NICK BRAY: Yes.

1301
00:53:31.160 --> 00:53:34.640
AUDIENCE: And what
are the results?

1302
00:53:34.640 --> 00:53:35.910
NICK BRAY: It depends.

1303
00:53:35.910 --> 00:53:37.470
Also, one of these
horrible answers.

1304
00:53:37.470 --> 00:53:38.710
I'm not trying to weasel
out, but the

1305
00:53:38.710 --> 00:53:40.780
truth is, it does depend.

1306
00:53:40.780 --> 00:53:43.900
So if you're doing a numerical
application, for instance,

1307
00:53:43.900 --> 00:53:46.180
you're not going to have
a lot of jumps.

1308
00:53:46.180 --> 00:53:47.360
You're not going to have
a lot of calls.

1309
00:53:47.360 --> 00:53:49.460
So you can usually rip through
those instructions.

1310
00:53:49.460 --> 00:53:51.790
But certain benchmarks which are
doing indirect jumps all

1311
00:53:51.790 --> 00:53:55.220
over the place, you're going
to get no-op padding.

1312
00:53:55.220 --> 00:53:57.750
You're going to get a bunch
of guard instructions.

1313
00:53:57.750 --> 00:54:00.370
And on 32-bit, because we're
using segment registers, it's

1314
00:54:00.370 --> 00:54:01.600
actually more efficient.

1315
00:54:01.600 --> 00:54:06.190
So I think on 32-bit, it's like
10 20% slowdown compared

1316
00:54:06.190 --> 00:54:07.960
to full native speed.

1317
00:54:07.960 --> 00:54:11.630
On 64-bit, our guard sequences
are a little more complex.

1318
00:54:11.630 --> 00:54:13.110
They take up more bytes,
a few more

1319
00:54:13.110 --> 00:54:14.610
instructions here and there.

1320
00:54:14.610 --> 00:54:17.520
And I'm not exactly sure what
the benchmarks are.

1321
00:54:17.520 --> 00:54:21.680
Again, I say rule of thumb,
20%, although on some

1322
00:54:21.680 --> 00:54:25.510
degenerate benchmarks, it's down
40, 50% just because of

1323
00:54:25.510 --> 00:54:27.560
the way the code works out.

1324
00:54:27.560 --> 00:54:30.540
Again, the answer is that, no
one's complained yet either.

1325
00:54:30.540 --> 00:54:32.909
So it works as intended.

1326
00:54:32.909 --> 00:54:34.159
AUDIENCE: Thanks.

1327
00:54:34.159 --> 00:54:37.310
1328
00:54:37.310 --> 00:54:39.730
AUDIENCE: Another
PNaCl question.

1329
00:54:39.730 --> 00:54:45.590
Since you're going to have
LLVM living in PNaCl to

1330
00:54:45.590 --> 00:54:48.440
generate the instructions, you
mentioned earlier that you can

1331
00:54:48.440 --> 00:54:52.345
still do JITs in
Native Client.

1332
00:54:52.345 --> 00:54:55.610
I'm thinking about some ways
in which you could do that.

1333
00:54:55.610 --> 00:55:00.420
Are you going to expose
the LLVM translator to

1334
00:55:00.420 --> 00:55:03.400
applications so they can just
use that instead of having

1335
00:55:03.400 --> 00:55:06.850
another copy of LLVM inside
to do JIT-ing?

1336
00:55:06.850 --> 00:55:07.600
NICK BRAY: Interesting
question.

1337
00:55:07.600 --> 00:55:09.680
Very interesting question that
I can't answer, because I'm

1338
00:55:09.680 --> 00:55:11.500
not working on the
PNaCl project.

1339
00:55:11.500 --> 00:55:12.730
So what they're working
on there.

1340
00:55:12.730 --> 00:55:15.120
But you can imagine all the
complexities of, well, since

1341
00:55:15.120 --> 00:55:18.880
we can't trust the translator,
how do we fit it in so we can

1342
00:55:18.880 --> 00:55:20.790
run it in an untrusted
capacity.

1343
00:55:20.790 --> 00:55:24.370
So one neat thing I didn't
mention is that the actual

1344
00:55:24.370 --> 00:55:27.250
ahead-of-time time translator
is implemented inside of

1345
00:55:27.250 --> 00:55:29.060
Native Client.

1346
00:55:29.060 --> 00:55:31.860
So we have the LLVM compiler
running inside the Native

1347
00:55:31.860 --> 00:55:35.200
Client sandbox to produce code
that then we run inside the

1348
00:55:35.200 --> 00:55:38.260
Native Client sandbox.

1349
00:55:38.260 --> 00:55:39.510
AUDIENCE: Thanks.

1350
00:55:39.510 --> 00:55:46.690
1351
00:55:46.690 --> 00:55:48.660
NICK BRAY: Standard technique
for presentations is wait a

1352
00:55:48.660 --> 00:55:49.820
few seconds.

1353
00:55:49.820 --> 00:55:52.085
Usually someone gets
uncomfortable, stands up, and

1354
00:55:52.085 --> 00:55:54.995
ask another question.

1355
00:55:54.995 --> 00:55:57.920
If that doesn't work, then you
say, OK, thanks for coming.

1356
00:55:57.920 --> 00:56:01.193
WEBVTT

1
00:00:07.279 --> 00:00:14.179
&gt;&gt;Paul Irish: Cool. All right, guys. My name
is Paul Irish and I am a developer advocate

2
00:00:14.179 --> 00:00:17.930
on the Chrome team.
I want to talk a little bit about tooling.

3
00:00:17.930 --> 00:00:23.630
So this is about building Web apps, finding
the right software to make your process of

4
00:00:23.630 --> 00:00:28.980
building Web apps fun, awesome, enjoyable,
less stressful, more productive, things like

5
00:00:28.980 --> 00:00:31.579
that.
Now, I'm going to talk a little bit about

6
00:00:31.579 --> 00:00:35.670
kind of how we're building Web apps today
and how I think we can build them in the future,

7
00:00:35.670 --> 00:00:40.510
but for a second I want to take a few steps
back and walk back a few years, back to 2006

8
00:00:40.510 --> 00:00:47.050
because this is the year that I wrote like
my first website where I was like doing all

9
00:00:47.050 --> 00:00:53.069
the right things when it came to Web standards.
And I felt so good about the way that I was

10
00:00:53.069 --> 00:00:57.620
doing it, so I was actually here and I did
something probably like this, and I was doing

11
00:00:57.620 --> 00:01:04.620
a little bit of this and then this and then
that and then that and that, da, da...

12
00:01:04.690 --> 00:01:06.979
This is typical, right?
[Laughter]

13
00:01:06.979 --> 00:01:13.280
&gt;&gt;Paul Irish: Oh, there we go. Nice! Cool.
[ Applause ]

14
00:01:13.280 --> 00:01:19.340
&gt;&gt;Paul Irish: All right. I'm really glad we
don't have to type that out anymore. That's

15
00:01:19.340 --> 00:01:22.680
really nice.
But this is like -- so what I actually did

16
00:01:22.680 --> 00:01:28.289
is when I made this site, and it turned out
to be really nice, I did the whole thing in

17
00:01:28.289 --> 00:01:35.289
Notepad. And I think we consider it a little
funny now that I would write like pretty significant

18
00:01:39.149 --> 00:01:46.149
site in Notepad, but at the time I was like,
"I'm a craftsman over my markup and I will

19
00:01:48.140 --> 00:01:55.140
be one with it, and the closest I can be in
it is in Notepad exe." So I just used that.

20
00:01:55.509 --> 00:02:02.500
And it just seems kind of silly. I thought
I was so close to it, but really it's not

21
00:02:02.500 --> 00:02:07.119
really craftsmanship. That was handcraft.
That was like the Web's development equivalent

22
00:02:07.119 --> 00:02:13.730
to whittling a stick.
And handcraft is more about choosing tools

23
00:02:13.730 --> 00:02:19.769
well, finding the right tools to get the job
done and assist you.

24
00:02:19.769 --> 00:02:26.470
And I noticed this too, I started at Google
about two years ago, and looking around when

25
00:02:26.470 --> 00:02:31.290
you're surrounded by really smart people,
and you notice what the really productive

26
00:02:31.290 --> 00:02:36.760
developers do. And they know their -- they
have tools that they use, they know them really

27
00:02:36.760 --> 00:02:41.830
well, and they embrace them. And so I kind
of like noticed that there was a theme going

28
00:02:41.830 --> 00:02:45.849
on here.
And so I want to talk a little bit about tools.

29
00:02:45.849 --> 00:02:50.180
And this is not about, you know, Google development
tools. This is about -- you know, you don't

30
00:02:50.180 --> 00:02:56.069
have to be building the next Gmail for this
kind stuff to apply to you. It's for everyone.

31
00:02:56.069 --> 00:03:02.459
A lot of people have been noticing this recently.
And I just want you to, like, think about

32
00:03:02.459 --> 00:03:06.769
remember there was a point at which you didn't
actually use version control. You might have

33
00:03:06.769 --> 00:03:10.000
been on a team and you're like, Hey, I'm going
to be editing, indexing HTML. Can you hold

34
00:03:10.000 --> 00:03:17.000
on just a second? Okay, you can do it now.
Like source safe. It was, like, annoying,

35
00:03:17.540 --> 00:03:24.540
but version control made it a lot better.
And we can focus on development, not tiresome

36
00:03:25.379 --> 00:03:28.150
debugging when you don't want to be doing
it.

37
00:03:28.150 --> 00:03:32.640
And then how much time have you lost when
you actually had a colon where you were supposed

38
00:03:32.640 --> 00:03:38.180
to have a semi colon or an extra comma at
the end of your little object in JavaScript,

39
00:03:38.180 --> 00:03:43.260
and you were like ah!
There's lots of funny things. I'm not going

40
00:03:43.260 --> 00:03:48.360
to click to it. It's a little not safe to
work, commit logs from last night, pulling

41
00:03:48.360 --> 00:03:55.360
in logs from GitHub where people happen to
use expletives because they're a bit frustrated.

42
00:03:55.390 --> 00:04:00.620
People that are making silly mistakes that
they probably don't need to.

43
00:04:00.620 --> 00:04:04.969
So we're seeing a little bit of shift towards
looking at tools assisting us. And Rebecca

44
00:04:04.969 --> 00:04:10.969
Murphy did a great post about this sort of
shift recently, and she said we're seeing

45
00:04:10.969 --> 00:04:16.190
us focus from valuing trivia to valuing tools.
And a similar thing was said a little bit

46
00:04:16.190 --> 00:04:21.470
ago by Michael Lop, known by Rams online.
He's an engineering manager at Apple. He said,

47
00:04:21.470 --> 00:04:26.440
There's a short list of tools that you must
be rabid about, rabid, foaming at the mouth

48
00:04:26.440 --> 00:04:33.440
crazy. And he went on to talk about how he
used his editor, his terminal and what made

49
00:04:33.520 --> 00:04:38.400
him productive.
And I think this is important to really identify

50
00:04:38.400 --> 00:04:44.479
what you feel great about. And so I've done
a little bit of research and it talks about

51
00:04:44.479 --> 00:04:48.460
this, and there's a lot of tools.
When I say tools, it like covers a lot of

52
00:04:48.460 --> 00:04:53.770
things. So this is a quick way of trying to
visualize from start to end what are all the

53
00:04:53.770 --> 00:04:57.940
tools that I use from the birth of a project
to deploying it out to the world.

54
00:04:57.940 --> 00:05:02.030
And we're going to kind of walk through a
little bit of this, but focusing on your developer

55
00:05:02.030 --> 00:05:06.030
workflow.
So I'll just -- we're going to walk through

56
00:05:06.030 --> 00:05:11.000
the current workflow for Web app developers.
And really the way we'll start this off is

57
00:05:11.000 --> 00:05:15.449
in your shell.
In your shell -- I'll bring mine up right

58
00:05:15.449 --> 00:05:19.210
now.
Cool.

59
00:05:19.210 --> 00:05:24.900
The first thing is I think you should make
it sexy. Feel good about this terminal that

60
00:05:24.900 --> 00:05:30.759
you're typing into. There's a really great
community on GitHub around dot files, configuration

61
00:05:30.759 --> 00:05:37.150
files for your bash prompt or your ZHS prompt,
other application configurations. So I encourage

62
00:05:37.150 --> 00:05:42.060
you to go check that out, see what other people
are doing and customize your shell and share

63
00:05:42.060 --> 00:05:47.970
your customizations with other people.
There's a few favorites that I have. One of

64
00:05:47.970 --> 00:05:54.970
them is a directory jumper called Z. I'll
show that now. I can jump to any folder that

65
00:05:55.169 --> 00:05:59.270
I've been in somewhat recently. I'll jump
over to the modernizer project.

66
00:05:59.270 --> 00:06:04.910
You can type any portion of that word, hit
Z. We jump right into that. Now we'll actually

67
00:06:04.910 --> 00:06:11.599
go over to the HTML Please project. Just type
in "Z please," and we jump over into that

68
00:06:11.599 --> 00:06:18.599
folder, nice and easy. Cool.
Now, moving on past my shell -- actually,

69
00:06:18.660 --> 00:06:25.660
first, the server alias. This is pretty cool.
This alias, this is just a bit of bash. We

70
00:06:28.940 --> 00:06:33.800
are just firing up a simple Web server, no
big deal. At the same time we're opening up

71
00:06:33.800 --> 00:06:40.800
browser tab. Configurable port if we want,
but we'll default to 8,000 if we want. I'll

72
00:06:46.009 --> 00:06:48.169
do that now, type in server. Cool.
And refresh. Yeah, cool, awesome, good.

73
00:06:48.169 --> 00:06:52.599
So we have my local HTML5 Please running right
here.

74
00:06:52.599 --> 00:06:59.599
Now, coming back, the next part is the editor.
And the editor, you might have your own preferences.

75
00:07:03.289 --> 00:07:09.270
That's fine, but the key to a good editor
is that it's an onion application, which is

76
00:07:09.270 --> 00:07:13.080
to say that there's a nice learning curve
where you can kind of peel back the layers

77
00:07:13.080 --> 00:07:20.080
of functionality and kind of grow from novice
to expert at a very easy pace.

78
00:07:20.479 --> 00:07:25.680
So the other thing with an editor is that
more than any other tool, this is where your

79
00:07:25.680 --> 00:07:30.030
investment in time and learning it well and
learning the features inside of it will pay

80
00:07:30.030 --> 00:07:35.490
off huge dividends.
So I'll bring up mine right now.

81
00:07:35.490 --> 00:07:42.490
Let's see. I'm actually using Sublime text
and we'll bring this up and move it over here,

82
00:07:43.190 --> 00:07:50.190
and we're going to bring up actually my script
for this file.

83
00:07:51.699 --> 00:07:58.699
Nice. Cool.
Now, one of the things that I've noticed developing

84
00:07:58.840 --> 00:08:03.550
recently is that I've kind of, like, learned
new tricks, I like some of the features in

85
00:08:03.550 --> 00:08:08.599
this editor. And one of the things that I
added to my editor workflow recently was having

86
00:08:08.599 --> 00:08:15.599
linting. And code linting built-in write live.
So I'll show you what I mean right now.

87
00:08:17.800 --> 00:08:23.979
So here I have these three variable declarations.
It's cool. I didn't actually write these three

88
00:08:23.979 --> 00:08:30.979
lines, but maybe I'll refactor them a little
bit. Select them. I will align -- that's nice.

89
00:08:31.430 --> 00:08:38.430
Good thing. I'll do a multiline select. Move
that over. That's cool. And then I'll go over

90
00:08:39.290 --> 00:08:45.150
and fix that. And good.
Now, one of the things that it's helping me

91
00:08:45.150 --> 00:08:51.910
out with here is I have this white box right
here and this is linter plug-in that's running

92
00:08:51.910 --> 00:08:55.310
inside Sublime and it's telling me I have
a problem.

93
00:08:55.310 --> 00:09:01.110
Now, way down at the bottom it says "H2 is
not defined."

94
00:09:01.110 --> 00:09:08.110
And I'm like, but you're right here. Hmm.
And what is the problem in this right here?

95
00:09:09.960 --> 00:09:16.330
Yes, my semi colon should be a comma and I
should be stringing my variable declarations.

96
00:09:16.330 --> 00:09:20.210
That's so nice.
Yes. It's cool.

97
00:09:20.210 --> 00:09:26.420
All right. So yeah, I got lifing back and
it was able to, like, save me from an implied

98
00:09:26.420 --> 00:09:29.300
global variable, which we don't want. I probably
would have caught that. It would have been

99
00:09:29.300 --> 00:09:34.580
a syntax error when I refresh the page, but
I'm getting it caught right here immediately.

100
00:09:34.580 --> 00:09:41.150
So I like this. In fact, I think code linting
is your first unit test. Typically the first

101
00:09:41.150 --> 00:09:47.010
unit test that you might write is the global
there, does this thing exist. And even before

102
00:09:47.010 --> 00:09:52.720
that you get feedback on if it's available.
And in JavaScript this is particularly important.

103
00:09:52.720 --> 00:09:59.090
Some of the languages have rich static analysis
features. JavaScript is a little hairy in

104
00:09:59.090 --> 00:10:05.310
that sort of thing, but we have code linting.
I'm using JS right here, and I can get immediate

105
00:10:05.310 --> 00:10:10.780
feedback on is my code syntactically sound
and is there anything that I should watch

106
00:10:10.780 --> 00:10:16.900
out for, like what we just saw?
So one of the parts of this is I really like

107
00:10:16.900 --> 00:10:22.080
getting the realtime feedback. If you've seen
the talk by Brett Victor, Invented on Principle,

108
00:10:22.080 --> 00:10:28.380
one of the things that he talks about is having
immediate feedback between your code and your

109
00:10:28.380 --> 00:10:33.220
results and getting that feedback.
And so I'm going to show a little bit of kind

110
00:10:33.220 --> 00:10:37.870
of what kind of tools provide this sort of
workflow these days.

111
00:10:37.870 --> 00:10:44.870
So I'll move this back over here and I'll
open up the style folder or the style sheet

112
00:10:45.600 --> 00:10:52.600
that we have. I think it's style.scss.
So we're using Sass and Compass, and I'm going

113
00:10:54.170 --> 00:11:01.170
to jump down to H1.
So what I'm going to do is just make an edit

114
00:11:02.880 --> 00:11:07.190
in the text shadow and we'll just change this
part of the text shadow from this right here

115
00:11:07.190 --> 00:11:13.850
up to 41 pixels and save it.
Now, nothing happens. I refresh the page.

116
00:11:13.850 --> 00:11:19.560
Okay, cool. That's good. But I can turn on
this library load extension, which is just

117
00:11:19.560 --> 00:11:25.620
available inside Chrome. It communicates with
the system application back here. And now

118
00:11:25.620 --> 00:11:30.960
any changes that I make are in fact live.
So I make a change, I just hit save. I don't

119
00:11:30.960 --> 00:11:37.440
have to go over and hit refresh. That's good.
So I'll actually just say that that sounds

120
00:11:37.440 --> 00:11:42.540
pretty good. And I will go down here and add
a little bit more functionality.

121
00:11:42.540 --> 00:11:49.540
Let's see, I'll do a CSS transition that I
want to see .4 seconds. I'll apply that to

122
00:11:52.450 --> 00:11:59.450
all things. And then add a hover state to
it. I think this time we'll do a transform.

123
00:12:03.940 --> 00:12:09.460
Nice.
Okay. So I just hit saved, I come over here

124
00:12:09.460 --> 00:12:16.460
with my mouse and -- nice. This is definitely
an improvement and I will be committing this

125
00:12:16.540 --> 00:12:19.410
to the repo right now.
[Laughter]

126
00:12:19.410 --> 00:12:23.740
&gt;&gt;Paul Irish: Or not.
But that's cool. But I'm getting my immediate

127
00:12:23.740 --> 00:12:30.740
feedback, so I'm getting my Sass immediately
recompiled on the fly and then my CSS is being

128
00:12:31.960 --> 00:12:37.200
served back to the browser. Without even the
browser refreshing I can change the page,

129
00:12:37.200 --> 00:12:43.130
my scroll position is maintained and just
the style sheet is being swapped in, which

130
00:12:43.130 --> 00:12:48.350
is really nice.
All right. So I'm going to show a little bit

131
00:12:48.350 --> 00:12:53.050
of the browser dev tools inside Chrome, some
features that help especially with building

132
00:12:53.050 --> 00:12:59.060
applications that you may not be aware of.
The first is sourceURL. And this is a feature

133
00:12:59.060 --> 00:13:06.060
that's been in the browser for quite awhile.
This is a little demo set up by Ryan Sutton,

134
00:13:07.960 --> 00:13:12.850
and so we have a little bit of Coffescript
right here in the middle.

135
00:13:12.850 --> 00:13:18.260
I'm going to make a small little edit to this
Coffescript first.

136
00:13:18.260 --> 00:13:24.310
Nice. Cool.
I'll bring up the Chrome dev tools. And -- that's

137
00:13:24.310 --> 00:13:30.350
pretty good. Nice.
Now, normally I can take this Coffescript,

138
00:13:30.350 --> 00:13:36.110
I can run it through Coffescript.js, compile
it into its JavaScript form, and if I run

139
00:13:36.110 --> 00:13:41.600
it, it goes through eval. And normally when
you take text and run it through eval, it

140
00:13:41.600 --> 00:13:45.060
evaluates, but it just kind of disappears
into thin air.

141
00:13:45.060 --> 00:13:51.800
SourceURL is a way to basically treat that
as a file. So if you see down at the bottom

142
00:13:51.800 --> 00:13:58.740
I'm adding googleio.js and adding to compile.
Now you see it over here in the Chrome dev

143
00:13:58.740 --> 00:14:05.680
tools. And if you look over here we have what
I just added in the Coffescript, now compiled

144
00:14:05.680 --> 00:14:09.500
to JavaScript, and at the side over here is
the sourceURL.

145
00:14:09.500 --> 00:14:16.300
So this little line is indicating, hey, dev
tools. I got this text, I threw it into eval,

146
00:14:16.300 --> 00:14:20.250
but can you treat it as a file? Thanks very
much, that would be great.

147
00:14:20.250 --> 00:14:26.580
So this is really nice, too. So not only is
it a file, but I get all the features that

148
00:14:26.580 --> 00:14:33.580
I would expect. So let's say break points.
First I'll just make sure that my cube function

149
00:14:33.790 --> 00:14:39.460
is working all nicely.
Yes, good. Cube files 125. At a break point

150
00:14:39.460 --> 00:14:46.460
cube of five we break. I can't actually check
the value of X right now. We're looking good.

151
00:14:47.460 --> 00:14:54.430
Yes, sure, we'll continue.
Or I can do a live edit. I can immediately

152
00:14:54.430 --> 00:15:00.510
change this file on the fly, we'll return
2 from square so now let me ask for a cube

153
00:15:00.510 --> 00:15:07.050
and it should be 5 times 2. Cool. And we get
our result, which is 10.

154
00:15:07.050 --> 00:15:13.490
So I'm getting live edit and break points
on some JavaScript which was compiled down

155
00:15:13.490 --> 00:15:20.490
from Coffescript all on the fly. I'm showing
up as real files. That's pretty nice.

156
00:15:20.510 --> 00:15:27.310
Ember actually uses sourceURL to great effect
to -- Ember the JavaScript library, to emulate

157
00:15:27.310 --> 00:15:32.420
modules, which is really, really cool.
Another feature I want to show real quick

158
00:15:32.420 --> 00:15:39.420
is source maps. So if I bring back open my
local HTML5 Please and view the source, down

159
00:15:41.480 --> 00:15:47.850
at the bottom is my original sources for the
project.

160
00:15:47.850 --> 00:15:53.910
Looks like we had some script tags pulling
in a few libraries and then this script.js

161
00:15:53.910 --> 00:15:59.770
that I did before, but what really gets served
to the browser is script.min.js, which is

162
00:15:59.770 --> 00:16:06.770
minified. My Chrome extension is critifying
this for me, but I really want you to see

163
00:16:09.090 --> 00:16:13.360
that it's minified. Okay, cool. Thank you,
Chrome extension.

164
00:16:13.360 --> 00:16:19.830
All right. So the browser is actually receiving
the minified source, of course,

165
00:16:19.830 --> 00:16:25.800
But down at the very bottom of it is a little
indication similar to what we saw with sourceURL,

166
00:16:25.800 --> 00:16:31.380
only this time it's source mapping URL.
And this points over to a map file. And this

167
00:16:31.380 --> 00:16:36.790
map file does -- basically takes the identifiers
in this compiled source and maps it back to

168
00:16:36.790 --> 00:16:39.430
my original sources and says these are the
files.

169
00:16:39.430 --> 00:16:44.760
And so what I can get are the results.
I open up my dev tools and instead of seeing

170
00:16:44.760 --> 00:16:50.420
script.min.js I see my original sources all
in here.

171
00:16:50.420 --> 00:16:57.420
And the cool thing is that the same thing
works over here. Here's my nice edits that

172
00:16:57.500 --> 00:17:04.500
I made. I can apply break points and click
on any -- and now we're actually broken in

173
00:17:04.620 --> 00:17:09.939
my original source even though the browser
is interpreting the minified version. So this

174
00:17:09.939 --> 00:17:13.540
is great for an environment like production
where you're serving up the compiled sources,

175
00:17:13.540 --> 00:17:18.420
but you want to be able to debug the original
things you typed up.

176
00:17:18.420 --> 00:17:23.390
All right. Cool.
Lastly, if you noticed, this might look a

177
00:17:23.390 --> 00:17:27.880
little different to you. First of all, the
dev tools are on the right-hand side. If you

178
00:17:27.880 --> 00:17:33.630
open up the settings panel which is down here
in the bottom right, we have a few things

179
00:17:33.630 --> 00:17:39.790
in there. So doc to right, which moves it
over there. Really like it in doc to right

180
00:17:39.790 --> 00:17:46.790
mode. We have our step to bugging on the right-hand
side and I can get that out of the way. My

181
00:17:46.920 --> 00:17:51.450
file's over here and I can get that out of
the way and view my scripts in their full

182
00:17:51.450 --> 00:17:56.950
glory. I can also jump to different scripts.
Instead of using this menu I can kind of hit

183
00:17:56.950 --> 00:18:03.950
Command O and see all those scripts that are
available. It's kind of get completion there.

184
00:18:06.170 --> 00:18:12.150
Or Command Shift O and see all the functions
that are defined in this file, and now I'll

185
00:18:12.150 --> 00:18:17.200
just bind -- yes, the sort function is what
I'm looking for. I can jump immediately to

186
00:18:17.200 --> 00:18:21.080
that definition.
So a lot of nice things to make dealing with

187
00:18:21.080 --> 00:18:25.700
a large JavaScript code base a bit easier
instead of the dev tools.

188
00:18:25.700 --> 00:18:32.700
All right. Now, I wonder about testing for
a moment. And this right here is actually

189
00:18:33.160 --> 00:18:40.160
a picture from a series that we have up in
the bathrooms at the Googleplex in Mountain

190
00:18:40.810 --> 00:18:47.730
View, California. The series is called Testing
on the Toilet. So each week there's a new

191
00:18:47.730 --> 00:18:53.490
sheet that gives you some good tips for writing
test against your software. Good reading material,

192
00:18:53.490 --> 00:18:56.190
too.
But it's important to write unit tests, so

193
00:18:56.190 --> 00:19:01.500
I have a few ideas here.
First is that you should author your test

194
00:19:01.500 --> 00:19:07.130
in whatever you feel most comfortable in,
so these days for JavaScript it would probably

195
00:19:07.130 --> 00:19:14.130
be Jasmine Q unit or mocha. They all have
kind of different assertion styles, and find

196
00:19:14.740 --> 00:19:21.060
whichever you like and you feel comfortable
writing those assertions in. Build up a large

197
00:19:21.060 --> 00:19:26.820
test suite and then it feels so nice as a
security blanket when you're doing refactoring.

198
00:19:26.820 --> 00:19:31.720
The other thing is you can execute these tests
that you've written in a variety of different

199
00:19:31.720 --> 00:19:36.880
sessions, so like -- settings. The first one
is, of course, in the browser, so this is

200
00:19:36.880 --> 00:19:43.880
the HTML5 test suite. Run inside Q unit, inside
the browser. Pretty common. You can also run

201
00:19:44.310 --> 00:19:51.310
the same tests inside a headless browser,
on demand, on the command line, so I'll show

202
00:19:52.310 --> 00:19:58.830
that right now, I'll use grunt, which is a
node-based command line tool and type grunt

203
00:19:58.830 --> 00:20:05.830
Q unit. So this is actually going to fire
up phantom.js, which is a headless WebKit

204
00:20:06.010 --> 00:20:11.640
instance, toss in those Q unit test suite
and then check that those indeed five assertions

205
00:20:11.640 --> 00:20:17.380
did pass. So I'm able to run the exact same
tests just without leaving my command line

206
00:20:17.380 --> 00:20:24.350
here. I can also run this -- run tests after
I push it up to version control, and let something

207
00:20:24.350 --> 00:20:28.670
like continuous integration server test these
things, so we do this on the modernizer project.

208
00:20:28.670 --> 00:20:34.760
So this is Travis. Every time we put up a
new commit on GitHub, Travis comes in, pulls

209
00:20:34.760 --> 00:20:40.540
down the latest, and actually does a similar
thing, it takes our Q unit test, throws it

210
00:20:40.540 --> 00:20:45.830
into phantom.js, and then -- and then we're
looking good. It tells us if we're indeed

211
00:20:45.830 --> 00:20:52.830
passing or had a little bit where I made some
commits and broke some things. We fixed that.

212
00:20:53.600 --> 00:20:59.220
It's good. Another cool one. This is really
nice, again, from Ryan Setton. He wrote a

213
00:20:59.220 --> 00:21:04.460
tool where we can take tests, not only get
results on the command line, but be able to

214
00:21:04.460 --> 00:21:11.460
test browsers in the cloud, so I'm going to
take this same test suite that's in Q unit,

215
00:21:13.320 --> 00:21:19.380
and toss it to bunyup, and bunyup will then
take that and call up a browser static, which

216
00:21:19.380 --> 00:21:24.170
has a lot of browsers in the cloud and also
mobile emulators. I'm not going to wait for

217
00:21:24.170 --> 00:21:30.620
this finish, but it just called up some IOS
emulators, and it's gonna -- and it can check

218
00:21:30.620 --> 00:21:33.930
my test suite against those and get the results
back.

219
00:21:33.930 --> 00:21:39.080
So this is really nice. I can write my tests,
be able to execute them, in a number of different

220
00:21:39.080 --> 00:21:46.080
devices and browsers on the fly without ever
leaving right here. All right. When you have

221
00:21:46.830 --> 00:21:50.320
a build system, you wrote all this stuff,
you need to get it out to production. A lot

222
00:21:50.320 --> 00:21:56.430
of things you need to do with a pretty hefty
Web app, and tackling all of these on your

223
00:21:56.430 --> 00:22:01.140
own every time -- every time you make changes
is not going to work out so well, so you're

224
00:22:01.140 --> 00:22:05.870
going to need some help. I'm going to get
into a little bit of this later. But after

225
00:22:05.870 --> 00:22:10.750
you deploy, one of the things that I think
that we often forget is keeping track of your

226
00:22:10.750 --> 00:22:16.920
errors that clients have. So this is a screen
shot from errorception, and it's showing my

227
00:22:16.920 --> 00:22:23.920
report from a Web app that I somewhat hastily
put up with some friends, and telling me that

228
00:22:24.050 --> 00:22:31.050
I actually have -- people are hitting some
JavaScript errors in I9 and Chrome, and, you

229
00:22:31.640 --> 00:22:36.450
know, I didn't hit any of these errors, and
none of the other developers did, but -- but

230
00:22:36.450 --> 00:22:40.690
real users in the field are hitting these,
so I can get these reports and make sure that

231
00:22:40.690 --> 00:22:47.690
I can fix all these for everyone. Okay. So
that was a lot of stuff, and sorry, but -- so

232
00:22:51.420 --> 00:22:56.640
I was showing a lot of things, and it was
kind of like this is here, this is here, and

233
00:22:56.640 --> 00:23:00.020
the feeling that I got was that this was kind
of like -- I mean, there's a lot of tools,

234
00:23:00.020 --> 00:23:06.620
and they're all useful, but they kind of didn't
have this smooth integration, so me and some

235
00:23:06.620 --> 00:23:10.490
people on my team thought about this and we
thought maybe there's something that we could

236
00:23:10.490 --> 00:23:15.970
do to kind of make this work flow a bit more
smooth. And so I'm going to talk to you today

237
00:23:15.970 --> 00:23:22.970
about a project that we're going to show off
called Yeoman. So the ideas behind Yeoman

238
00:23:23.330 --> 00:23:28.210
is that we think you should be able to go
from your idea to a rough prototype in ten

239
00:23:28.210 --> 00:23:32.960
minutes. I say "rough", but I mean like a
prototype that you're actually going to continue

240
00:23:32.960 --> 00:23:37.260
developing, like you're using all the tools
inside that prototype that you would normally

241
00:23:37.260 --> 00:23:41.190
use in a Web app, and you're going to keep
going from that. We also want to make sure

242
00:23:41.190 --> 00:23:45.880
that we can reduce friction from the things
that you should be doing, such as testing.

243
00:23:45.880 --> 00:23:50.280
And now, you probably heard that you should
not repeat yourself when you're coding; same

244
00:23:50.280 --> 00:23:55.190
thing applies to your tools. You shouldn't
have to type -- you shouldn't have to run

245
00:23:55.190 --> 00:24:02.190
build.sh every single time you change a file.
So these things should be automatic. So what

246
00:24:03.390 --> 00:24:09.940
Yeoman is is it's an open source set of tools,
frameworks, libraries, that accelerate building

247
00:24:09.940 --> 00:24:15.630
good Web apps. So has some things in it, so
authoring abstractions, linting, testing,

248
00:24:15.630 --> 00:24:21.750
build tools, these things that I've been talking
about, but we've been focusing on providing

249
00:24:21.750 --> 00:24:27.760
nice, smooth developer ergonomics so it feels
good to use. So there's a few things inside

250
00:24:27.760 --> 00:24:33.610
of it. Things -- these names you should be
familiar with: Compass, sass, CoffeeScript,

251
00:24:33.610 --> 00:24:40.610
module support, by the way of AMD, and ecmascript
6. We'll get to that in a minute. Twitter

252
00:24:40.809 --> 00:24:46.210
bootstrap, stripped HTML5 boilerplate, some
testing things, Jasmine, phantom jas, image

253
00:24:46.210 --> 00:24:51.230
compression. All right. So I'm going to do
a demo and I'm actually going to skip the

254
00:24:51.230 --> 00:24:57.180
first step, the first step is a little shell
script that gets your developer environment

255
00:24:57.180 --> 00:25:04.180
all set and going, gets you installed with
node and NPM and home brew. Get a few of the

256
00:25:04.860 --> 00:25:07.809
dependencies out of the way. You're going
to want, because, you know, sometimes I'll

257
00:25:07.809 --> 00:25:12.390
end up switching to a new machine, and getting
your own developer environment going takes

258
00:25:12.390 --> 00:25:16.809
awhile. So we wanted to make sure that you
could get rid of that -- an old set in a few

259
00:25:16.809 --> 00:25:23.809
minutes. All right. So I'm going to go to
temp. Nice. All right. We're going to kick

260
00:25:28.930 --> 00:25:34.220
off a new project. So a lot of what we have
in Yeoman is accessible on the command line,

261
00:25:34.220 --> 00:25:41.040
and so I can just type Yeoman command, and
we have a few things available in here. We

262
00:25:41.040 --> 00:25:47.880
have init, build, server, test, and some other
stuff we're going to get to later. So what

263
00:25:47.880 --> 00:25:53.490
we're going to do here is we're going to start
a new project. I'll name this project IO app.

264
00:25:53.490 --> 00:26:00.490
And inside our app, we're going to type Yeoman
in it. Cool. So we're starting off a new project.

265
00:26:02.640 --> 00:26:06.480
Things are good. It's going to ask us a few
questions. What's the name of the project.

266
00:26:06.480 --> 00:26:12.520
Description. It's going to pull a little bit
of the get metadata from my get config, so

267
00:26:12.520 --> 00:26:17.130
some of these defaults probably will make
sense for me. And that's good. Now, it's going

268
00:26:17.130 --> 00:26:21.420
to take all of this and create a nice little
package .json file which I might want. Now

269
00:26:21.420 --> 00:26:27.710
there's a few things it's going to ask me
if I want. Do I want Twitter bootstrap? Yeah.

270
00:26:27.710 --> 00:26:33.140
Required JS? I'll pull that in for now. And
experimental support for ecmascript 6 modules,

271
00:26:33.140 --> 00:26:39.380
let's do it. All right. I say yes, we get
a bunch of files written and we're good. Just

272
00:26:39.380 --> 00:26:43.950
to show kind of what this created, I'm going
to take a tree and pipe it through to Les,

273
00:26:43.950 --> 00:26:50.950
so let's see, we've got a good deal of bootstrap
here, and then bootstrap -- a little bit of

274
00:26:53.320 --> 00:27:00.320
HTML5 boilerplate going on here, some more
bootstrap, Jasmine going on down here. Cool.

275
00:27:01.180 --> 00:27:08.180
Now -- now, the next thing I'm just going
to open this up inside my text editor, and

276
00:27:12.690 --> 00:27:18.020
so we have here a little stripped version
of HTML5 boilerplate and I'll add in some

277
00:27:18.020 --> 00:27:25.020
text, and I'm actually just going to use a
little bit of zen coding to save some time.

278
00:27:26.120 --> 00:27:33.120
Nice. Hello I/O. Yeoman in action. Now, we
have a server built into Yeoman. And the cool

279
00:27:38.170 --> 00:27:44.550
thing here is that we're actually taking -- because
when you run a server, you actually want to

280
00:27:44.550 --> 00:27:49.010
be able to watch your changes too. So you
set up a server. It immediately actually opens

281
00:27:49.010 --> 00:27:56.010
up that result inside the browser as well,
and you're off. So now I'm going to open up

282
00:27:58.179 --> 00:28:04.210
my style sheet. All right. And we have in
here, we're going to pull in Twitter bootstrap,

283
00:28:04.210 --> 00:28:11.210
and I'll bring that in here, and now watch
as I hit save on this file. Hit save. I'll

284
00:28:14.640 --> 00:28:19.760
watch task. Notice that it immediately changes.
And then we run it through compass, we hit

285
00:28:19.760 --> 00:28:25.330
the reload task and you saw that it changes
up here. So I'm now able to add whatever I

286
00:28:25.330 --> 00:28:32.330
want inside my text editor, and get immediate
results down at the bottom, or in my browser.

287
00:28:34.160 --> 00:28:41.160
So do a little bit of styles here. Save. That
looks pretty good. A little bit of color over

288
00:28:42.510 --> 00:28:49.510
here. Save. Nice. Cool. So I'm able to just
go run all this immediately through Coffee

289
00:28:52.370 --> 00:28:59.120
Script -- sorry, through compass, compile
it down to my resulting CSS and then get the

290
00:28:59.120 --> 00:29:02.650
results immediately showing over here. The
cool thing is that we're actually not even

291
00:29:02.650 --> 00:29:09.370
using any sort of Chrome extension to get
the lab reload functionality inside -- inside

292
00:29:09.370 --> 00:29:16.360
the view in my browser. Now, this is cool,
and I wanted to bring up testing, because

293
00:29:16.360 --> 00:29:19.150
I mentioned that before. We can just go over
to slash test, and we have our Jasmine test

294
00:29:19.150 --> 00:29:26.150
suite, all green, looking good, we see in
the browser, looks good. Like I said before,

295
00:29:28.730 --> 00:29:33.809
I think it's really nice to have this available
at the command line two, so we'll type in

296
00:29:33.809 --> 00:29:38.500
Yeoman test. We're going to take that jasmine
suite and throw it into phantom.js and get

297
00:29:38.500 --> 00:29:45.500
our same passing results. Cool. I should mention
here that we're using grunt again to use a

298
00:29:47.800 --> 00:29:54.800
lot of this system level functionality. It's
a great project for this sort of thing, and

299
00:29:55.610 --> 00:30:02.610
we're leaning heavily on it. All right. Cool.
Now, let's move over to another project. I

300
00:30:04.630 --> 00:30:11.630
want to bring up this application, and we'll
kick it off right now. Bring this up. Nice.

301
00:30:15.720 --> 00:30:22.720
All right. So this should look pretty familiar
to you. This is your standard to-do app. Common

302
00:30:25.420 --> 00:30:30.679
-- a large portion of this came from the to
do MBC project where you can see a basic to

303
00:30:30.679 --> 00:30:37.679
do app built in a number of different frameworks
and libraries. So let's see, go to I/O, do

304
00:30:40.080 --> 00:30:46.679
a talk. Nice. Cool. So we've got this basic
functionality, and that's good. I want to

305
00:30:46.679 --> 00:30:52.940
show a little bit of how this was built. So
right inside here, we view source, and we're

306
00:30:52.940 --> 00:30:59.940
pulling in required.js and the main module
that we're pulling in is main. And so I'm

307
00:31:00.000 --> 00:31:06.030
actually going to take a quick detour and
talk about modules. All right. So modules,

308
00:31:06.030 --> 00:31:12.990
the quick elevator pitch on modules is that
the key to building a large Web app is to

309
00:31:12.990 --> 00:31:19.980
not construct a large Web app; it is to break
it up into small libraries and small parts.

310
00:31:19.980 --> 00:31:26.190
Writing code into small files feels good,
and we can do that when we use modules. With

311
00:31:26.190 --> 00:31:31.330
structured modules we can also define what
our dependencies are, and when we do this,

312
00:31:31.330 --> 00:31:36.190
we're actually able to just define our dependencies
a single time, so let's say we're not using

313
00:31:36.190 --> 00:31:41.940
modules, so you would probably have your HTML
file, you would have bunch of script tags

314
00:31:41.940 --> 00:31:45.580
in the order that they need to be in, and
then you have your build system which is going

315
00:31:45.580 --> 00:31:49.500
to, you know, concatenate all your files,
and you have to specify your order and your

316
00:31:49.500 --> 00:31:54.860
dependencies over there as well. Modules we
can only -- we can just define that structure

317
00:31:54.860 --> 00:32:01.860
just in one place. Another advantage is that
as you develop, you might stop using code,

318
00:32:02.890 --> 00:32:09.679
and in modules, code you stop using just gets
stripped out when it goes out to builds. So

319
00:32:09.679 --> 00:32:13.870
there's a few different ways to write modules,
and I'm going to show two of them here. The

320
00:32:13.870 --> 00:32:19.809
first is AMD modules, so these are asynchronous
modules. They have dependency resolution,

321
00:32:19.809 --> 00:32:26.720
help you to not write global variables, and
it has a very rich plug-in ecosystem that

322
00:32:26.720 --> 00:32:33.720
I'm going to show as well as smart-build optimization.
So this is an example of, let's say, a to

323
00:32:34.280 --> 00:32:41.040
do controller, and we're going to pull in
this file, and bring it in to our app as a

324
00:32:41.040 --> 00:32:46.200
to do view, and then our to do controller
is going to return an object that includes

325
00:32:46.200 --> 00:32:52.970
some stuff and then a render method. All right.
Cool. Now, on to the next module. This is

326
00:32:52.970 --> 00:32:59.260
ES 6 modules, ecmascript 6 also ecmascript
harmony.

327
00:32:59.260 --> 00:33:06.260
Now, this is actually coming from ecmascript
committee, TC39, who thought that, you know,

328
00:33:07.100 --> 00:33:10.260
people were kind of doing this in the JavaScript
world; let's find a way to make this actually

329
00:33:10.260 --> 00:33:17.260
happen in the language itself, so offering
a native solution. Has a flexible syntax,

330
00:33:17.299 --> 00:33:23.559
beyond what we have just down here, so what
we have is we're pulling in a module called

331
00:33:23.559 --> 00:33:29.679
"to do view", from this file, and importing
it into this file, we have some functionality,

332
00:33:29.679 --> 00:33:32.799
and then we can export whatever we want, so
in this case we're going to export a function

333
00:33:32.799 --> 00:33:39.799
called render where we do some stuff. Actually
point out I am saying ES 6. There is a little

334
00:33:40.170 --> 00:33:45.870
bit of conversation happening like right now
about if this is going to make it into ecmascript

335
00:33:45.870 --> 00:33:52.360
version 6 or the next version after that,
so we'll see how that goes. But we wanted

336
00:33:52.360 --> 00:33:59.360
to experiment with this, and see if Yeoman
could give us an ability to try out this style.

337
00:34:00.540 --> 00:34:07.540
So back to -- back to the code. I said that
this was using required.js, so I'm going to

338
00:34:08.359 --> 00:34:15.359
open up the -- our source of this app, and
I'll open up main.js. So this is the module

339
00:34:19.300 --> 00:34:25.030
it's pulling in, and looks like we're initializing
an app right after we pull in the task app

340
00:34:25.030 --> 00:34:32.030
module, and we have a little coffee script
pre-filter on this, so looks like -- all right,

341
00:34:33.669 --> 00:34:40.669
cool. So this is indeed AMD, but it is of
course CoffeeScript. You can see at the top

342
00:34:43.970 --> 00:34:50.280
we're playing in a few other modules into
this file, and then we have our application

343
00:34:50.280 --> 00:34:57.070
set up where we're defining our structure
of our to dos. Now, one of these modules that

344
00:34:57.070 --> 00:35:04.070
we're pulling this is this fun module, nice.
And we're pulling it in with an HM pre-filter,

345
00:35:05.130 --> 00:35:12.130
stands for harmony. So I'm going to go over
to that real quick. Fun. All right. So this

346
00:35:13.060 --> 00:35:20.060
here is an ecmascript harmony module. We are
pulling a few things into it. So we're pulling

347
00:35:21.460 --> 00:35:28.460
in speech, from -- from this guy over here,
and this is actually the E speak speech synthesizer

348
00:35:29.380 --> 00:35:36.380
client, and the cool thing about this speech
synthesizer is that it's actually written

349
00:35:37.600 --> 00:35:43.800
in C++, but it was run through emscripten
which is a research project by Mozilla that

350
00:35:43.800 --> 00:35:50.800
can port C++ into JavaScript, and so now we're
taking that and we're exposing it through

351
00:35:51.450 --> 00:35:57.950
ecmascript harmony modules and bringing that
out, so we pull in this module, and we also

352
00:35:57.950 --> 00:36:03.570
got this guy going on here, and down here
we're going to use this speech module at the

353
00:36:03.570 --> 00:36:10.570
bottom, and pull out this speak method. Cool.
Coming back into our app. I can see down here

354
00:36:12.540 --> 00:36:19.540
when we create a new item, I'm going to uncomment
out this guy, and comment out this guy. Nice.

355
00:36:22.780 --> 00:36:29.339
Come back here, and refresh the page. Good.
And now let's try this out.

356
00:36:29.339 --> 00:36:36.339
&gt;&gt;&gt; Remember to ace the demo.
&gt;&gt;Paul Irish: Yeah. Nice, cool. So nailed

357
00:36:36.850 --> 00:36:43.850
it. Awesome. All right. So the cool thing
here is that we have a C++ library that was

358
00:36:45.500 --> 00:36:52.500
ported into JavaScript via emscripten, exposed
via ecmascript 6 module into our CoffeeScript

359
00:36:53.020 --> 00:37:00.020
application compiled down into ecmascript
5 JavaScript, and now we've got a (indiscernible),

360
00:37:01.270 --> 00:37:08.270
so I think we're in a good place. Cool. All
right. One of the things that we wanted to

361
00:37:08.280 --> 00:37:14.840
do with Yeoman is find out how we can iterate
on it in a way that kind of was based on how

362
00:37:14.840 --> 00:37:21.530
people are using it. So we have a thing in
there that can report exactly anonymous metrics

363
00:37:21.530 --> 00:37:27.780
around what are the commands that are typed
in, so any kind of Yeoman commands, and this

364
00:37:27.780 --> 00:37:33.430
way we can get a better idea on how people
are using it, so they can make good changes

365
00:37:33.430 --> 00:37:38.410
and really make sure that the tool fits its
users. Another thing that it can do is answer

366
00:37:38.410 --> 00:37:44.580
questions like what's the popularity difference
between backbone and ember, or what's the

367
00:37:44.580 --> 00:37:51.060
adoption rate of ES 6 modules?
So I think this is really cool. And we also

368
00:37:51.060 --> 00:37:55.109
want to make sure that all this -- all this
data is accessible to anyone that wants to

369
00:37:55.109 --> 00:38:02.109
see it. I want to take a moment just to talk
about package management. So I don't know

370
00:38:02.869 --> 00:38:09.630
about you guys, but if I have to update like
a library that I depend on somewhere, the

371
00:38:09.630 --> 00:38:15.760
first thing that happens is someone probably
tells me, hey, that Jay creates 1.5 up to

372
00:38:15.760 --> 00:38:20.260
1.8 alpha. You should probably update. Okay,
okay. I'll go to the site, I'll find the download

373
00:38:20.260 --> 00:38:25.060
button, and I'll download that to my downloads,
then I'll move that into the app folder, and

374
00:38:25.060 --> 00:38:29.650
then I'll like fix the script tag because
it's a new version file and fix that, and

375
00:38:29.650 --> 00:38:36.650
that's -- that's not great, so why do we need
package management for clientside JavaScript?

376
00:38:36.740 --> 00:38:42.490
Because what I just described is not fun.
And then more like an Ecosystem level, common

377
00:38:42.490 --> 00:38:48.200
code gets duplicated across a good size app,
you probably have code to bind a function

378
00:38:48.200 --> 00:38:53.160
to a scope like four times. Another thing
that happens is that libraries get fragmented.

379
00:38:53.160 --> 00:38:58.940
This is why we have things like the jQuery
empire and then the YUI and dojo and closure

380
00:38:58.940 --> 00:39:05.510
areas where things are not really interoperable,
and we have fragmented communities and libraries.

381
00:39:05.510 --> 00:39:12.510
So with package management, we can have something
like a longer dependency chain. A good example

382
00:39:13.070 --> 00:39:18.210
of this is the Chaplin project which helps
building applications in backbone. Chaplin

383
00:39:18.210 --> 00:39:23.660
depends on backbone and some other libraries
which depend on jQuery and underscore. That

384
00:39:23.660 --> 00:39:30.320
comes really easy. Better package management,
we can define that dependency tree which informs

385
00:39:30.320 --> 00:39:35.340
a build system to be really smart about building
that out for a very optimized output for production.

386
00:39:35.340 --> 00:39:40.680
Then as a library author, it's really nice
for your users to both consume your library

387
00:39:40.680 --> 00:39:45.770
as a regular old install and also as a dependency
of something else. How about instead of all

388
00:39:45.770 --> 00:39:51.130
of those steps, we just have something Yeoman
installed backbone, we have to update it instead

389
00:39:51.130 --> 00:39:55.619
of all of these steps, Yeoman, very casually,
hey, man, JavaScript library update, you have

390
00:39:55.619 --> 00:40:02.619
got to update your backbone, it's the new
thing. You're like, cool, cool, I got it,

391
00:40:03.540 --> 00:40:08.859
Yeoman, update backbone.
So I'm going to show you a quick look at Bower.

392
00:40:08.859 --> 00:40:15.859
Bower is a package manager, it's being built
by Jacob Thorton, who is one of the devs behind

393
00:40:16.040 --> 00:40:22.070
Twitter bootstrap and Alex MacCaw behind The
Spine (indiscernible).

394
00:40:22.070 --> 00:40:29.070
And what we did is we basically took Bower
and wrapped it right inside of Yeoman so that

395
00:40:30.900 --> 00:40:37.900
again this accesses through the same interface.
So we're over here in the I/O app and we'll

396
00:40:39.520 --> 00:40:46.520
do Yeoman install backbone.
So right now, what it's doing, is Yeoman is

397
00:40:48.730 --> 00:40:55.730
talking to Bower, Bower is going to go and
talk to the registry, say, Hey, I need backbone,

398
00:40:55.990 --> 00:41:02.380
cool. I just got the backbone package, it's
dependent -- my dependencies are underscore

399
00:41:02.380 --> 00:41:05.720
and jQuery, please get those, okay, cool,
got those.

400
00:41:05.720 --> 00:41:12.369
And now we've installed into our app into
the js browser modules backbone jQuery and

401
00:41:12.369 --> 00:41:17.530
underscore.
So if I go into js browser modules, we have

402
00:41:17.530 --> 00:41:22.070
all of our files right there.
So I'm saving a lot of time not going and

403
00:41:22.070 --> 00:41:25.670
getting all of these things and keeping them
up to date. I'm able to manage my dependencies

404
00:41:25.670 --> 00:41:30.830
from my app right here on the command line,
which is really nice.

405
00:41:30.830 --> 00:41:36.980
So this is -- this is where things are going
with that. So -- so in summary for Yeoman,

406
00:41:36.980 --> 00:41:43.240
we can start out new projects really easily.
We get a fast, iterative loop when we are

407
00:41:43.240 --> 00:41:50.240
doing development. Understanding preprocessors
like Sass and CoffeeScript, module systems

408
00:41:51.720 --> 00:41:58.570
like AMD and ES6.
I didn't show how we can run our files against

409
00:41:58.570 --> 00:42:05.570
js hint. Or even the build script, which is
pretty robust. It's built actually on the

410
00:42:05.619 --> 00:42:11.020
original build script for the HTML5 boilerplate.
But we have done a lot of research into image

411
00:42:11.020 --> 00:42:17.950
optimization and found the most effective
loss list image compression we can do.

412
00:42:17.950 --> 00:42:23.580
So Yeoman is available on the dev val for
preview, if you go to Yeoman.io you can sign

413
00:42:23.580 --> 00:42:30.090
up and get notified when it's totally ready.
We're just doing a little bit of buckling

414
00:42:30.090 --> 00:42:34.750
to make sure that we're looking good. We also
want to make sure that our package manager

415
00:42:34.750 --> 00:42:38.359
has enough packages so that when you want
to start an app and add things, everything

416
00:42:38.359 --> 00:42:43.200
is there for you as you want it.
So we're letting in a few people, just to

417
00:42:43.200 --> 00:42:48.030
kind of kick the tires and we'll have it out
available for everyone publicly soon.

418
00:42:48.030 --> 00:42:52.380
All right. So ... summary. Tools are your
friends, they're good, they increase your

419
00:42:52.380 --> 00:42:56.690
productivity, lower your stress, help you
out when you use them in a work flow that

420
00:42:56.690 --> 00:43:02.080
works really well for you. We're working on
Yeoman. Tell -- make it easier to consume

421
00:43:02.080 --> 00:43:05.970
these smart tooling choices and help you build
compelling web apps.

422
00:43:05.970 --> 00:43:10.580
And thank you very much.
[ Applause ]

423
00:43:10.580 --> 00:43:17.580
&gt;&gt;Paul Irish: If you have any questions, go
ahead and step up to the mics in the aisles

424
00:43:29.310 --> 00:43:36.310
and that would be rad.
&gt;&gt;&gt; Thanks, Paul.

425
00:43:38.410 --> 00:43:44.340
&gt;&gt;Paul Irish: You're welcome.
&gt;&gt;&gt; So Paul.

426
00:43:44.340 --> 00:43:48.810
&gt;&gt;Paul Irish: Sir?
&gt;&gt;&gt; I saw Jasmine, is there going to be other

427
00:43:48.810 --> 00:43:54.970
testing like plug-ins or --
&gt;&gt;Paul Irish: So since we are built on -- on

428
00:43:54.970 --> 00:44:01.970
Grunt, if you are familiar with that, swapping
it out for -- for a different testing suite

429
00:44:03.300 --> 00:44:09.960
is as easy as editing the Grunt file. So it's
not too bad. But we -- we made choices that

430
00:44:09.960 --> 00:44:16.440
-- we wanted to have some smart defaults in
there, so we went with Jasmine because we

431
00:44:16.440 --> 00:44:22.260
really like its style. So it is configurable,
but we wanted to have something that gets

432
00:44:22.260 --> 00:44:25.080
you off and going from the start.
&gt;&gt;&gt; Awesome.

433
00:44:25.080 --> 00:44:28.920
&gt;&gt;Paul Irish: Cool.
&gt;&gt;&gt; Can I get an invite? [Laughter]

434
00:44:28.920 --> 00:44:34.810
&gt;&gt;Paul Irish: Yeah, yeah.
You talk to me, talk to me.

435
00:44:34.810 --> 00:44:40.930
&gt;&gt;&gt; Um, when you -- after you installed Yeoman
and you were making changes, changes were

436
00:44:40.930 --> 00:44:44.440
loading in the browser, was that live reload
or was that something in Yeoman?

437
00:44:44.440 --> 00:44:51.440
&gt;&gt;Paul Irish: So we are actually leveraging
the JavaScript shim that the live reload project

438
00:44:53.470 --> 00:44:59.450
used and we're injecting that into the page.
And so we're using a portion of the live reload,

439
00:44:59.450 --> 00:45:03.190
but it's really just JavaScript that's making
that happen.

440
00:45:03.190 --> 00:45:06.359
&gt;&gt;&gt; Okay. So ensure one doesn't have to have
live reload to have that feature.

441
00:45:06.359 --> 00:45:12.450
&gt;&gt;Paul Irish: Right. That feature comes through
Yeoman, so you don't even have to have anything

442
00:45:12.450 --> 00:45:14.730
else installed yet.
&gt;&gt;&gt; Okay, thanks.

443
00:45:14.730 --> 00:45:19.020
&gt;&gt;&gt; So you showed us the testing and the development
side. I'm guessing part of the build process

444
00:45:19.020 --> 00:45:24.250
that you didn't have time to show us was building
for deployment. Would that also include being

445
00:45:24.250 --> 00:45:31.250
able to use the closure compiler to have source
mapping? Um ... yeah. Right now, um -- right

446
00:45:33.300 --> 00:45:40.300
now our build step goes through uglify, but
we're looking at a nice way to run it through

447
00:45:40.890 --> 00:45:47.760
a closure compiler, because I like source
maps just as much as you do. So there's -- there's

448
00:45:47.760 --> 00:45:54.070
a few issues and discussions open to get source
mapping into Uglify and to CoffeeScript, neither

449
00:45:54.070 --> 00:45:58.060
of them have landed yet. So we're waiting
for that, but in the meantime, yeah, I would

450
00:45:58.060 --> 00:46:01.430
really love to find a nice way to get source
maps into the closure compiler.

451
00:46:01.430 --> 00:46:06.400
&gt;&gt;&gt; Right. And there was an issue around having
multiple source maps and trying to read from

452
00:46:06.400 --> 00:46:12.800
each other. I'll catch you at the code lab.
&gt;&gt;Paul Irish: Sure, yeah, sounds good. Sir?

453
00:46:12.800 --> 00:46:19.800
&gt;&gt;&gt; All right. What kind of requirements do
I need -- for my server when I want to deploy

454
00:46:21.140 --> 00:46:27.030
this Yeoman created app?
&gt;&gt;Paul Irish: Um, no specific requirement.

455
00:46:27.030 --> 00:46:34.030
It's completely up to you. So -- so it's -- it's
basically we don't make any requirements as

456
00:46:35.190 --> 00:46:39.520
far as your back end. It stays completely
client side only whereas another solution

457
00:46:39.520 --> 00:46:43.510
might say this is your database on the backend
or we're going to serve it up to Engine X

458
00:46:43.510 --> 00:46:46.849
or something like that, but that is completely
up to you.

459
00:46:46.849 --> 00:46:52.759
&gt;&gt;&gt; I see. Okay.
&gt;&gt;Paul Irish: Yes, sir, one more.

460
00:46:52.759 --> 00:46:59.759
&gt;&gt;&gt; This one is for Louie. So how much do
you know about like the Bower package manager,

461
00:47:00.590 --> 00:47:05.730
how hard is it going to be to get a package
into it?

462
00:47:05.730 --> 00:47:09.630
I noticed that it looked like it was cloning,
so if you push that back up to GitHub, like,

463
00:47:09.630 --> 00:47:16.630
is there like weird issues?
&gt;&gt;Paul Irish: Um ... well, I can answer the

464
00:47:18.230 --> 00:47:22.390
first part at least.
So it was previously called nest and I'm accessing

465
00:47:22.390 --> 00:47:29.390
it, this way. And registering a new package
is as easy as that. Bower. Register the name

466
00:47:32.480 --> 00:47:39.480
and the URL of the get repo. It's very, very
easy and there's a package.json file that

467
00:47:39.480 --> 00:47:44.170
has the meta data available for the package.
There's no strict dependency on GitHub, but

468
00:47:44.170 --> 00:47:51.170
there is a strict dependency on git, and clone
each package, find out its dependencies and

469
00:47:52.830 --> 00:47:58.410
the team is finding ways to optimize that
and say, for instance, grab the zip download

470
00:47:58.410 --> 00:48:05.410
if it's a GitHub situation instead of cloning
the entire repo, finding out how to make that

471
00:48:07.560 --> 00:48:08.460
really nice.
Cool? All right. Thank you guys, appreciate

472
00:48:08.460 --> 00:48:08.710
it.
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:05.450

2
00:00:05.450 --> 00:00:06.450
PAUL KINLAN: Hi everyone.

3
00:00:06.450 --> 00:00:07.510
I'm Paul Kinlan.

4
00:00:07.510 --> 00:00:10.490
Welcome to our talk today,
called How to Build Apps that

5
00:00:10.490 --> 00:00:11.530
Love Each Other.

6
00:00:11.530 --> 00:00:12.500
JAMES HAWKINS: Hi, I'm James.

7
00:00:12.500 --> 00:00:15.570
I'm the tech lead of the Chrome
team working to bring

8
00:00:15.570 --> 00:00:17.640
Web Intents to the web.

9
00:00:17.640 --> 00:00:18.400
PAUL KINLAN: Cool.

10
00:00:18.400 --> 00:00:20.350
So, before we start, I
just want to ask one

11
00:00:20.350 --> 00:00:21.200
little quick question.

12
00:00:21.200 --> 00:00:22.910
Actually, two questions.

13
00:00:22.910 --> 00:00:25.412
Who has heard of Web Intents?

14
00:00:25.412 --> 00:00:26.125
JAMES HAWKINS: All right.

15
00:00:26.125 --> 00:00:26.795
PAUL KINLAN: Awesome.

16
00:00:26.795 --> 00:00:30.960
Who has was actually built
anything with Web Intents?

17
00:00:30.960 --> 00:00:31.685
JAMES HAWKINS: That's awesome.

18
00:00:31.685 --> 00:00:33.000
PAUL KINLAN: Yeah, two people.

19
00:00:33.000 --> 00:00:34.590
Two or three people, cool.

20
00:00:34.590 --> 00:00:37.440
So, hopefully by the end of this
presentation, you'll all

21
00:00:37.440 --> 00:00:40.650
be able to go away and start
building things with this work

22
00:00:40.650 --> 00:00:42.040
that we call Web Intents.

23
00:00:42.040 --> 00:00:44.320
And today we're going to show
you some awesome stuff.

24
00:00:44.320 --> 00:00:46.560
So, today, before we start,
I'm going to highlight a

25
00:00:46.560 --> 00:00:47.450
couple of problems.

26
00:00:47.450 --> 00:00:50.350
For me, the biggest problem
that we face on the web is

27
00:00:50.350 --> 00:00:53.110
that there's no way for
applications on the web to

28
00:00:53.110 --> 00:00:55.720
understand the functionality
that other applications offer.

29
00:00:55.720 --> 00:00:58.130
And because we can't do this,
we can't do really cool

30
00:00:58.130 --> 00:01:00.990
things, such as offer suggested
services for you to

31
00:01:00.990 --> 00:01:03.520
use when you want to perform
an action on the web.

32
00:01:03.520 --> 00:01:06.200
But it also means our web
applications today, they don't

33
00:01:06.200 --> 00:01:07.140
love each other.

34
00:01:07.140 --> 00:01:09.610
Applications are a lot
like a relationship.

35
00:01:09.610 --> 00:01:11.910
Well, they're not like a lot
like a relationship.

36
00:01:11.910 --> 00:01:14.110
But they're built off the
background of a really strong

37
00:01:14.110 --> 00:01:15.050
communication.

38
00:01:15.050 --> 00:01:18.140
A great relationship is built
off strong communication, and

39
00:01:18.140 --> 00:01:20.700
likewise, web applications
should be able to love each

40
00:01:20.700 --> 00:01:23.030
other through strong
communication.

41
00:01:23.030 --> 00:01:25.220
So let's start with an image.

42
00:01:25.220 --> 00:01:27.670
An image is something that
we manipulate every day.

43
00:01:27.670 --> 00:01:31.590
We do things, we email them,
we edit them, we do crazy

44
00:01:31.590 --> 00:01:33.040
amounts of things with images.

45
00:01:33.040 --> 00:01:35.460
So let's have a go.

46
00:01:35.460 --> 00:01:36.660
JAMES HAWKINS: Hopefully
this looks OK.

47
00:01:36.660 --> 00:01:38.830
PAUL KINLAN: There we are.

48
00:01:38.830 --> 00:01:39.250
Cool.

49
00:01:39.250 --> 00:01:41.420
So that we captured our image,
Right so let's do

50
00:01:41.420 --> 00:01:42.460
some stuff with it.

51
00:01:42.460 --> 00:01:45.140
Well, the first thing that most
people want to do with an

52
00:01:45.140 --> 00:01:47.560
image on the web, you want to
actually bring it in to your

53
00:01:47.560 --> 00:01:48.520
application.

54
00:01:48.520 --> 00:01:51.805
And everyone in this room, if
you're a web developer or a

55
00:01:51.805 --> 00:01:53.780
user, you're probably familiar
with this button.

56
00:01:53.780 --> 00:01:54.840
It's the input box.

57
00:01:54.840 --> 00:01:56.420
It's input type equals file.

58
00:01:56.420 --> 00:01:58.210
And this actually works
really well.

59
00:01:58.210 --> 00:02:00.900
It works really well because
one, it's simple to implement.

60
00:02:00.900 --> 00:02:03.530
But the second reason why it
works quite well is it's

61
00:02:03.530 --> 00:02:05.410
actually pretty easy
to users to use.

62
00:02:05.410 --> 00:02:07.990
They will choose a file, scan
the hard drive, and load it

63
00:02:07.990 --> 00:02:09.740
into their application.

64
00:02:09.740 --> 00:02:12.070
The complexity arises, though,
when you have multiple

65
00:02:12.070 --> 00:02:14.700
applications which all
manipulate images and you want

66
00:02:14.700 --> 00:02:17.070
to bring that data from
one app to another.

67
00:02:17.070 --> 00:02:20.635
So the process of getting, say,
an image into Gmail from,

68
00:02:20.635 --> 00:02:24.380
say, a site like Flickr, is that
you normally have to go

69
00:02:24.380 --> 00:02:26.360
to Flickr, right click
on the image,

70
00:02:26.360 --> 00:02:28.550
download it to your desktop.

71
00:02:28.550 --> 00:02:30.080
Everyone in this room's probably
got a temporary

72
00:02:30.080 --> 00:02:31.990
downloads folder which is
probably a good couple hundred

73
00:02:31.990 --> 00:02:35.760
megabytes in size, thousands
of files inside there.

74
00:02:35.760 --> 00:02:36.190
Anyway.

75
00:02:36.190 --> 00:02:38.290
You've downloaded your file
into this folder.

76
00:02:38.290 --> 00:02:41.030
You then jump back your email
application, click attach.

77
00:02:41.030 --> 00:02:44.120
Try and find the file, because
it's not always in last place

78
00:02:44.120 --> 00:02:45.980
you actually found the file
the previous time around.

79
00:02:45.980 --> 00:02:48.320
And then you bring it back
into your application.

80
00:02:48.320 --> 00:02:50.870
For users, this is it's a bit
of a nightmare, right?

81
00:02:50.870 --> 00:02:54.920
We can't build applications
coherently with this method.

82
00:02:54.920 --> 00:02:57.640
So let's have a look at
another use case.

83
00:02:57.640 --> 00:02:58.840
Edit an image.

84
00:02:58.840 --> 00:03:00.480
It's a very similar process.

85
00:03:00.480 --> 00:03:01.270
You have an application--

86
00:03:01.270 --> 00:03:02.430
this is Psykopaint--

87
00:03:02.430 --> 00:03:04.350
you have an application, you
want to bring data into it.

88
00:03:04.350 --> 00:03:05.690
So it's the same
process again.

89
00:03:05.690 --> 00:03:07.680
You have to load this
application up.

90
00:03:07.680 --> 00:03:09.370
And if it's in another app
already, if it's on Flickr,

91
00:03:09.370 --> 00:03:12.270
you have to download it onto
your desktop, jump into this

92
00:03:12.270 --> 00:03:15.100
app, click Open, bring
it into the app.

93
00:03:15.100 --> 00:03:16.050
Then there's an extra step.

94
00:03:16.050 --> 00:03:19.010
Once you've edited this image,
you have to then go and save

95
00:03:19.010 --> 00:03:19.920
it again to the desktop.

96
00:03:19.920 --> 00:03:21.700
So you've now got two
copies in your

97
00:03:21.700 --> 00:03:23.270
temporary downloads folder.

98
00:03:23.270 --> 00:03:25.900
Jump back your previous app, and
then upload and attach it.

99
00:03:25.900 --> 00:03:27.350
We shouldn't have to face
these problems.

100
00:03:27.350 --> 00:03:33.240
Users shouldn't find
this complexity.

101
00:03:33.240 --> 00:03:36.100
And as developers, we don't have
nice ways of integration.

102
00:03:36.100 --> 00:03:37.910
It's all very manual work.

103
00:03:37.910 --> 00:03:41.370
Some services offer direct
API integrations.

104
00:03:41.370 --> 00:03:43.980
The problem with direct API
integrations is-- we've all

105
00:03:43.980 --> 00:03:45.550
seen this before, OAuth--

106
00:03:45.550 --> 00:03:47.240
all these different types
of complexities with

107
00:03:47.240 --> 00:03:48.970
authentication, server-to-server

108
00:03:48.970 --> 00:03:50.070
communication.

109
00:03:50.070 --> 00:03:52.230
These applications don't work
very well when you're offline

110
00:03:52.230 --> 00:03:54.020
because you need to talk to
a server to give another

111
00:03:54.020 --> 00:03:55.280
application data.

112
00:03:55.280 --> 00:03:58.330
It's horrible for developers and
it's not nice for users.

113
00:03:58.330 --> 00:04:00.330
Likewise, if you have an image,
and you've edited it,

114
00:04:00.330 --> 00:04:02.700
and you want to save it to make
sure it's all backed up.

115
00:04:02.700 --> 00:04:05.010
Well, you normally want to save
it to your desktop or

116
00:04:05.010 --> 00:04:08.090
maybe to your cloud
storage solution.

117
00:04:08.090 --> 00:04:09.980
Right now, if you're developing
something and you

118
00:04:09.980 --> 00:04:12.640
want to save it to, well, in
this case, Drive, it's a

119
00:04:12.640 --> 00:04:14.750
direct API integration that
you have to build.

120
00:04:14.750 --> 00:04:16.339
Which is complex
because there's

121
00:04:16.339 --> 00:04:17.860
authentication protocols.

122
00:04:17.860 --> 00:04:19.690
Once there's authentication
protocols, they're actually

123
00:04:19.690 --> 00:04:23.520
pretty hard to debug because
working the clients is

124
00:04:23.520 --> 00:04:25.400
different to the work that you
do in the server, and it's

125
00:04:25.400 --> 00:04:27.540
really hard to debug those
two types of systems.

126
00:04:27.540 --> 00:04:29.500
And obviously we've got
things like OAuth.

127
00:04:29.500 --> 00:04:32.470
OAuth is relatively easy once
you get the hang of it, but

128
00:04:32.470 --> 00:04:34.230
it's actually complex
to get started.

129
00:04:34.230 --> 00:04:36.880
And we don't want to have to
deal with that on the web.

130
00:04:36.880 --> 00:04:38.370
And then, once you've saved it,
and you're happy with the

131
00:04:38.370 --> 00:04:40.550
fact that you've got a nice back
up, you want to send it

132
00:04:40.550 --> 00:04:40.950
out somewhere.

133
00:04:40.950 --> 00:04:42.940
You want to send your image
to your grandmother.

134
00:04:42.940 --> 00:04:45.130
Now, we face two problems on the
web-- or I think we face

135
00:04:45.130 --> 00:04:46.580
two problems on the
web, at least.

136
00:04:46.580 --> 00:04:48.790
We have a temporary solution, a
solution that already exists

137
00:04:48.790 --> 00:04:49.730
on the web called mail2.

138
00:04:49.730 --> 00:04:50.720
The mail2 scheme.

139
00:04:50.720 --> 00:04:52.920
Now that works quite well, but
when you've got an application

140
00:04:52.920 --> 00:04:56.070
that doesn't know your entire
contact address book or your

141
00:04:56.070 --> 00:04:59.140
social networking, your social
graph, well, your application

142
00:04:59.140 --> 00:05:01.690
won't know the recipients that
you want to send the data to.

143
00:05:01.690 --> 00:05:04.140
Which means, well, how'd you
actually know that you're

144
00:05:04.140 --> 00:05:05.100
going to send something
to your grandmother?

145
00:05:05.100 --> 00:05:06.680
Because the mail2 link
will be blank.

146
00:05:06.680 --> 00:05:08.080
It's pretty complex.

147
00:05:08.080 --> 00:05:10.860
And then the second part this
problem is mail2 works pretty

148
00:05:10.860 --> 00:05:14.570
well if you want to attach a
subject, a title, and some

149
00:05:14.570 --> 00:05:16.490
basic description to an email.

150
00:05:16.490 --> 00:05:18.490
Browsers have got that pretty
much locked down for trying to

151
00:05:18.490 --> 00:05:19.720
do that type of stuff.

152
00:05:19.720 --> 00:05:20.390
But we have an image.

153
00:05:20.390 --> 00:05:21.790
This is a real blob of data.

154
00:05:21.790 --> 00:05:25.010
How do we get our real blob of
data from our site directly

155
00:05:25.010 --> 00:05:26.440
into another application?

156
00:05:26.440 --> 00:05:28.650
We can't do with the
existing protocols.

157
00:05:28.650 --> 00:05:30.630
And then, if you look at the way
that users have to do this

158
00:05:30.630 --> 00:05:33.710
today, well, it's exactly the
same process, the same set of

159
00:05:33.710 --> 00:05:35.520
steps that we saw before.

160
00:05:35.520 --> 00:05:38.580
The user takes their data from
another application, downloads

161
00:05:38.580 --> 00:05:40.830
it into a temporary store,
goes back to this email

162
00:05:40.830 --> 00:05:42.780
application, clicks attach.

163
00:05:42.780 --> 00:05:45.330
It's a really familiar process,
and it's just not

164
00:05:45.330 --> 00:05:46.080
great for users.

165
00:05:46.080 --> 00:05:47.570
And users don't like the app.

166
00:05:47.570 --> 00:05:49.000
They kind of like the apps that
we're going, but we can

167
00:05:49.000 --> 00:05:51.630
make our applications
a lot better.

168
00:05:51.630 --> 00:05:54.760
And then we looked at the idea
of send an email like a

169
00:05:54.760 --> 00:05:56.300
one-to-one communication.

170
00:05:56.300 --> 00:05:57.450
Everyone knows this use case.

171
00:05:57.450 --> 00:06:00.110
The ability to share some piece
of data with multiple

172
00:06:00.110 --> 00:06:01.880
different types of
social networks.

173
00:06:01.880 --> 00:06:05.240
Well, at this mention that
there's at least three hundred

174
00:06:05.240 --> 00:06:07.940
different types of
sharing services.

175
00:06:07.940 --> 00:06:09.550
So what's that mean for you
as a web developer?

176
00:06:09.550 --> 00:06:12.890
Well, you can't feasibly
integrate with all 300

177
00:06:12.890 --> 00:06:14.570
different types of services
so you can use and

178
00:06:14.570 --> 00:06:15.920
aggregate the service.

179
00:06:15.920 --> 00:06:17.700
But the problem is, the way that
these applications are

180
00:06:17.700 --> 00:06:20.600
built, and the way you interact
with these APIs,

181
00:06:20.600 --> 00:06:21.670
there's normally two methods.

182
00:06:21.670 --> 00:06:24.120
There's a widget and a
server-to-server integration.

183
00:06:24.120 --> 00:06:24.910
Widgets are great.

184
00:06:24.910 --> 00:06:26.140
You can just drop
a small piece of

185
00:06:26.140 --> 00:06:27.560
JavaScript on your page.

186
00:06:27.560 --> 00:06:29.750
But the problem that it
introduces is every time you

187
00:06:29.750 --> 00:06:32.310
add an extra widget, your
page load is delayed.

188
00:06:32.310 --> 00:06:34.350
It gets longer and longer
and longer.

189
00:06:34.350 --> 00:06:36.710
And each widget that you put
into your application is a

190
00:06:36.710 --> 00:06:38.440
tight coupling to
that service.

191
00:06:38.440 --> 00:06:41.210
Not great, because you might
have users that don't use the

192
00:06:41.210 --> 00:06:44.060
services that you're offering.

193
00:06:44.060 --> 00:06:46.610
If you have unhappy users, you
might have no users at some

194
00:06:46.610 --> 00:06:48.000
point in the future.

195
00:06:48.000 --> 00:06:50.160
And then the next is
server-to-server integration.

196
00:06:50.160 --> 00:06:52.700
We have these services where
we can send data to another

197
00:06:52.700 --> 00:06:56.570
service just by doing an
OAuth authenticated

198
00:06:56.570 --> 00:06:57.980
request to the server.

199
00:06:57.980 --> 00:06:59.860
The problem with this
is it's relatively

200
00:06:59.860 --> 00:07:01.020
complex to do OAuth.

201
00:07:01.020 --> 00:07:03.310
It's hard to maintain, it's
very hard to debug.

202
00:07:03.310 --> 00:07:05.290
You never actually quite know
if you've got the problem

203
00:07:05.290 --> 00:07:07.420
yourself with the way that
you've done the integration,

204
00:07:07.420 --> 00:07:08.850
or whether it's the other
service so that's got a

205
00:07:08.850 --> 00:07:09.940
temporary problem.

206
00:07:09.940 --> 00:07:11.660
It's just a bit of
a pain to debug.

207
00:07:11.660 --> 00:07:13.810
And, obviously, it requires
an internet connection.

208
00:07:13.810 --> 00:07:16.970
If you want to send a status
update to a social network,

209
00:07:16.970 --> 00:07:18.620
you have to have an internet
connection to be able to

210
00:07:18.620 --> 00:07:22.070
deliver data between these two
apps and two services.

211
00:07:22.070 --> 00:07:23.310
It's not easy, right?

212
00:07:23.310 --> 00:07:24.590
This is me, I'm really
unhappy.

213
00:07:24.590 --> 00:07:26.690
I'm a developer and
I'm also user.

214
00:07:26.690 --> 00:07:28.990
For me, as a developer, I don't
want to have to maintain

215
00:07:28.990 --> 00:07:30.730
all these direct integrations.

216
00:07:30.730 --> 00:07:32.840
If a new service comes out, I
don't want to have to keep

217
00:07:32.840 --> 00:07:36.060
adding more and more and
more integrations.

218
00:07:36.060 --> 00:07:39.480
And, likewise, if a service dies
and no longer exists, I

219
00:07:39.480 --> 00:07:41.030
have to keep track of all
these services that add.

220
00:07:41.030 --> 00:07:43.140
I don't want to have to maintain
and remove all the

221
00:07:43.140 --> 00:07:45.666
services as they come
into life and leave.

222
00:07:45.666 --> 00:07:48.530
And as a user, I want choice.

223
00:07:48.530 --> 00:07:50.760
I want to be able to use the
services I want to for common

224
00:07:50.760 --> 00:07:52.100
actions across the web.

225
00:07:52.100 --> 00:07:54.440
So if I want to share to a
particular social network, I

226
00:07:54.440 --> 00:07:55.400
should be allowed to do that.

227
00:07:55.400 --> 00:07:57.870
If I want to save some data
to my cloud, I should

228
00:07:57.870 --> 00:07:58.440
be able to do that.

229
00:07:58.440 --> 00:08:01.480
And I don't think, to date,
we can easily do that.

230
00:08:01.480 --> 00:08:03.700
So what can we do?

231
00:08:03.700 --> 00:08:05.660
What would it look like if we
could build a solution that

232
00:08:05.660 --> 00:08:06.210
was better?

233
00:08:06.210 --> 00:08:10.180
Well, ideally, it would
be client-side first.

234
00:08:10.180 --> 00:08:11.920
Everyone, probably, in this
room is probably quite

235
00:08:11.920 --> 00:08:12.670
familiar with this.

236
00:08:12.670 --> 00:08:15.640
This isn't the solution, this
is some of the problem.

237
00:08:15.640 --> 00:08:18.140
We have two applications that
live inside the browser.

238
00:08:18.140 --> 00:08:20.360
And to get data from one
application to another

239
00:08:20.360 --> 00:08:22.700
application, we have to send
data from our client

240
00:08:22.700 --> 00:08:24.380
application to our application
server.

241
00:08:24.380 --> 00:08:26.720
The application server has to
communicate with the remote

242
00:08:26.720 --> 00:08:29.890
service server, potentially do
some authentication protocols

243
00:08:29.890 --> 00:08:32.990
and some authentication work to
actually make sure the user

244
00:08:32.990 --> 00:08:35.530
is sending the data
to the service.

245
00:08:35.530 --> 00:08:38.210
And then the user will open up
the other site, which will

246
00:08:38.210 --> 00:08:40.530
then talk to that application
service.

247
00:08:40.530 --> 00:08:41.860
This is actually kind
of brittle, right?

248
00:08:41.860 --> 00:08:44.190
If any one of these points goes
down, we have got two

249
00:08:44.190 --> 00:08:45.990
applications that can't
talk to each other.

250
00:08:45.990 --> 00:08:48.060
It's pretty complex.

251
00:08:48.060 --> 00:08:49.610
So ideally, we have these two

252
00:08:49.610 --> 00:08:51.330
applications inside the browser.

253
00:08:51.330 --> 00:08:53.990
We should be able to open up
one application, open up

254
00:08:53.990 --> 00:08:56.830
another application, then just
deliver data from one app to

255
00:08:56.830 --> 00:08:59.820
the other without having to
go across the internet.

256
00:08:59.820 --> 00:09:01.850
And this is really cool, because
once we can do these

257
00:09:01.850 --> 00:09:04.780
types of things, we can start to
build truly offline-enabled

258
00:09:04.780 --> 00:09:05.780
applications.

259
00:09:05.780 --> 00:09:08.700
So has anyone use Appcache?

260
00:09:08.700 --> 00:09:09.380
A couple of people.

261
00:09:09.380 --> 00:09:11.360
We all know that Appcache is
actually pretty hard to work

262
00:09:11.360 --> 00:09:14.170
with and pretty hard to debug,
pretty hard to maintain.

263
00:09:14.170 --> 00:09:15.240
But it actually starts
to make our

264
00:09:15.240 --> 00:09:17.760
applications available offline.

265
00:09:17.760 --> 00:09:20.050
The problem is, right now if
you want to integrate with

266
00:09:20.050 --> 00:09:24.600
another service, even if that
other service is Appcache

267
00:09:24.600 --> 00:09:27.120
enabled and works offline, you
still need the whole internet

268
00:09:27.120 --> 00:09:29.160
connection to be able to deliver
data to the app.

269
00:09:29.160 --> 00:09:31.790
And what we're saying is, for a
lot of actions such as, say,

270
00:09:31.790 --> 00:09:34.200
editing an image, you shouldn't
have to require on a

271
00:09:34.200 --> 00:09:36.510
whole internet connection just
deliver data between these two

272
00:09:36.510 --> 00:09:37.660
applications.

273
00:09:37.660 --> 00:09:41.370
So, with a solution that we want
to try and propose, it

274
00:09:41.370 --> 00:09:42.690
should work, and it should
enable you to build

275
00:09:42.690 --> 00:09:44.740
applications that
work offline.

276
00:09:44.740 --> 00:09:46.540
And ideally, it should
be loosely coupled.

277
00:09:46.540 --> 00:09:47.980
This is the best image
I could find that

278
00:09:47.980 --> 00:09:50.300
wasn't a class diagram.

279
00:09:50.300 --> 00:09:54.630
The idea is we should be able to
use any particular clients

280
00:09:54.630 --> 00:09:56.630
with any particular service.

281
00:09:56.630 --> 00:09:57.820
And that it should be
down to the user

282
00:09:57.820 --> 00:09:59.320
to use those services.

283
00:09:59.320 --> 00:10:01.840
The user should be able to say,
I'm going to use Google

284
00:10:01.840 --> 00:10:03.770
or Twitter to actually
share some data.

285
00:10:03.770 --> 00:10:06.280
Rather than us, as developers
of the client applications,

286
00:10:06.280 --> 00:10:08.510
enforcing that upon
the user, right?

287
00:10:08.510 --> 00:10:10.030
That's what we want
from a solution.

288
00:10:10.030 --> 00:10:11.850
And, ideally, it should handle
the user's intents.

289
00:10:11.850 --> 00:10:14.350
This is, obviously, the name
of Web Intents, right?

290
00:10:14.350 --> 00:10:17.090
The user should say, I need
to edit an image.

291
00:10:17.090 --> 00:10:19.965
The user has a set task that
they're going to do with

292
00:10:19.965 --> 00:10:21.170
something on the web.

293
00:10:21.170 --> 00:10:22.360
They need to edit an image.

294
00:10:22.360 --> 00:10:24.000
They need to edit an image
with their preferred

295
00:10:24.000 --> 00:10:25.180
application.

296
00:10:25.180 --> 00:10:26.580
They need to share
a link with their

297
00:10:26.580 --> 00:10:27.740
preferred social network.

298
00:10:27.740 --> 00:10:30.030
They need to save a document to
their preferred cloud file

299
00:10:30.030 --> 00:10:30.750
storage solution.

300
00:10:30.750 --> 00:10:33.150
The user always wants to do
something in the browser with

301
00:10:33.150 --> 00:10:35.160
the data that your applications
are producing,

302
00:10:35.160 --> 00:10:36.150
and you should be able
to let them do

303
00:10:36.150 --> 00:10:39.220
that with a good solution.

304
00:10:39.220 --> 00:10:40.620
And ideally it should
be familiar.

305
00:10:40.620 --> 00:10:42.510
It should be familiar to
millions of users.

306
00:10:42.510 --> 00:10:46.050
Millions of users using Android
system are familiar

307
00:10:46.050 --> 00:10:48.490
with the ability to actually
find applications to fulfill

308
00:10:48.490 --> 00:10:51.110
common actions on that device.

309
00:10:51.110 --> 00:10:53.850
And ideally, for developers, the
API should look relatively

310
00:10:53.850 --> 00:10:55.260
similar what--

311
00:10:55.260 --> 00:10:57.450
I don't know how many
developers are--

312
00:10:57.450 --> 00:11:00.380
it should actually look
relatively similar to the APIs

313
00:11:00.380 --> 00:11:03.430
that are offered on the systems
that already exist.

314
00:11:03.430 --> 00:11:05.220
So introducing Web Intents.

315
00:11:05.220 --> 00:11:07.160
Obviously, we've given the name
away up front, about this

316
00:11:07.160 --> 00:11:08.490
is a talk about Web Intents.

317
00:11:08.490 --> 00:11:14.590
But this is our proposed
solution for actually enabling

318
00:11:14.590 --> 00:11:17.440
you to integrate with remote
services any service that you

319
00:11:17.440 --> 00:11:19.370
want to that supports
the APIs.

320
00:11:19.370 --> 00:11:21.390
So what is a Web Intent?

321
00:11:21.390 --> 00:11:22.850
It isn't the next generation of

322
00:11:22.850 --> 00:11:25.740
internet-enabled camping equipment.

323
00:11:25.740 --> 00:11:28.200
I'm really sorry for
that one, guys.

324
00:11:28.200 --> 00:11:31.710
It is a client-side framework
that allows users to use their

325
00:11:31.710 --> 00:11:34.450
preferred applications for
actions on content-types.

326
00:11:34.450 --> 00:11:36.160
The really exciting thing
right now is that we're

327
00:11:36.160 --> 00:11:38.560
actually working with a W3C,
and we're at first public

328
00:11:38.560 --> 00:11:41.700
working draft, which is the
first step to standardization.

329
00:11:41.700 --> 00:11:43.750
We still got quite a way to go,
but we've actually got an

330
00:11:43.750 --> 00:11:45.900
experimental build inside
Chrome, and we're going to

331
00:11:45.900 --> 00:11:47.575
show you that today if you've
not seen it and

332
00:11:47.575 --> 00:11:48.240
already played with it.

333
00:11:48.240 --> 00:11:49.810
And we're going to show you some
of the things that you

334
00:11:49.810 --> 00:11:50.360
can do with that.

335
00:11:50.360 --> 00:11:52.390
So it's pretty cool.

336
00:11:52.390 --> 00:11:54.060
So how does it work?

337
00:11:54.060 --> 00:11:55.190
We'll start with a demo.

338
00:11:55.190 --> 00:11:57.360
But before we jump into the
demo, I want to show you some

339
00:11:57.360 --> 00:11:58.610
of the source code.

340
00:11:58.610 --> 00:12:02.140
341
00:12:02.140 --> 00:12:05.470
So the application that we've
built is roughly about 40

342
00:12:05.470 --> 00:12:09.310
lines of code, and we're going
to have the option to interact

343
00:12:09.310 --> 00:12:11.250
with four different
types of services.

344
00:12:11.250 --> 00:12:13.100
This is a powerful
thing for me.

345
00:12:13.100 --> 00:12:15.030
You don't have to think about
how you're going to integrate

346
00:12:15.030 --> 00:12:17.220
with services to be able
to start talk to them.

347
00:12:17.220 --> 00:12:19.230
If you don't have to think about
that, then you can just

348
00:12:19.230 --> 00:12:21.690
concentrate on the things
that you do best.

349
00:12:21.690 --> 00:12:23.805
So let's just jump back to our
application and show you a

350
00:12:23.805 --> 00:12:25.370
demo in action.

351
00:12:25.370 --> 00:12:27.770
So this is an application we've
built called Imagemator.

352
00:12:27.770 --> 00:12:29.530
It's not an amazingly
complex application.

353
00:12:29.530 --> 00:12:31.210
All it does is allow
you to orchestrate

354
00:12:31.210 --> 00:12:33.200
operations on images.

355
00:12:33.200 --> 00:12:35.430
So the first thing that we need
to do is pick an image.

356
00:12:35.430 --> 00:12:38.260
357
00:12:38.260 --> 00:12:39.950
This is the picker,
the intent picker.

358
00:12:39.950 --> 00:12:41.620
We've got a couple of
services on top.

359
00:12:41.620 --> 00:12:44.210
These are services that we've
installed, and suggestions on

360
00:12:44.210 --> 00:12:44.620
the bottom.

361
00:12:44.620 --> 00:12:47.440
The suggestions come from
the Chrome Web Store.

362
00:12:47.440 --> 00:12:49.180
The really important thing about
this is we don't want

363
00:12:49.180 --> 00:12:52.020
the users to ever be without a
service that can fulfill that

364
00:12:52.020 --> 00:12:56.500
action, which is why the Chrome
Web Store is integrated

365
00:12:56.500 --> 00:12:57.570
into this solution.

366
00:12:57.570 --> 00:13:00.770
So let's choose Cloud
File Picker.

367
00:13:00.770 --> 00:13:03.020
Cloud File Picker is another
application that we've built

368
00:13:03.020 --> 00:13:05.200
as a demo application that
allows us to bring images in

369
00:13:05.200 --> 00:13:06.110
from our Picasa account.

370
00:13:06.110 --> 00:13:08.210
It's pretty cool.

371
00:13:08.210 --> 00:13:11.640
So we've seen Google Glass,
it's pretty cool.

372
00:13:11.640 --> 00:13:13.540
I invented Google Glass
two years ago.

373
00:13:13.540 --> 00:13:16.690
374
00:13:16.690 --> 00:13:17.800
It kind of worked.

375
00:13:17.800 --> 00:13:18.130
Admittedly--

376
00:13:18.130 --> 00:13:20.280
[LAUGHTER]

377
00:13:20.280 --> 00:13:21.300
It kind of worked, right?

378
00:13:21.300 --> 00:13:23.730
The resolution wasn't great.

379
00:13:23.730 --> 00:13:25.360
It wasn't 3D, though, that's
the good thing, right?

380
00:13:25.360 --> 00:13:26.600
JAMES HAWKINS: He's not
lying, this picture is

381
00:13:26.600 --> 00:13:27.560
actually two years old.

382
00:13:27.560 --> 00:13:30.060
So I think he came
up with it first.

383
00:13:30.060 --> 00:13:30.640
PAUL KINLAN: Cool.

384
00:13:30.640 --> 00:13:33.930
So we brought in data from a
remote application into our

385
00:13:33.930 --> 00:13:34.760
application.

386
00:13:34.760 --> 00:13:37.070
Both of our applications, they
don't know about each other,

387
00:13:37.070 --> 00:13:39.070
but they can talk to each other
and work with each other

388
00:13:39.070 --> 00:13:40.140
like they do.

389
00:13:40.140 --> 00:13:41.330
So let's just try
one more thing.

390
00:13:41.330 --> 00:13:43.940
Let's edit the image.

391
00:13:43.940 --> 00:13:46.420
So the important thing to
remember about Intents, for

392
00:13:46.420 --> 00:13:47.750
me, at least--

393
00:13:47.750 --> 00:13:50.690
my favorite part of this-- is we
don't have to build a full

394
00:13:50.690 --> 00:13:51.510
image editing suite.

395
00:13:51.510 --> 00:13:53.770
We can build an application
which just is quite

396
00:13:53.770 --> 00:13:55.840
specialized in one
particular task.

397
00:13:55.840 --> 00:13:58.010
And Mememator is an
example of this.

398
00:13:58.010 --> 00:14:00.900
Mememator is just a little
service that adds funny text

399
00:14:00.900 --> 00:14:01.990
to interesting pictures.

400
00:14:01.990 --> 00:14:03.240
So let's add some
text to this.

401
00:14:03.240 --> 00:14:24.296
402
00:14:24.296 --> 00:14:27.128
JAMES HAWKINS: All right.

403
00:14:27.128 --> 00:14:27.530
[APPLAUSE]

404
00:14:27.530 --> 00:14:28.780
PAUL KINLAN: Thank you.

405
00:14:28.780 --> 00:14:31.080
406
00:14:31.080 --> 00:14:34.670
We didn't actually do that
one in practice.

407
00:14:34.670 --> 00:14:35.280
Cool.

408
00:14:35.280 --> 00:14:36.280
So this is really cool, right?

409
00:14:36.280 --> 00:14:38.270
We've got two different
applications, two remote

410
00:14:38.270 --> 00:14:40.850
services, one client
application, and they've all

411
00:14:40.850 --> 00:14:42.140
been able to talk
to each other.

412
00:14:42.140 --> 00:14:43.460
And yet they don't know
about each other.

413
00:14:43.460 --> 00:14:45.610
They only know about the types
of services that each

414
00:14:45.610 --> 00:14:46.890
application offers.

415
00:14:46.890 --> 00:14:48.140
I think that's pretty
powerful.

416
00:14:48.140 --> 00:14:53.390
417
00:14:53.390 --> 00:14:55.690
So just to briefly go over
how it works again.

418
00:14:55.690 --> 00:14:58.820
We have a client application,
and the user basically asks of

419
00:14:58.820 --> 00:15:01.420
the browser, find me a list of
applications that support the

420
00:15:01.420 --> 00:15:05.500
ability to, say edit an image,
or pick an image in this case.

421
00:15:05.500 --> 00:15:07.410
The browser will resolve the
list of either install

422
00:15:07.410 --> 00:15:09.690
services, offer a list of
suggestions as well,

423
00:15:09.690 --> 00:15:12.520
potentially, and then deliver
the data client-side--

424
00:15:12.520 --> 00:15:16.430
so we're not going through
the internet service--

425
00:15:16.430 --> 00:15:18.430
deliver the data client-side
into the application.

426
00:15:18.430 --> 00:15:21.790
The user will do the work and
then pass the data back again

427
00:15:21.790 --> 00:15:25.360
on the client-side without
having to go through servers,

428
00:15:25.360 --> 00:15:26.930
back into the client
application.

429
00:15:26.930 --> 00:15:31.020
And that's exactly what we've
just seen with Imagemator.

430
00:15:31.020 --> 00:15:31.620
JAMES HAWKINS: So.

431
00:15:31.620 --> 00:15:34.480
By now, you must be thinking
to yourself, wow, this is

432
00:15:34.480 --> 00:15:35.930
really compelling.

433
00:15:35.930 --> 00:15:38.890
I can integrate with another
application and not have to

434
00:15:38.890 --> 00:15:41.860
know what that application
actually is.

435
00:15:41.860 --> 00:15:46.070
So how to integrate your
application with Intents with

436
00:15:46.070 --> 00:15:47.980
some other service?

437
00:15:47.980 --> 00:15:51.340
In Web Intents parlance, the
service is the end point that

438
00:15:51.340 --> 00:15:52.870
provides functionality
that a client

439
00:15:52.870 --> 00:15:55.290
application can request.

440
00:15:55.290 --> 00:15:57.590
So here we have a couple
of services.

441
00:15:57.590 --> 00:16:00.430
We have an image editor that
is exposing the edit

442
00:16:00.430 --> 00:16:01.790
functionality.

443
00:16:01.790 --> 00:16:05.520
We also have a cloud storage
application which is exposing

444
00:16:05.520 --> 00:16:07.340
two functionality
that it can do.

445
00:16:07.340 --> 00:16:12.820
It can save images to the cloud
and it can also allow

446
00:16:12.820 --> 00:16:14.890
clients to pick images
from the storage.

447
00:16:14.890 --> 00:16:17.480
448
00:16:17.480 --> 00:16:19.870
So it's actually really
simple to integrate.

449
00:16:19.870 --> 00:16:21.460
You don't have to
do very much.

450
00:16:21.460 --> 00:16:24.700
First, you have to declare what
your service app can do.

451
00:16:24.700 --> 00:16:26.980
What functionality
do you expose?

452
00:16:26.980 --> 00:16:31.040
We have high-level verbs such
as picking, editing, sharing

453
00:16:31.040 --> 00:16:33.240
that you say, this
is what I can do.

454
00:16:33.240 --> 00:16:35.670
After that, you just
accept the payload

455
00:16:35.670 --> 00:16:36.850
data from the client.

456
00:16:36.850 --> 00:16:39.240
And perhaps do some
manipulation, perform the

457
00:16:39.240 --> 00:16:42.710
function that you said you can
do, and then potentially send

458
00:16:42.710 --> 00:16:45.560
data back to the client.

459
00:16:45.560 --> 00:16:48.340
So as you can see here, we
have two solutions for

460
00:16:48.340 --> 00:16:49.380
integrating with Intents.

461
00:16:49.380 --> 00:16:52.530
The first is what you can
get in the current,

462
00:16:52.530 --> 00:16:54.320
stable version of Chrome.

463
00:16:54.320 --> 00:16:56.770
Right now, Chrome apps can
register that they handle

464
00:16:56.770 --> 00:16:59.160
Intents using their
app manifest.

465
00:16:59.160 --> 00:17:03.290
So we have an Intent section
which you can list of the

466
00:17:03.290 --> 00:17:04.970
different intents that
you can handle.

467
00:17:04.970 --> 00:17:09.460
We have the action of saving,
we can save types of images,

468
00:17:09.460 --> 00:17:11.260
and we've got a couple other
attributes which I'll talk

469
00:17:11.260 --> 00:17:12.339
about later.

470
00:17:12.339 --> 00:17:14.950
One of the cool things that we
can do-- and Paul talked about

471
00:17:14.950 --> 00:17:15.869
this a little bit--

472
00:17:15.869 --> 00:17:19.660
with Chrome app Manifest, is
that we can use the Chrome web

473
00:17:19.660 --> 00:17:23.750
store to sort of curate and
expose these services, these

474
00:17:23.750 --> 00:17:26.520
applications to the browser when
the client requests some

475
00:17:26.520 --> 00:17:27.550
functionality.

476
00:17:27.550 --> 00:17:29.810
So, as we view Save here.

477
00:17:29.810 --> 00:17:33.210
If a client ever says, I need
a save service, we go to the

478
00:17:33.210 --> 00:17:36.690
Chrome Web Store and say, hey,
give us a list of potentially

479
00:17:36.690 --> 00:17:40.470
the high-ranking services that
provide, say, functionality.

480
00:17:40.470 --> 00:17:43.140
And then we can show this to the
user, even if they don't

481
00:17:43.140 --> 00:17:45.080
have these applications
installed.

482
00:17:45.080 --> 00:17:47.110
So it's really good
for discovery for

483
00:17:47.110 --> 00:17:48.950
the user, as well.

484
00:17:48.950 --> 00:17:53.080
But in the web, it's not really
great if only Chrome

485
00:17:53.080 --> 00:17:54.250
Apps can handle Intents.

486
00:17:54.250 --> 00:17:55.940
We want this available
everywhere.

487
00:17:55.940 --> 00:17:58.640
So you'll see at the bottom
here, we've got this new HTML

488
00:17:58.640 --> 00:17:59.760
tag-like thing.

489
00:17:59.760 --> 00:18:01.070
Well, that's exactly
what it is.

490
00:18:01.070 --> 00:18:04.460
This is the Intent tag, which
we've introduced as a proposal

491
00:18:04.460 --> 00:18:08.240
for the addition to HTML, which
will allow all web pages

492
00:18:08.240 --> 00:18:11.430
to register their service,
their page, as a service.

493
00:18:11.430 --> 00:18:14.290
494
00:18:14.290 --> 00:18:16.990
So let's go into a little bit of
detail about the attributes

495
00:18:16.990 --> 00:18:20.880
that you want to be able to
choose for your service.

496
00:18:20.880 --> 00:18:23.890
The first major one is the
action that you can handle.

497
00:18:23.890 --> 00:18:28.320
So you'll notice here that we've
got webintents.org/save.

498
00:18:28.320 --> 00:18:29.720
That's a URL.

499
00:18:29.720 --> 00:18:34.110
To be fair, the spec states that
the action is actually

500
00:18:34.110 --> 00:18:35.120
just a string literal.

501
00:18:35.120 --> 00:18:35.860
It could be any string.

502
00:18:35.860 --> 00:18:38.280
But we feel it's really
important to set precedents

503
00:18:38.280 --> 00:18:40.060
with URLs for a couple
of reasons.

504
00:18:40.060 --> 00:18:42.560
The biggest one is that
documentation.

505
00:18:42.560 --> 00:18:44.600
Paul, thank you.

506
00:18:44.600 --> 00:18:46.990
So, here we have
webintents.org/save.

507
00:18:46.990 --> 00:18:52.720
This site says exactly how you
should call, as a client, this

508
00:18:52.720 --> 00:18:55.940
action, and what you need to do
as a service to implement

509
00:18:55.940 --> 00:18:58.810
this functionality.

510
00:18:58.810 --> 00:19:02.040
It shows the inputs that you may
receive for this section

511
00:19:02.040 --> 00:19:03.650
and outputs as well.

512
00:19:03.650 --> 00:19:07.050
We've also got a nice little
way to demo it here, too.

513
00:19:07.050 --> 00:19:09.080
So we are demo-ing the save.

514
00:19:09.080 --> 00:19:11.650
We have Cloud File
Picker installed.

515
00:19:11.650 --> 00:19:14.430
It's pretty neat.

516
00:19:14.430 --> 00:19:14.650
Yeah.

517
00:19:14.650 --> 00:19:16.830
We have these high-level actions
that we provided on

518
00:19:16.830 --> 00:19:19.080
WebIntents.org.

519
00:19:19.080 --> 00:19:21.860
Things that we think most
applications will want to

520
00:19:21.860 --> 00:19:22.860
integrate with.

521
00:19:22.860 --> 00:19:25.210
But let's say that you have your
own application, and you

522
00:19:25.210 --> 00:19:28.990
have some functionality that's
very compelling that you want

523
00:19:28.990 --> 00:19:30.630
other sites to be able
to use, other clients

524
00:19:30.630 --> 00:19:31.560
to be able to use.

525
00:19:31.560 --> 00:19:33.060
Well, you should be able
to expose that as well.

526
00:19:33.060 --> 00:19:36.630
Let's say that my web
page is example.com.

527
00:19:36.630 --> 00:19:41.160
So I have some functionality,
let's call it transform.

528
00:19:41.160 --> 00:19:45.160
So I want to share this
with the world.

529
00:19:45.160 --> 00:19:48.580
So my action will be
example.com/transform.

530
00:19:48.580 --> 00:19:51.320
Developers can go to that
URL, where you have the

531
00:19:51.320 --> 00:19:53.900
documentation for this action,
the inputs and outputs that

532
00:19:53.900 --> 00:19:57.250
you need, and clients can
integrate with this.

533
00:19:57.250 --> 00:20:00.500
We have a much better world.

534
00:20:00.500 --> 00:20:02.970
The next attribute we'll want
to talk about is the Type.

535
00:20:02.970 --> 00:20:06.970
So the Type is the type of
data that you can handle.

536
00:20:06.970 --> 00:20:09.200
For the Save action, we're
saying we handle

537
00:20:09.200 --> 00:20:11.300
saving types of images.

538
00:20:11.300 --> 00:20:13.500
And I'll go into a little bit of
detail about what the type

539
00:20:13.500 --> 00:20:14.300
actually means.

540
00:20:14.300 --> 00:20:16.150
Here, we have a MIME type.

541
00:20:16.150 --> 00:20:18.640
Images with wild carding,
in fact.

542
00:20:18.640 --> 00:20:20.920
So we're saying we can
handle all images.

543
00:20:20.920 --> 00:20:23.630
But you could also list an
array of MIME types.

544
00:20:23.630 --> 00:20:26.810
So let's say you edit images,
but you don't want to say to

545
00:20:26.810 --> 00:20:30.990
the world, I can handle editing
all types of images,

546
00:20:30.990 --> 00:20:32.580
because there might be some
formats that you don't

547
00:20:32.580 --> 00:20:33.480
actually handle.

548
00:20:33.480 --> 00:20:34.900
So you could specify a list.

549
00:20:34.900 --> 00:20:40.710
Say, image/ping, image/jpg,
and probably image/bitmap,

550
00:20:40.710 --> 00:20:42.456
though I don't know who
would be using that on

551
00:20:42.456 --> 00:20:43.706
the web these days.

552
00:20:43.706 --> 00:20:45.830
553
00:20:45.830 --> 00:20:48.670
Note that, while you can use
MIME types, you can also use

554
00:20:48.670 --> 00:20:50.540
string literals here, too.

555
00:20:50.540 --> 00:20:52.410
I don't know if you've ever
heard of schema.org, but

556
00:20:52.410 --> 00:20:57.360
schema.org is this sort of
next-generation semantic web

557
00:20:57.360 --> 00:20:59.830
where they expose nouns.

558
00:20:59.830 --> 00:21:05.850
Schema.org/imageobject is a
reference for what an image

559
00:21:05.850 --> 00:21:07.250
object might actually contain.

560
00:21:07.250 --> 00:21:08.820
Attributes about images.

561
00:21:08.820 --> 00:21:11.810
So you could say, I don't want
to specify MIME type, I want

562
00:21:11.810 --> 00:21:14.910
to specify schema.org/image.

563
00:21:14.910 --> 00:21:17.540
And then clients and services
will integrate around this

564
00:21:17.540 --> 00:21:18.820
point on schema.org.

565
00:21:18.820 --> 00:21:20.990
It doesn't have to be
schema.org, it could be any

566
00:21:20.990 --> 00:21:21.640
string literal.

567
00:21:21.640 --> 00:21:24.330
But you can see it's really
expandable to whatever you

568
00:21:24.330 --> 00:21:27.810
need to use here.

569
00:21:27.810 --> 00:21:29.300
So these next two attributes
are going to

570
00:21:29.300 --> 00:21:31.650
talk about are optional.

571
00:21:31.650 --> 00:21:34.040
And I'll go into a little bit of
detail about what it means

572
00:21:34.040 --> 00:21:35.530
if you don't actually
specify it.

573
00:21:35.530 --> 00:21:39.150
So href is the page that's
actually going to be invoked

574
00:21:39.150 --> 00:21:42.550
by the browser whenever your
service is invoked.

575
00:21:42.550 --> 00:21:46.500
So for this Save action, we're
saying, don't open my main

576
00:21:46.500 --> 00:21:48.960
page, my index.html,
if you will.

577
00:21:48.960 --> 00:21:52.980
Open my save.html, which is the
page where I have specific

578
00:21:52.980 --> 00:21:55.590
functionality to handle
this service.

579
00:21:55.590 --> 00:21:59.060
So on the Intent tag, it's
important to notice for web

580
00:21:59.060 --> 00:22:04.120
pages that the intent tag will
say, save.html off of your

581
00:22:04.120 --> 00:22:05.200
domain where you're
registered?

582
00:22:05.200 --> 00:22:09.550
So you could have users visit
your main homepage and

583
00:22:09.550 --> 00:22:12.510
register for services at all
these different pages off of

584
00:22:12.510 --> 00:22:13.680
your main site.

585
00:22:13.680 --> 00:22:16.180
It is same origin, for security
reasons, obviously.

586
00:22:16.180 --> 00:22:19.970
So you can't go register for
ABC.com, some service there,

587
00:22:19.970 --> 00:22:21.220
to send them Intent data.

588
00:22:21.220 --> 00:22:23.630
589
00:22:23.630 --> 00:22:25.700
Last attribute we're going to
talk about is disposition.

590
00:22:25.700 --> 00:22:27.800
So currently, we have
two dispositions

591
00:22:27.800 --> 00:22:29.660
that you can specify.

592
00:22:29.660 --> 00:22:32.790
We feel that services know
best how they should be

593
00:22:32.790 --> 00:22:36.210
displayed, whether you want to
take up maximum screen real

594
00:22:36.210 --> 00:22:38.490
estate or you feel
it's good to be--

595
00:22:38.490 --> 00:22:41.710
your UI's very concise and small
and maybe you want to

596
00:22:41.710 --> 00:22:44.230
have reference of the page,
the client page.

597
00:22:44.230 --> 00:22:47.460
So, one of the dispositions
you can use is window.

598
00:22:47.460 --> 00:22:50.090
Window, in the Chrome browser,
at least, opens up your

599
00:22:50.090 --> 00:22:51.860
service in a new tab.

600
00:22:51.860 --> 00:22:54.290
This is really important, like
I said, for when you really

601
00:22:54.290 --> 00:22:55.960
want to maximize screen
real estate.

602
00:22:55.960 --> 00:22:58.510
An image editor, for example,
really should not be

603
00:22:58.510 --> 00:22:59.850
constrained to a small window.

604
00:22:59.850 --> 00:23:02.050
You want to make the
most of that.

605
00:23:02.050 --> 00:23:03.750
We also have the inline
disposition.

606
00:23:03.750 --> 00:23:07.120
And in Chrome, the inline
disposition actually shows up

607
00:23:07.120 --> 00:23:08.160
in the Pick your UI.

608
00:23:08.160 --> 00:23:12.080
So once you select, say, Shorten
with Google, then you

609
00:23:12.080 --> 00:23:15.090
see the service actually show
up inside this picker.

610
00:23:15.090 --> 00:23:19.690
The picker will mold to the
size of the content.

611
00:23:19.690 --> 00:23:21.260
And we think this
is important.

612
00:23:21.260 --> 00:23:24.140
For example, when you need to
have the context of the page

613
00:23:24.140 --> 00:23:24.490
underneath.

614
00:23:24.490 --> 00:23:28.810
For example, if you have a blog
post and you want your

615
00:23:28.810 --> 00:23:33.180
user to share the blog post,
it's probably important when

616
00:23:33.180 --> 00:23:35.580
the user is interacting with the
service, that they can see

617
00:23:35.580 --> 00:23:38.110
the blog post underneath in
order to say, hey, this is a

618
00:23:38.110 --> 00:23:39.490
really cool article.

619
00:23:39.490 --> 00:23:42.020
But please keep in mind that
it's not the client that gets

620
00:23:42.020 --> 00:23:43.740
to say how the services open.

621
00:23:43.740 --> 00:23:46.540
The service is the one that
knows how best to be opened.

622
00:23:46.540 --> 00:23:49.040
623
00:23:49.040 --> 00:23:50.960
So let's go to the
next major step.

624
00:23:50.960 --> 00:23:53.040
Once your service is invoked,
what happens then?

625
00:23:53.040 --> 00:23:57.270
Well, the data is sent on the
window.intent object.

626
00:23:57.270 --> 00:23:59.110
And I'll talk about this here.

627
00:23:59.110 --> 00:24:01.230
You'll notice that we have
webkit prefixing.

628
00:24:01.230 --> 00:24:04.740
As we say often, this is still
an experimental API.

629
00:24:04.740 --> 00:24:06.230
It's still going through
the wringer in the

630
00:24:06.230 --> 00:24:07.870
standardization process.

631
00:24:07.870 --> 00:24:11.820
And we want to make sure that
we're good web citizens.

632
00:24:11.820 --> 00:24:15.200
And so, as we're changing the
API, once we get to a more

633
00:24:15.200 --> 00:24:18.700
stable version, we can drop the
webkit prefix once we have

634
00:24:18.700 --> 00:24:20.940
other browser vendors
implementing this as well.

635
00:24:20.940 --> 00:24:26.460
And this is standard across
APIs that are evolving.

636
00:24:26.460 --> 00:24:29.810
So you'll see here that we're
switching on Action and Type.

637
00:24:29.810 --> 00:24:32.380
Now, if you're a simple service,
and you only register

638
00:24:32.380 --> 00:24:34.660
for one piece of functionality,
one filter as

639
00:24:34.660 --> 00:24:37.200
we call it, then you probably
don't need to do any switching

640
00:24:37.200 --> 00:24:38.140
on the Action and the Type.

641
00:24:38.140 --> 00:24:39.840
You know what data is
coming, you know

642
00:24:39.840 --> 00:24:40.900
what service you doing.

643
00:24:40.900 --> 00:24:43.370
But let's say you're more fully
function service, and

644
00:24:43.370 --> 00:24:45.410
you've registered for
multiple filters,

645
00:24:45.410 --> 00:24:47.210
multiple actions and types.

646
00:24:47.210 --> 00:24:48.660
You're probably going
to want to switch

647
00:24:48.660 --> 00:24:50.920
on how was I invoked?

648
00:24:50.920 --> 00:24:52.720
Which action am I supposed
to be handling?

649
00:24:52.720 --> 00:24:54.780
What's the type of data
that's coming in?

650
00:24:54.780 --> 00:24:57.770
So here, we're saving, and we
know it's a ping, so the

651
00:24:57.770 --> 00:25:01.000
intentobject.data is the actual
data that's sent from

652
00:25:01.000 --> 00:25:02.230
the client.

653
00:25:02.230 --> 00:25:05.860
Let's check out a debugger that
can help us see what data

654
00:25:05.860 --> 00:25:08.090
is being passed back
and forth.

655
00:25:08.090 --> 00:25:10.880
Now this is a nifty little
application that's available

656
00:25:10.880 --> 00:25:12.350
on the Chrome Web Store.

657
00:25:12.350 --> 00:25:16.240
It allows you, whether a service
or client page, to see

658
00:25:16.240 --> 00:25:19.760
what data is sent in from
Intent invocation.

659
00:25:19.760 --> 00:25:23.440
So we see, that when we invoked
this intent on the

660
00:25:23.440 --> 00:25:27.220
page, we use the Save action and
we passed in the type of

661
00:25:27.220 --> 00:25:28.110
URI listing.

662
00:25:28.110 --> 00:25:30.560
And here is the actual data,
which is that link.

663
00:25:30.560 --> 00:25:33.410
It's really nifty to be able to
debug and make sure that,

664
00:25:33.410 --> 00:25:35.560
as a client, you're sending
the right data, and as a

665
00:25:35.560 --> 00:25:37.780
service, if there's something
going on, you're not getting

666
00:25:37.780 --> 00:25:39.520
the right data, you could
say, here's exactly

667
00:25:39.520 --> 00:25:40.730
what's going wrong.

668
00:25:40.730 --> 00:25:41.650
Now this is a Chrome

669
00:25:41.650 --> 00:25:43.080
application, it's pretty nifty.

670
00:25:43.080 --> 00:25:46.680
But long-term, longer down the
road, we'd really like to add

671
00:25:46.680 --> 00:25:48.320
this functionality to
the Web Inspector.

672
00:25:48.320 --> 00:25:49.990
Maybe through an Inspector
extension.

673
00:25:49.990 --> 00:25:52.650
674
00:25:52.650 --> 00:25:55.130
Thank you, Paul.

675
00:25:55.130 --> 00:25:56.810
So we've talked about one
side of the coin.

676
00:25:56.810 --> 00:25:58.320
Let's flip it.

677
00:25:58.320 --> 00:26:02.030
How do you actually invoke
Intents as a client?

678
00:26:02.030 --> 00:26:03.130
It's really simple.

679
00:26:03.130 --> 00:26:06.330
You construct an intent object,
passing in the action

680
00:26:06.330 --> 00:26:09.250
and the type and perhaps the
data that you want to send to

681
00:26:09.250 --> 00:26:12.200
the service, and then you
call startActivity.

682
00:26:12.200 --> 00:26:16.070
That actually invokes the flow
of Intents in the browser.

683
00:26:16.070 --> 00:26:18.620
The picker UI will show up, as
you've seen in a couple times

684
00:26:18.620 --> 00:26:19.740
that we've demoed.

685
00:26:19.740 --> 00:26:23.070
The list of services that match
this filter on action

686
00:26:23.070 --> 00:26:24.370
and type will show up.

687
00:26:24.370 --> 00:26:26.220
And the user gets to
pick their choice.

688
00:26:26.220 --> 00:26:28.070
Which service do they
want to use?

689
00:26:28.070 --> 00:26:31.010
690
00:26:31.010 --> 00:26:31.830
And you're done.

691
00:26:31.830 --> 00:26:32.970
That's all you have
to do as a client.

692
00:26:32.970 --> 00:26:36.190
It's ridiculously easy.

693
00:26:36.190 --> 00:26:38.480
So we talked about one-way
communication.

694
00:26:38.480 --> 00:26:41.700
You send data from the client
to the service.

695
00:26:41.700 --> 00:26:44.480
But we need to be able to
transform data, we need to do

696
00:26:44.480 --> 00:26:46.030
able to send data back.

697
00:26:46.030 --> 00:26:46.810
We can do that.

698
00:26:46.810 --> 00:26:49.160
We can have bi-bidirectional
communication.

699
00:26:49.160 --> 00:26:53.110
So the API has two optional
callbacks, onSuccess being the

700
00:26:53.110 --> 00:26:56.370
most important, which
is your 90% case.

701
00:26:56.370 --> 00:26:58.490
When things go well
with the service.

702
00:26:58.490 --> 00:27:01.790
This is the way the service will
send back data and how

703
00:27:01.790 --> 00:27:05.800
you receive it, the onSuccess
callback back So as a service,

704
00:27:05.800 --> 00:27:08.420
you call the postResult method
on the intent object that you

705
00:27:08.420 --> 00:27:09.250
were sent in.

706
00:27:09.250 --> 00:27:11.020
The intent object
being the link

707
00:27:11.020 --> 00:27:12.530
between you and the client.

708
00:27:12.530 --> 00:27:13.570
And you're probably going
to pass on the

709
00:27:13.570 --> 00:27:16.220
data to this method.

710
00:27:16.220 --> 00:27:17.900
There's also a non-failure
method, in case

711
00:27:17.900 --> 00:27:18.760
something goes wrong.

712
00:27:18.760 --> 00:27:21.950
It could be sent from the
browser, say there was a 404

713
00:27:21.950 --> 00:27:23.370
with the service that
was picked.

714
00:27:23.370 --> 00:27:26.420
Or, it could be sent from the
service in case perhaps the

715
00:27:26.420 --> 00:27:29.240
data you sent from the client
didn't quite lineup, didn't

716
00:27:29.240 --> 00:27:30.970
quite match what
they expected.

717
00:27:30.970 --> 00:27:34.030
I mean, to be fair, we want
this case to never happen.

718
00:27:34.030 --> 00:27:37.100
In well-behaved applications,
there are no failure states.

719
00:27:37.100 --> 00:27:38.580
But you need to be realistic.

720
00:27:38.580 --> 00:27:39.830
There are going to
be failures.

721
00:27:39.830 --> 00:27:42.590
722
00:27:42.590 --> 00:27:43.270
PAUL KINLAN: Cool.

723
00:27:43.270 --> 00:27:47.600
So we went over the
basics of the API.

724
00:27:47.600 --> 00:27:50.240
The ability to start and invoke
and action, and then

725
00:27:50.240 --> 00:27:52.340
the ability to actually respond
to that and deliver

726
00:27:52.340 --> 00:27:54.940
the data to the user in the
format that they want inside

727
00:27:54.940 --> 00:27:56.920
the other application,
and bring it back in.

728
00:27:56.920 --> 00:28:00.210
So let's talk about how we can
build applications that love

729
00:28:00.210 --> 00:28:00.780
each other.

730
00:28:00.780 --> 00:28:03.650
How we can actually take this
basic API that we've just

731
00:28:03.650 --> 00:28:05.910
shown you, and actually solve
the problems that we talked

732
00:28:05.910 --> 00:28:07.970
about at the beginning
of the presentation.

733
00:28:07.970 --> 00:28:09.770
So the first one
is pick, right?

734
00:28:09.770 --> 00:28:13.740
And we have a pick intent,
http://webintents/org/pick.

735
00:28:13.740 --> 00:28:15.320
We try to think of it
as, like, the file

736
00:28:15.320 --> 00:28:16.570
opener to the web.

737
00:28:16.570 --> 00:28:20.100
738
00:28:20.100 --> 00:28:21.550
Normally on desktop
applications, we'll have a

739
00:28:21.550 --> 00:28:24.280
File, Open menu where we'll be
able to scan the hard drive.

740
00:28:24.280 --> 00:28:27.050
We should be able to pull in the
data from any web service

741
00:28:27.050 --> 00:28:29.510
across the web that supports
the pick intent.

742
00:28:29.510 --> 00:28:32.300
So let's have a quick example.

743
00:28:32.300 --> 00:28:33.940
We'll pull in from the webcam.

744
00:28:33.940 --> 00:28:37.150
So we got a little application
called Quicksnapr.

745
00:28:37.150 --> 00:28:41.140
We're going to ask able to
wave, if that's possible.

746
00:28:41.140 --> 00:28:42.290
That's it, cool.

747
00:28:42.290 --> 00:28:43.950
Thank you very much.

748
00:28:43.950 --> 00:28:47.140
And then we click on it,
bring it through.

749
00:28:47.140 --> 00:28:47.850
Cool, right?

750
00:28:47.850 --> 00:28:49.560
My presentation is not
an application.

751
00:28:49.560 --> 00:28:51.760
It shouldn't have to have
complex file open

752
00:28:51.760 --> 00:28:53.650
functionality just to be
able to bring that

753
00:28:53.650 --> 00:28:54.730
data into this app.

754
00:28:54.730 --> 00:28:58.290
And likewise, Quicksnapr, it
shouldn't have to know about

755
00:28:58.290 --> 00:29:00.770
my presentation's integration
with its services.

756
00:29:00.770 --> 00:29:01.950
So we've just brought
the data back in.

757
00:29:01.950 --> 00:29:03.510
It's pretty cool, right?

758
00:29:03.510 --> 00:29:05.140
As you've seen from the code
earlier on in this

759
00:29:05.140 --> 00:29:08.970
presentation, there's three
or four lines of code.

760
00:29:08.970 --> 00:29:11.390
The ability to instantiate a
webkit intent object or an

761
00:29:11.390 --> 00:29:14.920
intent object, the data that
you want to use, the action

762
00:29:14.920 --> 00:29:17.970
type, and then the
startActivity.

763
00:29:17.970 --> 00:29:19.990
The startActivity
has onSuccess.

764
00:29:19.990 --> 00:29:22.840
OnSuccess just basically takes
the data back in and then

765
00:29:22.840 --> 00:29:24.340
attaches it to an image.

766
00:29:24.340 --> 00:29:25.720
And that is pretty
much all it does.

767
00:29:25.720 --> 00:29:27.750
We cache the image for related
use in some of the next

768
00:29:27.750 --> 00:29:29.290
slides, and you'll
see what happens.

769
00:29:29.290 --> 00:29:32.760
But what I what really want to
show you guys is actually this

770
00:29:32.760 --> 00:29:33.650
is the set pattern.

771
00:29:33.650 --> 00:29:35.970
The same pattern across every
single action that we're going

772
00:29:35.970 --> 00:29:36.890
to try and do.

773
00:29:36.890 --> 00:29:39.100
And hopefully this will show
you how simple it is to

774
00:29:39.100 --> 00:29:40.810
integrate with this API.

775
00:29:40.810 --> 00:29:42.230
So we've picked an image.

776
00:29:42.230 --> 00:29:43.120
We need to edit it.

777
00:29:43.120 --> 00:29:45.730
We need to maybe create an
inspirational message for the

778
00:29:45.730 --> 00:29:46.820
rest of the world.

779
00:29:46.820 --> 00:29:49.430
So let's use another demo
application we've made called

780
00:29:49.430 --> 00:29:50.820
Inspirationmator.

781
00:29:50.820 --> 00:29:53.550
And all it does is it creates
those inspirational photos.

782
00:29:53.550 --> 00:29:55.430
It's not very complex.

783
00:29:55.430 --> 00:30:00.010
It doesn't tend to be like
Photoshop or Pixelmator, or

784
00:30:00.010 --> 00:30:01.040
any other type of application.

785
00:30:01.040 --> 00:30:03.755
It just adds inspirational
text to photos.

786
00:30:03.755 --> 00:30:07.430
787
00:30:07.430 --> 00:30:08.680
Cool.

788
00:30:08.680 --> 00:30:13.220
789
00:30:13.220 --> 00:30:14.660
JAMES HAWKINS: All right.

790
00:30:14.660 --> 00:30:17.335
Let's go back up.

791
00:30:17.335 --> 00:30:18.585
PAUL KINLAN: We need to
get off the screen.

792
00:30:18.585 --> 00:30:22.530
793
00:30:22.530 --> 00:30:23.310
Click on it, and then--

794
00:30:23.310 --> 00:30:26.000
Sorry about this, guys.

795
00:30:26.000 --> 00:30:26.828
JAMES HAWKINS: There we go.

796
00:30:26.828 --> 00:30:28.070
PAUL KINLAN: Cool.

797
00:30:28.070 --> 00:30:29.040
So that's pretty cool, right?

798
00:30:29.040 --> 00:30:30.690
We've had two applications
just talk with my

799
00:30:30.690 --> 00:30:31.640
presentation.

800
00:30:31.640 --> 00:30:32.630
That's pretty cool.

801
00:30:32.630 --> 00:30:34.700
And if you look at the code,
it's exactly the same, apart

802
00:30:34.700 --> 00:30:37.040
from, this time, we've change
the action to Edit.

803
00:30:37.040 --> 00:30:38.990
So that means we're going to try
and find applications that

804
00:30:38.990 --> 00:30:41.220
support the ability
to edit images.

805
00:30:41.220 --> 00:30:43.230
And once the browser's found
them, it could be any type of

806
00:30:43.230 --> 00:30:45.490
application, it doesn't have
to be Inspirationmator.

807
00:30:45.490 --> 00:30:47.180
If the user hasn't got it
installed, they're not going

808
00:30:47.180 --> 00:30:49.580
to see that on the list unless
it's one of the suggestions.

809
00:30:49.580 --> 00:30:52.580
But we've managed to tend our
data out, edit it, and then

810
00:30:52.580 --> 00:30:53.980
bring it back into our app.

811
00:30:53.980 --> 00:30:55.190
And again, it's the same code.

812
00:30:55.190 --> 00:30:57.930
We have an onSuccess callback
which takes the image data and

813
00:30:57.930 --> 00:31:01.055
then just attaches
it to this image.

814
00:31:01.055 --> 00:31:03.030
It's pretty cool, right?

815
00:31:03.030 --> 00:31:04.570
So we've edited the data.

816
00:31:04.570 --> 00:31:06.210
We want to make sure
it's all backed up.

817
00:31:06.210 --> 00:31:08.670
So this is the Save intent.

818
00:31:08.670 --> 00:31:10.890
If you look at the code, it's
exactly the same again.

819
00:31:10.890 --> 00:31:12.380
Apart from this time,
we change the action

820
00:31:12.380 --> 00:31:14.070
from Edit to Save.

821
00:31:14.070 --> 00:31:15.800
So we're going to ask the
browser to find a list of

822
00:31:15.800 --> 00:31:18.250
services that support
image saving.

823
00:31:18.250 --> 00:31:20.470
So we're going to save back
out to Cloud File Picker.

824
00:31:20.470 --> 00:31:23.850
So you remember that we pulled
in before, earlier in the

825
00:31:23.850 --> 00:31:26.660
presentation, from my
Picasa account.

826
00:31:26.660 --> 00:31:28.600
Well, we've actually just
saved it back out.

827
00:31:28.600 --> 00:31:32.040
So if we just click View, just
to prove it's saved.

828
00:31:32.040 --> 00:31:33.600
This is just using
the Drive API.

829
00:31:33.600 --> 00:31:35.850
It's just a JavaScript API that
we chose to integrate

830
00:31:35.850 --> 00:31:36.930
with for this demo.

831
00:31:36.930 --> 00:31:38.900
But we've managed to upload
our application into the

832
00:31:38.900 --> 00:31:40.940
user's cloud file storage
solution.

833
00:31:40.940 --> 00:31:43.020
And if we click on it, we should
be able to view it.

834
00:31:43.020 --> 00:31:45.270
And hey, there we are, right?

835
00:31:45.270 --> 00:31:48.540
We've taken our data from one
application, brought into the

836
00:31:48.540 --> 00:31:51.510
presentation, edited it in
another application, and then

837
00:31:51.510 --> 00:31:54.040
saved it out to my preferred
cloud file storage solution.

838
00:31:54.040 --> 00:31:55.290
It's pretty cool.

839
00:31:55.290 --> 00:32:00.330
840
00:32:00.330 --> 00:32:01.800
JAMES HAWKINS: There we go.

841
00:32:01.800 --> 00:32:02.790
PAUL KINLAN: Thank you.

842
00:32:02.790 --> 00:32:04.440
And obviously one of the things
that you want to do is

843
00:32:04.440 --> 00:32:06.730
you want to tell the world how
cool this image is, right?

844
00:32:06.730 --> 00:32:08.350
So we want to share.

845
00:32:08.350 --> 00:32:10.950
Notice this doesn't have
an onSuccess callback.

846
00:32:10.950 --> 00:32:13.450
My ability to share my
data to a service--

847
00:32:13.450 --> 00:32:15.370
I don't need to know that
it's been shared, right?

848
00:32:15.370 --> 00:32:17.820
Sometimes you might want to know
that the action has been

849
00:32:17.820 --> 00:32:20.530
completed successfully, but in
this case, I don't, because I

850
00:32:20.530 --> 00:32:21.740
don't actually need it.

851
00:32:21.740 --> 00:32:23.790
So if we just share this image
out, we'll be able to share it

852
00:32:23.790 --> 00:32:25.840
to a different service.

853
00:32:25.840 --> 00:32:26.710
We'll just share to Imgur.

854
00:32:26.710 --> 00:32:30.690
This is just using an API
integration with Imgur.

855
00:32:30.690 --> 00:32:34.300
It's processing, we've saved,
and if we press the actual

856
00:32:34.300 --> 00:32:38.140
link, we should, in theory, be
able to see it actually has

857
00:32:38.140 --> 00:32:39.650
been push the web, and
we're not just kind

858
00:32:39.650 --> 00:32:41.170
of making this up.

859
00:32:41.170 --> 00:32:41.830
So, OK.

860
00:32:41.830 --> 00:32:43.720
The user interface looks a
little bit hokey at the

861
00:32:43.720 --> 00:32:45.110
moment, a bit crazy.

862
00:32:45.110 --> 00:32:46.260
It's going to change
and improve.

863
00:32:46.260 --> 00:32:47.680
It is an experimental API.

864
00:32:47.680 --> 00:32:51.260
And as we iterate on this user
interface, it's going start to

865
00:32:51.260 --> 00:32:51.970
look really nice.

866
00:32:51.970 --> 00:32:52.750
JAMES HAWKINS: I want
to tell a little

867
00:32:52.750 --> 00:32:55.080
anecdotal story about this.

868
00:32:55.080 --> 00:32:57.810
So, for the longest time, we
couldn't get UX support, And

869
00:32:57.810 --> 00:33:00.450
we were like, huh, what
can we do about this?

870
00:33:00.450 --> 00:33:01.740
Engineer-built UI.

871
00:33:01.740 --> 00:33:03.580
We built this, and then they're
like, oh my God, you

872
00:33:03.580 --> 00:33:04.480
release with this.

873
00:33:04.480 --> 00:33:06.240
Mocks, here you go, you have
all the mocks you need.

874
00:33:06.240 --> 00:33:10.400
So we are actually polishing
up the UI, sanding down the

875
00:33:10.400 --> 00:33:12.170
rough edges, and this is
going to look really

876
00:33:12.170 --> 00:33:15.470
gorgeous really soon now.

877
00:33:15.470 --> 00:33:15.960
PAUL KINLAN: Yeah.

878
00:33:15.960 --> 00:33:17.775
This is a nice demonstration
of an inline intent.

879
00:33:17.775 --> 00:33:20.200
We still have the context of the
page that actually invoked

880
00:33:20.200 --> 00:33:23.460
action behind, but we were able
to manipulate this image

881
00:33:23.460 --> 00:33:24.840
inside this context.

882
00:33:24.840 --> 00:33:27.250
It's pretty cool.

883
00:33:27.250 --> 00:33:28.985
And, obviously, once you shared
it out, you've shared

884
00:33:28.985 --> 00:33:31.640
it out of the world, you
get users viewing.

885
00:33:31.640 --> 00:33:34.670
If a user views a link right
now, they either download the

886
00:33:34.670 --> 00:33:36.550
data or just kind of view
inside the browser.

887
00:33:36.550 --> 00:33:38.200
But what happens if they want
to use their preferred

888
00:33:38.200 --> 00:33:39.400
application?

889
00:33:39.400 --> 00:33:43.500
Right now, we don't have the
ability to say, open this

890
00:33:43.500 --> 00:33:45.160
image with my preferred
application.

891
00:33:45.160 --> 00:33:47.500
But we have got some
experimental support for RSS

892
00:33:47.500 --> 00:33:48.030
and Atom feeds.

893
00:33:48.030 --> 00:33:49.140
So I just want to show
you this, actually.

894
00:33:49.140 --> 00:33:50.700
It's pretty cool.

895
00:33:50.700 --> 00:33:54.430
So we have just a link
that is clicked.

896
00:33:54.430 --> 00:33:55.980
There's no actual API
that's invoked.

897
00:33:55.980 --> 00:33:58.380
The browser's detected that
actually, there's a content

898
00:33:58.380 --> 00:34:00.660
type that I can handle via
the Intent system.

899
00:34:00.660 --> 00:34:01.600
So it opens up the picker.

900
00:34:01.600 --> 00:34:04.110
And we'll choose Feed Intent
Viewer, which is an

901
00:34:04.110 --> 00:34:07.010
application that Mihai Parparita
wrote, which just

902
00:34:07.010 --> 00:34:08.340
off is the same functionality
that you

903
00:34:08.340 --> 00:34:09.630
would expect in Chrome.

904
00:34:09.630 --> 00:34:12.300
Obviously, most users aren't
developers, and they won't use

905
00:34:12.300 --> 00:34:14.040
this extension and
application.

906
00:34:14.040 --> 00:34:15.980
They might use their preferred
feed reader, which is pretty

907
00:34:15.980 --> 00:34:17.230
cool stuff.

908
00:34:17.230 --> 00:34:19.139
909
00:34:19.139 --> 00:34:20.810
And we have some other
examples, as well.

910
00:34:20.810 --> 00:34:23.679
So these are intents that are
actually on the WebIntents.org

911
00:34:23.679 --> 00:34:26.010
domain, and they manage
under that name space.

912
00:34:26.010 --> 00:34:27.090
We have Subscribe.

913
00:34:27.090 --> 00:34:29.639
The idea behind this is, if you
have a URL that you want

914
00:34:29.639 --> 00:34:33.489
to, not view, but subscribe to
regular updates from in your

915
00:34:33.489 --> 00:34:35.880
favorite feed reader, well
that's just a simple action

916
00:34:35.880 --> 00:34:37.830
that says I'm going to subscribe
to this feed.

917
00:34:37.830 --> 00:34:40.179
And then we have another
one for Shorten.

918
00:34:40.179 --> 00:34:42.560
So the idea behind this is you
might have a link or some data

919
00:34:42.560 --> 00:34:43.739
you want to compress.

920
00:34:43.739 --> 00:34:44.600
In this case it's a link.

921
00:34:44.600 --> 00:34:46.870
And we're going to shorten
it with the Google API.

922
00:34:46.870 --> 00:34:48.630
It's pretty simple.

923
00:34:48.630 --> 00:34:50.800
This doesn't look sexy because,
again, this is my own

924
00:34:50.800 --> 00:34:51.739
demonstration.

925
00:34:51.739 --> 00:34:54.870
But we've taken our data from
one application, sent it using

926
00:34:54.870 --> 00:34:59.050
the Google API, JSON API that
you can interact with, and

927
00:34:59.050 --> 00:34:59.770
saved it in this page.

928
00:34:59.770 --> 00:35:02.220
And obviously we click Return,
we should be able to see the

929
00:35:02.220 --> 00:35:03.370
data come back in.

930
00:35:03.370 --> 00:35:05.960
So this demonstrates, even with
the inline context, you

931
00:35:05.960 --> 00:35:08.780
can pass data in, manipulate it,
and bring it back out to

932
00:35:08.780 --> 00:35:09.900
you application.

933
00:35:09.900 --> 00:35:14.050
It's pretty cool, I think it's
pretty powerful stuff as well.

934
00:35:14.050 --> 00:35:15.900
JAMES HAWKINS: So far we've
talked about a lot of

935
00:35:15.900 --> 00:35:17.250
high-level integrations.

936
00:35:17.250 --> 00:35:20.160
We've got the input and output
of data going on.

937
00:35:20.160 --> 00:35:22.320
But there's more advanced

938
00:35:22.320 --> 00:35:25.680
communication we could be doing.

939
00:35:25.680 --> 00:35:28.330
Let's say that you're a
photo storage site.

940
00:35:28.330 --> 00:35:31.880
You have users who have very
large raw photos, perhaps 50

941
00:35:31.880 --> 00:35:35.590
megabytes, and your site
does not have editing

942
00:35:35.590 --> 00:35:36.380
functionality.

943
00:35:36.380 --> 00:35:38.430
Which is fine, because
we have Intents.

944
00:35:38.430 --> 00:35:40.990
There are services out there
that will allow your user to

945
00:35:40.990 --> 00:35:44.190
edit the image and pass back
the manipulated bits.

946
00:35:44.190 --> 00:35:47.940
But what we have to do, we have
this blob, and that's

947
00:35:47.940 --> 00:35:48.760
going to be copied.

948
00:35:48.760 --> 00:35:51.790
It's 50 megabytes of data, it's
going to be copied, even

949
00:35:51.790 --> 00:35:54.240
client-side just to the other
service so that they can have

950
00:35:54.240 --> 00:35:55.110
the bits as well.

951
00:35:55.110 --> 00:35:55.890
This is not cool.

952
00:35:55.890 --> 00:35:59.190
Now we have a slow copy, a
slow synchronous copy.

953
00:35:59.190 --> 00:36:01.400
We have a service and a client
that both have a

954
00:36:01.400 --> 00:36:02.930
copy of the same data.

955
00:36:02.930 --> 00:36:04.200
We want to solve this problem.

956
00:36:04.200 --> 00:36:07.020
So we can which transferables.

957
00:36:07.020 --> 00:36:09.680
We can transfer this blob.

958
00:36:09.680 --> 00:36:12.430
What transferables allows you
to do is say, I have a large

959
00:36:12.430 --> 00:36:13.410
set of data.

960
00:36:13.410 --> 00:36:14.850
Just pass a reference.

961
00:36:14.850 --> 00:36:16.780
We don't need to pass the
entire set of data.

962
00:36:16.780 --> 00:36:19.560
The browser has a copy of the
data, just send a pointer to

963
00:36:19.560 --> 00:36:21.470
it and say, this is where
your data is at.

964
00:36:21.470 --> 00:36:24.410
The service that's editing
the image can perform the

965
00:36:24.410 --> 00:36:27.680
manipulation on the bits, and
then return the result

966
00:36:27.680 --> 00:36:30.400
transferred once again back to
the client, and the client has

967
00:36:30.400 --> 00:36:32.200
the edited data.

968
00:36:32.200 --> 00:36:34.300
No copying whatsoever,
just transferred.

969
00:36:34.300 --> 00:36:37.180
Very fast.

970
00:36:37.180 --> 00:36:39.880
Another important advancing you
can do with Intents are

971
00:36:39.880 --> 00:36:41.220
explicit intent.

972
00:36:41.220 --> 00:36:44.910
So your application may be
very well componentized.

973
00:36:44.910 --> 00:36:46.850
You've got little bits of
functionality here.

974
00:36:46.850 --> 00:36:53.830
Say, an email application has
composing emails, it has--

975
00:36:53.830 --> 00:36:57.090
what else do we have, Paul,
in email applications?

976
00:36:57.090 --> 00:36:57.890
Reading emails.

977
00:36:57.890 --> 00:36:59.435
You've got a reading
email view.

978
00:36:59.435 --> 00:36:59.710
PAUL KINLAN: Download.

979
00:36:59.710 --> 00:36:59.930
Save.

980
00:36:59.930 --> 00:37:01.620
JAMES HAWKINS: You've
got the inbox view.

981
00:37:01.620 --> 00:37:04.170
And some of these things could
be shared with other

982
00:37:04.170 --> 00:37:06.560
applications, such as
composing an email.

983
00:37:06.560 --> 00:37:09.040
That could be a form of
sharing, if you will.

984
00:37:09.040 --> 00:37:11.940
So you have registered for
Intents that you are a service

985
00:37:11.940 --> 00:37:16.710
that handles sharing with your
Compose functionality.

986
00:37:16.710 --> 00:37:20.460
But you can also call yourself
this way with the Intents API.

987
00:37:20.460 --> 00:37:24.710
You could say, example.com, say,
which is my own service,

988
00:37:24.710 --> 00:37:26.430
and call into your
own components

989
00:37:26.430 --> 00:37:27.780
using the Intents API.

990
00:37:27.780 --> 00:37:31.010
991
00:37:31.010 --> 00:37:34.100
So let's say you're a client,
and you have some very,

992
00:37:34.100 --> 00:37:37.760
perhaps, obscure action that
you need performed on your

993
00:37:37.760 --> 00:37:41.150
data, or that you want the user
to be able to select.

994
00:37:41.150 --> 00:37:43.910
But you don't want to have a
situation where the picker

995
00:37:43.910 --> 00:37:45.010
shows up as empty.

996
00:37:45.010 --> 00:37:48.200
Let's say we're in a world where
web pages can register

997
00:37:48.200 --> 00:37:49.060
for Intents.

998
00:37:49.060 --> 00:37:51.480
There are no Chrome applications
that can handle

999
00:37:51.480 --> 00:37:52.760
this action.

1000
00:37:52.760 --> 00:37:55.580
You want to make sure that the
services that you know about

1001
00:37:55.580 --> 00:37:58.800
that can handle this action
are available to the user.

1002
00:37:58.800 --> 00:38:03.290
So we have suggestions, which
allow you to say, I know

1003
00:38:03.290 --> 00:38:05.170
example.com and another example

1004
00:38:05.170 --> 00:38:06.510
can handle this action.

1005
00:38:06.510 --> 00:38:09.420
So pass those in and show them
to the user to give them a

1006
00:38:09.420 --> 00:38:11.740
choice to select
these as well.

1007
00:38:11.740 --> 00:38:14.700
The alternative solution to the
problem of having an empty

1008
00:38:14.700 --> 00:38:18.980
picker, which is a horrible UX
experience for the user, is

1009
00:38:18.980 --> 00:38:22.040
having a way to say, is there
anything in the picker?

1010
00:38:22.040 --> 00:38:23.730
Is anything going to show up?

1011
00:38:23.730 --> 00:38:26.110
Are there services registered
that handle this action?

1012
00:38:26.110 --> 00:38:28.270
That's a no-no on the web,
because that allows

1013
00:38:28.270 --> 00:38:29.310
fingerprinting the user.

1014
00:38:29.310 --> 00:38:31.520
We didn't want to introduce
this to the web.

1015
00:38:31.520 --> 00:38:35.760
So we have suggestions here
for that use case.

1016
00:38:35.760 --> 00:38:39.430
So do for apps what links
did for the web.

1017
00:38:39.430 --> 00:38:40.140
Greg Billock said that.

1018
00:38:40.140 --> 00:38:40.960
Who's Greg Billock?

1019
00:38:40.960 --> 00:38:41.390
I know.

1020
00:38:41.390 --> 00:38:42.340
Now you're asking her.

1021
00:38:42.340 --> 00:38:44.360
Greg Billock is one of the lead
engineers on Intents.

1022
00:38:44.360 --> 00:38:45.500
He's right here in
the front row.

1023
00:38:45.500 --> 00:38:46.390
Yeah.

1024
00:38:46.390 --> 00:38:48.580
He's going to be doing a code
lab this afternoon, with

1025
00:38:48.580 --> 00:38:51.760
Rachel as well, which'll
be very interesting.

1026
00:38:51.760 --> 00:38:55.110
But what's important to think
about here is that links are a

1027
00:38:55.110 --> 00:38:56.810
one-to-one communication.

1028
00:38:56.810 --> 00:38:58.690
And that's what the
web is today.

1029
00:38:58.690 --> 00:39:02.040
Web Intents allow scaling to the
size of the web, where you

1030
00:39:02.040 --> 00:39:05.960
have one to "n." Your client
to many services.

1031
00:39:05.960 --> 00:39:09.570
And the most important thing
is that those "n" services

1032
00:39:09.570 --> 00:39:12.870
that can be chosen are
picked by the user.

1033
00:39:12.870 --> 00:39:14.990
They say, I like this site.

1034
00:39:14.990 --> 00:39:16.010
I like this service.

1035
00:39:16.010 --> 00:39:17.730
And I don't want to deal
with anything else.

1036
00:39:17.730 --> 00:39:20.180
There are 300 sharing
services out there.

1037
00:39:20.180 --> 00:39:22.400
Probably more that we don't
even know about.

1038
00:39:22.400 --> 00:39:24.580
But the user only cares
about three of them.

1039
00:39:24.580 --> 00:39:26.830
Only show them the services
they care about.

1040
00:39:26.830 --> 00:39:29.380
And Intents lets us do this.

1041
00:39:29.380 --> 00:39:31.760
It's also extremely
easy to use.

1042
00:39:31.760 --> 00:39:34.510
I feel like we've been showing
the exact same code for all of

1043
00:39:34.510 --> 00:39:36.830
these slides, almost
as filler, right?

1044
00:39:36.830 --> 00:39:39.150
But it's to say, it's
so easy to use.

1045
00:39:39.150 --> 00:39:43.520
It requires very little cost for
developers to integrate,

1046
00:39:43.520 --> 00:39:46.230
both on the client side
and as a service.

1047
00:39:46.230 --> 00:39:48.640
This is very important
for integration.

1048
00:39:48.640 --> 00:39:50.780
We want this ecosystem
to build up and to be

1049
00:39:50.780 --> 00:39:52.030
useful for the user.

1050
00:39:52.030 --> 00:39:54.810
1051
00:39:54.810 --> 00:39:56.260
PAUL KINLAN: So we're pretty
much finished now.

1052
00:39:56.260 --> 00:39:58.430
We do have some more
information, though.

1053
00:39:58.430 --> 00:40:00.400
So we have a selection
of links.

1054
00:40:00.400 --> 00:40:03.440
We have the W3C specification,
which is, like we said, in

1055
00:40:03.440 --> 00:40:05.330
first public working draft
at the moment.

1056
00:40:05.330 --> 00:40:06.710
You can go in there, if you
really want to know the

1057
00:40:06.710 --> 00:40:09.210
nitty-gritty about the API,
you can go there and

1058
00:40:09.210 --> 00:40:11.150
understand everything
that's happening.

1059
00:40:11.150 --> 00:40:13.280
We also have some high-level
documentation.

1060
00:40:13.280 --> 00:40:15.530
That's the whole point of
WebIntents.og and all the

1061
00:40:15.530 --> 00:40:18.140
actions underneath that, is
that we can provide more

1062
00:40:18.140 --> 00:40:20.030
developer-friendly documentation
about how you're

1063
00:40:20.030 --> 00:40:22.730
supposed to interact with these
services, and examples,

1064
00:40:22.730 --> 00:40:24.830
demos, and a whole lot
of other things.

1065
00:40:24.830 --> 00:40:27.940
We also have a Google+
Web Intense account.

1066
00:40:27.940 --> 00:40:28.950
So it's +Web Intents.

1067
00:40:28.950 --> 00:40:30.780
If you just want to follow it,
we'll be doing updates.

1068
00:40:30.780 --> 00:40:33.660
We'll be sharing these slides
at the end, as well.

1069
00:40:33.660 --> 00:40:36.360
But also, if we find any great
applications, tutorials, and

1070
00:40:36.360 --> 00:40:37.840
articles, we'll share that
through there as well.

1071
00:40:37.840 --> 00:40:39.770
Because we want you, as
developers, to be able to

1072
00:40:39.770 --> 00:40:41.990
understand what the rest of
the ecosystem is actually

1073
00:40:41.990 --> 00:40:44.200
building and doing through
this system.

1074
00:40:44.200 --> 00:40:46.310
Likewise, there's a high-level
discussion group.

1075
00:40:46.310 --> 00:40:51.250
It's not the specification
discussion group, if the

1076
00:40:51.250 --> 00:40:52.830
application developers
discussion group.

1077
00:40:52.830 --> 00:40:55.970
So if you want to know how to
integrate with Save, maybe to

1078
00:40:55.970 --> 00:40:58.130
save a Word document or
something similar, and you're

1079
00:40:58.130 --> 00:40:59.750
having troubles, and you want
to find out whether other

1080
00:40:59.750 --> 00:41:01.820
developers are doing something
similar, that's

1081
00:41:01.820 --> 00:41:02.620
the place to go.

1082
00:41:02.620 --> 00:41:05.510
Because that'll be application
developers inside that space.

1083
00:41:05.510 --> 00:41:07.460
And likewise, with every single
demo that we've seen

1084
00:41:07.460 --> 00:41:10.340
today, they're all open-source
and available on github.com

1085
00:41:10.340 --> 00:41:14.150
under /PaulKinlan/WebIntents,
so you can go and play.

1086
00:41:14.150 --> 00:41:15.020
We do have a code lab.

1087
00:41:15.020 --> 00:41:16.550
So I actually do want
to ask one question.

1088
00:41:16.550 --> 00:41:19.040
Is everyone excited
about the API?

1089
00:41:19.040 --> 00:41:19.425
[APPLAUSE]

1090
00:41:19.425 --> 00:41:21.180
JAMES HAWKINS: All
right, Sweet.

1091
00:41:21.180 --> 00:41:22.620
PAUL KINLAN: Cool.

1092
00:41:22.620 --> 00:41:23.300
Thank you.

1093
00:41:23.300 --> 00:41:25.570
So, we do have the code lab,
as James said before.

1094
00:41:25.570 --> 00:41:31.820
It's 1:45 to 3:45, code lab room
one, where Rachel Blum

1095
00:41:31.820 --> 00:41:33.880
and Greg Billock will actually
take you through the API if

1096
00:41:33.880 --> 00:41:35.340
you haven't got an
application.

1097
00:41:35.340 --> 00:41:37.600
However, if you do have web
applications that you want to

1098
00:41:37.600 --> 00:41:39.890
integrate with Intents, come
and speak to us, and we'll

1099
00:41:39.890 --> 00:41:42.000
show you how we think you should
integrate that into the

1100
00:41:42.000 --> 00:41:42.900
Intents system.

1101
00:41:42.900 --> 00:41:45.230
So we want to get this really
cool ecosystem going, and

1102
00:41:45.230 --> 00:41:47.210
we're there to help you guys.

1103
00:41:47.210 --> 00:41:49.950
We've got a whole lot of other
technical assistants.

1104
00:41:49.950 --> 00:41:53.315
And just before I finish, this
is a family thing for me.

1105
00:41:53.315 --> 00:41:54.620
It's my son's birthday today.

1106
00:41:54.620 --> 00:41:56.970
So I'd just like to say, happy
birthday Benjamin!

1107
00:41:56.970 --> 00:42:00.090
Sorry I couldn't be there,
I'll be there later.

1108
00:42:00.090 --> 00:42:02.536
And everyone's going to
sing Happy Birthday.

1109
00:42:02.536 --> 00:42:03.940
No?

1110
00:42:03.940 --> 00:42:05.790
OK, maybe later.

1111
00:42:05.790 --> 00:42:08.860
So anyway, thank you.

1112
00:42:08.860 --> 00:42:12.620
So we'd like to go forth
and intentify.

1113
00:42:12.620 --> 00:42:14.980
That's my joke, and I'm
very sorry for this.

1114
00:42:14.980 --> 00:42:17.090
Likewise, we have the Web
Intents Google+ account.

1115
00:42:17.090 --> 00:42:19.880
We are both on Google+ as
well, under our names.

1116
00:42:19.880 --> 00:42:22.540
If you have any questions,
comments, or feedback, we'd

1117
00:42:22.540 --> 00:42:23.950
just love to get as much
as you want now.

1118
00:42:23.950 --> 00:42:26.860
Either here, outside in the
hallway, or we'll be in the

1119
00:42:26.860 --> 00:42:29.370
office hours area as well
for a couple of hours.

1120
00:42:29.370 --> 00:42:30.620
Thank you very much.

1121
00:42:30.620 --> 00:42:36.110
1122
00:42:36.110 --> 00:42:37.365
JAMES HAWKINS: And we are
open for questions.

1123
00:42:37.365 --> 00:42:42.650
1124
00:42:42.650 --> 00:42:45.710
AUDIENCE: Is there a way to
whitelist or blacklist the

1125
00:42:45.710 --> 00:42:47.760
items that show up?

1126
00:42:47.760 --> 00:42:49.880
We make medical software,
and so, in the US, there

1127
00:42:49.880 --> 00:42:51.310
regulations about privacy.

1128
00:42:51.310 --> 00:42:56.180
So we couldn't just open it up
for any application to share.

1129
00:42:56.180 --> 00:42:58.710
But there are unknown number
of ones that would be

1130
00:42:58.710 --> 00:43:00.612
acceptable.

1131
00:43:00.612 --> 00:43:00.950
PAUL KINLAN: Yeah.

1132
00:43:00.950 --> 00:43:02.940
Not actually directly
inside Chrome or

1133
00:43:02.940 --> 00:43:05.400
the Chrome Web Store.

1134
00:43:05.400 --> 00:43:08.730
The actual list, the main list
that you see, are only

1135
00:43:08.730 --> 00:43:10.860
applications that you've
directly installed.

1136
00:43:10.860 --> 00:43:12.490
So we don't have a policy
at the moment inside

1137
00:43:12.490 --> 00:43:13.680
Chrome for Chrome OS.

1138
00:43:13.680 --> 00:43:15.170
JAMES HAWKINS: So you
could use explicit

1139
00:43:15.170 --> 00:43:16.200
intents for that purpose.

1140
00:43:16.200 --> 00:43:19.740
If you know the list in advance,
you can make use of

1141
00:43:19.740 --> 00:43:23.150
the Intents API in order to call
them directly, especially

1142
00:43:23.150 --> 00:43:24.330
if that list is small.

1143
00:43:24.330 --> 00:43:25.648
And suggestions as
well, right?

1144
00:43:25.648 --> 00:43:28.576
1145
00:43:28.576 --> 00:43:29.560
AUDIENCE: Hi.

1146
00:43:29.560 --> 00:43:30.550
One thing.

1147
00:43:30.550 --> 00:43:34.470
The list of intents that you
could call was basically the

1148
00:43:34.470 --> 00:43:36.440
list of applications that you
had installed that replied to

1149
00:43:36.440 --> 00:43:36.920
those intents.

1150
00:43:36.920 --> 00:43:39.650
But how would that go
for web intents?

1151
00:43:39.650 --> 00:43:41.650
For intents that are
on the website?

1152
00:43:41.650 --> 00:43:43.830
Is there some form of discovery,
like the sites you

1153
00:43:43.830 --> 00:43:44.870
visited that--

1154
00:43:44.870 --> 00:43:45.250
JAMES HAWKINS: Exactly.

1155
00:43:45.250 --> 00:43:46.390
That's exactly what it is.

1156
00:43:46.390 --> 00:43:49.690
So we feel that the user
visiting a site is a very

1157
00:43:49.690 --> 00:43:51.090
strong signal.

1158
00:43:51.090 --> 00:43:53.430
One, of many, that they
want to have this

1159
00:43:53.430 --> 00:43:54.660
available as a service.

1160
00:43:54.660 --> 00:43:56.540
And we also think we're going
to have to be smart about

1161
00:43:56.540 --> 00:43:59.410
heuristics to say, what
services does a

1162
00:43:59.410 --> 00:44:00.200
user want to see?

1163
00:44:00.200 --> 00:44:01.210
So you're exactly right.

1164
00:44:01.210 --> 00:44:03.530
And as the user's browsing
around, there could be a

1165
00:44:03.530 --> 00:44:06.710
problem where they just
aggregate all these services,

1166
00:44:06.710 --> 00:44:08.910
and they don't care about
most of them.

1167
00:44:08.910 --> 00:44:10.980
We think it's really up to the
browser, and we're going to

1168
00:44:10.980 --> 00:44:12.930
try to do the job of this
to make it a great user

1169
00:44:12.930 --> 00:44:17.180
experience and to understand
exactly what they want to see.

1170
00:44:17.180 --> 00:44:20.580
We also have the malware
database, the safe browsing

1171
00:44:20.580 --> 00:44:23.980
database, that we can use to
say, this is spam, this

1172
00:44:23.980 --> 00:44:25.760
service should definitely
not be seen.

1173
00:44:25.760 --> 00:44:26.200
AUDIENCE: All right.

1174
00:44:26.200 --> 00:44:28.204
Thanks.

1175
00:44:28.204 --> 00:44:28.690
AUDIENCE: Hi.

1176
00:44:28.690 --> 00:44:32.780
I'm kind of new for this field,

1177
00:44:32.780 --> 00:44:34.210
and I have two questions.

1178
00:44:34.210 --> 00:44:40.480
One is, can you show a couple
samples of how the UI looks

1179
00:44:40.480 --> 00:44:43.990
like for the explicit
and suggest intents?

1180
00:44:43.990 --> 00:44:45.450
JAMES HAWKINS: So I can talk
about explicit intents.

1181
00:44:45.450 --> 00:44:49.670
For explicit intents, the
picker does not show up.

1182
00:44:49.670 --> 00:44:51.250
It will go directly
to the site in the

1183
00:44:51.250 --> 00:44:52.300
disposition that they want.

1184
00:44:52.300 --> 00:44:54.750
So if it's Window, it will
open in the new tab.

1185
00:44:54.750 --> 00:44:57.620
If it's Inline, will show--

1186
00:44:57.620 --> 00:44:59.570
you saw the service pull down,
and it will just be

1187
00:44:59.570 --> 00:45:01.184
displayed in there.

1188
00:45:01.184 --> 00:45:02.540
AUDIENCE: OK.

1189
00:45:02.540 --> 00:45:09.130
The other one is so are there
any other objects which can be

1190
00:45:09.130 --> 00:45:12.100
used for to startActivity
function?

1191
00:45:12.100 --> 00:45:13.000
JAMES HAWKINS: For Share?

1192
00:45:13.000 --> 00:45:15.230
AUDIENCE: For the
startActivity.

1193
00:45:15.230 --> 00:45:15.920
JAMES HAWKINS: Oh,
startActivity.

1194
00:45:15.920 --> 00:45:17.400
AUDIENCE: Yeah

1195
00:45:17.400 --> 00:45:18.990
JAMES HAWKINS: It's just the
intent object and the

1196
00:45:18.990 --> 00:45:21.070
parameters as specified
in the API.

1197
00:45:21.070 --> 00:45:23.210
AUDIENCE: Because the name
is it more generic.

1198
00:45:23.210 --> 00:45:24.670
StartActivity.

1199
00:45:24.670 --> 00:45:24.890
JAMES HAWKINS: Right.

1200
00:45:24.890 --> 00:45:27.800
So the name actually came from
Android Intents, which Web

1201
00:45:27.800 --> 00:45:28.960
Intents is based off of.

1202
00:45:28.960 --> 00:45:32.370
And we felt it was important
for a developer mind share

1203
00:45:32.370 --> 00:45:35.410
that we have an entire ecosystem
of apps built on

1204
00:45:35.410 --> 00:45:39.170
Android Intents, and that's a
large developer base of people

1205
00:45:39.170 --> 00:45:40.280
that know Intents.

1206
00:45:40.280 --> 00:45:44.300
So as we were developing this
API, we said, let's pick and

1207
00:45:44.300 --> 00:45:47.410
pull pieces that we think are
important from Android Intents

1208
00:45:47.410 --> 00:45:48.730
that people will be used to.

1209
00:45:48.730 --> 00:45:52.230
The name is almost kind of--
it's not arbitrary, but there

1210
00:45:52.230 --> 00:45:54.030
are multiple things we
could have picked.

1211
00:45:54.030 --> 00:45:54.480
AUDIENCE: OK.

1212
00:45:54.480 --> 00:45:57.130
Thanks a lot.

1213
00:45:57.130 --> 00:46:03.140
AUDIENCE: So on Android Intents,
I find that sometimes

1214
00:46:03.140 --> 00:46:05.820
I find the list is so long,
because the action is so

1215
00:46:05.820 --> 00:46:08.850
generic, like Share, that it's
cumbersome for the user.

1216
00:46:08.850 --> 00:46:12.980
So going back, kind of, to
heuristics, do you have the

1217
00:46:12.980 --> 00:46:16.260
intent to let the user select
a default intent for

1218
00:46:16.260 --> 00:46:17.490
a given MIME type?

1219
00:46:17.490 --> 00:46:17.700
JAMES HAWKINS: Yeah.

1220
00:46:17.700 --> 00:46:20.830
That's one thing that we are
diverging from Android Intents

1221
00:46:20.830 --> 00:46:23.960
as it stands now, which is
to have smart defaulting.

1222
00:46:23.960 --> 00:46:26.860
And we're working out the
kinks on that now.

1223
00:46:26.860 --> 00:46:28.740
Actually, I'm going to point
and embarrass her.

1224
00:46:28.740 --> 00:46:30.980
Rachel is actually owning
that functionality.

1225
00:46:30.980 --> 00:46:32.513
The red head down here,
you'll see here her at

1226
00:46:32.513 --> 00:46:33.810
the code lab later.

1227
00:46:33.810 --> 00:46:34.190
RACHEL BLUM: Sorry.

1228
00:46:34.190 --> 00:46:35.390
JAMES HAWKINS: No, no,
no, no apologies.

1229
00:46:35.390 --> 00:46:36.120
We're working on it.

1230
00:46:36.120 --> 00:46:38.090
So it should be out
in probably maybe

1231
00:46:38.090 --> 00:46:39.200
our next stable release.

1232
00:46:39.200 --> 00:46:39.440
AUDIENCE: Cool.

1233
00:46:39.440 --> 00:46:42.320
And the stuff you showed us
today, is that from Canary?

1234
00:46:42.320 --> 00:46:43.240
PAUL KINLAN: Stable.

1235
00:46:43.240 --> 00:46:46.100
I was on Canary, but most of the
API's already in stable.

1236
00:46:46.100 --> 00:46:47.500
JAMES HAWKINS: It looks
like on stable, the

1237
00:46:47.500 --> 00:46:48.460
latest stable release.

1238
00:46:48.460 --> 00:46:50.750
AUDIENCE: Great, thanks.

1239
00:46:50.750 --> 00:46:53.160
AUDIENCE: Do you have any
prognosis on when we will be

1240
00:46:53.160 --> 00:46:57.140
able to use Web Intense
in major browsers?

1241
00:46:57.140 --> 00:46:58.120
JAMES HAWKINS: It's
difficult to say.

1242
00:46:58.120 --> 00:47:01.360
So, we're working with all the
other browser vendors through

1243
00:47:01.360 --> 00:47:04.020
the W3C in the standardization
process.

1244
00:47:04.020 --> 00:47:07.760
And that conversation is very
vibrant, lots communication on

1245
00:47:07.760 --> 00:47:11.910
the public Web Intense mailing
list, which is where all this

1246
00:47:11.910 --> 00:47:14.020
is happening on the W3C.

1247
00:47:14.020 --> 00:47:17.160
So I think, in order to get a
better feel for that, a gist

1248
00:47:17.160 --> 00:47:19.310
of it, I would probably
join that mailing

1249
00:47:19.310 --> 00:47:21.350
list and see for yourself.

1250
00:47:21.350 --> 00:47:23.090
PAUL KINLAN: We also do have a
JavaScript shim, which at the

1251
00:47:23.090 --> 00:47:26.400
moment is binary-compatible,
for other browsers.

1252
00:47:26.400 --> 00:47:29.940
For instance, Mozilla, Firefox,
Internet Explorer 8

1253
00:47:29.940 --> 00:47:31.760
and upwards, and
Opera as well.

1254
00:47:31.760 --> 00:47:35.350
1255
00:47:35.350 --> 00:47:37.350
We don't want the shim to exist,
ideally we want better

1256
00:47:37.350 --> 00:47:39.380
solutions everywhere else.

1257
00:47:39.380 --> 00:47:41.512
But we do have a shim to
replicate the functionality at

1258
00:47:41.512 --> 00:47:44.050
the moment in other browsers.

1259
00:47:44.050 --> 00:47:46.620
AUDIENCE: Thank you.

1260
00:47:46.620 --> 00:47:49.880
AUDIENCE: Will we see Web
Intents offered up by the

1261
00:47:49.880 --> 00:47:52.840
Android Chrome browser
as Android Intents?

1262
00:47:52.840 --> 00:47:53.440
JAMES HAWKINS: That's
a good question.

1263
00:47:53.440 --> 00:47:55.320
We absolutely want to do that.

1264
00:47:55.320 --> 00:47:57.450
It's much further down
on the road map.

1265
00:47:57.450 --> 00:47:59.980
It's a very tricky
problem to solve.

1266
00:47:59.980 --> 00:48:05.670
It requires work on both the
browser side and major

1267
00:48:05.670 --> 00:48:07.580
additions to the Android
side as well.

1268
00:48:07.580 --> 00:48:09.590
So we're working on
those problems.

1269
00:48:09.590 --> 00:48:11.620
It probably won't be out
for quite while, on

1270
00:48:11.620 --> 00:48:12.870
the order of months.

1271
00:48:12.870 --> 00:48:15.660
1272
00:48:15.660 --> 00:48:15.960
AUDIENCE: Hello.

1273
00:48:15.960 --> 00:48:19.180
Is it possible to customize
somehow to picking dialogue of

1274
00:48:19.180 --> 00:48:20.040
the applications?

1275
00:48:20.040 --> 00:48:22.610
Because if I have my application
and I have some

1276
00:48:22.610 --> 00:48:28.290
UI, I don't want to have
this now ugly dialogue.

1277
00:48:28.290 --> 00:48:28.720
JAMES HAWKINS: Yes.

1278
00:48:28.720 --> 00:48:31.880
Well, I'll answer that
part of it first.

1279
00:48:31.880 --> 00:48:33.260
We're trying to make
it not ugly.

1280
00:48:33.260 --> 00:48:36.710
But we've always had this idea
that we can add an extension

1281
00:48:36.710 --> 00:48:41.960
API for an extension to
manipulate how the picker may

1282
00:48:41.960 --> 00:48:45.840
look or all the elements
on the picker.

1283
00:48:45.840 --> 00:48:47.450
That's a tricky problem
to solve as well.

1284
00:48:47.450 --> 00:48:50.770
We've got to make sure it's
secure, that the extension's

1285
00:48:50.770 --> 00:48:53.050
not mucking with things
in a bad way.

1286
00:48:53.050 --> 00:48:54.120
But we want to do that.

1287
00:48:54.120 --> 00:48:56.139
That is also longer down
on the road map.

1288
00:48:56.139 --> 00:49:02.090
1289
00:49:02.090 --> 00:49:05.250
AUDIENCE: Will there be
some kind of API to

1290
00:49:05.250 --> 00:49:08.280
programmatically get a
list of [INAUDIBLE]

1291
00:49:08.280 --> 00:49:10.790
for given intents,
like an Android?

1292
00:49:10.790 --> 00:49:13.670
JAMES HAWKINS: Not
for the web.

1293
00:49:13.670 --> 00:49:16.490
Chrome extensions and Chrome
apps obviously have elevated

1294
00:49:16.490 --> 00:49:18.980
permissions through
that system.

1295
00:49:18.980 --> 00:49:21.160
That could be something that
we could expose there.

1296
00:49:21.160 --> 00:49:23.730
But we definitely would not
allow that for the web for

1297
00:49:23.730 --> 00:49:24.980
issues of fingerprinting.

1298
00:49:24.980 --> 00:49:27.130
1299
00:49:27.130 --> 00:49:30.150
AUDIENCE: Is there anything
baked in for nice backwards

1300
00:49:30.150 --> 00:49:33.410
compatibility or
downgradability, or is that on

1301
00:49:33.410 --> 00:49:35.390
us to figure out?

1302
00:49:35.390 --> 00:49:36.770
JAMES HAWKINS: As far as?

1303
00:49:36.770 --> 00:49:40.450
AUDIENCE: Well for file picker,
I want to provide the

1304
00:49:40.450 --> 00:49:45.870
Web Intent capability in my
client, but if they're on a

1305
00:49:45.870 --> 00:49:48.570
browser that doesn't support it
or whatever, is it just on

1306
00:49:48.570 --> 00:49:52.190
me to detect and
build that out?

1307
00:49:52.190 --> 00:49:54.435
PAUL KINLAN: This is one area
that we were talking about and

1308
00:49:54.435 --> 00:49:56.840
we still need to go through the
specification groups, is

1309
00:49:56.840 --> 00:49:58.680
how could we potentially
manipulate some of the

1310
00:49:58.680 --> 00:50:02.870
existing elements in HTML, like
file pick, so that you

1311
00:50:02.870 --> 00:50:04.970
could just say, I'm going to
pull a file in from the cloud

1312
00:50:04.970 --> 00:50:06.170
and then it goes that way.

1313
00:50:06.170 --> 00:50:08.100
I don't see it as
particularly--

1314
00:50:08.100 --> 00:50:10.260
correct me if I'm wrong-- but
I don't see it as trying to

1315
00:50:10.260 --> 00:50:13.920
make the existing API downgrade
to an existing pick.

1316
00:50:13.920 --> 00:50:16.680
You'd have a pick that's
optimized and enhanced with

1317
00:50:16.680 --> 00:50:18.730
the Intents service,
if that make sense.

1318
00:50:18.730 --> 00:50:20.790
JAMES HAWKINS: So there is
one thing you can do.

1319
00:50:20.790 --> 00:50:23.130
You can check for
the existence of

1320
00:50:23.130 --> 00:50:23.800
AUDIENCE: Webkit [INAUDIBLE].

1321
00:50:23.800 --> 00:50:24.280
JAMES HAWKINS: --startActivity.

1322
00:50:24.280 --> 00:50:25.870
Yeah, webkit startActivity.

1323
00:50:25.870 --> 00:50:28.610
If it's not there, then the
API's not there for whatever

1324
00:50:28.610 --> 00:50:30.885
browser is there.

1325
00:50:30.885 --> 00:50:31.950
PAUL KINLAN: And modernizer's
got to check in

1326
00:50:31.950 --> 00:50:32.570
for that, as well.

1327
00:50:32.570 --> 00:50:34.240
JAMES HAWKINS: Modernizer,
yeah.

1328
00:50:34.240 --> 00:50:37.240
There's also things that we're
adding to the browser.

1329
00:50:37.240 --> 00:50:40.330
We're trying to sort of
bootstrap the ecosystem in a

1330
00:50:40.330 --> 00:50:42.960
way by having the browser
be a client.

1331
00:50:42.960 --> 00:50:48.210
So for picking files, we could
say, show the file picker so

1332
00:50:48.210 --> 00:50:50.150
you can pick something from
your file system, which is

1333
00:50:50.150 --> 00:50:51.360
provided by the browser.

1334
00:50:51.360 --> 00:50:53.740
The user doesn't know that
it's not a service.

1335
00:50:53.740 --> 00:50:55.880
It just works for them, right?

1336
00:50:55.880 --> 00:50:59.310
So we're trying to find more
points of integration in the

1337
00:50:59.310 --> 00:51:00.870
browser for it to be a client.

1338
00:51:00.870 --> 00:51:01.447
AUDIENCE: Cool, cool.

1339
00:51:01.447 --> 00:51:02.697
OK, thank you.

1340
00:51:02.697 --> 00:51:06.380
1341
00:51:06.380 --> 00:51:09.810
AUDIENCE: Is it possible to
do metrics collection?

1342
00:51:09.810 --> 00:51:15.200
Just figure out what intents
are more popular, or--

1343
00:51:15.200 --> 00:51:18.420
JAMES HAWKINS: We are actually
adding metrics through our UMA

1344
00:51:18.420 --> 00:51:21.700
API, our User Metrics
API in Chrome.

1345
00:51:21.700 --> 00:51:25.730
We're not exactly sure yet, we
haven't quite designed exactly

1346
00:51:25.730 --> 00:51:27.920
what type of data we're
trying to get back.

1347
00:51:27.920 --> 00:51:29.940
Obviously, bucketing
on the major

1348
00:51:29.940 --> 00:51:31.940
action types is important.

1349
00:51:31.940 --> 00:51:35.440
But our current API is limited
in that we wouldn't be able to

1350
00:51:35.440 --> 00:51:37.420
create buckets for things
we don't know about.

1351
00:51:37.420 --> 00:51:39.180
So we're trying to think
through that.

1352
00:51:39.180 --> 00:51:43.790
Let's see, maybe some service
that example.com created, the

1353
00:51:43.790 --> 00:51:45.910
functionality that they create
is really popular.

1354
00:51:45.910 --> 00:51:47.332
We'd actually like to
know about that.

1355
00:51:47.332 --> 00:51:47.714
AUDIENCE: Yeah.

1356
00:51:47.714 --> 00:51:48.096
OK.

1357
00:51:48.096 --> 00:51:48.910
Thank you.

1358
00:51:48.910 --> 00:51:50.920
PAUL KINLAN: The other side of
that is the actual Web Store

1359
00:51:50.920 --> 00:51:55.980
itself, it index and archives
every application that's got

1360
00:51:55.980 --> 00:51:59.410
its functionality declared
by the manifest.

1361
00:51:59.410 --> 00:52:02.220
And if you click on, there's a
little link at the bottom of

1362
00:52:02.220 --> 00:52:03.640
the intent picker where
you can click

1363
00:52:03.640 --> 00:52:04.610
to find more services.

1364
00:52:04.610 --> 00:52:08.230
You get a good education about
the usage and availability of

1365
00:52:08.230 --> 00:52:11.030
support services at least for
those types of actions.

1366
00:52:11.030 --> 00:52:13.270
AUDIENCE: Thank you.

1367
00:52:13.270 --> 00:52:16.600
AUDIENCE: So, related to that,
that would be where I, as a

1368
00:52:16.600 --> 00:52:19.350
developer, discover which other
applications are web

1369
00:52:19.350 --> 00:52:20.970
content enabled?

1370
00:52:20.970 --> 00:52:21.620
JAMES HAWKINS: Right.

1371
00:52:21.620 --> 00:52:24.095
That's Find More Services
link that you'll see.

1372
00:52:24.095 --> 00:52:24.370
Yeah.

1373
00:52:24.370 --> 00:52:26.820
And we show that whenever there
are more services than

1374
00:52:26.820 --> 00:52:28.740
we show in the picker.

1375
00:52:28.740 --> 00:52:31.270
AUDIENCE: But if I as the
developer wanted, for example,

1376
00:52:31.270 --> 00:52:34.200
to integrate with Google
Calendar or other services

1377
00:52:34.200 --> 00:52:36.890
that might or might not
be Web Intent enabled.

1378
00:52:36.890 --> 00:52:38.800
Is there an easy resource
for me to access

1379
00:52:38.800 --> 00:52:41.130
to see which services--

1380
00:52:41.130 --> 00:52:42.990
PAUL KINLAN: Right now it's
through the Chrome Web Store.

1381
00:52:42.990 --> 00:52:44.560
Through that area.

1382
00:52:44.560 --> 00:52:46.900
One of my goals with the Web
Intents documentation was to

1383
00:52:46.900 --> 00:52:50.830
be able to, if we have the
index, the intent tag, is that

1384
00:52:50.830 --> 00:52:52.230
we can do queries on the
web, essentially.

1385
00:52:52.230 --> 00:52:54.230
To then go, well these are the
list of service that we know

1386
00:52:54.230 --> 00:52:56.700
that support this, and
have it shown in the

1387
00:52:56.700 --> 00:52:58.480
documentation up front.

1388
00:52:58.480 --> 00:52:59.540
We're way away from that
for the moment.

1389
00:52:59.540 --> 00:53:01.680
The Chrome Web Store is
the way to go for

1390
00:53:01.680 --> 00:53:03.080
understanding what--

1391
00:53:03.080 --> 00:53:05.560
JAMES HAWKINS: Yeah, I mean
you can imagine this.

1392
00:53:05.560 --> 00:53:08.060
Intent is really important for
the web, and we're here as

1393
00:53:08.060 --> 00:53:10.830
citizens of the web for Intents,
but we also work for

1394
00:53:10.830 --> 00:53:11.420
a search engine.

1395
00:53:11.420 --> 00:53:12.600
A major search engine.

1396
00:53:12.600 --> 00:53:15.640
So once the Intent tag is out
there, we have this ability to

1397
00:53:15.640 --> 00:53:18.410
crawl the web and say, who
actually supports Intents?

1398
00:53:18.410 --> 00:53:21.280
So I don't know if it's
something that we'll add to

1399
00:53:21.280 --> 00:53:23.810
search, or whether some
other crawl mechanism.

1400
00:53:23.810 --> 00:53:27.600
But it would be awesome if we
had a database of sites that

1401
00:53:27.600 --> 00:53:29.740
support Intents that
was updated

1402
00:53:29.740 --> 00:53:31.060
automatically, et cetera.

1403
00:53:31.060 --> 00:53:33.150
And you could go to their
sites and see what their

1404
00:53:33.150 --> 00:53:34.450
actions actually are.

1405
00:53:34.450 --> 00:53:34.870
AUDIENCE: Cool.

1406
00:53:34.870 --> 00:53:36.870
Thank you.

1407
00:53:36.870 --> 00:53:39.640
AUDIENCE: I think there is
currently a limitation in the

1408
00:53:39.640 --> 00:53:40.950
way actions are triggered.

1409
00:53:40.950 --> 00:53:43.780
It only is by user movement--

1410
00:53:43.780 --> 00:53:44.410
JAMES HAWKINS: User gesture.

1411
00:53:44.410 --> 00:53:46.160
AUDIENCE: Yeah.

1412
00:53:46.160 --> 00:53:48.860
But that leads to a problem
where, currently, you cannot

1413
00:53:48.860 --> 00:53:52.540
have them working with Chrome
extension that are actually

1414
00:53:52.540 --> 00:53:54.650
contextual menus or
just patterns.

1415
00:53:54.650 --> 00:53:57.510
Because even though they are
triggered by user action, the

1416
00:53:57.510 --> 00:54:02.070
window showing up is actually
not technically a user action.

1417
00:54:02.070 --> 00:54:04.730
Is it something that's
going to be sold, or?

1418
00:54:04.730 --> 00:54:05.020
JAMES HAWKINS: A bug!

1419
00:54:05.020 --> 00:54:06.270
You found a bug.

1420
00:54:06.270 --> 00:54:07.740
I thought we had zero.

1421
00:54:07.740 --> 00:54:09.010
PAUL KINLAN: It's exists.

1422
00:54:09.010 --> 00:54:10.710
The bug is open and
tracked by Greg.

1423
00:54:10.710 --> 00:54:13.630
We call it Bug Greg.

1424
00:54:13.630 --> 00:54:15.070
It's a thing I want
to as well.

1425
00:54:15.070 --> 00:54:16.520
It'd be nice.

1426
00:54:16.520 --> 00:54:18.520
AUDIENCE: Is the goal of
WebIntents.org to be sort of

1427
00:54:18.520 --> 00:54:21.920
authoritative source about all
the intents that are available

1428
00:54:21.920 --> 00:54:24.690
out there, and is there
a submission process.

1429
00:54:24.690 --> 00:54:26.810
What's that about?

1430
00:54:26.810 --> 00:54:27.230
PAUL KINLAN: Yeah.

1431
00:54:27.230 --> 00:54:29.990
So the idea behind
WebIntents.org is, when we

1432
00:54:29.990 --> 00:54:31.600
started this off before we were
going to go in through

1433
00:54:31.600 --> 00:54:35.330
the W3C standardization,
was it's not complete

1434
00:54:35.330 --> 00:54:37.290
authoritative, exhaustive list
of every single possible

1435
00:54:37.290 --> 00:54:38.660
intent that's out on the web.

1436
00:54:38.660 --> 00:54:41.240
It's just a very core set of
use cases that we wanted to

1437
00:54:41.240 --> 00:54:42.890
try and solve right now.

1438
00:54:42.890 --> 00:54:45.780
And as we saw more use cases
come in, we might take you

1439
00:54:45.780 --> 00:54:48.430
into the stewardship of
WebIntents.org and have that

1440
00:54:48.430 --> 00:54:50.290
as the de facto.

1441
00:54:50.290 --> 00:54:52.650
However, it's quite early
on this whole ecosystem.

1442
00:54:52.650 --> 00:54:55.330
So we might get a payment
solution, provided that

1443
00:54:55.330 --> 00:54:56.780
there's a pay intent,
for instance.

1444
00:54:56.780 --> 00:54:59.350
And that becomes the de facto
standard that everyone uses

1445
00:54:59.350 --> 00:55:00.570
inside that URL.

1446
00:55:00.570 --> 00:55:03.830
And that never comes under the
stewardship of WebIntents.org.

1447
00:55:03.830 --> 00:55:06.220
It's under their stewardship
to maintain a standard and

1448
00:55:06.220 --> 00:55:06.810
everything.

1449
00:55:06.810 --> 00:55:12.410
So I didn't personally want it
to be authoritative and index,

1450
00:55:12.410 --> 00:55:14.940
knock out every single thing on
the web and every different

1451
00:55:14.940 --> 00:55:18.520
type of intent, but it depends
on how the standardization

1452
00:55:18.520 --> 00:55:19.000
goes as well.

1453
00:55:19.000 --> 00:55:22.060
Because the W3C we're talking
about maybe you should

1454
00:55:22.060 --> 00:55:25.060
formalize some of the actual
core intents right now.

1455
00:55:25.060 --> 00:55:27.540
Get that whole process underway
through that group.

1456
00:55:27.540 --> 00:55:28.910
AUDIENCE: So is there as
submission process currently

1457
00:55:28.910 --> 00:55:30.620
in WebIntents.org?

1458
00:55:30.620 --> 00:55:33.300
PAUL KINLAN: There is a
contributor's guide, where we

1459
00:55:33.300 --> 00:55:35.670
basically say, go to this
discussion group, we'll talk

1460
00:55:35.670 --> 00:55:37.790
about the different types
of use case that you

1461
00:55:37.790 --> 00:55:38.930
want to try and solve.

1462
00:55:38.930 --> 00:55:41.100
And if we have at least one
client, potentially, and one

1463
00:55:41.100 --> 00:55:42.920
service that are going to be
able to do it and handle it,

1464
00:55:42.920 --> 00:55:45.690
then we can probably try to
standardize it a little bit

1465
00:55:45.690 --> 00:55:48.560
more inside of WebIntents.org
But again, we haven't done

1466
00:55:48.560 --> 00:55:51.770
that yet, because no one's
come to us with an idea

1467
00:55:51.770 --> 00:55:54.820
outside of use case we've
had originally.

1468
00:55:54.820 --> 00:55:55.650
JAMES HAWKINS: We're open.

1469
00:55:55.650 --> 00:55:57.670
And we'll see how it goes from
there, I think, is the answer.

1470
00:55:57.670 --> 00:55:59.530
JAMES HAWKINS: So there's
a site right now called

1471
00:55:59.530 --> 00:56:02.780
OpenIntents.org, which predates
Web Intents, and it's

1472
00:56:02.780 --> 00:56:04.220
actually for Android Intents.

1473
00:56:04.220 --> 00:56:05.900
And they have this database
on their site

1474
00:56:05.900 --> 00:56:07.160
which is really awesome.

1475
00:56:07.160 --> 00:56:09.590
It was one of the big things,
when we started Web Intents, I

1476
00:56:09.590 --> 00:56:11.240
was like, aw, man, this
is really cool.

1477
00:56:11.240 --> 00:56:13.830
We want services to come up with
all these functionalities

1478
00:56:13.830 --> 00:56:15.670
that we could never
even dream of.

1479
00:56:15.670 --> 00:56:17.960
And have a way that developers
can find them.

1480
00:56:17.960 --> 00:56:22.010
So I think WebIntents.org may
eventually end up hosting some

1481
00:56:22.010 --> 00:56:25.590
database that lists these, and
there's an easy submission

1482
00:56:25.590 --> 00:56:27.850
process that's very low
cost for developers

1483
00:56:27.850 --> 00:56:29.140
to add their actions.

1484
00:56:29.140 --> 00:56:33.760
I mean, it doesn't really hurt
anyone for this database to

1485
00:56:33.760 --> 00:56:36.510
exist, as long as you have ways
to support and prioritize

1486
00:56:36.510 --> 00:56:40.710
and expose the best services,
or the best actions.

1487
00:56:40.710 --> 00:56:41.470
AUDIENCE: Cool.

1488
00:56:41.470 --> 00:56:44.900
Are microformats a good
candidate for a type of thing

1489
00:56:44.900 --> 00:56:46.710
to use on Web Intents?

1490
00:56:46.710 --> 00:56:47.290
JAMES HAWKINS: Absolutely

1491
00:56:47.290 --> 00:56:49.100
AUDIENCE: Cool.

1492
00:56:49.100 --> 00:56:50.780
PAUL KINLAN: You just have to
get the type right, and then

1493
00:56:50.780 --> 00:56:52.710
as long as the two services
agree that they can transport

1494
00:56:52.710 --> 00:56:55.205
the same data, you could pass
a blob of HTML through.

1495
00:56:55.205 --> 00:56:58.410
And then both services
could parse it out.

1496
00:56:58.410 --> 00:56:58.830
AUDIENCE: Hi.

1497
00:56:58.830 --> 00:57:00.740
I have another question.

1498
00:57:00.740 --> 00:57:03.700
Is there a plan at some point
to use Web Intents

1499
00:57:03.700 --> 00:57:05.630
for the Chrome UI?

1500
00:57:05.630 --> 00:57:07.000
For example, the Print
button, could it

1501
00:57:07.000 --> 00:57:08.810
trigger a Print intent?

1502
00:57:08.810 --> 00:57:10.750
The star to favorite site
could be used--

1503
00:57:10.750 --> 00:57:11.110
JAMES HAWKINS: Absolutely.

1504
00:57:11.110 --> 00:57:11.420
Yep.

1505
00:57:11.420 --> 00:57:13.940
So that was what I was referring
to earlier, about

1506
00:57:13.940 --> 00:57:15.040
trying to find integration
points.

1507
00:57:15.040 --> 00:57:18.530
Another one that we could do
very easily is, say, adding

1508
00:57:18.530 --> 00:57:19.630
things to context menus.

1509
00:57:19.630 --> 00:57:22.110
So, if you know the context,
you know exactly

1510
00:57:22.110 --> 00:57:22.660
what you can do.

1511
00:57:22.660 --> 00:57:24.740
Say you right click on an image,
there are a lot of

1512
00:57:24.740 --> 00:57:25.760
things you can do with images.

1513
00:57:25.760 --> 00:57:27.770
And we can be smart about that
and say, all right, I want to

1514
00:57:27.770 --> 00:57:29.790
share this image, I want
to edit this image,

1515
00:57:29.790 --> 00:57:31.260
or save this image.

1516
00:57:31.260 --> 00:57:33.250
And not just your hard drive,
obviously, but to

1517
00:57:33.250 --> 00:57:33.920
the cloud as well.

1518
00:57:33.920 --> 00:57:36.630
So yeah, we want to add these
integration points.

1519
00:57:36.630 --> 00:57:37.880
AUDIENCE: That'd be amazing.

1520
00:57:37.880 --> 00:57:40.090
1521
00:57:40.090 --> 00:57:42.280
JAMES HAWKINS: Anybody else?

1522
00:57:42.280 --> 00:57:43.800
All right.

1523
00:57:43.800 --> 00:57:45.100
Thank you very much

1524
00:57:45.100 --> 00:57:46.350
PAUL KINLAN: Thank you.

1525
00:57:46.350 --> 00:57:47.233
WEBVTT

1
00:00:00.429 --> 00:00:05.069
&gt;&gt;Colton McAnlis: I'm here today. This is
fantastic. Hello, everyone!

2
00:00:05.069 --> 00:00:10.140
Try that again.
Oh, this is Google I/O. Hello everyone!

3
00:00:10.140 --> 00:00:12.300
&gt;&gt;&gt; Hello!
&gt;&gt;Colton McAnlis: There it is.

4
00:00:12.300 --> 00:00:16.680
Now, I don't know if you guys know this, hopefully
you do, this session is being live recorded

5
00:00:16.680 --> 00:00:20.369
and broadcasted on the intertubes right now.
Hopefully we won't clog them up with all of

6
00:00:20.369 --> 00:00:25.030
our awesomeness.
A couple of months ago I said, Hey, I want

7
00:00:25.030 --> 00:00:29.970
to talk about this HTML5 game and to demo
it, and actually I want to have some skydivers

8
00:00:29.970 --> 00:00:33.550
jump down, come in and give a talk. And they
were like, Sorry, we can't do that. We did

9
00:00:33.550 --> 00:00:39.510
that for the keynote. Next year we'll do skydiving.
Anyway, my name is Colt McAnlis and I'm a

10
00:00:39.510 --> 00:00:44.600
developer advocate here working at Google,
focusing on Chrome games.

11
00:00:44.600 --> 00:00:50.430
And today is really cool because for you guys
this is Google I/O and you get a lot of information,

12
00:00:50.430 --> 00:00:56.219
but for us Googlers this is a holiday, this
is a magical event for us because all year

13
00:00:56.219 --> 00:01:01.640
long we toil and we struggle and we write
tons of code and throw tons of code away and

14
00:01:01.640 --> 00:01:07.860
we spend all of our time making products that
we can't talk to any of you about. Except

15
00:01:07.860 --> 00:01:11.360
today.
And today is a fantastic day because I get

16
00:01:11.360 --> 00:01:15.979
to talk about a project myself and a core
group of people have been working on, and

17
00:01:15.979 --> 00:01:20.490
that's a game called GRITS. And GRITS, first
off it has robots, pretty cool. Everybody

18
00:01:20.490 --> 00:01:22.210
love robots.
Hands up for robots.

19
00:01:22.210 --> 00:01:25.990
[Applause]
Love this. Yes, I think there should be more

20
00:01:25.990 --> 00:01:29.400
robots on the internet. That's my personal
opinion.

21
00:01:29.400 --> 00:01:33.880
Let's talk about where GRITS started.
GRITS is player versus player game entirely

22
00:01:33.880 --> 00:01:37.200
written in HTML5.
A couple of months ago I gave a great talk

23
00:01:37.200 --> 00:01:40.860
-- I thought it was a great talk. I didn't
get promoted afterwards, but it still went

24
00:01:40.860 --> 00:01:46.229
over quite well, best practices in developing
an HTML5 game. The talk effectively highlighted

25
00:01:46.229 --> 00:01:50.780
issues that game developers were running into
in developing HTML5 and kind of how to overcome

26
00:01:50.780 --> 00:01:53.229
them.
Someone came up to me and said "This is a

27
00:01:53.229 --> 00:01:58.210
great talk. Where's the source code?"
Dang it! You got me.

28
00:01:58.210 --> 00:02:01.700
We just talked about ideas.
So at that point we decided, Hey, let's actually

29
00:02:01.700 --> 00:02:06.439
write a full player versus player game in
HTML5, open source it and bring the results

30
00:02:06.439 --> 00:02:10.099
to Google I/O. And that's what we're here
talking about today.

31
00:02:10.099 --> 00:02:14.769
So in order to make sure that a bunch of Googlers
didn't run off into the distance and do something

32
00:02:14.769 --> 00:02:19.029
crazy, our managers made us specify some bounding
parameters on what kind of video game we were

33
00:02:19.029 --> 00:02:21.480
going to make.
So we wanted to make sure it was multiplayer

34
00:02:21.480 --> 00:02:25.819
only. We're gonna be a small group with a
small a lot of time. We didn't have artists,

35
00:02:25.819 --> 00:02:30.549
we don't have designers, we don't have the
ability to create a 56-hour expression of

36
00:02:30.549 --> 00:02:36.809
our inner angst by you riding a horse and
slaying a dragon. Let's make it multiplayer

37
00:02:36.809 --> 00:02:41.299
only where robots shoot robots in the face.
Super easy, right?

38
00:02:41.299 --> 00:02:46.900
Second, let's leverage Google technologies.
As you guys have been hearing today already

39
00:02:46.900 --> 00:02:51.279
-- because you're here at Google I/O you are
probably already very aware that Google provides

40
00:02:51.279 --> 00:02:56.189
a suite of powerful technologies. And a lot
of game developers out there actually don't

41
00:02:56.189 --> 00:02:59.730
know how to use a lot of the Google technologies
and translate it into the game development

42
00:02:59.730 --> 00:03:03.099
process.
So for GRITS what we wanted to do was highlight

43
00:03:03.099 --> 00:03:07.260
those technologies and provide a source code
on how to properly use them so that we can

44
00:03:07.260 --> 00:03:11.949
actually say, Hey, here's a game that actually
works and it's using app engine. Here's the

45
00:03:11.949 --> 00:03:16.199
source code. Or Hey, here's how to use wallet
the right way. Here's the source code.

46
00:03:16.199 --> 00:03:20.839
Second, we wanted to contract our art and
sound. Google is a big company, but we're

47
00:03:20.839 --> 00:03:24.879
predominantly engineer heavy. We don't have
a lot of 3D artists and designers sitting

48
00:03:24.879 --> 00:03:29.059
around. So we actually we tapped a great company
called Fuzzy Cube Software to do all the art

49
00:03:29.059 --> 00:03:32.189
for our games. Give it up for those guys.
[ Applause ]

50
00:03:32.189 --> 00:03:38.089
&gt;&gt;Colton McAnlis: It was like we came in and
we were like, Hey, we need a ton of art in

51
00:03:38.089 --> 00:03:41.400
like six days.
And they were like, Okay.

52
00:03:41.400 --> 00:03:46.549
And finally -- and this was one my manager
actually made me put on the slide was our

53
00:03:46.549 --> 00:03:50.359
intent was not to make this product commercially
viable. This was intended to be a source code

54
00:03:50.359 --> 00:03:55.209
repo that everyone in this room can go grab
and start making player versus player HTML5

55
00:03:55.209 --> 00:03:59.040
games. We're not trying to take on all the
big names of the industry out there. We're

56
00:03:59.040 --> 00:04:02.319
really trying to prove that this is something
we can do.

57
00:04:02.319 --> 00:04:08.359
In order to do this, I actually tapped game
developers who work at Google. So these are

58
00:04:08.359 --> 00:04:12.989
developers who used to be in the industry,
shipped games on console and PC who now work

59
00:04:12.989 --> 00:04:16.070
at Google.
In addition to that, we also grabbed a couple

60
00:04:16.070 --> 00:04:21.229
of people who were experts in the subject
area we needed so that we can actually get

61
00:04:21.229 --> 00:04:26.550
a full-fledged team.
Consider GRITS a view of traditional game

62
00:04:26.550 --> 00:04:30.539
developers looking at HTML5 as a viable platform.
And hopefully the discussion that we're going

63
00:04:30.539 --> 00:04:34.840
to have today is going to highlight some of
the things from that particular perspective.

64
00:04:34.840 --> 00:04:39.650
Again, we wanted to bring our results here.
We thought this was the proper platform. And

65
00:04:39.650 --> 00:04:44.530
from the start to finish we only had 120 days.
I'm sure everyone in here has heard of Google's

66
00:04:44.530 --> 00:04:49.840
20% projects hopefully? That basically means
we're only allowed to work on this one day

67
00:04:49.840 --> 00:04:54.280
a week. So really for the 120 days we only
got one day a week. But with that short amount

68
00:04:54.280 --> 00:04:59.530
of time what we found was the APIs and the
technology available in HTML5 allowed us to

69
00:04:59.530 --> 00:05:02.960
do some amazing things.
So let's talk about what we actually were

70
00:05:02.960 --> 00:05:08.009
able to do. I'm going to cut to a video because
I've been having internet trouble all day.

71
00:05:08.009 --> 00:05:15.009
Let's see if I can do this.
So what you're looking at here sort of the

72
00:05:17.030 --> 00:05:20.819
log-in screen. We allow players to use Quick
Game or log-in.

73
00:05:20.819 --> 00:05:24.979
We have full G+ integration so when we log
in you actually see my friends list and my

74
00:05:24.979 --> 00:05:29.000
Circles there on the side. You actually see
my name and my portrait and we've got that

75
00:05:29.000 --> 00:05:32.430
nice little share button which allows you
to share the game to the live stream and tell

76
00:05:32.430 --> 00:05:35.439
people what a great thing you're doing. Now,
you notice I actually misspelled GRITS so

77
00:05:35.439 --> 00:05:37.870
I decided not to share that one. It's a little
embarrassing.

78
00:05:37.870 --> 00:05:42.050
For the game we support keyboard layout or
mouse so that you can actually play it on

79
00:05:42.050 --> 00:05:46.849
your laptop or on your desktop.
When you run into the game you configure your

80
00:05:46.849 --> 00:05:51.669
robot first. This is sort of phase one of
a longer strategy here. You can pick primary,

81
00:05:51.669 --> 00:05:57.539
secondary or tertiary weapons like chainsaw,
land mines, shotgun. I think I have the energy

82
00:05:57.539 --> 00:06:00.039
sword here.
Energy sword is the bomb. If you're playing

83
00:06:00.039 --> 00:06:04.129
the game always choose the energy sword. It's
plus 10 uber awesome.

84
00:06:04.129 --> 00:06:11.129
We have a little bit of a lag on the delay.
It's not that choppy live, but basically it's

85
00:06:11.419 --> 00:06:15.289
robots shooting each other. Right? Everyone
loves that, right? This is why we get up in

86
00:06:15.289 --> 00:06:19.789
the morning to see robots shooting each other.
Effectively you see a little bit of the jittering

87
00:06:19.789 --> 00:06:25.379
here. That's due to latency, networking correction.
We've got energy items that you can pick up.

88
00:06:25.379 --> 00:06:30.159
We've got help bars, names. You can actually
see the anonymous players running around in

89
00:06:30.159 --> 00:06:34.909
the universe. You can see the bullets bouncing.
Energy shield, awesome. +1 on the energy field.

90
00:06:34.909 --> 00:06:38.759
Like sometimes you wish the +1 button were
bigger so you could hit it so hard it would

91
00:06:38.759 --> 00:06:41.810
put a dent in wall. Right, when you find something
cool? Nobody else? No one?

92
00:06:41.810 --> 00:06:43.509
[Laughter]
&gt;&gt;Colton McAnlis: You're at a Google conference

93
00:06:43.509 --> 00:06:46.560
and you don't applaud for a bigger +1 button?
[ Applause ]

94
00:06:46.560 --> 00:06:53.560
&gt;&gt;Colton McAnlis: Okay. There you go. In the
back, give that guy a T-shirt.

95
00:06:53.719 --> 00:06:57.460
But this is more of the game play running
around. Of course I died at the end.

96
00:06:57.460 --> 00:07:02.999
Now, that little QR code at the top there,
we'll talk a little more about that in a minute.

97
00:07:02.999 --> 00:07:06.539
So that is the demo.
So what we're going to talk about today is

98
00:07:06.539 --> 00:07:10.319
how we built this product, how we put it together
so that you can walk out of here understanding

99
00:07:10.319 --> 00:07:14.479
how you actually make player versus player
games with HTML5 and then you can go off and

100
00:07:14.479 --> 00:07:17.680
make awesomeness on your own because that's
what I/O is all about, right?

101
00:07:17.680 --> 00:07:22.499
So let's start at the top. The player part
of player versus player is the most important.

102
00:07:22.499 --> 00:07:26.219
So in a traditional game developer sense,
when you want to get a bunch of computers

103
00:07:26.219 --> 00:07:30.529
simulating a game together the easiest way
to do it is to allow each game to actually

104
00:07:30.529 --> 00:07:35.270
simulate the state on its own and then transfer
the state to all the other machines.

105
00:07:35.270 --> 00:07:40.129
This model is actually called a peer-to-peer
networking, so each game actually independently

106
00:07:40.129 --> 00:07:45.120
computes all the physics, math, position of
rockets, explosions, power-ups, sends it to

107
00:07:45.120 --> 00:07:48.389
all the other clients which receives it and
says, Okay, this is your game state.

108
00:07:48.389 --> 00:07:54.620
Now, in the early '90s this was the predominant
way that games did multiplayer networking,

109
00:07:54.620 --> 00:07:58.509
and we've thankfully moved away from that
for a couple of reasons. Number one is this

110
00:07:58.509 --> 00:08:03.650
methodology is actually really prone to lag
or high latency. So what will happen is in

111
00:08:03.650 --> 00:08:08.279
a player versus player or a peer-to-peer network,
if any single player actually starts to slow

112
00:08:08.279 --> 00:08:13.370
down or their connection is bad or the machine
slows down, you miss a whole load of data

113
00:08:13.370 --> 00:08:17.159
that has to be synced between all the other
machines. And the only real resolution to

114
00:08:17.159 --> 00:08:21.319
that is actually to halt the other players
in the simulation or slow them down as well.

115
00:08:21.319 --> 00:08:25.409
So if any of you played some classic first-person
shooter games from the '90s you would get

116
00:08:25.409 --> 00:08:28.999
that disconnected icon in the corner, like,
Hey, wait, we're waiting for someone to tell

117
00:08:28.999 --> 00:08:31.379
us what's going on.
Another problem with the peer-to-peer networking

118
00:08:31.379 --> 00:08:35.469
model is it was massively prone to cheating.
So what would happen is a single player could

119
00:08:35.469 --> 00:08:40.139
say Hey, I just picked up the rune of Antioch
and I'm now invincible for the next 12 days,

120
00:08:40.139 --> 00:08:44.639
and all the other players would have to abide
by that information because that's the way

121
00:08:44.639 --> 00:08:48.399
peer to peer worked.
Thankfully again we've moved from this.

122
00:08:48.399 --> 00:08:51.920
What we use today, and this is what GRITS
is actually built on, is the technology called

123
00:08:51.920 --> 00:08:55.870
the authoritative server. So instead of the
clients actually calculating the game state

124
00:08:55.870 --> 00:09:00.420
themself, we actually allow a centralized
server to calculate all the game state and

125
00:09:00.420 --> 00:09:05.560
then send the results down to the clients.
At this point this means the clients are nothing

126
00:09:05.560 --> 00:09:10.350
more than dumb terminals. All they do is take
an input, send it to the server, receive game

127
00:09:10.350 --> 00:09:14.639
state and render the results of what the server
tells them to do.

128
00:09:14.639 --> 00:09:19.089
This is a lot better. First off, it fixes
our cheating problem because the server is

129
00:09:19.089 --> 00:09:22.920
authoritative. It tells you who has the rune
of Antioch and whether or not it's [indiscernible]

130
00:09:22.920 --> 00:09:29.040
and whether or not there's a DPS sell at the
end of it, but that's a separate discussion.

131
00:09:29.040 --> 00:09:29.899
Gamers!
[Laughter]

132
00:09:29.899 --> 00:09:33.980
&gt;&gt;Colton McAnlis: Secondly, it also fixes
the lag problem, right? If any single individual

133
00:09:33.980 --> 00:09:38.310
actually drops out of the network or experiences
bad latency, what happens is we don't have

134
00:09:38.310 --> 00:09:42.449
to slow down the other players in the simulation,
we just have to let that guy go do its thing

135
00:09:42.449 --> 00:09:48.149
and the server assumes that it hasn't received
any new input. This actually creates a better

136
00:09:48.149 --> 00:09:51.440
quality of game play for the rest of the people
in the simulation.

137
00:09:51.440 --> 00:09:55.279
This is actually pretty much the architecture
that most multiplayer games are built on today.

138
00:09:55.279 --> 00:10:02.070
This includes all your RPG's, MMO's, FPS's.
Most RTS games, real time strategy games,

139
00:10:02.070 --> 00:10:05.899
today are actually built on the peer-to-peer
network technology simply because there's

140
00:10:05.899 --> 00:10:09.540
so much data to actually simulate, and then
they get around the cheating issue with some

141
00:10:09.540 --> 00:10:14.899
other craziness that is way beyond this talk.
Because we have an authoritative server we

142
00:10:14.899 --> 00:10:19.660
run into a very specific problem, and that
problem is server compute latency. So let's

143
00:10:19.660 --> 00:10:23.399
say you're running on the client and you actually
say, Hey, I want to move my robot forward.

144
00:10:23.399 --> 00:10:27.990
That input is actually sent up to the server.
The server will take some time to compute

145
00:10:27.990 --> 00:10:32.649
the new state and then the state is then transferred
back down to the client where the client receives

146
00:10:32.649 --> 00:10:37.750
it, updates its information and then hopefully
displays it to the user.

147
00:10:37.750 --> 00:10:43.170
The problem with this is that the time between
input move and update state from the server

148
00:10:43.170 --> 00:10:47.839
is going to always be longer than it takes
for the client to actually render the next

149
00:10:47.839 --> 00:10:51.149
frame, or at least you hope that you're rendering
it at 60 frames per second and you're not

150
00:10:51.149 --> 00:10:54.500
getting packets that fast.
The result of this is that you actually get

151
00:10:54.500 --> 00:10:58.750
really choppy animation. So we've got our
robot on the bottom here and if we just only

152
00:10:58.750 --> 00:11:02.560
update his position when the server tells
us to, he will pop into position A and then

153
00:11:02.560 --> 00:11:07.560
pop into position B, if my clicker works.
See, the clicker, it's awesome.

154
00:11:07.560 --> 00:11:14.560
Now to compete -- uh, blublublublublu. Will
she write blublublublublu if I say that again?

155
00:11:19.300 --> 00:11:21.220
Yes!
[Laughter]

156
00:11:21.220 --> 00:11:28.220
&gt;&gt;Colton McAnlis: I found a new toy!
I want to actually do the rest of the talk

157
00:11:29.360 --> 00:11:31.079
like this.
[Laughter]

158
00:11:31.079 --> 00:11:36.259
&gt;&gt;Colton McAnlis: Sorry, I'm messing with
the people typing.

159
00:11:36.259 --> 00:11:40.540
Anyhow, GRITS computes this with something
we actually call clientside protection, which

160
00:11:40.540 --> 00:11:44.329
means that while the server is actually computing
the game state the client will compute the

161
00:11:44.329 --> 00:11:49.259
same game state in parallel. What this means
is that after the user issues the move command,

162
00:11:49.259 --> 00:11:53.009
that is sent off to the server and the server
will compute the state, but the client will

163
00:11:53.009 --> 00:11:57.990
also compute the state. This actually allows
us to do a smooth animation between the next

164
00:11:57.990 --> 00:12:04.019
position so that the user actually doesn't
see this lag created by sending packets to

165
00:12:04.019 --> 00:12:06.680
the server.
And that was supposed to be animated, but

166
00:12:06.680 --> 00:12:09.509
something happened and so the arrows mean
animation.

167
00:12:09.509 --> 00:12:16.459
Use your imagination. You guys are smart.
I think. She wrote it, cool.

168
00:12:16.459 --> 00:12:21.759
The cool thing is that's on the internet live
right now. Someone is like "He's insulting

169
00:12:21.759 --> 00:12:24.529
the audience!"
So anyhow, that's the basics of how player

170
00:12:24.529 --> 00:12:27.420
versus player games work.
Now, let's talk about the things that GRITS

171
00:12:27.420 --> 00:12:32.000
does specifically because GRITS of course
is an HTML5 game. So what you just saw is

172
00:12:32.000 --> 00:12:36.050
applicable to C++ games and everything else
in the wild. GRITS being HTML5 had to do a

173
00:12:36.050 --> 00:12:43.050
lot of things different. Let's dive into that
a bit.

174
00:12:43.370 --> 00:12:47.449
So let's talk about our architecture. First
off, our client's information, which consists

175
00:12:47.449 --> 00:12:53.180
basically of our HTML data, our JavaScript,
our sound files in OGG, everything else, this

176
00:12:53.180 --> 00:12:57.740
is actually served on top of App Engine. We
actually serve all the content. Our domain

177
00:12:57.740 --> 00:13:03.630
is at appengine.com domain. And we actually
store and communicate to App Engine, also

178
00:13:03.630 --> 00:13:07.209
store the database information. So the number
of kills you get, the number of credits you

179
00:13:07.209 --> 00:13:12.100
have, how many times you use the energy sword
of awesomeness to frag some other dude, that's

180
00:13:12.100 --> 00:13:16.690
all stored on the server. Actually, if you
look at the code you will see traces of information

181
00:13:16.690 --> 00:13:20.459
about how to do unlockable items. One of the
first updates in the patches that we want

182
00:13:20.459 --> 00:13:25.690
to do is show you how to do unlockable items
using Wallet and credit applications. You

183
00:13:25.690 --> 00:13:30.319
guys can just grab that code and put it into
your games, making more awesome games.

184
00:13:30.319 --> 00:13:34.110
The client will also communicate to Google+
as well as Google Analytics. You saw in the

185
00:13:34.110 --> 00:13:38.459
video that Google+ we grab your friends information,
we can actually link to the page, we can post

186
00:13:38.459 --> 00:13:42.399
to your stream.
The Analytics one is actually really cool.

187
00:13:42.399 --> 00:13:47.839
So for those of you in here who aren't game
developers, there's the concept of being able

188
00:13:47.839 --> 00:13:52.589
to track what your users are doing at pretty
much every second of a game. So what we actually

189
00:13:52.589 --> 00:13:57.699
do in GRITS is when a player dies we actually
log that data to Google Analytics. We actually

190
00:13:57.699 --> 00:14:02.040
fire off a custom event and that's stored
in the Analytic system. Then what we can do

191
00:14:02.040 --> 00:14:06.199
is come back and say, Hey, show me the map
and show me where all the deaths have occurred

192
00:14:06.199 --> 00:14:10.470
in the past 72 hours. The cool thing about
it is that it allows our designers to take

193
00:14:10.470 --> 00:14:14.069
a look at the map and go Hey, you know, there's
a choke point right here. There's probably

194
00:14:14.069 --> 00:14:17.610
way too many deaths. I'd like to change the
map a little bit and move things around.

195
00:14:17.610 --> 00:14:22.069
It also tells us things like how many people
actually use the energy sword and whether

196
00:14:22.069 --> 00:14:25.569
or not we should get rid of it entirely.
And we drive all this data collection through

197
00:14:25.569 --> 00:14:30.440
Google Analytics, so it's not just for webmasters
trying to figure out if half the traffic is

198
00:14:30.440 --> 00:14:35.069
coming from Asia or it's coming from slashdot.
We can actually use these custom events to

199
00:14:35.069 --> 00:14:38.839
get real information about what our players
are actually doing in our game and provide

200
00:14:38.839 --> 00:14:45.839
a tight feedback loop to make adjustments,
real time. We use node.js. Node.js fans?

201
00:14:47.000 --> 00:14:47.699
[ APPLAUSE ]

202
00:14:47.699 --> 00:14:52.670
&gt;&gt;Colton McAnlis: When I was taking notes,
I was like I need to write a talk, there's

203
00:14:52.670 --> 00:14:58.500
probably going to be robot fans and node.js
fans. Check. We -- our back end actually runs

204
00:14:58.500 --> 00:15:04.160
node.js out in the cloud running on a compute
server, and our client communicates to our

205
00:15:04.160 --> 00:15:08.839
game instance, our node.js instance, using
socket IO through websockets, and there's

206
00:15:08.839 --> 00:15:13.420
a cool fact of the matter that, you know,
Web sockets are actually sort of a TCP variant

207
00:15:13.420 --> 00:15:18.879
with a much safer UI. Much safer API. Now,
the client will also do some other interesting

208
00:15:18.879 --> 00:15:23.339
communications. You'll notice that when I
clicked quick game, or wanted to join a game,

209
00:15:23.339 --> 00:15:27.589
the client and the server actually communicate
to match maker. Now, this is actually one

210
00:15:27.589 --> 00:15:31.129
of sort of the advents in the last fifteen
years of game development process is the fact

211
00:15:31.129 --> 00:15:35.899
that people realize that if there's a 12-year-old
kid sitting in some area where he doesn't

212
00:15:35.899 --> 00:15:39.629
have to go to school all day, and can just
sit there and play games all day, you hop

213
00:15:39.629 --> 00:15:42.759
on for a match, and you're matched with him,
he's going to destroy you, and every time,

214
00:15:42.759 --> 00:15:46.470
and that's not cool for you, because he's
like, "ha, ha, I'm only 12," and you're like,

215
00:15:46.470 --> 00:15:51.819
"Hey, dude, i got a job, lay off me." He's
like, "you smell". Or at least that's what

216
00:15:51.819 --> 00:15:56.550
my last weekend was like. Anyhow, what match
makers do is they effectively attempt to try

217
00:15:56.550 --> 00:16:01.680
to match players of unique skills, put them
together in buckets, find an open game this

218
00:16:01.680 --> 00:16:06.050
massive conversational back end that figures
out how to slot people and combine them in

219
00:16:06.050 --> 00:16:09.980
ways that make their experience in the game
a lot better. So we actually have a match

220
00:16:09.980 --> 00:16:14.209
maker running for GRITS that runs entirely
on app engine, and the cool thing is we're

221
00:16:14.209 --> 00:16:18.170
not going to talk about this today, but you
all need to go to the talk by Fred Sauer called

222
00:16:18.170 --> 00:16:21.850
"Gaming in the Cloud", and I think actually
that time is incorrect. I think it got moved

223
00:16:21.850 --> 00:16:25.759
again. But anyhow, go to gaming in the cloud.
He's going to talk about all of the app engine

224
00:16:25.759 --> 00:16:31.240
side of GRITS including that interesting QR
code. One of the things Fred did was actually

225
00:16:31.240 --> 00:16:36.589
write an Android controller for GRITS, and
so if you actually scan that QR code with

226
00:16:36.589 --> 00:16:40.620
your Android phone, you can actually play
the entire game using your Android device,

227
00:16:40.620 --> 00:16:45.550
connected to your PC. We use this as sort
of a controller. Definitely check out his

228
00:16:45.550 --> 00:16:49.889
talk, he's a cool guy.
At the core of our simulation is a fantastic

229
00:16:49.889 --> 00:16:55.670
library called box2d.JS. And what you're looking
at here is sort of a mockup of a top-down

230
00:16:55.670 --> 00:16:59.720
setup. Box2d. So, rather when you look at
this, you see a game, right?

231
00:16:59.720 --> 00:17:04.600
But in reality, it's comprised of a lot of
box2d primitives. In green here we have the

232
00:17:04.600 --> 00:17:07.720
physics objects represents collision. You
know, you can't shoot through these things,

233
00:17:07.720 --> 00:17:12.850
you can't walk through these things. The red
squares here actually represent in-game objects.

234
00:17:12.850 --> 00:17:18.570
These are tele-porters. Box2d has a fantastic
call back system in that as you intersect

235
00:17:18.570 --> 00:17:22.050
with two items or as a collision occurs, we
get a nice little call back and we can respond

236
00:17:22.050 --> 00:17:25.800
to it properly, which means for us writing
GRITS, we actually can be pretty lazy about

237
00:17:25.800 --> 00:17:29.200
what kind of code we write. We actually don't
have to write interesting simulation loops

238
00:17:29.200 --> 00:17:32.700
or anything. The only code we really write
is how to spawn an object and what to do when

239
00:17:32.700 --> 00:17:36.820
it hits another object, so when a user touches
a tele-porter object, we know that a user

240
00:17:36.820 --> 00:17:41.970
is touching a tele-porter and then can make
the appropriate change to tele-port him to

241
00:17:41.970 --> 00:17:47.630
whatever position he's at or into, you know,
zulu alpha 90 which is a cool place, you should

242
00:17:47.630 --> 00:17:52.890
check it out. We also use a great concept
that Box2D provides which is the collision

243
00:17:52.890 --> 00:17:59.280
filtering system, so any time we actually
launch projectiles or objects or spawn a new

244
00:17:59.280 --> 00:18:02.980
member into the game, they're assigned a team,
so what you're looking at right there is their

245
00:18:02.980 --> 00:18:07.620
red player actually -- or the player there
is actually on the red team, firing projectiles

246
00:18:07.620 --> 00:18:11.590
that are attached to the red team, and of
course subsequently we have the blue team.

247
00:18:11.590 --> 00:18:15.910
This allows us to actually say, hey, don't
do friendly fire, right? So if you got a team,

248
00:18:15.910 --> 00:18:18.550
all of red team, you don't want to get shot
in the back of the head by your teammate.

249
00:18:18.550 --> 00:18:23.200
Box2d handles all this for us. All we have
to do when we spawn a projectile is specify

250
00:18:23.200 --> 00:18:27.650
don't intersect with anybody else who's got
the team red flag. Again, completely hands

251
00:18:27.650 --> 00:18:31.580
off on our part. We're so super lazy when
writing this project. Box2D did all the heavy

252
00:18:31.580 --> 00:18:37.580
lifting for us. The explosion up there is
actually the same process, again, projectile

253
00:18:37.580 --> 00:18:41.450
intersected with the wall and we computed
what those two objects were, and then decided

254
00:18:41.450 --> 00:18:46.190
that the proper result was to actually spawn
an instance of an explosion. Again, Box2D

255
00:18:46.190 --> 00:18:52.850
is awesome. Use it. Now, one of the issues
that we ran into while having Box2D as well

256
00:18:52.850 --> 00:18:59.850
as clientside prediction is prediction adjustment,
so what happens is, as the client says I would

257
00:18:59.870 --> 00:19:04.050
like to move forward, the client can go off
and move forward, well, the problem is positioning

258
00:19:04.050 --> 00:19:08.660
is actually driven by Box2D, which means that
the server can actually disagree with where

259
00:19:08.660 --> 00:19:12.160
you're supposed to be at. So the client thinks
he should be there, while the server says

260
00:19:12.160 --> 00:19:15.220
actually you should be along this spector
over here for some whatever reason; they're

261
00:19:15.220 --> 00:19:18.920
you're running into a wall or a demon is chasing
you. I don't know why there would be a demon

262
00:19:18.920 --> 00:19:23.580
chasing a robot, that would be weird, just
go with it. So what we do is something called

263
00:19:23.580 --> 00:19:29.280
prediction adjustment where over time we'll
actually modify the forward vector of our

264
00:19:29.280 --> 00:19:34.630
moving robots slightly toward what the server
has told us we should be at, so what happens

265
00:19:34.630 --> 00:19:40.100
is after a couple of frames, we correct our
position just enough where the player actually

266
00:19:40.100 --> 00:19:45.910
doesn't see that they're getting discrepancy
between the client server. This actually allows

267
00:19:45.910 --> 00:19:49.280
us to hide a lot of the latency that you would
normally see from the client and the server

268
00:19:49.280 --> 00:19:53.760
-- the authoritative server communication
process. Now, if the client and the server

269
00:19:53.760 --> 00:19:58.560
position differ by some extremely large value,
we'll just snap, because at that point, you

270
00:19:58.560 --> 00:20:01.620
know, it's like, oh, we're fifteen frames
away, and it would take too long and it doesn't

271
00:20:01.620 --> 00:20:05.770
look good. So we do have sort of a catch-all
in case we get too far ahead. Now one of the

272
00:20:05.770 --> 00:20:09.870
other things . This was -- we actually found
this like last week, so I'm glad we fixed

273
00:20:09.870 --> 00:20:15.950
the bug before my talk -- yay -- is our third
server actually has to drive the client in

274
00:20:15.950 --> 00:20:20.310
more ways than we were originally predicting.
So let's say you're running the client here,

275
00:20:20.310 --> 00:20:26.620
and you choose to fire a missile, I think
that's the proper pronunciation, and the client

276
00:20:26.620 --> 00:20:30.450
says, hey, this missile has intersected with
this object. Well, again, remember the client

277
00:20:30.450 --> 00:20:34.280
is computing games data parallel, so the client
actually says, hey, this guy is there. Well,

278
00:20:34.280 --> 00:20:39.430
the server says, no, he's actually over here.
So now we have a mismatch. The client has

279
00:20:39.430 --> 00:20:43.860
said a collision has occurred, the server
says no, you're wrong, and so what we do in

280
00:20:43.860 --> 00:20:48.040
this situation is we actually say, I'm sorry,
client, we're not listening to you, right,

281
00:20:48.040 --> 00:20:52.200
because to a player if they saw collision,
they would expect to see health go down or

282
00:20:52.200 --> 00:20:57.510
some sort of validation that they're doing
the right thing in killing their fellow robots,

283
00:20:57.510 --> 00:21:00.950
but instead what we do is we ignore the collision
and actually let the bullet pass through.

284
00:21:00.950 --> 00:21:04.690
This is really important from a game player
perspective. There's been a lot of research

285
00:21:04.690 --> 00:21:09.690
over the past ten years about doing multiplayer
prediction and adjustment analysis and what

286
00:21:09.690 --> 00:21:14.510
players actually can perceive as the problem
versus actually being the problem, and actually,

287
00:21:14.510 --> 00:21:19.740
saying, hey, we're going to ignore clientside
prediction is hands down is the perceptive

288
00:21:19.740 --> 00:21:23.290
correct solution from all the game players.
If you're writing games, make sure you do

289
00:21:23.290 --> 00:21:29.680
it this way. Or not. It's up to you. You can
write games. You're smart. Let's talk about

290
00:21:29.680 --> 00:21:36.460
networking. One of the things that we did
specifically, how many of you have actually

291
00:21:36.460 --> 00:21:42.200
written like TCP networking code in C++?
A lot of hands. I'm proud of this room.

292
00:21:42.200 --> 00:21:46.360
This is an awesome room. We should like fight
the other rooms and prove how awesome we are.

293
00:21:46.360 --> 00:21:51.810
I think we'd win. Anyhow, so in C++ what you
usually end up with is some sort of structure

294
00:21:51.810 --> 00:21:57.180
that you define like this, a flag for what
kind of packet it is, 32 bits for the data,

295
00:21:57.180 --> 00:22:01.440
again let's say a float, a direction packet,
and then this would be communicated between

296
00:22:01.440 --> 00:22:04.710
client server, because sooner or later in
C++ this is usually in a header file, and

297
00:22:04.710 --> 00:22:09.930
you would cut a server build versus a -- let's
say you have a Junior programmer that comes

298
00:22:09.930 --> 00:22:15.860
in says, I didn't want to listen to you anyway,
I'm going to push a client build without updating

299
00:22:15.860 --> 00:22:20.920
the server. Now everything is broken, right,
we no longer have the same package structure,

300
00:22:20.920 --> 00:22:25.710
all the data is getting out of line and this
is a massive problem. GRITS solves this with

301
00:22:25.710 --> 00:22:30.660
a really unique solution that I felt was super
important to talk about. What we actually

302
00:22:30.660 --> 00:22:34.770
define is rather than defining the structures
themselves that are then copied between client

303
00:22:34.770 --> 00:22:39.030
server in builds that we cut, we actually
define a proto structure, so what you're seeing

304
00:22:39.030 --> 00:22:42.560
right here is the input structure. We say
who it's actually from and what direction

305
00:22:42.560 --> 00:22:47.380
you're going, specified as strengths. We're
sort of proto defining what this class should

306
00:22:47.380 --> 00:22:53.330
be, or instructor, or whatever it is in JavaScript.
I'm not a JavaScript guy. What the server

307
00:22:53.330 --> 00:22:57.820
actually does, is when it instance boots up,
it actually parses this JavaScript file, reads

308
00:22:57.820 --> 00:23:02.280
this proto data and actually runs code generation
on it, so rather than actually generating

309
00:23:02.280 --> 00:23:07.490
the structures, we actually generate a whole
suite of functions, an API set that allows

310
00:23:07.490 --> 00:23:12.180
the client and the server -- well, the server
specifically to actually use that as an API,

311
00:23:12.180 --> 00:23:18.590
push data in and the APIs will properly pack
the bytes in an efficient manner into what

312
00:23:18.590 --> 00:23:23.320
the structure would be. Now here is where
the cool part of JavaScript comes into play.

313
00:23:23.320 --> 00:23:29.080
We actually pass this code generated set of
APIs down to the client, and then on the client

314
00:23:29.080 --> 00:23:34.350
we just call an eval function, so this means
that our client and server will always be

315
00:23:34.350 --> 00:23:38.700
in sync when communicating with each other.
There is no possible way that they can actually

316
00:23:38.700 --> 00:23:42.300
get out of sync, because as a client connects
to its server, it actually receives all of

317
00:23:42.300 --> 00:23:45.850
the information on how it's supposed to communicate
through this API packet.

318
00:23:45.850 --> 00:23:49.470
This is actually really cool. It's one of
the few things that I love about JavaScript

319
00:23:49.470 --> 00:23:55.800
that you can't do in C++ for game development,
right? Actually say, here, use this. Now,

320
00:23:55.800 --> 00:23:59.630
once you're writing this code, especially
with multiplayer games, you end up shooting

321
00:23:59.630 --> 00:24:04.380
a lot of bullets, sooner or later you're going
to just sit there and hit buttons, kind of

322
00:24:04.380 --> 00:24:06.640
like that button master, playing a street
fighter game. It's like, you're not hitting

323
00:24:06.640 --> 00:24:10.770
any buttons but you're still beating me, I
hate you and you're 12. Yay. What we actually

324
00:24:10.770 --> 00:24:16.120
found was in our original implementation,
that in a about a second -- in about a second

325
00:24:16.120 --> 00:24:21.330
of game play with a full 8 player session,
we'd send about 6.2 megabytes of data, and

326
00:24:21.330 --> 00:24:26.400
that is position information, directional
information, index data, you know, what state

327
00:24:26.400 --> 00:24:31.400
is, rotation, all this other stuff. So we
needed to address this really quickly, because

328
00:24:31.400 --> 00:24:36.260
I'm sure again everyone here is at Google
I/O, your internet developers, you understand

329
00:24:36.260 --> 00:24:42.670
this graph, is that if I've got 240 millisecond
window and I've got really fat packets, the

330
00:24:42.670 --> 00:24:47.710
number of packets, or rather the information
update from the server that I get is limited,

331
00:24:47.710 --> 00:24:52.430
so in that 240 milliseconds, I can only get
so much data from the server to tell me about

332
00:24:52.430 --> 00:24:56.900
the game state. I can only update my information
so fast. Instead what you want to do is create

333
00:24:56.900 --> 00:25:01.480
smaller packets, more concise information,
so we can receive more of them in that short

334
00:25:01.480 --> 00:25:05.900
window so we can update the game state quicker,
because again, since the server is doing the

335
00:25:05.900 --> 00:25:11.250
entire computation, we need to ensure that
we receive the updates as fast as possible

336
00:25:11.250 --> 00:25:16.990
so the client can stay in sync. Now, one of
the ways we do this -- clicking -- is actually

337
00:25:16.990 --> 00:25:20.980
using packet grouping. So usually when you
send a packet down the wire there's multiple

338
00:25:20.980 --> 00:25:25.700
levels of technology stack, and each level
that your packet runs into usually adds a

339
00:25:25.700 --> 00:25:30.770
little bit of overhead, right? So socket IO
will add some bits to it, the ttp layer will

340
00:25:30.770 --> 00:25:34.510
add some bits to it, maybe the operating system
will add some bits to it. Well, what happens

341
00:25:34.510 --> 00:25:38.010
is you actually end up with a lot of data
that you don't need, right? And for these

342
00:25:38.010 --> 00:25:42.640
individual packets, this actually adds up
to a bit, a significant amount. So what we

343
00:25:42.640 --> 00:25:48.920
do is we actually have a heuristic set that
defines the ability to group all of our packets

344
00:25:48.920 --> 00:25:53.340
based upon memory size. So what we say, is,
hey, we're going to cue up our packets until,

345
00:25:53.340 --> 00:25:57.250
you know, a time limit has elapsed, so if
we only get one packet, and let's say a second

346
00:25:57.250 --> 00:26:01.160
has elapsed, we just go ahead and send that
on. Or we'll cue up all of our packets until

347
00:26:01.160 --> 00:26:05.520
it reaches like a megabyte, and then we'll
send that down the line. What this does, it

348
00:26:05.520 --> 00:26:10.250
actually reduces all of the additional overhead
that's added by each of these layers. This

349
00:26:10.250 --> 00:26:14.120
is really a critical thing for us because
we send a lot of data.

350
00:26:14.120 --> 00:26:19.100
One of the other things we do, or another
set of things we do, is actually duplicate

351
00:26:19.100 --> 00:26:26.100
packet reduction, so we do this in two ways:
The first is that we understand that the people

352
00:26:27.790 --> 00:26:31.770
writing the game are not thinking about the
networking layer as they're writing the game,

353
00:26:31.770 --> 00:26:33.790
right?
So as we're going through update loop, as

354
00:26:33.790 --> 00:26:36.780
all the items are updating themselves, sooner
or later you're going to have someone come

355
00:26:36.780 --> 00:26:40.910
along and assign a variable to A, and then
20 loops later it's going to assign it to

356
00:26:40.910 --> 00:26:43.820
C, and then some time is going to go by and
then you're going to assign it to B. What

357
00:26:43.820 --> 00:26:47.810
we do in this situation is we actually track
these state data and updates over time, and

358
00:26:47.810 --> 00:26:52.100
we only send the latest update, so what will
happen is we'll say, hey, if the variable

359
00:26:52.100 --> 00:26:55.920
has already been set and we're setting it
to something different, forget the other state,

360
00:26:55.920 --> 00:26:59.620
don't put it in our packet grouping. Right?
This keeps the client from doing redundant

361
00:26:59.620 --> 00:27:05.720
state updates, in otherwise C, A and then
finally B, which it doesn't need to do. Another

362
00:27:05.720 --> 00:27:10.410
thing we do with our staple tracking is we
actually analyze whether or not the state

363
00:27:10.410 --> 00:27:15.440
that we're about to update a packet for is
identical to the state that already exists,

364
00:27:15.440 --> 00:27:19.510
so if a line of code comes along and says
let's set the position to A, and the position

365
00:27:19.510 --> 00:27:24.120
is already A, then the server won't actually
update that data, won't send it to the client

366
00:27:24.120 --> 00:27:30.510
at all. Now, with the packet grouping, as
well as the duplicate packet deduping -- Dr.

367
00:27:30.510 --> 00:27:36.310
Seuss rhyme. I should write a book. We actually
modify our situation quite significantly.

368
00:27:36.310 --> 00:27:41.960
We end up going from about 6.2 megabytes per
second to about 1.3, which is a lot better

369
00:27:41.960 --> 00:27:46.730
in our situation. So these are like three
super easy things that had really nothing

370
00:27:46.730 --> 00:27:52.420
to do with the technology but had a lot to
do with our analysis of how our game was molesting

371
00:27:52.420 --> 00:27:59.420
the networking stack and sending packets around.
So let's talk about rendering. HTML5 is awesome.

372
00:28:00.350 --> 00:28:03.800
I always thought this was a great quote that
no one really laughs at, but "world domination

373
00:28:03.800 --> 00:28:07.530
often starts as a misunderstood napkin doodle."
Like I don't know if you guys walk into a

374
00:28:07.530 --> 00:28:12.510
bar and see some weird doodle that looks like
a dinosaur attacking Manhattan; I've got an

375
00:28:12.510 --> 00:28:19.060
idea. At least in my mind, that's how it works.
So again, let's go back to our mockup screen

376
00:28:19.060 --> 00:28:22.240
here, again you've got a bunch of things,
you've got a bunch of pretty pixels that are

377
00:28:22.240 --> 00:28:26.860
being displayed. In reality this is broken
down is that this is actually our background

378
00:28:26.860 --> 00:28:31.020
layer. Our background layer is a bunch of
64 by 64 pixel sprites that an artist has

379
00:28:31.020 --> 00:28:35.270
placed together on a large sheet. And we actually
render that data. On top of that, we actually

380
00:28:35.270 --> 00:28:40.330
render our player Avatars which are animated
sprite sheets, and then all of our projectiles

381
00:28:40.330 --> 00:28:44.590
and explosions are also animated sprite sheets
that are blended using a different composite

382
00:28:44.590 --> 00:28:51.590
layer. In order to do this, and stay performance,
we actually heavily use the concept of atlasing.

383
00:28:52.600 --> 00:28:56.970
Now, in the games industry we call it atlasing.
I know in the HTML5 world or Web development

384
00:28:56.970 --> 00:29:01.410
you call this sprite sheets, right? Nods.
I don't see a nod. Everyone asleep already?

385
00:29:01.410 --> 00:29:07.160
Cool. That dude game me a thumb's up. Get
him a T-shirt too. Thumb's up for T-Shirt.

386
00:29:07.160 --> 00:29:11.160
Anyhow, we actually atlas everything. In fact,
you're seeing, and what you're looking at

387
00:29:11.160 --> 00:29:15.120
here are the only three atlases we actually
use in the game. That's it. Everything, every

388
00:29:15.120 --> 00:29:18.960
piece of art, all of our menu data, all of
our in-game sprites are packed into these

389
00:29:18.960 --> 00:29:25.850
three textures, and here's why. With one Atlas
request, let's say that you have got a 4k-by-4k

390
00:29:25.850 --> 00:29:31.750
texture, about 100k of information total,
your total transfer time as measured by the

391
00:29:31.750 --> 00:29:36.210
Chrome developer tools is about 240 milliseconds,
so this is nice, right? We have got a 4k-by-4k

392
00:29:36.210 --> 00:29:42.060
texture, it comes down the line pretty quickly,
really fast, get it into the canvas render,

393
00:29:42.060 --> 00:29:46.410
and we are doing good.
Now, if you were to say chop that 4k-by-4k

394
00:29:46.410 --> 00:29:53.410
texture up into say 4096 individual requests,
each one is about 10k each at about 64 pixels

395
00:29:54.310 --> 00:30:01.000
by 64 pixels, what you end up with is about
4.3 seconds of total load time. And the reason

396
00:30:01.000 --> 00:30:07.130
for this is kind of two to threefold. Firstly
is that any given client connection to a server

397
00:30:07.130 --> 00:30:11.950
can have -- only have so many open connections,
so if you have got 4,000 connections sitting

398
00:30:11.950 --> 00:30:15.760
around waiting to happen and your browser
has only allowed six at a time, basically

399
00:30:15.760 --> 00:30:19.850
everything gets stacked. What you are looking
at in the Chrome tools here is that transparent

400
00:30:19.850 --> 00:30:24.330
line, the long bar there, is actually Chrome
being blocked by the server saying "I'm sorry

401
00:30:24.330 --> 00:30:28.660
you can't get this file yet because we're
still waiting on something else to complete."

402
00:30:28.660 --> 00:30:34.090
So with all of these loose assets being requested,
you slow down your load time significantly.

403
00:30:34.090 --> 00:30:38.850
Now, you will also notice at the end of the
line is the little opaque circle. That opaque

404
00:30:38.850 --> 00:30:43.650
circle actually represents the time once we've
actually received the file to decompress it,

405
00:30:43.650 --> 00:30:46.870
get it on the screen, do all of the other
stuff, which is really fast process. We lose

406
00:30:46.870 --> 00:30:51.570
almost, you know, we lose four seconds just
in waiting around for Chrome to do more connections.

407
00:30:51.570 --> 00:30:55.330
So in reality using Atlases saves your load
time significantly, which again a lot of Web

408
00:30:55.330 --> 00:30:59.540
developers are starting to notice this, so
stop using the leaf assets, stop doing it,

409
00:30:59.540 --> 00:31:05.220
or the robots will get you.
Now when our artists made our original map,

410
00:31:05.220 --> 00:31:08.670
they actually came to us with a small set.
They said, "Hey, we are going to use these

411
00:31:08.670 --> 00:31:10.810
64-by-64 tiles, and we're going to draw them
everywhere."

412
00:31:10.810 --> 00:31:13.370
We said, "That's fine."
When you look at the screen, you should really

413
00:31:13.370 --> 00:31:16.520
look at it like this. Which is sort of how
the rendering engine looks at it, a bunch

414
00:31:16.520 --> 00:31:20.740
of little tiles that are rendered on the canvas.
Well, the issue we ran into was that each

415
00:31:20.740 --> 00:31:24.880
one of those was actually a separate draw
call. And for each draw call you have sort

416
00:31:24.880 --> 00:31:29.060
of an implicit API overhead that's involved
in the draw call. Now you'll see that there's

417
00:31:29.060 --> 00:31:33.100
actually some nice blends here, we've got
a green background, we've got some of the

418
00:31:33.100 --> 00:31:36.920
tiles, we've got some more of the little hexagons
that are blending on top of it, and then we've

419
00:31:36.920 --> 00:31:42.170
got a dent in the universe, and then a little
thing there. That's like five to seven draws

420
00:31:42.170 --> 00:31:46.500
per quadrant there. Now, this adds up over
time because artists want to make really pretty

421
00:31:46.500 --> 00:31:51.480
art. That's usually accomplished by compositing
layers of art on top of itself to create this

422
00:31:51.480 --> 00:31:54.670
really rich environment. Well, again, this
doesn't work for us, right? If you've got

423
00:31:54.670 --> 00:31:59.100
a high-res monitor, and a lot of screen space,
this is going to be a lot of draws and a lot

424
00:31:59.100 --> 00:32:02.530
of machines can't handle this. So what we
did to counteract this is actually used the

425
00:32:02.530 --> 00:32:07.350
concept of off DOM canvas, where rather than
rendering each of these small tiles at run

426
00:32:07.350 --> 00:32:11.900
time, we created a canvas object that's not
attached to the DOM and actually render each

427
00:32:11.900 --> 00:32:17.490
of these tiles into that canvas, and then
later on we can simply do one draw call, offsetting

428
00:32:17.490 --> 00:32:22.220
that large canvas wherever our ViewPort happens
to be. This actually was a huge savings for

429
00:32:22.220 --> 00:32:25.120
us.
On some of our Linux machines this actually

430
00:32:25.120 --> 00:32:30.380
took our frame rate from two frames a second
back up to 60. Just this one change. It was

431
00:32:30.380 --> 00:32:34.740
about 10 minutes of code to get us that frame
rate back, which was fantastic.

432
00:32:34.740 --> 00:32:37.900
Of course, then the artist came back, said,
"Oh, by the way I've got a bigger map for

433
00:32:37.900 --> 00:32:41.160
you," and then we ran into a different problem.
[Laughter]

434
00:32:41.160 --> 00:32:47.590
Which was now that we had a 24k by 24k pixel
map. [Laughter]. And we were doing one draw

435
00:32:47.590 --> 00:32:54.440
call every frame for this massive pile of
pixels. And that put us back at two frames

436
00:32:54.440 --> 00:32:59.210
a second. So all of my work was for naught.
To counteract this, we had to do something

437
00:32:59.210 --> 00:33:02.340
different. So let's say we have got our little
ViewPort there in pink because hot pink is

438
00:33:02.340 --> 00:33:08.860
the cool thing to do on the internet. Cool
thing to do on the internet. [Laughter]. Cool

439
00:33:08.860 --> 00:33:11.510
thing to do on the internet. Cool thing to
do -- oh, man [Laughter].

440
00:33:11.510 --> 00:33:15.490
&gt;&gt;Colt McAnlis: Sorry, when you find a toy,
you've just got to play with it.

441
00:33:15.490 --> 00:33:20.050
Anyhow, what I actually do is I actually create
-- in order to combat the fact that this one

442
00:33:20.050 --> 00:33:24.020
draw call actually puts too many pixels on
the screen, because the canvas actually just

443
00:33:24.020 --> 00:33:29.030
does a dumb draw. Right? It doesn't say this
pixel of this subtexture is or is not in your

444
00:33:29.030 --> 00:33:32.430
ViewPort. It just blips the whole thing to
the screen, and lets the GPU figure out the

445
00:33:32.430 --> 00:33:37.140
-- for hardware accelerated -- let's the GPU
figure out the details there. So what I actually

446
00:33:37.140 --> 00:33:40.910
do to combat this, is we actually chunked
up our environment. So when you are actually

447
00:33:40.910 --> 00:33:46.700
playing in the large maps in GRITS, we actually
chunk it up into 1024-by-1024 tiles, this

448
00:33:46.700 --> 00:33:51.250
heuristic of 1024 versus 24 or 28 or anything
else, was actually sort of just done by trial

449
00:33:51.250 --> 00:33:55.660
and error. We effectively said this looks
good on this Linux box, this Linux box is

450
00:33:55.660 --> 00:34:00.750
not powered. So what this allows us to do
is we were doing one draw call for the little

451
00:34:00.750 --> 00:34:07.270
pink box. We actually do two draw calls now,
but it's significantly less pixels that the

452
00:34:07.270 --> 00:34:10.960
disband process has to actually deal with
or more importantly that the GPU has to deal

453
00:34:10.960 --> 00:34:17.960
with, with rendering, clipping, figuring everything
else out. Now, let's talk about the tools.

454
00:34:18.579 --> 00:34:24.690
So when you are writing games -- actually
taking a step back, let's take a step back.

455
00:34:24.690 --> 00:34:28.029
So as a traditional game developer, I was
a game developer for about 10 years in the

456
00:34:28.029 --> 00:34:31.220
industry, worked a lot of really cool places
doing really cool things. One of the most

457
00:34:31.220 --> 00:34:36.210
important things that I worked on consistently
was creating really good tools that allowed

458
00:34:36.210 --> 00:34:41.909
designers and artists to create amazing content
that really caused people to buy our games.

459
00:34:41.909 --> 00:34:47.769
Now, in my opinion, one of the biggest drawbacks
to HTML5 as a viable gaming technology is

460
00:34:47.769 --> 00:34:53.869
the lack of good tools to allow content creators
to create great content. Now I'm not talking

461
00:34:53.869 --> 00:34:57.460
about the language here. I'm talking about
the ability to create content in a way that

462
00:34:57.460 --> 00:35:02.470
content creators can reflect with.
So what we did with GRITS was we didn't try

463
00:35:02.470 --> 00:35:07.500
to reinvent the wheel. Rather than trying
to create HTML5 specific tools, we went back

464
00:35:07.500 --> 00:35:11.920
to the basics and used tools from standard
C++ game development and just made sure that

465
00:35:11.920 --> 00:35:18.230
the data was read in by HTML5 properly. It
started with a great tool called Tiled. Tiled

466
00:35:18.230 --> 00:35:24.920
is a free open sourceish map editor on the
internet, and using QT as a primary UI engine,

467
00:35:24.920 --> 00:35:30.019
so that means that it runs across platform.
Now Tiled does some really cool stuff. What

468
00:35:30.019 --> 00:35:34.690
you are looking at here is actually our Atlas
of our map sprites and then of course our

469
00:35:34.690 --> 00:35:39.180
map next to it, you can actually go in and
fill in your sprites, use cool brushes, and

470
00:35:39.180 --> 00:35:42.930
use a blend effect and, you know, fill things
together.

471
00:35:42.930 --> 00:35:47.789
Tiled also allows us to create collision objects
or just objects in general, then we can flag

472
00:35:47.789 --> 00:35:51.599
them with collision values. So what you are
actually looking here is a the polygon tool

473
00:35:51.599 --> 00:35:56.589
actually specifying out that, hey, this is
some object in the environment. You can see

474
00:35:56.589 --> 00:36:00.230
on the side of the map over there, this is
actually the collision layer. Right? So when

475
00:36:00.230 --> 00:36:04.480
the game reads it in, it says anything in
the collision layer we make an actual physics

476
00:36:04.480 --> 00:36:08.299
object that you can't shoot through or run
through or teleport on top of or use the rune

477
00:36:08.299 --> 00:36:15.299
of Antioch to destroy it. Really critical.
This comes crucial into play when we do things

478
00:36:18.619 --> 00:36:23.869
like teleporters or quad damage or picking
up energy capsules, because what it allows

479
00:36:23.869 --> 00:36:28.430
us to do is put a little box on the map and
say, "Hey, this is a spawn item, this is a

480
00:36:28.430 --> 00:36:32.779
help box," right? So we can actually specify
all of that stuff inside of tiles, we don't

481
00:36:32.779 --> 00:36:35.930
have to write custom code for this.
In fact, the designer and the artist can use

482
00:36:35.930 --> 00:36:41.349
this tool exclusively, then it just spits
out a nice JSON file, which Tiled does, by

483
00:36:41.349 --> 00:36:45.410
the way, that we read into our game. And the
client and the server both read this information

484
00:36:45.410 --> 00:36:49.519
so we know where collision objects are, we
know where teleporters are and more importantly

485
00:36:49.519 --> 00:36:52.829
we know where quad damage is, because if you
don't have quad damage you are losing the

486
00:36:52.829 --> 00:36:59.829
game, pro tip tweet that. Pro tip.
The next tool we actually use is a great tool

487
00:37:00.299 --> 00:37:06.519
called Texture Packer. Texture Packer is probably
one of -- one of the most advanced tools that

488
00:37:06.519 --> 00:37:10.160
I have seen for actually taking a whole bunch
of small textures and then packing them into

489
00:37:10.160 --> 00:37:12.710
a big Atlas and then passing that data off
to you.

490
00:37:12.710 --> 00:37:15.380
Now what you are looking at on the screen
here is all of our assets are actually listed

491
00:37:15.380 --> 00:37:18.589
on the side over there. So the artist literally
grabbed them all and dragged them in the tool.

492
00:37:18.589 --> 00:37:21.869
What you see in the middle window is the result
of Texture Packer putting it all in.

493
00:37:21.869 --> 00:37:26.029
Now one of the real cool things that texture
packer does, is it will actually analyze the

494
00:37:26.029 --> 00:37:32.440
true boundaries of an image. Let's say that
you make a 64-by-64 texture, put like a 5-by-5

495
00:37:32.440 --> 00:37:36.470
little sprite right in the middle of it. Texture
Packer will actually analyze that image and

496
00:37:36.470 --> 00:37:42.359
realize that the true content bounds are actually
5-by-5 and it will actually crop it and only

497
00:37:42.359 --> 00:37:47.200
put the 5-by-5 image in the map. Then it will
spit out a JSON file with the original bounding

498
00:37:47.200 --> 00:37:52.269
values. So by using Texture Packer, you are
actually optimizing the number of pixels used

499
00:37:52.269 --> 00:37:57.559
by your artists. Sometimes artists don't make
the best optimized art work.

500
00:37:57.559 --> 00:38:01.720
[Laughter].
&gt;&gt;Colton McAnlis: Maybe. This is also really

501
00:38:01.720 --> 00:38:07.829
cool, too, actually we had to break up our
end game assets versus our start menu assets.

502
00:38:07.829 --> 00:38:11.960
That's why we actually have three Atlases,
right? This is actually all of our menu data.

503
00:38:11.960 --> 00:38:16.519
It's in a separate Atlas so that we can load
it to do all of our rendering in HTML or in

504
00:38:16.519 --> 00:38:19.940
the DOM, so all of our menu stuff is done
in the DOM, all of the game play is done on

505
00:38:19.940 --> 00:38:25.180
the canvas. So we can actually load this Atlas
ahead of time. Use CSS, use sprites, transition,

506
00:38:25.180 --> 00:38:29.750
I think you guys saw impress.js, moving the
menus around in there. And that's all loaded

507
00:38:29.750 --> 00:38:33.480
before you get into the game. So once we get
in the game, we can load the other two Atlases.

508
00:38:33.480 --> 00:38:38.619
So we reduce load time. Reduce pixel latency.
And really it's all given to us by these two

509
00:38:38.619 --> 00:38:44.779
simple tools.
So -- so the lessons, let's talk about what

510
00:38:44.779 --> 00:38:50.420
we actually learned in this process.
So first off, can you do player versus player

511
00:38:50.420 --> 00:38:53.009
in HTML5?
Absolutely. Someone say mission accomplished.

512
00:38:53.009 --> 00:38:57.140
I would plant a flag or hang a banner or something
like that, but they wouldn't let me put pyrotechnics

513
00:38:57.140 --> 00:39:01.430
on the stage. I did ask, after they turned
down the skydiving thing, I was like well

514
00:39:01.430 --> 00:39:04.029
what about pyrotechnics. It was like stop
talking. I was like, okay.

515
00:39:04.029 --> 00:39:08.079
Anyhow, you can actually do player versus
player in HTML5, it's a fantastic ability.

516
00:39:08.079 --> 00:39:12.450
We've got canvas rendering, we've got hardware
accelerated rendering, we've got WebSockets,

517
00:39:12.450 --> 00:39:16.029
we have the ability to manipulate the bytes
that are sent over the line, which is probably

518
00:39:16.029 --> 00:39:20.509
the most crucial thing in bandwidth reduction,
in latency optimization. Really it's there,

519
00:39:20.509 --> 00:39:27.509
we can do it. From a game developer perspective,
the HTML5 APIs were not built for games. HTML5

520
00:39:29.029 --> 00:39:33.829
was built for a Web to transfer data and do
rich content, but they weren't built for games.

521
00:39:33.829 --> 00:39:38.670
The good news is that they're starting to
change. As you probably already have seen,

522
00:39:38.670 --> 00:39:43.809
Chrome has been very proactive in adding APIs
for game development. We've added full-screen

523
00:39:43.809 --> 00:39:50.250
support. Mouse lock support. We've added game
pad support, which usually when you say why

524
00:39:50.250 --> 00:39:54.000
is Chrome putting in a game pad, am I going
to use a controller to navigate my FaceBook

525
00:39:54.000 --> 00:39:56.299
page?
No, this is because we are putting in games.

526
00:39:56.299 --> 00:40:01.160
We are being very proactive about understanding
the games more than any other technology pushed

527
00:40:01.160 --> 00:40:06.170
the boundaries, pushed the envelope, and trying
to be a -- a modern browser, Chrome is very

528
00:40:06.170 --> 00:40:11.799
aggressive about this.
For a player versus player game, bandwidth

529
00:40:11.799 --> 00:40:15.009
reduction is crucial. In fact it's the only
thing that you really need to worry about

530
00:40:15.009 --> 00:40:19.720
the world. Hiding the latency from the user,
reducing the number of bits on the line, this

531
00:40:19.720 --> 00:40:24.150
is a full-time job. Again, we only had 120
days. We had some really great results out

532
00:40:24.150 --> 00:40:28.740
of that, you should probably spend a lot more
time optimizing that system if you are putting

533
00:40:28.740 --> 00:40:32.720
out a commercial product that you're going
to use.

534
00:40:32.720 --> 00:40:37.819
Also, this sort of piggyback in it is that
the client side prediction algorithm, and

535
00:40:37.819 --> 00:40:42.549
I encourage you to go Google this, there's
tons of papers out there by tons of first

536
00:40:42.549 --> 00:40:47.230
person shooters and MMO RPGs and any of the
game developer conferences out there saying

537
00:40:47.230 --> 00:40:51.849
"Hey, we solved it this way". I highly recommend
that you take a look at the GRITS source code,

538
00:40:51.849 --> 00:40:55.670
see what we are doing, compare that against
what the industry is doing and figure out

539
00:40:55.670 --> 00:40:59.670
a proper technique to use for your game, right?
What we provide should be considered a boilerplate

540
00:40:59.670 --> 00:41:04.490
and starting base, then you need to move into
more advanced versions after that. WebSockets

541
00:41:04.490 --> 00:41:08.749
work really well. In fact I would say probably
we had no problems with WebSockets once we

542
00:41:08.749 --> 00:41:15.009
moved to socket I/O. We used it, sent packets,
received packets, it was fantastic and easy

543
00:41:15.009 --> 00:41:18.829
to use.
As I said before, canvas, we did all of our

544
00:41:18.829 --> 00:41:24.130
rendering in canvas. A hardware accelerated
canvas in Chrome is really fast and powerful.

545
00:41:24.130 --> 00:41:29.019
We didn't want to write a full WebGL version,
we didn't have time to worry about atlasing,

546
00:41:29.019 --> 00:41:34.029
or UV sets, and whether or not we were rendering
middle of polygon, versus edge of polygon,

547
00:41:34.029 --> 00:41:38.140
and what's the GPU doing and out of process
-- no. Hardware accelerated canvas shielded

548
00:41:38.140 --> 00:41:41.490
us from all of that information and gives
us the same performance, which is great. If

549
00:41:41.490 --> 00:41:47.569
you are writing a 2D game in Chrome, consider
canvas first, and then if you run into performance

550
00:41:47.569 --> 00:41:50.059
problems, optimize it until you absolutely
have to go over to GL for it.

551
00:41:50.059 --> 00:41:56.230
Now if you are doing 3D, you can't do canvas
in 3 d easily. Definitely take advantage of

552
00:41:56.230 --> 00:42:00.039
off DOM canvas to accelerate any large bitmap
stuff, right? If you have a lot of static

553
00:42:00.039 --> 00:42:03.480
data being rendered per frame, make sure that
you do that, but definitely make sure that

554
00:42:03.480 --> 00:42:06.480
you segment it because the artist will keep
generating content that's going to make it

555
00:42:06.480 --> 00:42:11.309
harder and harder for your frame rate to be
what you need it at. Again, use atlasing,

556
00:42:11.309 --> 00:42:17.130
right? Going from 270 milliseconds for the
load time to 4.6 seconds is crazy. Right?

557
00:42:17.130 --> 00:42:21.140
Especially if you are doing this stuff on
mobile, right? We are usually on mobile, if

558
00:42:21.140 --> 00:42:24.569
my site takes more than a second to load,
I have already thrown the phone across the

559
00:42:24.569 --> 00:42:26.609
room and started drinking heavily.
[Laughter]

560
00:42:26.609 --> 00:42:32.460
&gt;&gt;Colton McAnlis: That's my Saturday night.
Doesn't have to be your Saturday night. Utilizing

561
00:42:32.460 --> 00:42:37.220
the HTML5, utilizing the DOM to do all of
our UI was a huge win. Coming from traditional

562
00:42:37.220 --> 00:42:40.440
game development, we have a ton of packages
and middle ware out there that we spend a

563
00:42:40.440 --> 00:42:47.440
lot of time trying to bend C++ into the will
of our UI system. The fact that HTML5 comes

564
00:42:47.480 --> 00:42:52.660
with the DOM, the most advanced sophisticated
UI system in the world, Galaxy, I'm going

565
00:42:52.660 --> 00:42:56.869
to say Galaxy because I think that it's that
cool. That was a huge win. To ignore that

566
00:42:56.869 --> 00:43:01.509
or try to reproduce all of that stuff inside
of canvas, don't even try it, it's not even

567
00:43:01.509 --> 00:43:08.509
worth it. So the game is live right now. Actually
been live for two weeks. Game's live. Gritsgame.appspot.com.

568
00:43:08.720 --> 00:43:13.430
You can go play right now, hopefully the servers
are up, maybe they're not, I don't know, we'll

569
00:43:13.430 --> 00:43:20.430
find out soon. The code is live. Code.google.com/p/GRITSgame.
Go get the code. Start hacking on it. Please.

570
00:43:22.369 --> 00:43:25.890
We would love to hear what you're breaking
and how you're breaking it.

571
00:43:25.890 --> 00:43:30.309
We had a great question a couple weeks ago
from an internal Googler who said, "Hey, do

572
00:43:30.309 --> 00:43:37.309
you mind if we write an AI system that cheats?"
I said, "Please do and then send me the patch."

573
00:43:38.980 --> 00:43:45.059
More importantly, go to the Chrome Sandbox.
Check out a game called Strike Fortress. What

574
00:43:45.059 --> 00:43:49.190
I have done with GRITS, what our team has
done is a small subset of what you can do

575
00:43:49.190 --> 00:43:56.190
in 120 days. EA, electronic arts, has had
a team working on a pure 3D HTML5 game, working

576
00:43:57.490 --> 00:44:02.369
on it for a lot longer than we have, in the
Chrome Sandbox live right now that you can

577
00:44:02.369 --> 00:44:07.829
play. The coolest part is you can actually
go up and scan the QR code, start influencing

578
00:44:07.829 --> 00:44:12.150
the game with your phone. So while two people
are standing there actually playing, we are

579
00:44:12.150 --> 00:44:17.210
utilizing the full power of the Web by letting
other developers actually drop bombs on people

580
00:44:17.210 --> 00:44:21.289
on the phone.
It's a fantastic product. The guys have been

581
00:44:21.289 --> 00:44:25.789
doing an amazing job. Please, leave the session,
walk right over there and play it and tell

582
00:44:25.789 --> 00:44:30.279
them that I sent you because I get a T-shirt
every time you do. I run out of clothes really

583
00:44:30.279 --> 00:44:34.319
fast. It's happens.
So with that, hey, thank you all so much for

584
00:44:34.319 --> 00:44:38.339
attending this talk. I'm excited to see what
HTML5 is doing with gaming. I'm excited to

585
00:44:38.339 --> 00:44:41.490
see the room this packed. We've got people
sitting on the floor. Hi, I see you. T-shirt

586
00:44:41.490 --> 00:44:45.789
for those guys.
My name is Colt McAnlis. This is how you get

587
00:44:45.789 --> 00:44:50.549
ahold of me. Thank you so much for the talk.
We'll open it up for some questions now.

588
00:44:50.549 --> 00:44:57.549
[ Applause ]
&gt;&gt;Colton McAnlis: Please feel free to use

589
00:44:57.960 --> 00:45:01.509
the microphone. And before we do that, hey,
a big round of applause for the typy person.

590
00:45:01.509 --> 00:45:08.509
[ Applause ]
&gt;&gt;Colton McAnlis: Yes, you're awesome. You're

591
00:45:09.559 --> 00:45:12.410
awesome with the typing. I'm a huge fan.
Questions.

592
00:45:12.410 --> 00:45:17.680
&gt;&gt;&gt; Yes. What do you see the overlap with
this and play-in? And also, how did you do

593
00:45:17.680 --> 00:45:22.579
the server side application? Did you use the
same JavaScript code to validate the state?

594
00:45:22.579 --> 00:45:26.029
&gt;&gt;Colton McAnlis: That's a great question.
A two-part question there, which you're cheating,

595
00:45:26.029 --> 00:45:29.049
you're only allowed one.
Two-part question there. How does this overlap

596
00:45:29.049 --> 00:45:33.509
with things like play-in and the second part
is how do we actually do our sharing or our

597
00:45:33.509 --> 00:45:38.180
computation of state on the server side.
The first one is play-in is a fantastic tool

598
00:45:38.180 --> 00:45:43.730
framework that works more with Java to my
understanding of it to produce a sort of nice

599
00:45:43.730 --> 00:45:48.390
games middleware setup.
GRITS is not considered an engine and should

600
00:45:48.390 --> 00:45:54.019
not be used in that vocabulary. GRITS is boilerplate
code. This is a setup and a bunch of things

601
00:45:54.019 --> 00:45:58.190
that are not intended for you to use as an
entirety, but a bunch of little small capsules

602
00:45:58.190 --> 00:46:01.839
that you can consume individually and then
take the knowledge from that and build off

603
00:46:01.839 --> 00:46:04.829
of it. We're by no means creating a larger
ecosystem here. We're just trying to give

604
00:46:04.829 --> 00:46:09.970
you guys sort of pebbles to feed the empire.
The second question was how we're actually

605
00:46:09.970 --> 00:46:15.579
splitting our code client server. We have
two metrics for that. First off, we have an

606
00:46:15.579 --> 00:46:20.049
is server variable that is only defined on
the server side through NodeJS. So in our

607
00:46:20.049 --> 00:46:24.019
shared code that's actually included in the
client's as well, we can actually say if it's

608
00:46:24.019 --> 00:46:29.049
a server run this loop or run this set of
code. If it's not the server, exclude it.

609
00:46:29.049 --> 00:46:35.499
Now, for some side classes we actually have
-- for instance, if you want to load graphics

610
00:46:35.499 --> 00:46:39.339
or do drawing, it doesn't make sense to have
any of that code sitting on the server side.

611
00:46:39.339 --> 00:46:42.829
So in those situations we actually split the
code. We actually have a server folder and

612
00:46:42.829 --> 00:46:47.619
a client folder, and those are actually separate
modules that use object-oriented programming

613
00:46:47.619 --> 00:46:52.480
to inherit from the server side classes.
So fantastic question. For a lot more of that

614
00:46:52.480 --> 00:46:55.970
I really encourage you to dig deep in the
source code. Check it out.

615
00:46:55.970 --> 00:46:59.690
I believe you're next, sir.
&gt;&gt;&gt; Quick one about the source code. Has it

616
00:46:59.690 --> 00:47:04.029
been tested across different browser as well
or has it been optimized for Chrome? And are

617
00:47:04.029 --> 00:47:09.279
the assets as far as peer posture as well,
like the tile tools and the original graphics?

618
00:47:09.279 --> 00:47:12.920
&gt;&gt;Colton McAnlis: Absolutely. So the questions
were have we tested the source code across

619
00:47:12.920 --> 00:47:17.200
multiple browsers and are the assets available
in the source code? We haven't had a time

620
00:47:17.200 --> 00:47:22.049
to actually test the code in other browsers.
Right now I just kind of hack out and say

621
00:47:22.049 --> 00:47:25.970
sorry, this is optimized for Chrome. I can't
fix the other issues.

622
00:47:25.970 --> 00:47:30.619
The good news is that the assets for the game
in their atlased form are provided in the

623
00:47:30.619 --> 00:47:35.499
source code under the license we provide.
We don't provide the PSD's or the originals

624
00:47:35.499 --> 00:47:39.809
because of some weird thing, but it's all
there. And we provide the JSON files, too.

625
00:47:39.809 --> 00:47:43.390
So you can actually scrape the JSON, scrape
the alias and generate all the loose asset

626
00:47:43.390 --> 00:47:46.349
if you would like that.
Thank you. You were next, sir.

627
00:47:46.349 --> 00:47:49.410
&gt;&gt;&gt; Yeah, two questions.
&gt;&gt;Colton McAnlis: All you guys are cheating.

628
00:47:49.410 --> 00:47:53.960
You're only supposed to have one.
&gt;&gt;&gt; Not a real question. Why is it called

629
00:47:53.960 --> 00:47:58.710
GRITS? And then how did you do any kind of
like automated testing for your game?

630
00:47:58.710 --> 00:48:03.869
&gt;&gt;Colton McAnlis: Okay. Why is it called GRITS?
I'm a fan of grits, that's all there is to

631
00:48:03.869 --> 00:48:06.089
it.
There's only -- let me put it this way, as

632
00:48:06.089 --> 00:48:10.999
a Google employee you see a lot of projects
come through with secret code names and stuff

633
00:48:10.999 --> 00:48:15.119
like that. And when you have a chance to name
one you kind of pick something kooky so someone

634
00:48:15.119 --> 00:48:19.499
else didn't already steal it. Like you would
hate to have named your project Glass and

635
00:48:19.499 --> 00:48:24.430
then have a dude skydive in and say "Here's
some Glass!"

636
00:48:24.430 --> 00:48:29.239
So GRITS just kind of showed up one day. It's
not an acronym or anything.

637
00:48:29.239 --> 00:48:34.059
And the second question was automated testing.
We had some basic stuff to sort test load

638
00:48:34.059 --> 00:48:39.650
balancing for App Engine, which Fred will
talk about in his talk a little later. How

639
00:48:39.650 --> 00:48:44.690
to properly scale that sort of things forward.
We didn't do any testing on the client side

640
00:48:44.690 --> 00:48:49.400
code and we didn't have a lot of time in our
window to test the server side code.

641
00:48:49.400 --> 00:48:53.140
So other than sort of mandatory play test
for all six of our team members everyday,

642
00:48:53.140 --> 00:48:55.950
we didn't get a chance to get much of a big
harness put together. That's kind of our fault

643
00:48:55.950 --> 00:48:58.369
on our thing that we definitely would like
to see fixed.

644
00:48:58.369 --> 00:49:02.890
We're over here now.
&gt;&gt;&gt; Hi. You talked about some prototype language

645
00:49:02.890 --> 00:49:06.759
that allowed you to create both the client
and server side JavaScript, and I was wondering

646
00:49:06.759 --> 00:49:11.559
if you could speak more about that or where
I can find out more information about that?

647
00:49:11.559 --> 00:49:16.660
&gt;&gt;Colton McAnlis: Uh, okay. Yeah, so the question
was prototype languages that allow you to

648
00:49:16.660 --> 00:49:19.819
generate both client and severer. Oh, so you're
talking about the code generation that we

649
00:49:19.819 --> 00:49:25.069
do? Yes. So look at our source code. That's
actually the place. It's not actually a prototype

650
00:49:25.069 --> 00:49:29.470
language. We actually define a structure in
JavaScript and then use JavaScript to scrape

651
00:49:29.470 --> 00:49:34.589
that JavaScript and then omit JavaScript.
So we use JavaScript to code gen and then

652
00:49:34.589 --> 00:49:37.690
move that file around.
&gt;&gt;&gt; So it's not a third-party library?

653
00:49:37.690 --> 00:49:40.900
&gt;&gt;Colton McAnlis: Nope. It's all in our code
base. In fact, the file you're looking for

654
00:49:40.900 --> 00:49:47.109
in the source code is server/proto.js, the
exact file. You will find our definition and

655
00:49:47.109 --> 00:49:52.119
then proto i is I think the one that actually
does the scraping of the code generation after

656
00:49:52.119 --> 00:49:53.799
that.
Over here.

657
00:49:53.799 --> 00:49:59.970
&gt;&gt;&gt; So since Web socket is TCP only, did you
guys have any kind of evaluation of TCP versus

658
00:49:59.970 --> 00:50:05.849
UDP and like how that behaves when you have
real network conditions and packet loss and

659
00:50:05.849 --> 00:50:09.730
things like that?
&gt;&gt;Colton McAnlis: The question is did we get

660
00:50:09.730 --> 00:50:14.249
a chance to evaluate TCP versus UDP versus
packet loss in real network conditions and

661
00:50:14.249 --> 00:50:17.380
stuff like that?
I would love to have somebody do that testing

662
00:50:17.380 --> 00:50:19.529
for us and let us know where it's falling
out.

663
00:50:19.529 --> 00:50:23.549
UDP wasn't really an option that we're able
to dive into a lot. We have Web sockets that

664
00:50:23.549 --> 00:50:27.079
are available. There's very rich containers
and wrappers for that.

665
00:50:27.079 --> 00:50:30.809
So again, in standard C++ development you
run into a brick wall of like, Hey, there's

666
00:50:30.809 --> 00:50:34.109
really no good library for UDP. You have to
reinvent the wheel every time.

667
00:50:34.109 --> 00:50:39.900
The fact that the JavaScript developer ecosystem
is very vibrant with people putting out open

668
00:50:39.900 --> 00:50:44.579
source libraries, it didn't make sense for
us to just reinvent the wheel there. It made

669
00:50:44.579 --> 00:50:47.480
more sense to use things like Socket I/O and
take advantage of that stuff.

670
00:50:47.480 --> 00:50:51.660
I will say that the guy who wrote all of our
networking code, Craig Tiller, absolutely

671
00:50:51.660 --> 00:50:56.099
genius. He's from the games industry where
all he's done for his entire career is optimize

672
00:50:56.099 --> 00:51:00.980
server side code and bandwidth and latency
hiding and everything. Definitely contact

673
00:51:00.980 --> 00:51:06.480
him. He's that first portrait right there.
Very beautiful man. Contact him. Craig, if

674
00:51:06.480 --> 00:51:08.720
you're watching...
Yes, sir?

675
00:51:08.720 --> 00:51:14.279
&gt;&gt;&gt; So how did you host your NodeJS?
&gt;&gt;Colton McAnlis: Next question.

676
00:51:14.279 --> 00:51:20.799
[Laughter]
&gt;&gt;Colton McAnlis: I like that. That was nice.

677
00:51:20.799 --> 00:51:26.130
Going once... going twice... The live internet
feed, everyone is like refresh.

678
00:51:26.130 --> 00:51:28.809
[Laughter]
&gt;&gt;Colton McAnlis: Hey, thank you guys so much

679
00:51:28.809 --> 00:51:33.720
again for your time. I really appreciate it.
Go check out the EA game. I'm Colt McAnlis.

680
00:51:33.720 --> 00:51:34.970
Send me an email.

WEBVTT

1
00:00:00.000 --> 00:00:08.109

2
00:00:08.109 --> 00:00:10.460
PETE LEPAGE: All right,
welcome everybody.

3
00:00:10.460 --> 00:00:12.430
Thanks for joining me.

4
00:00:12.430 --> 00:00:16.490
I did hear a little rumor
earlier that the description

5
00:00:16.490 --> 00:00:18.390
for this was that you might
be coming up and

6
00:00:18.390 --> 00:00:19.470
showing off your apps.

7
00:00:19.470 --> 00:00:23.530
If you were expecting that,
not so much today.

8
00:00:23.530 --> 00:00:25.660
What did you guys think of
the keynote this morning?

9
00:00:25.660 --> 00:00:27.540
Liked it, yeah?

10
00:00:27.540 --> 00:00:29.030
Awesome Cirque du
Soleil thing?

11
00:00:29.030 --> 00:00:30.410
Cool, yeah?

12
00:00:30.410 --> 00:00:32.390
All right, sweet.

13
00:00:32.390 --> 00:00:35.760
I'm going to be talking about
how to take a web app and turn

14
00:00:35.760 --> 00:00:39.500
it into one of the new Chrome
packaged applications using

15
00:00:39.500 --> 00:00:43.940
the new technologies that we've
got available to us.

16
00:00:43.940 --> 00:00:46.430
Chrome packaged applications
do a lot of things that are

17
00:00:46.430 --> 00:00:47.610
really cool.

18
00:00:47.610 --> 00:00:50.780
And really allow us as
developers to build

19
00:00:50.780 --> 00:00:54.020
applications using the
technology that we know today

20
00:00:54.020 --> 00:00:57.120
already, that we know how to
use, divs and C S S and all

21
00:00:57.120 --> 00:00:58.880
that great JavaScript stuff.

22
00:00:58.880 --> 00:01:02.460
And build applications that feel
like they're installed,

23
00:01:02.460 --> 00:01:10.830
that break out of the browser
so that they don't have that

24
00:01:10.830 --> 00:01:12.200
browser bar cross the top.

25
00:01:12.200 --> 00:01:15.695
They don't feel like that
experience of oh, I've got to

26
00:01:15.695 --> 00:01:17.310
open the browser and then I
got to go to this site.

27
00:01:17.310 --> 00:01:20.150
You click a button on the doc,
or you click something on the

28
00:01:20.150 --> 00:01:24.830
start menu, and the application
starts just as

29
00:01:24.830 --> 00:01:26.080
you'd expect it to.

30
00:01:26.080 --> 00:01:29.230
31
00:01:29.230 --> 00:01:33.280
With an enhanced UI that allows
us to really be able to

32
00:01:33.280 --> 00:01:35.510
do things that we can't
normally do in web

33
00:01:35.510 --> 00:01:36.430
applications.

34
00:01:36.430 --> 00:01:37.980
I want to be able to
open a window.

35
00:01:37.980 --> 00:01:40.740
I want to be able to move
it around or resize it.

36
00:01:40.740 --> 00:01:44.280
I want to be able to do things
that with web applications I

37
00:01:44.280 --> 00:01:48.330
can do today, but I might get
blocked because I'm not

38
00:01:48.330 --> 00:01:51.230
allowed to open new pop-up
windows and things like that.

39
00:01:51.230 --> 00:01:54.670
So an enhanced UI that really
lets us get beyond what we're

40
00:01:54.670 --> 00:01:57.560
used to doing.

41
00:01:57.560 --> 00:02:01.230
Offline by default, apps
that just work.

42
00:02:01.230 --> 00:02:04.240
Today when an app gets installed
on your computer,

43
00:02:04.240 --> 00:02:05.540
you expect it to work.

44
00:02:05.540 --> 00:02:08.190
When an app get installed on
your phone, you start it, you

45
00:02:08.190 --> 00:02:10.009
expect it to work whether
you've got an internet

46
00:02:10.009 --> 00:02:11.540
connection or not.

47
00:02:11.540 --> 00:02:15.260
Chrome packaged applications
should work like that.

48
00:02:15.260 --> 00:02:17.500
Web applications should
work like that.

49
00:02:17.500 --> 00:02:21.790
And we need to get users
thinking about that, right?

50
00:02:21.790 --> 00:02:24.370
I got made fun of a little bit
when I used this reference, so

51
00:02:24.370 --> 00:02:28.890
pardon me, but when my mom
starts a web app, she goes to

52
00:02:28.890 --> 00:02:31.270
Gmail or wherever she's going.

53
00:02:31.270 --> 00:02:33.260
If her computer's not connected,
she doesn't think

54
00:02:33.260 --> 00:02:35.050
that it's going to
work if it's not

55
00:02:35.050 --> 00:02:36.480
connected to the internet.

56
00:02:36.480 --> 00:02:39.540
So for her, we need
to really say hey,

57
00:02:39.540 --> 00:02:40.980
these apps work offline.

58
00:02:40.980 --> 00:02:45.230
And Chrome packaged applications
allow us to do

59
00:02:45.230 --> 00:02:47.730
that within this new model
that we've now got.

60
00:02:47.730 --> 00:02:50.320
61
00:02:50.320 --> 00:02:54.580
And my battery is dead, so I
guess I'm going to have to

62
00:02:54.580 --> 00:02:55.270
move around.

63
00:02:55.270 --> 00:02:57.960
My name is Pete LePage, I'm a
Developer Advocate on the

64
00:02:57.960 --> 00:02:58.990
Chrome Team.

65
00:02:58.990 --> 00:03:03.260
And it's my job to help folks
like you guys build web

66
00:03:03.260 --> 00:03:07.140
applications, build Chrome
packaged applications, and

67
00:03:07.140 --> 00:03:09.710
really take advantage of all the
cool stuff that you saw in

68
00:03:09.710 --> 00:03:11.220
the keynote this morning.

69
00:03:11.220 --> 00:03:15.435
And be able to get better access
to your customers, to

70
00:03:15.435 --> 00:03:18.810
your users, and to all the fun
stuff that Chrome really has

71
00:03:18.810 --> 00:03:20.330
to offer for you.

72
00:03:20.330 --> 00:03:21.640
You can find me on Google+.

73
00:03:21.640 --> 00:03:25.990
I'm also on Twitter, though I
don't tweet very often, as

74
00:03:25.990 --> 00:03:26.890
well as my blog.

75
00:03:26.890 --> 00:03:30.170
And I've got some stuff
up on GitHub.

76
00:03:30.170 --> 00:03:34.740
So when I think about the legacy
packaged app, this is

77
00:03:34.740 --> 00:03:36.930
what a legacy packaged
app looks like.

78
00:03:36.930 --> 00:03:40.180
I've still got the address bar
up at the top, I still need to

79
00:03:40.180 --> 00:03:41.230
start it in the same way.

80
00:03:41.230 --> 00:03:47.860
In fact, let's get out of here
and let's have a look at a

81
00:03:47.860 --> 00:03:49.090
little packaged app.

82
00:03:49.090 --> 00:03:52.580
So we're going to take a
look at this particular

83
00:03:52.580 --> 00:03:53.270
application.

84
00:03:53.270 --> 00:03:57.160
This is just a simple
RSS reader that

85
00:03:57.160 --> 00:03:58.510
I've gone and built.

86
00:03:58.510 --> 00:04:01.590
Because I wanted to see what
it was like to build an

87
00:04:01.590 --> 00:04:05.290
application and then convert it
to a packaged application.

88
00:04:05.290 --> 00:04:10.380
So you can see I've got a list
of different feeds available.

89
00:04:10.380 --> 00:04:13.520
I can go, I can scroll down, I
can go click on one of these.

90
00:04:13.520 --> 00:04:16.170
But I still have the address
bar up here, I

91
00:04:16.170 --> 00:04:18.160
can't open new Windows.

92
00:04:18.160 --> 00:04:22.250
It's not exactly the best
connection, it's not exactly

93
00:04:22.250 --> 00:04:25.800
the best experience that I
really want to have as I'm

94
00:04:25.800 --> 00:04:32.140
reading through my RSS feeds
and all of that.

95
00:04:32.140 --> 00:04:36.660
So I chose this application in
particular because it does a

96
00:04:36.660 --> 00:04:38.150
couple of things really well.

97
00:04:38.150 --> 00:04:42.730
One, it's a single-page
application.

98
00:04:42.730 --> 00:04:45.240
So it works really well,
there's not a lot of

99
00:04:45.240 --> 00:04:48.020
navigation from page
to page to page.

100
00:04:48.020 --> 00:04:51.020
It should work offline.

101
00:04:51.020 --> 00:04:53.420
I should be able to take all of
that data that I've got and

102
00:04:53.420 --> 00:04:56.380
all of the stuff that I'm used
to using, and I should be able

103
00:04:56.380 --> 00:04:59.560
to just say all right, great,
I want to access all of that

104
00:04:59.560 --> 00:05:01.320
without having to do
anything else.

105
00:05:01.320 --> 00:05:05.130
106
00:05:05.130 --> 00:05:08.810
So we're going to walk
through what I went

107
00:05:08.810 --> 00:05:10.270
through to get there.

108
00:05:10.270 --> 00:05:21.020
So let's go back ti the slides
for a sec and try that again.

109
00:05:21.020 --> 00:05:24.470
Hey, there we go, that looks
a little better.

110
00:05:24.470 --> 00:05:27.340
So when you think of a legacy
packaged app, you had a

111
00:05:27.340 --> 00:05:28.250
manifest file.

112
00:05:28.250 --> 00:05:31.290
How many people have built a
packaged app or a Chrome app

113
00:05:31.290 --> 00:05:32.760
in the past?

114
00:05:32.760 --> 00:05:35.210
All right, so few people,
about half the room.

115
00:05:35.210 --> 00:05:37.640
So you had a manifest file,
and that manifest file was

116
00:05:37.640 --> 00:05:40.560
really what told Chrome how your
apps should work and what

117
00:05:40.560 --> 00:05:43.020
it should start, where
it should go.

118
00:05:43.020 --> 00:05:47.960
And within that manifest, it had
effectively a link, or it

119
00:05:47.960 --> 00:05:50.180
said hey, when you start
I want you to go

120
00:05:50.180 --> 00:05:52.040
open this index file.

121
00:05:52.040 --> 00:05:55.580
And that index file might go off
and grab any resources it

122
00:05:55.580 --> 00:05:58.300
might need, any HTML,
or C S S.

123
00:05:58.300 --> 00:06:01.960
But all of that stuff fit into
as a package, into a zip file,

124
00:06:01.960 --> 00:06:04.570
that you uploaded to the
Chrome Web Store.

125
00:06:04.570 --> 00:06:07.770
And it could also sometimes
have a background page.

126
00:06:07.770 --> 00:06:10.990
And you might use that
background page to say go pull

127
00:06:10.990 --> 00:06:13.770
for data so that you
could pull data

128
00:06:13.770 --> 00:06:15.970
down and save it somewhere.

129
00:06:15.970 --> 00:06:19.290
You might use some
context menus.

130
00:06:19.290 --> 00:06:22.140
But all of that stuff, you'd
have to set up a loop.

131
00:06:22.140 --> 00:06:24.360
You'd have to either use a loop,
you'd have to use set

132
00:06:24.360 --> 00:06:27.930
interval, there were a whole
bunch of things that would

133
00:06:27.930 --> 00:06:30.800
cause some pain in the
butt sometimes.

134
00:06:30.800 --> 00:06:35.050
And could potentially, if you
didn't write it very well or

135
00:06:35.050 --> 00:06:39.170
used some bad practices or worst
practices, if such a

136
00:06:39.170 --> 00:06:43.580
thing exists, could affect the
performance of Chrome for

137
00:06:43.580 --> 00:06:45.280
everything else.

138
00:06:45.280 --> 00:06:48.450
So one of the things that we
really wanted to address as we

139
00:06:48.450 --> 00:06:53.110
started making these
enhancements to Chrome

140
00:06:53.110 --> 00:06:55.270
packaged apps is
how we do that.

141
00:06:55.270 --> 00:06:58.560
How do we make it easier so
that the applications that

142
00:06:58.560 --> 00:07:04.800
you're writing, it's harder
to do the wrong thing.

143
00:07:04.800 --> 00:07:06.720
So let's get started
and have a look at

144
00:07:06.720 --> 00:07:09.050
how I converted this.

145
00:07:09.050 --> 00:07:10.930
Now, I'm going to throw
up this warning.

146
00:07:10.930 --> 00:07:13.560
I'm just going to say
time out for a sec.

147
00:07:13.560 --> 00:07:16.920
This is a developer preview,
this is not something that you

148
00:07:16.920 --> 00:07:20.330
can go ship a production-level
app on.

149
00:07:20.330 --> 00:07:22.930
If you do, congratulations.

150
00:07:22.930 --> 00:07:25.330
You can't get it in the
Chrome Web Store.

151
00:07:25.330 --> 00:07:28.850
But if you give it out to a
bunch of users, it probably

152
00:07:28.850 --> 00:07:30.820
will break at some point
in the future.

153
00:07:30.820 --> 00:07:33.750
So just that word of warning as
you're playing with this.

154
00:07:33.750 --> 00:07:36.540
If you're like hey, this worked
yesterday, but now that

155
00:07:36.540 --> 00:07:38.200
I got a Chrome update
it doesn't work.

156
00:07:38.200 --> 00:07:41.500
Go have a look at the docs for
known issues in any updates.

157
00:07:41.500 --> 00:07:45.950
Because things are changing on
a regular basis, and we're

158
00:07:45.950 --> 00:07:49.120
working to get a lot of
new great stuff added.

159
00:07:49.120 --> 00:07:52.580
And sometimes that means taking
your feedback and going

160
00:07:52.580 --> 00:07:55.310
oh, guess we didn't think
about that one too well.

161
00:07:55.310 --> 00:07:57.200
I guess we better change that.

162
00:07:57.200 --> 00:08:00.060
So getting your feedback is
really important to us.

163
00:08:00.060 --> 00:08:02.680
We want to hear what you
have to say about these

164
00:08:02.680 --> 00:08:04.890
applications as you're
building them.

165
00:08:04.890 --> 00:08:06.370
What are your experiences?

166
00:08:06.370 --> 00:08:09.430
How do we need to make these
things better so that you can

167
00:08:09.430 --> 00:08:15.600
build the type of applications
that you want to build?

168
00:08:15.600 --> 00:08:20.390
So with the new architecture,
it changes a little bit.

169
00:08:20.390 --> 00:08:23.870
Remember before we had our
manifest which would then

170
00:08:23.870 --> 00:08:26.570
kick-off an index file?

171
00:08:26.570 --> 00:08:29.350
In a new Chrome packaged
application, instead of

172
00:08:29.350 --> 00:08:32.289
kicking-off an index file,
the first thing that the

173
00:08:32.289 --> 00:08:35.770
application does is it kicks-off
a background script.

174
00:08:35.770 --> 00:08:40.900
So that background script, think
very similarly to if

175
00:08:40.900 --> 00:08:45.120
you're writing a native
application for Windows or for

176
00:08:45.120 --> 00:08:46.810
Android or for any
other device.

177
00:08:46.810 --> 00:08:50.700
There's some kind of like C#
file, or there's some main

178
00:08:50.700 --> 00:08:53.920
file that might kick open other
windows and all that

179
00:08:53.920 --> 00:08:54.600
kind of stuff.

180
00:08:54.600 --> 00:08:56.380
It works in the same way.

181
00:08:56.380 --> 00:08:58.740
So that background script is
going to go, and it's going to

182
00:08:58.740 --> 00:09:01.010
start running first thing.

183
00:09:01.010 --> 00:09:04.930
And when you want to start the
application, it then goes and

184
00:09:04.930 --> 00:09:07.770
opens your application
UI window.

185
00:09:07.770 --> 00:09:11.180
So it says, oh hey, the
user wants to start.

186
00:09:11.180 --> 00:09:13.640
I guess I should open this
window up, and it goes and

187
00:09:13.640 --> 00:09:14.860
opens that window.

188
00:09:14.860 --> 00:09:17.290
So the difference here, and
the really important thing

189
00:09:17.290 --> 00:09:19.340
here, is that background
script needs

190
00:09:19.340 --> 00:09:20.340
to listen for events.

191
00:09:20.340 --> 00:09:22.780
We'll talk about
that in a sec.

192
00:09:22.780 --> 00:09:25.750
So the application that we used,
we didn't use all of the

193
00:09:25.750 --> 00:09:29.510
technology that's possibly
available to us,

194
00:09:29.510 --> 00:09:30.710
but we used a bunch.

195
00:09:30.710 --> 00:09:36.830
When we used the Chrome
experimental apps API--

196
00:09:36.830 --> 00:09:39.250
maybe it's just standing
too far away.

197
00:09:39.250 --> 00:09:40.210
Maybe if I go over here.

198
00:09:40.210 --> 00:09:42.430
We used the chrome.storage.sync.

199
00:09:42.430 --> 00:09:43.720
I'm going to talk about
each of these in

200
00:09:43.720 --> 00:09:44.660
depth in a little bit.

201
00:09:44.660 --> 00:09:48.600
But chrome.storage.sync, how
many people used chrome.sync

202
00:09:48.600 --> 00:09:51.550
in Chrome when they used Chrome
today to sync all your

203
00:09:51.550 --> 00:09:54.340
passwords, your favorites,
all that kind of stuff?

204
00:09:54.340 --> 00:09:57.880
And, kind of cool,
chrome.storage.sync basically

205
00:09:57.880 --> 00:10:00.510
lets you take whatever you want
for your application,

206
00:10:00.510 --> 00:10:03.440
within a set of limits
obviously, and store that

207
00:10:03.440 --> 00:10:04.440
stuff up in the cloud.

208
00:10:04.440 --> 00:10:07.120
So that no matter which computer
I'm logged into, I

209
00:10:07.120 --> 00:10:10.190
have all of those settings
synced across all machines.

210
00:10:10.190 --> 00:10:13.400
So I can have maybe my
credentials, maybe a list of

211
00:10:13.400 --> 00:10:14.860
read items.

212
00:10:14.860 --> 00:10:18.770
All of that stuff I can keep
synced in the cloud.

213
00:10:18.770 --> 00:10:23.530
Chrome.storage.local which is
very similar, but it only is

214
00:10:23.530 --> 00:10:25.890
local to that specific
machine.

215
00:10:25.890 --> 00:10:29.850
We use Chrome alerts to notify
the user of a bunch of stuff.

216
00:10:29.850 --> 00:10:32.620
We use sandbox pages, and I'm
going to talk about Content

217
00:10:32.620 --> 00:10:35.140
Security Policy in a little
bit and why we'd

218
00:10:35.140 --> 00:10:37.000
use a sandbox page.

219
00:10:37.000 --> 00:10:38.830
And we used Angular.js.

220
00:10:38.830 --> 00:10:42.260
We used Angular.js because
Angular did something that

221
00:10:42.260 --> 00:10:45.310
made our lives a little
bit easier.

222
00:10:45.310 --> 00:10:47.880
How many people have heard of
Content Security Policy?

223
00:10:47.880 --> 00:10:50.320
Yay, OK, only a couple hands.

224
00:10:50.320 --> 00:10:52.450
We're going to go into
more depth on this.

225
00:10:52.450 --> 00:10:55.570
This is something that's really
important, but it could

226
00:10:55.570 --> 00:10:57.180
change the way we think
about a lot of stuff.

227
00:10:57.180 --> 00:10:59.930
And it's, like I said, it's
really important and it will

228
00:10:59.930 --> 00:11:03.150
make the web a lot safer.

229
00:11:03.150 --> 00:11:04.480
Nice big eye chart.

230
00:11:04.480 --> 00:11:06.560
This is how the app is
kind of laid out.

231
00:11:06.560 --> 00:11:09.880
So you can see right there in
the center of the app is that

232
00:11:09.880 --> 00:11:10.560
background page.

233
00:11:10.560 --> 00:11:13.800
And that background page goes
and does all of the stuff we

234
00:11:13.800 --> 00:11:14.690
need to do.

235
00:11:14.690 --> 00:11:18.410
And I promise, we will get into
real code here shortly.

236
00:11:18.410 --> 00:11:20.400
I think it's like one slide
or two slides away.

237
00:11:20.400 --> 00:11:23.280
So we've got that background
page, and it goes off and

238
00:11:23.280 --> 00:11:26.490
kicks-off the app page there
at the very bottom.

239
00:11:26.490 --> 00:11:29.650
It goes over and it gets access
to data in different

240
00:11:29.650 --> 00:11:31.460
data places.

241
00:11:31.460 --> 00:11:33.565
And it goes up to the cloud
and it asks for feeds.

242
00:11:33.565 --> 00:11:37.700
243
00:11:37.700 --> 00:11:40.520
So the first thing we need to
do in our application is we

244
00:11:40.520 --> 00:11:42.210
need to update the manifest.

245
00:11:42.210 --> 00:11:46.690
The manifest for a new packaged
app has changed a

246
00:11:46.690 --> 00:11:47.900
little bit, and I want
to highlight a

247
00:11:47.900 --> 00:11:48.615
couple of the changes.

248
00:11:48.615 --> 00:11:51.510
So the first thing that changes
is we need to add a

249
00:11:51.510 --> 00:11:53.360
manifest version 2.

250
00:11:53.360 --> 00:11:57.020
Manifest version 2 tells Chrome,
hey, this is a new

251
00:11:57.020 --> 00:11:59.340
Chrome packaged app.

252
00:11:59.340 --> 00:12:03.720
It also turns on Content
Security Policy.

253
00:12:03.720 --> 00:12:07.730
Second thing, we want to add
offline true, because our apps

254
00:12:07.730 --> 00:12:09.110
are designed to work offline.

255
00:12:09.110 --> 00:12:12.320
Everything that we have we need
for our application is

256
00:12:12.320 --> 00:12:17.560
sitting there in our zip file in
our package that we zipped

257
00:12:17.560 --> 00:12:20.400
up and uploaded and
is good to go.

258
00:12:20.400 --> 00:12:23.000
The next thing is we
need to add the

259
00:12:23.000 --> 00:12:25.500
app background scripts.

260
00:12:25.500 --> 00:12:30.180
If you remember before in V1
apps, that was where we put

261
00:12:30.180 --> 00:12:30.920
our index file.

262
00:12:30.920 --> 00:12:32.970
We said, hey, this
is my index file.

263
00:12:32.970 --> 00:12:35.560
And then finally, we need to
add a couple of specific

264
00:12:35.560 --> 00:12:36.620
permissions.

265
00:12:36.620 --> 00:12:40.790
We need to add the app window
permission which says hey, we

266
00:12:40.790 --> 00:12:42.840
want to be able to open windows,
we need to be able to

267
00:12:42.840 --> 00:12:43.760
manipulate windows.

268
00:12:43.760 --> 00:12:45.540
We want to do all that stuff.

269
00:12:45.540 --> 00:12:47.670
And then we need experimental.

270
00:12:47.670 --> 00:12:51.680
Now, we are only going to need
experimental while we're in an

271
00:12:51.680 --> 00:12:54.530
experimental stage, so
that will go away

272
00:12:54.530 --> 00:12:57.190
sometime in the future.

273
00:12:57.190 --> 00:13:00.720
And that right now is one of the
things that will prevent

274
00:13:00.720 --> 00:13:03.360
your app from getting uploaded
to the Chrome Web Store.

275
00:13:03.360 --> 00:13:05.710
So if you go and you're like,
hey, I got this great app and

276
00:13:05.710 --> 00:13:06.830
I want to get it in,
and you're like

277
00:13:06.830 --> 00:13:07.840
why won't it upload?

278
00:13:07.840 --> 00:13:10.740
Well, that's a big part
of the reason.

279
00:13:10.740 --> 00:13:15.370
So let's go and actually
do that.

280
00:13:15.370 --> 00:13:17.990
So I have here my text editor.

281
00:13:17.990 --> 00:13:20.620
And don't worry, we got some
nice decent size fonts here.

282
00:13:20.620 --> 00:13:26.270
And instead of doing it in
there, I'm going to do it in

283
00:13:26.270 --> 00:13:29.420
my Updated, and I'm going
to go grab my manifest.

284
00:13:29.420 --> 00:13:33.210
All right, so we need to
add a couple of things.

285
00:13:33.210 --> 00:13:39.640
So we need to add our manifest
version, and we want to set

286
00:13:39.640 --> 00:13:41.620
that guy at two, right?

287
00:13:41.620 --> 00:13:48.430
We want to add offline enabled,
and we want to set

288
00:13:48.430 --> 00:13:50.050
that to true.

289
00:13:50.050 --> 00:13:54.750
Then, remember we said we had
to change from the index to

290
00:13:54.750 --> 00:13:57.760
instead use our background
page?

291
00:13:57.760 --> 00:14:01.770
So I'm going to say background,
and I'm going to

292
00:14:01.770 --> 00:14:11.020
go here and say scripts, and
turn that into an array,

293
00:14:11.020 --> 00:14:14.270
because we can have multiple
background scripts.

294
00:14:14.270 --> 00:14:18.050
And I'm just going to say
background.js, and I'm going

295
00:14:18.050 --> 00:14:20.790
to put that in my js folder.

296
00:14:20.790 --> 00:14:24.785
All right, two other things
we need to do.

297
00:14:24.785 --> 00:14:29.150
298
00:14:29.150 --> 00:14:41.010
Run permissions, and appWindow,
and experimental.

299
00:14:41.010 --> 00:14:48.120
All right, so we've done
all the things we

300
00:14:48.120 --> 00:14:50.290
needed to do here.

301
00:14:50.290 --> 00:14:53.220
So we've got our manifest
set to go.

302
00:14:53.220 --> 00:14:55.500
We can't actually go hit run
yet, because we don't have our

303
00:14:55.500 --> 00:14:56.180
background page.

304
00:14:56.180 --> 00:14:59.550
So let's have a look at what
is in our background page.

305
00:14:59.550 --> 00:15:02.730
306
00:15:02.730 --> 00:15:05.870
So in our background page we're
going to put primarily

307
00:15:05.870 --> 00:15:07.950
just one chunk of
code for now.

308
00:15:07.950 --> 00:15:11.520
And that's the listen for the
application start event.

309
00:15:11.520 --> 00:15:14.980
So instead of doing loops and
all kinds of other stuff like

310
00:15:14.980 --> 00:15:21.420
we did before in the legacy
packaged apps, everything is

311
00:15:21.420 --> 00:15:23.620
event-driven, event-based.

312
00:15:23.620 --> 00:15:27.750
So we want to say right there
in the top bit of our app,

313
00:15:27.750 --> 00:15:31.120
Chrome experimental app
unlaunched, add listener.

314
00:15:31.120 --> 00:15:33.440
So we want to say we want
to listen for an event.

315
00:15:33.440 --> 00:15:36.990
And we then say all right, when
that event fires we want

316
00:15:36.990 --> 00:15:39.910
to start and create
a new window.

317
00:15:39.910 --> 00:15:43.370
And the window we want to create
is the index HTML.

318
00:15:43.370 --> 00:15:45.800
Now, I can also add a couple
additional properties.

319
00:15:45.800 --> 00:15:49.110
So I can say I want that window
to open up at 1024 by

320
00:15:49.110 --> 00:15:55.170
768, I wanted it to open at 100
pixels over and 100 pixels

321
00:15:55.170 --> 00:15:58.170
down, and type shell.

322
00:15:58.170 --> 00:16:01.860
All right, we're just going
to cheat a little bit.

323
00:16:01.860 --> 00:16:15.690
We're going to copy this and new
file, paste that guy in,

324
00:16:15.690 --> 00:16:16.940
background.js.

325
00:16:16.940 --> 00:16:19.210
326
00:16:19.210 --> 00:16:23.540
So we've got our background
page in, so it's there.

327
00:16:23.540 --> 00:16:26.675
Now when the app starts, we're
going to be good to go.

328
00:16:26.675 --> 00:16:30.040
329
00:16:30.040 --> 00:16:32.710
There's a couple other events
that we can listen for, like

330
00:16:32.710 --> 00:16:36.180
the uninstalled and an
on suspend event.

331
00:16:36.180 --> 00:16:37.880
We're not going to worry about
those right now, because

332
00:16:37.880 --> 00:16:40.690
really the only thing we want to
do right now when we start

333
00:16:40.690 --> 00:16:43.550
is the on start.

334
00:16:43.550 --> 00:16:46.750
Couple of things we need to
do just in preparation.

335
00:16:46.750 --> 00:16:50.060
In the future we probably
won't have to do this,

336
00:16:50.060 --> 00:16:52.890
but for now we do.

337
00:16:52.890 --> 00:16:55.520
This stuff is only available
in Chrome Canary.

338
00:16:55.520 --> 00:16:59.320
There's a reason for that, kind
of fun, kind of a little

339
00:16:59.320 --> 00:17:01.940
bit on the edge.

340
00:17:01.940 --> 00:17:03.510
Chrome Canary's where
you can always get

341
00:17:03.510 --> 00:17:06.119
the latest and greatest.

342
00:17:06.119 --> 00:17:08.190
It will be in dev
channel soon.

343
00:17:08.190 --> 00:17:10.720
Now the great thing about
running it in Chrome Canary is

344
00:17:10.720 --> 00:17:13.700
that you can run Chrome Canary
and Chrome Stable or Chrome

345
00:17:13.700 --> 00:17:16.680
Beta or Chrome Dev
side by side.

346
00:17:16.680 --> 00:17:18.760
So that way if you're ever like
OK, well, I want to go

347
00:17:18.760 --> 00:17:21.460
try something and see how it
works and I still need to

348
00:17:21.460 --> 00:17:24.349
actually be able to browse and
do my real stuff, you can have

349
00:17:24.349 --> 00:17:25.569
those both side by side.

350
00:17:25.569 --> 00:17:28.700
So Chrome Canary, and then we
need to just go add our app,

351
00:17:28.700 --> 00:17:31.260
just like we did with the
legacy packaged app.

352
00:17:31.260 --> 00:17:33.170
So the first thing I'm
going to do, let's go

353
00:17:33.170 --> 00:17:35.000
over to Chrome Canary.

354
00:17:35.000 --> 00:17:39.410
And I'm going to close this guy
out, I'm going to go to

355
00:17:39.410 --> 00:17:41.990
Tools, and Extensions.

356
00:17:41.990 --> 00:17:44.640
357
00:17:44.640 --> 00:17:47.100
So I've already checked the
developer mode, so I'm going

358
00:17:47.100 --> 00:17:49.961
to go and load an unpacked
extension.

359
00:17:49.961 --> 00:17:54.440
So I'm going to grab this, click
Select, a-ha, all right,

360
00:17:54.440 --> 00:18:02.934
dictionary keys must be
quoted, so line 16.

361
00:18:02.934 --> 00:18:05.470
You know that pink thing that's
right there might have

362
00:18:05.470 --> 00:18:07.140
given it away when I was
doing this early.

363
00:18:07.140 --> 00:18:14.445
364
00:18:14.445 --> 00:18:15.810
Try that again.

365
00:18:15.810 --> 00:18:18.980
366
00:18:18.980 --> 00:18:22.820
All right, so now if I
go over here, you'll

367
00:18:22.820 --> 00:18:24.610
notice I've got my legacy.

368
00:18:24.610 --> 00:18:26.720
We've got my final, so we'll see
what that looks like in a

369
00:18:26.720 --> 00:18:29.290
sec, but I've got the updated.

370
00:18:29.290 --> 00:18:31.680
One thing you'll notice, the
difference between the legacy

371
00:18:31.680 --> 00:18:36.580
and the updated, the legacy is
kind of gray there because I

372
00:18:36.580 --> 00:18:39.400
don't have an internet
connection right now.

373
00:18:39.400 --> 00:18:43.110
By putting that offline enabled
there, it tells the

374
00:18:43.110 --> 00:18:46.200
app hey, this app
works offline.

375
00:18:46.200 --> 00:18:49.340
And as we go through and have
a look at why it works

376
00:18:49.340 --> 00:18:52.420
offline, you'll get into this
a little bit deeper.

377
00:18:52.420 --> 00:18:54.890
But let's go and
start our app.

378
00:18:54.890 --> 00:19:02.550
Hmm, OK, it's started, but it
doesn't look very good.

379
00:19:02.550 --> 00:19:04.910
I would expect to see some
numbers there, I'd expect to

380
00:19:04.910 --> 00:19:06.930
see some data.

381
00:19:06.930 --> 00:19:10.700
At least we have an app running,
our window opened.

382
00:19:10.700 --> 00:19:13.219
We've got a sad panda, we
can deal with sad panda.

383
00:19:13.219 --> 00:19:18.010
384
00:19:18.010 --> 00:19:21.470
All right, so let's see that in
action, we already saw it.

385
00:19:21.470 --> 00:19:22.790
What happened there?

386
00:19:22.790 --> 00:19:25.530
We actually got hit by something
called Content

387
00:19:25.530 --> 00:19:28.820
Security Policy there.

388
00:19:28.820 --> 00:19:30.310
I asked how many people
have heard about

389
00:19:30.310 --> 00:19:32.590
Content Security Policy.

390
00:19:32.590 --> 00:19:34.940
It's a new thing that's coming,
and it's going to make

391
00:19:34.940 --> 00:19:36.000
the web a lot safer.

392
00:19:36.000 --> 00:19:40.230
But it also makes things a
little bit different for us as

393
00:19:40.230 --> 00:19:42.590
developers, because we have
to approach things

394
00:19:42.590 --> 00:19:44.280
in a different way.

395
00:19:44.280 --> 00:19:48.050
I kind of like to use a little
bit of an analogy of it, and

396
00:19:48.050 --> 00:19:51.850
talk about it as when you
take the kids trick

397
00:19:51.850 --> 00:19:54.340
or treating at Halloween.

398
00:19:54.340 --> 00:19:56.950
They go out to all these
strangers' houses and the

399
00:19:56.950 --> 00:19:59.980
strangers give them candy.

400
00:19:59.980 --> 00:20:04.830
And you get home, and as
parents, the parents sort

401
00:20:04.830 --> 00:20:06.920
through the candy and say you
can have this, you can't have

402
00:20:06.920 --> 00:20:08.100
this, you can have this.

403
00:20:08.100 --> 00:20:11.360
As a kid, you're like I want
all of it, it's all good.

404
00:20:11.360 --> 00:20:13.680
Like, you want all that
candy, but some of

405
00:20:13.680 --> 00:20:16.130
it's potentially dangerous.

406
00:20:16.130 --> 00:20:17.730
The web is very similar.

407
00:20:17.730 --> 00:20:24.510
When we say hey, you can take
anything you want, you might

408
00:20:24.510 --> 00:20:25.790
get good stuff, right?

409
00:20:25.790 --> 00:20:29.050
You might get great stuff, you
might get great data feeds,

410
00:20:29.050 --> 00:20:31.230
you might get whatever
you want.

411
00:20:31.230 --> 00:20:35.710
But somebody out there might be
malicious and say oh, I'm

412
00:20:35.710 --> 00:20:38.430
going to give you some bad
stuff, and you're going to get

413
00:20:38.430 --> 00:20:40.830
something like a cross-site
scripting vulnerability.

414
00:20:40.830 --> 00:20:46.010
Well, Content Security Policy
basically says on the web you

415
00:20:46.010 --> 00:20:50.190
are allowed to get content, data
source, whatever, from

416
00:20:50.190 --> 00:20:52.770
these places, but
not from these.

417
00:20:52.770 --> 00:20:55.440
So just like when your parents
came in at Halloween and said

418
00:20:55.440 --> 00:20:58.760
you can have this candy but you
can't have this, Content

419
00:20:58.760 --> 00:21:00.540
Security Policy does
that same thing.

420
00:21:00.540 --> 00:21:04.230
It says this is safe,
this is not.

421
00:21:04.230 --> 00:21:07.690
Now with Chrome packaged apps,
we said you know what, let's

422
00:21:07.690 --> 00:21:10.870
make these apps as
safe as we can.

423
00:21:10.870 --> 00:21:15.040
So we put a relatively strict
set of rules on that.

424
00:21:15.040 --> 00:21:16.750
So let's talk about a couple
of the things that are

425
00:21:16.750 --> 00:21:20.490
potentially dangerous, why
we block them, and

426
00:21:20.490 --> 00:21:22.530
what's going on.

427
00:21:22.530 --> 00:21:25.880
So any code that comes from
outside of your control, so

428
00:21:25.880 --> 00:21:29.110
that's not delivered in the
package of your application,

429
00:21:29.110 --> 00:21:30.730
is going to be blocked.

430
00:21:30.730 --> 00:21:34.280
That means if you try and go
get Google Analytics, the

431
00:21:34.280 --> 00:21:38.310
ga.js kind of code, that's
going to be blocked.

432
00:21:38.310 --> 00:21:40.240
Sure, you get it from
Google Analytics.

433
00:21:40.240 --> 00:21:43.060
We're probably not evil, at
least I hope we're not.

434
00:21:43.060 --> 00:21:44.500
Well, we've got this
thing that says

435
00:21:44.500 --> 00:21:45.680
don't be evil, right?

436
00:21:45.680 --> 00:21:49.550
So that's OK, but we don't know
where you're going to go

437
00:21:49.550 --> 00:21:50.410
get all this stuff from.

438
00:21:50.410 --> 00:21:53.560
So we say if it's not your
package, you can't have it.

439
00:21:53.560 --> 00:21:55.870
Because you might go and get
something from somebody else's

440
00:21:55.870 --> 00:21:58.580
source, maybe somebody said
oh hey, I'll host Google

441
00:21:58.580 --> 00:21:59.760
Analytics code for you.

442
00:21:59.760 --> 00:22:03.030
And all a sudden it's not
actually that code anymore,

443
00:22:03.030 --> 00:22:04.670
and they're doing something
malicious with it.

444
00:22:04.670 --> 00:22:07.760
So if it's code from outside of
your control, you can't put

445
00:22:07.760 --> 00:22:09.140
it in the app.

446
00:22:09.140 --> 00:22:12.970
Second thing, we block
inline scripts,

447
00:22:12.970 --> 00:22:14.800
including JavaScript URLs.

448
00:22:14.800 --> 00:22:17.710
449
00:22:17.710 --> 00:22:20.550
That one kind of sucks, right?

450
00:22:20.550 --> 00:22:22.040
We're kind of used to
sometimes doing

451
00:22:22.040 --> 00:22:22.820
that kind of stuff.

452
00:22:22.820 --> 00:22:26.270
Now, it's not exactly a best
practice for doing that, but

453
00:22:26.270 --> 00:22:29.730
inline scripts-- the problem
with inline scripts is, so

454
00:22:29.730 --> 00:22:32.590
we're looking through this HTML,
and we come across a

455
00:22:32.590 --> 00:22:33.220
script block.

456
00:22:33.220 --> 00:22:35.840
Well, if we come across a script
block, how do we know

457
00:22:35.840 --> 00:22:39.330
that you as the developer
actually put that in there

458
00:22:39.330 --> 00:22:43.070
versus somebody injecting that
in via some kind of cross-site

459
00:22:43.070 --> 00:22:45.170
scripting attack, or
something else?

460
00:22:45.170 --> 00:22:51.030
So anything that could get
injected into the HTML, nope,

461
00:22:51.030 --> 00:22:54.230
sorry, we're not going to let
that happen because it could

462
00:22:54.230 --> 00:22:57.980
potentially allow that
cross-site scripting.

463
00:22:57.980 --> 00:23:00.840
This one I think should be
pretty obvious why we don't

464
00:23:00.840 --> 00:23:02.620
let you have eval.

465
00:23:02.620 --> 00:23:05.720
Eval is kind of evil, it's
one letter away.

466
00:23:05.720 --> 00:23:11.420
So unsafe code execution like
eval, because you could

467
00:23:11.420 --> 00:23:15.540
basically take any text, run it
through eval, turn it into

468
00:23:15.540 --> 00:23:19.470
some nice, cool, nasty
script, not so good.

469
00:23:19.470 --> 00:23:23.170
Pretty much every browser today
supports JSON.parse and

470
00:23:23.170 --> 00:23:23.920
JSON.stringify.

471
00:23:23.920 --> 00:23:24.630
String/file.

472
00:23:24.630 --> 00:23:28.620
So realistically, the need for
eval is pretty limited.

473
00:23:28.620 --> 00:23:31.670
There are a few places where
eval is useful and

474
00:23:31.670 --> 00:23:32.920
where eval is good.

475
00:23:32.920 --> 00:23:36.930
476
00:23:36.930 --> 00:23:40.910
Safe, good, protecting your
users, protecting your

477
00:23:40.910 --> 00:23:44.575
customers, protecting your
data, potentially evil.

478
00:23:44.575 --> 00:23:49.480
Hmm, I usually like the
safe, good better.

479
00:23:49.480 --> 00:23:51.720
So let's have a look at a
practical example, like a very

480
00:23:51.720 --> 00:23:53.250
specific example here.

481
00:23:53.250 --> 00:23:56.500
So this is in the HTML of my
application, I've got a

482
00:23:56.500 --> 00:24:00.270
function that says callme and
it prints out a little line.

483
00:24:00.270 --> 00:24:04.440
And I've got a button, and the
button has an onclick directly

484
00:24:04.440 --> 00:24:08.400
on it that calls the function,
and I've got

485
00:24:08.400 --> 00:24:09.820
some text in there.

486
00:24:09.820 --> 00:24:12.430
So that's not going
to work, right?

487
00:24:12.430 --> 00:24:20.040
We've got both an inline script
block, and we've got

488
00:24:20.040 --> 00:24:22.790
inline script in our
button as well--

489
00:24:22.790 --> 00:24:24.740
not going to happen.

490
00:24:24.740 --> 00:24:26.570
So here's the better
way to do it.

491
00:24:26.570 --> 00:24:29.560
It's a couple more lines of
code, but it's the better

492
00:24:29.560 --> 00:24:30.700
practice to do it.

493
00:24:30.700 --> 00:24:37.880
First thing we do, we've got our
script block that links to

494
00:24:37.880 --> 00:24:40.630
our file, and then we put
our button there that

495
00:24:40.630 --> 00:24:42.230
says hey, call me.

496
00:24:42.230 --> 00:24:44.920
It's got an ID on the button so
that we can get access to

497
00:24:44.920 --> 00:24:46.140
it a little bit later.

498
00:24:46.140 --> 00:24:48.500
And then we have our
function in the

499
00:24:48.500 --> 00:24:50.670
JavaScript that says callme.

500
00:24:50.670 --> 00:24:55.040
And we add an event listener
to say hey, go grab that

501
00:24:55.040 --> 00:24:58.100
callme button and add a listen
so that when the user clicks

502
00:24:58.100 --> 00:25:00.270
on it maybe they call.

503
00:25:00.270 --> 00:25:05.370
Sorry, bad pun, bad joke, I like
that song, I admit it.

504
00:25:05.370 --> 00:25:08.540
I'll go away in shame now.

505
00:25:08.540 --> 00:25:10.600
So this is the better
way to do it.

506
00:25:10.600 --> 00:25:13.440
There's a bunch of really great
content out there that

507
00:25:13.440 --> 00:25:16.590
talks about CSP.

508
00:25:16.590 --> 00:25:18.800
I've got a link to it at the end
of the slides, it's really

509
00:25:18.800 --> 00:25:20.660
worth having a look at.

510
00:25:20.660 --> 00:25:24.770
Converting from inline script
blocks and that kind of stuff,

511
00:25:24.770 --> 00:25:26.570
not an impossible thing to do.

512
00:25:26.570 --> 00:25:29.080
It takes a little bit of work
and a little bit of rethinking

513
00:25:29.080 --> 00:25:31.420
on our part, but something
really important

514
00:25:31.420 --> 00:25:33.140
that we should do.

515
00:25:33.140 --> 00:25:36.182
So one of the things I'm going
to do, let's actually get out

516
00:25:36.182 --> 00:25:39.350
of here for a sec.

517
00:25:39.350 --> 00:25:42.910
And before we go over there,
let's tab over here.

518
00:25:42.910 --> 00:25:47.920
So one of the reasons why I
chose to use this app and why

519
00:25:47.920 --> 00:25:55.870
I chose to use Angular, is
Angular actually has some CSP

520
00:25:55.870 --> 00:26:00.470
ability to deal with it right
inside so that I don't have to

521
00:26:00.470 --> 00:26:02.510
go and deal with all
the craziness.

522
00:26:02.510 --> 00:26:03.790
I can actually just go ng-csp.

523
00:26:03.790 --> 00:26:07.490
524
00:26:07.490 --> 00:26:11.910
And that now, if I did
everything right, I'm going to

525
00:26:11.910 --> 00:26:20.060
close this guy, open this up,
and I didn't do it right.

526
00:26:20.060 --> 00:26:27.306
All right, I'm going to cheat
one sec, I'm going to have a

527
00:26:27.306 --> 00:26:28.650
look at my file over here.

528
00:26:28.650 --> 00:26:30.710
Ng-csp, that was the
right thing to do?

529
00:26:30.710 --> 00:26:34.270
Oh, yeah, reloading helps.

530
00:26:34.270 --> 00:26:36.990
531
00:26:36.990 --> 00:26:43.700
So over here, go reload my
app, and sure enough, it

532
00:26:43.700 --> 00:26:45.870
doesn't work again.

533
00:26:45.870 --> 00:26:47.810
I can come back to that, because
I've actually got

534
00:26:47.810 --> 00:26:49.960
something else I'm going to
do in my next step here.

535
00:26:49.960 --> 00:26:57.680
536
00:26:57.680 --> 00:27:01.100
So one of the other things that
is really important and

537
00:27:01.100 --> 00:27:07.030
really useful to do in moving
your app to a packaged app, is

538
00:27:07.030 --> 00:27:11.590
taking that shared and common
functionality, pulling it out

539
00:27:11.590 --> 00:27:15.810
of your JavaScript places where
it's going to get used

540
00:27:15.810 --> 00:27:17.910
in multiple places,
and putting it

541
00:27:17.910 --> 00:27:19.700
into the same place.

542
00:27:19.700 --> 00:27:24.140
So with the RSS reader
application we've got, it goes

543
00:27:24.140 --> 00:27:28.800
up and it pulls for data, and
then it pulls that down and it

544
00:27:28.800 --> 00:27:30.650
goes and puts it into
a data store.

545
00:27:30.650 --> 00:27:34.610
So for something like this, we
want to take that and put that

546
00:27:34.610 --> 00:27:36.910
into the background page.

547
00:27:36.910 --> 00:27:39.390
So that we take all that shared
code that's all over

548
00:27:39.390 --> 00:27:42.210
the place, maybe a little bit
spaghetti-like, and try and

549
00:27:42.210 --> 00:27:46.640
really reduce some of the
work that's going on.

550
00:27:46.640 --> 00:27:49.330
One of the ways that
you can do that and

551
00:27:49.330 --> 00:27:50.520
that's really useful--

552
00:27:50.520 --> 00:27:55.380
we'll dive into the
chrome.storage API in a sec--

553
00:27:55.380 --> 00:27:59.540
but in my application I could
take this chrome.storage

554
00:27:59.540 --> 00:28:02.700
listener and I can say hey,
anytime anything changed I

555
00:28:02.700 --> 00:28:04.780
want you to go listen
for this.

556
00:28:04.780 --> 00:28:11.415
And I want to update all of the
rest of the page so that

557
00:28:11.415 --> 00:28:14.490
oh hey, I just got new feeds,
let's go update what's

558
00:28:14.490 --> 00:28:15.740
displayed to the user.

559
00:28:15.740 --> 00:28:18.940
560
00:28:18.940 --> 00:28:24.340
So I was talking a little bit
about the package, making

561
00:28:24.340 --> 00:28:26.210
stuff work offline.

562
00:28:26.210 --> 00:28:29.280
And making applications work
offline, we can do it on the

563
00:28:29.280 --> 00:28:32.870
web today, but it is a small
pain in the bum to put it

564
00:28:32.870 --> 00:28:33.690
mildly, right?

565
00:28:33.690 --> 00:28:36.880
Like, there's AppCache, then
you've got to deal with well,

566
00:28:36.880 --> 00:28:37.560
where are you going to put it?

567
00:28:37.560 --> 00:28:39.480
Are you going to put it in an
index db, you going to put it

568
00:28:39.480 --> 00:28:41.380
in local storage, are you
going to put it--

569
00:28:41.380 --> 00:28:43.800
where are you going to put it?

570
00:28:43.800 --> 00:28:47.470
And well, typically as web
developers we say hey, let's

571
00:28:47.470 --> 00:28:53.170
go get data from the cloud and
then display it on screen.

572
00:28:53.170 --> 00:28:56.140
Oh well, maybe we should just
store it locally, too.

573
00:28:56.140 --> 00:28:59.350
So when you start to think about
your applications and

574
00:28:59.350 --> 00:29:03.460
how they should work offline, we
want to think about them in

575
00:29:03.460 --> 00:29:06.520
a little bit of a
different way.

576
00:29:06.520 --> 00:29:09.860
So we've got our packaged app,
and our packaged app should

577
00:29:09.860 --> 00:29:12.860
talk to a local data
store first.

578
00:29:12.860 --> 00:29:15.870
So some kind of local
data storage.

579
00:29:15.870 --> 00:29:20.220
That way, if I have no network
connection I'm always going to

580
00:29:20.220 --> 00:29:22.410
be able to pull data in.

581
00:29:22.410 --> 00:29:25.020
I start my app, hey look,
there's data.

582
00:29:25.020 --> 00:29:28.190
It may be stale and old data,
but at least I've got

583
00:29:28.190 --> 00:29:28.860
something, right?

584
00:29:28.860 --> 00:29:32.870
Like, you go to Goggle+, you go
to any other site, you want

585
00:29:32.870 --> 00:29:35.485
to see something when
the app starts.

586
00:29:35.485 --> 00:29:38.780
587
00:29:38.780 --> 00:29:42.800
Now, it'd be really kick butt if
we could also store all of

588
00:29:42.800 --> 00:29:44.700
that data in the cloud
so that it was synced

589
00:29:44.700 --> 00:29:47.130
across all of my computers.

590
00:29:47.130 --> 00:29:50.610
So that I didn't have to go oh,
hey, well I haven't run

591
00:29:50.610 --> 00:29:53.550
this app in a while on this
computer, so I guess I don't

592
00:29:53.550 --> 00:29:54.470
have this data.

593
00:29:54.470 --> 00:29:57.520
I want all the stuff synced
across the cloud so that I

594
00:29:57.520 --> 00:30:00.650
open my Chromebook, great,
I've got all that data.

595
00:30:00.650 --> 00:30:05.110
I open my iPad with Chrome on
it, I've got all that data.

596
00:30:05.110 --> 00:30:08.540
I've got, open whatever device
I've got, I've got all of that

597
00:30:08.540 --> 00:30:10.410
stuff synced across the cloud.

598
00:30:10.410 --> 00:30:12.870
And there's a great new Chrome
API that's going

599
00:30:12.870 --> 00:30:14.700
to help me do that.

600
00:30:14.700 --> 00:30:22.390
And then finally, from our local
data store, or from our

601
00:30:22.390 --> 00:30:26.070
background page, we want to go
and have that talk to the

602
00:30:26.070 --> 00:30:29.050
backend services for
our application.

603
00:30:29.050 --> 00:30:33.440
So our packaged app, our UI, is
never talking to any kind

604
00:30:33.440 --> 00:30:36.190
of application server-side
stuff.

605
00:30:36.190 --> 00:30:39.470
All of that is happening on
a separate business layer.

606
00:30:39.470 --> 00:30:43.030
When you think about, if you've
taken computer science

607
00:30:43.030 --> 00:30:45.840
classes and you separate out,
hey, here's my business layer,

608
00:30:45.840 --> 00:30:47.890
here's my display layer,
here's all this stuff.

609
00:30:47.890 --> 00:30:51.120
You're separating all those out
and that's what we really

610
00:30:51.120 --> 00:30:52.810
want to see in these
packaged apps.

611
00:30:52.810 --> 00:30:56.410
So that your app talks to
the data store, pulls

612
00:30:56.410 --> 00:30:58.010
everything in there.

613
00:30:58.010 --> 00:31:00.850
And then the background page or
any of those other pieces

614
00:31:00.850 --> 00:31:03.740
then go and pull stuff
in so that we can

615
00:31:03.740 --> 00:31:06.640
deal with those pieces.

616
00:31:06.640 --> 00:31:13.340
So we have this new set of
chrome.storage APIs.

617
00:31:13.340 --> 00:31:18.760
They give you all the power of
Google's Chrome Sync stuff

618
00:31:18.760 --> 00:31:22.080
without having to go deal with
oh, well, I got to go set up a

619
00:31:22.080 --> 00:31:22.990
bunch of servers.

620
00:31:22.990 --> 00:31:24.850
I got to figure out how
to do data syncing.

621
00:31:24.850 --> 00:31:28.110
I got to figure out how to
do all these things.

622
00:31:28.110 --> 00:31:31.910
Now it's not meant for
you to store tons and

623
00:31:31.910 --> 00:31:32.930
tons and tons of data.

624
00:31:32.930 --> 00:31:37.330
That's Google Drive, and we do
have some easy abilities for

625
00:31:37.330 --> 00:31:38.300
you to get into that.

626
00:31:38.300 --> 00:31:40.990
They're not quite there yet,
we're not going to talk about

627
00:31:40.990 --> 00:31:42.820
those in today's session.

628
00:31:42.820 --> 00:31:48.770
But to be able to store user
settings, not necessarily

629
00:31:48.770 --> 00:31:51.610
login information, but
application settings, or

630
00:31:51.610 --> 00:31:55.660
little bits of data like key
value pairs is exactly what we

631
00:31:55.660 --> 00:31:58.840
want to use this chrome.storage
API.

632
00:31:58.840 --> 00:32:00.600
So there's a couple of things
we need to do it in

633
00:32:00.600 --> 00:32:01.370
order to use it.

634
00:32:01.370 --> 00:32:04.980
One, we need to turn on the
storage permission, because it

635
00:32:04.980 --> 00:32:06.550
needs a permission.

636
00:32:06.550 --> 00:32:09.770
And then there's two things we
can do, we can get and we

637
00:32:09.770 --> 00:32:11.940
could save--

638
00:32:11.940 --> 00:32:14.200
or I guess that's
technically set.

639
00:32:14.200 --> 00:32:16.720
There are some other APIs, but
these are the key things I

640
00:32:16.720 --> 00:32:18.500
want to show you here.

641
00:32:18.500 --> 00:32:23.550
So if I want to save something,
I use this set.

642
00:32:23.550 --> 00:32:25.460
Let me highlight this out
here for a sec, and

643
00:32:25.460 --> 00:32:27.310
we send it in object.

644
00:32:27.310 --> 00:32:30.720
That object is just a name value
pair, or a JSON Object.

645
00:32:30.720 --> 00:32:34.830
So I've got hey, here's all of
the Chromium articles that

646
00:32:34.830 --> 00:32:37.470
I've got that I want to
save, and I give it

647
00:32:37.470 --> 00:32:39.700
that list of items.

648
00:32:39.700 --> 00:32:43.960
And then I've got a call back
that's used to say all right,

649
00:32:43.960 --> 00:32:47.260
everything's saved, you're good
to go, all hunky dory.

650
00:32:47.260 --> 00:32:50.220
651
00:32:50.220 --> 00:32:57.290
To get that stuff out of the
back side, we use the

652
00:32:57.290 --> 00:33:05.630
chrome.storage.sync.get, and we
just ask for what we want

653
00:33:05.630 --> 00:33:07.280
and we give it a call
back again.

654
00:33:07.280 --> 00:33:10.220
And so Chrome says OK,
yep, you want that?

655
00:33:10.220 --> 00:33:12.880
Sure, no problem, I'll give
that to you in a sec.

656
00:33:12.880 --> 00:33:15.570
Goes off, gets it, and pulls
it down and gives it to you

657
00:33:15.570 --> 00:33:18.330
via that callback.

658
00:33:18.330 --> 00:33:23.950
So let's actually go take a look
at the code we've got.

659
00:33:23.950 --> 00:33:28.650
And trying to do the two things
that I just talked

660
00:33:28.650 --> 00:33:33.550
about up on stage would have
been a little messy because it

661
00:33:33.550 --> 00:33:35.070
changes a lot of stuff
in this application.

662
00:33:35.070 --> 00:33:39.140
So I want to show you the things
that we did in order to

663
00:33:39.140 --> 00:33:39.970
get that to work.

664
00:33:39.970 --> 00:33:45.120
So our background page before,
you remember, was just that

665
00:33:45.120 --> 00:33:47.790
start for our application.

666
00:33:47.790 --> 00:33:53.530
So we've got that still in here,
so we add our Chrome

667
00:33:53.530 --> 00:34:01.250
Experimental app launched, and
we open up our window.

668
00:34:01.250 --> 00:34:05.380
And we've moved a lot of the
code that our application is

669
00:34:05.380 --> 00:34:08.219
using out into here.

670
00:34:08.219 --> 00:34:12.960
So we've got a factor here
that's going to go and do our

671
00:34:12.960 --> 00:34:13.790
feed fetching.

672
00:34:13.790 --> 00:34:23.290
So all of our feed fetching, all
of our feed syncing, all

673
00:34:23.290 --> 00:34:26.489
of that is done here in
our background page.

674
00:34:26.489 --> 00:34:31.020
So we've got our factory to
get our feeds, we've got a

675
00:34:31.020 --> 00:34:34.280
factory again here where we're
refreshing things, and then

676
00:34:34.280 --> 00:34:38.860
we've got some angular stuff as
well down here, just sort

677
00:34:38.860 --> 00:34:41.620
of angular filtering stuff.

678
00:34:41.620 --> 00:34:45.520
We've also gone and created
a store module.

679
00:34:45.520 --> 00:34:48.389
So Angular allows you to have
these concepts of modules.

680
00:34:48.389 --> 00:34:51.620
So we've got in here our store
module, we create our factory,

681
00:34:51.620 --> 00:34:56.449
and we want to say hey, we've
got our state store and our

682
00:34:56.449 --> 00:34:57.699
content store.

683
00:34:57.699 --> 00:35:02.080
684
00:35:02.080 --> 00:35:08.000
As we're working on this, we
sort of said OK, we're storing

685
00:35:08.000 --> 00:35:10.680
large amounts of data.

686
00:35:10.680 --> 00:35:13.410
How do we do that in
a really good way?

687
00:35:13.410 --> 00:35:16.950
How do we take all of that
information and put it in the

688
00:35:16.950 --> 00:35:22.770
user's hands without sending
lots of data up to the cloud,

689
00:35:22.770 --> 00:35:26.680
without overloading all the
user's synced storage space

690
00:35:26.680 --> 00:35:28.420
and complexities?

691
00:35:28.420 --> 00:35:34.870
Said OK, well, what if we
separate out the blog feed,

692
00:35:34.870 --> 00:35:40.130
each RSS poster, each RSS
item, from its state?

693
00:35:40.130 --> 00:35:43.130
So we said we want to sync all
of the state, whether it's

694
00:35:43.130 --> 00:35:47.490
been read or not, and whether
it's been starred or not, and

695
00:35:47.490 --> 00:35:48.700
we're going to store that
up in the cloud.

696
00:35:48.700 --> 00:35:51.680
Because that's, what,
two bits?

697
00:35:51.680 --> 00:35:54.390
It's not even a byte for
that matter, because

698
00:35:54.390 --> 00:35:56.940
it's just like a Boolean.

699
00:35:56.940 --> 00:36:01.800
And then we store all of the
information about the feeds on

700
00:36:01.800 --> 00:36:04.140
the user's local computer,
because we can always go get

701
00:36:04.140 --> 00:36:07.240
those later, those
are easy to get.

702
00:36:07.240 --> 00:36:12.870
So we've separated those two
things in our data storage.

703
00:36:12.870 --> 00:36:17.070
And then when we go to actually
get these things,

704
00:36:17.070 --> 00:36:18.320
just sort of scroll down here.

705
00:36:18.320 --> 00:36:25.430
706
00:36:25.430 --> 00:36:30.490
So we go and get our feeds from
content storage, which

707
00:36:30.490 --> 00:36:33.390
Angular then has a way to say
hey, if there's everything in

708
00:36:33.390 --> 00:36:36.340
there, we want to go and do
a forEach on each of them.

709
00:36:36.340 --> 00:36:39.530
So we're going to go and iterate
through each item and

710
00:36:39.530 --> 00:36:42.155
go and add them to the
user's display.

711
00:36:42.155 --> 00:36:45.480
712
00:36:45.480 --> 00:36:47.910
So let's go and add this guy.

713
00:36:47.910 --> 00:36:50.860
So I'm going to load our
unpacked extension, and we'll

714
00:36:50.860 --> 00:36:52.540
grab number three that
we've refactored.

715
00:36:52.540 --> 00:37:01.010
716
00:37:01.010 --> 00:37:05.990
And sure enough, now we
don't have anything.

717
00:37:05.990 --> 00:37:08.730
But that's OK right now,
because I don't have us

718
00:37:08.730 --> 00:37:10.730
plugged into the network
right yet.

719
00:37:10.730 --> 00:37:13.720
So now we've got all
of our data.

720
00:37:13.720 --> 00:37:16.240
Everything works right, but
we're trying to pull

721
00:37:16.240 --> 00:37:18.600
everything from our
local machine,

722
00:37:18.600 --> 00:37:19.900
we don't have anything.

723
00:37:19.900 --> 00:37:21.050
So let's try it again.

724
00:37:21.050 --> 00:37:23.330
I'm going to close the window.

725
00:37:23.330 --> 00:37:27.480
Actually, I'm going to
join a network first.

726
00:37:27.480 --> 00:37:31.120
I'm going to be a little bit
brave, I'm going to try it on

727
00:37:31.120 --> 00:37:33.600
wireless first.

728
00:37:33.600 --> 00:37:34.890
Think we can get it
working today?

729
00:37:34.890 --> 00:37:40.130
730
00:37:40.130 --> 00:37:42.050
All right, so close
this window.

731
00:37:42.050 --> 00:37:48.180
732
00:37:48.180 --> 00:37:54.880
And so it's fair enough,
now we've got our data.

733
00:37:54.880 --> 00:37:58.340
So we've got everything in
there, and I'm going to go

734
00:37:58.340 --> 00:37:59.590
turn Wi-Fi off again.

735
00:37:59.590 --> 00:38:02.660
736
00:38:02.660 --> 00:38:05.210
So now because I've turned the
Wi-Fi off, if we try and go

737
00:38:05.210 --> 00:38:10.530
get everything from the
server it should work.

738
00:38:10.530 --> 00:38:18.860
So close this guy out, start it
again, refactored, and sure

739
00:38:18.860 --> 00:38:21.500
enough we have everything
back again.

740
00:38:21.500 --> 00:38:24.940
Now if I were to go and try this
on another computer that

741
00:38:24.940 --> 00:38:29.230
I'm signed into, all of the
things that I've read are

742
00:38:29.230 --> 00:38:31.520
going to be synced across
the different computers.

743
00:38:31.520 --> 00:38:34.010
Now it's going to have to go and
pull that data down on the

744
00:38:34.010 --> 00:38:37.880
second computer, but the key
point being it knows what I've

745
00:38:37.880 --> 00:38:40.700
read, knows what I've starred,
it knows what I like.

746
00:38:40.700 --> 00:38:46.070
So I'm able to store specific
sets of information about what

747
00:38:46.070 --> 00:38:49.730
I'm really interested in, or how
I want to go and do these

748
00:38:49.730 --> 00:38:51.765
things, across different
places.

749
00:38:51.765 --> 00:39:02.260
750
00:39:02.260 --> 00:39:05.730
Keeping the application up to
date is also really useful.

751
00:39:05.730 --> 00:39:09.670
It would be nice if when I
first started the app it

752
00:39:09.670 --> 00:39:13.805
didn't have to go and download
all the stuff and say all

753
00:39:13.805 --> 00:39:18.230
right that first time, but
instead it just always stayed

754
00:39:18.230 --> 00:39:19.000
up to date.

755
00:39:19.000 --> 00:39:21.660
So that the first time I started
it, or that first time

756
00:39:21.660 --> 00:39:24.840
I opened it after not using it
for two days, all of my data's

757
00:39:24.840 --> 00:39:26.650
there, right?

758
00:39:26.650 --> 00:39:29.790
You go to Google+, wouldn't it
be nice if that first time it

759
00:39:29.790 --> 00:39:33.190
loaded it was all fresh data
instead of going oh, now I got

760
00:39:33.190 --> 00:39:36.800
to wait for it to load, do ta
do ta do, OK, now I can see

761
00:39:36.800 --> 00:39:37.270
what I want.

762
00:39:37.270 --> 00:39:39.820
We want that ability so that
when users start the

763
00:39:39.820 --> 00:39:43.480
application, users want
that fast, fast.

764
00:39:43.480 --> 00:39:45.390
They want--

765
00:39:45.390 --> 00:39:48.340
there's something else, like a
different app that's just as

766
00:39:48.340 --> 00:39:51.620
good but theirs is faster,
they're going to go use the

767
00:39:51.620 --> 00:39:52.660
faster app.

768
00:39:52.660 --> 00:39:54.570
They're going to use somebody
else's app.

769
00:39:54.570 --> 00:39:56.930
So we want to make sure your
apps are nice and snappy, your

770
00:39:56.930 --> 00:39:58.490
apps are nice and fast.

771
00:39:58.490 --> 00:40:02.840
So there's this new
Chrome.alarms API, and it

772
00:40:02.840 --> 00:40:07.920
works very similarly to set
time out or set interval.

773
00:40:07.920 --> 00:40:10.640
It's got three--

774
00:40:10.640 --> 00:40:13.480
I guess it's got three, I
thought it had four--

775
00:40:13.480 --> 00:40:15.080
it's got three different
settings on it.

776
00:40:15.080 --> 00:40:19.530
One, Delay, so you can say hey,
from the time you fire

777
00:40:19.530 --> 00:40:24.060
this event, I want you to wait
five minutes and then fire.

778
00:40:24.060 --> 00:40:27.170
It's got a Period, which is very
similar to set interval,

779
00:40:27.170 --> 00:40:30.030
and it's going to fire
every X minutes.

780
00:40:30.030 --> 00:40:32.900
And then finally there's a
When that's like for a

781
00:40:32.900 --> 00:40:35.230
specific time.

782
00:40:35.230 --> 00:40:38.690
Now for alarms, to use that,
again we need to turn on a

783
00:40:38.690 --> 00:40:42.980
specific permission.

784
00:40:42.980 --> 00:40:47.000
So we're going to say hey, we
need that alarms permission.

785
00:40:47.000 --> 00:40:49.810
And then we go and
create an alarm.

786
00:40:49.810 --> 00:40:53.790
We give it a name, and we give
it a particular property.

787
00:40:53.790 --> 00:40:56.290
So whether we want it to fire
in a period of minutes,

788
00:40:56.290 --> 00:40:58.150
whether we want to fire
it in a delay,

789
00:40:58.150 --> 00:41:00.160
or a when, or whatever.

790
00:41:00.160 --> 00:41:03.480
So in this particular case,
we're going to use a period in

791
00:41:03.480 --> 00:41:07.080
five minutes, which is
going to fire the

792
00:41:07.080 --> 00:41:09.380
event every five minutes.

793
00:41:09.380 --> 00:41:14.070
Now, remember one of the things
that I said earlier was

794
00:41:14.070 --> 00:41:19.060
that it's really important that
these apps really work

795
00:41:19.060 --> 00:41:21.780
seamlessly and not cause
a lot of headache or

796
00:41:21.780 --> 00:41:22.480
anything like that.

797
00:41:22.480 --> 00:41:26.490
So we don't want to have
functions that are sitting

798
00:41:26.490 --> 00:41:27.100
there looping.

799
00:41:27.100 --> 00:41:28.650
We want everything to
be event-based.

800
00:41:28.650 --> 00:41:31.510
So because this is an event,
we need to create

801
00:41:31.510 --> 00:41:34.150
an add event listener.

802
00:41:34.150 --> 00:41:36.040
So we're going to add
our event listener.

803
00:41:36.040 --> 00:41:38.230
So I'm going to go and I'm just
going to-- in fact, we'll

804
00:41:38.230 --> 00:41:40.270
pop this into our application.

805
00:41:40.270 --> 00:41:42.910
806
00:41:42.910 --> 00:41:45.550
And I'm going to
put this into--

807
00:41:45.550 --> 00:41:47.920
not that background--

808
00:41:47.920 --> 00:41:49.600
and I'm just going to close a
couple of these so that we can

809
00:41:49.600 --> 00:41:50.890
actually see where we are.

810
00:41:50.890 --> 00:41:54.900
811
00:41:54.900 --> 00:41:57.280
I've put in a place where I want
to put my background, so

812
00:41:57.280 --> 00:42:02.760
I'm going to add my listener.

813
00:42:02.760 --> 00:42:06.120
Let's make that a
little prettier.

814
00:42:06.120 --> 00:42:10.130
And the other thing we need
to do is start our alarm.

815
00:42:10.130 --> 00:42:12.500
Now I've already added the
alarms permission, so we don't

816
00:42:12.500 --> 00:42:13.750
need to go add that.

817
00:42:13.750 --> 00:42:16.490
818
00:42:16.490 --> 00:42:19.930
Pop that in, now the app will
stay up to date and everything

819
00:42:19.930 --> 00:42:22.180
will fire every five minutes.

820
00:42:22.180 --> 00:42:26.720
Now, I probably should have
picked a blog feed that was

821
00:42:26.720 --> 00:42:29.110
posting more than every five
minutes, or probably posting

822
00:42:29.110 --> 00:42:32.760
once a day right now because
of I/O. But you can imagine

823
00:42:32.760 --> 00:42:34.840
for something like this where
you've got something that you

824
00:42:34.840 --> 00:42:38.510
want to keep up to date, maybe
a friend's feed, or maybe

825
00:42:38.510 --> 00:42:43.620
something from Twitter, or any
other API that's changing on a

826
00:42:43.620 --> 00:42:47.260
regular basis, you want that
to fire much more quickly.

827
00:42:47.260 --> 00:42:57.070
828
00:42:57.070 --> 00:43:00.540
So there's a bunch of other new
functionality in APIs that

829
00:43:00.540 --> 00:43:04.600
are available to us that
are pretty slick.

830
00:43:04.600 --> 00:43:07.935
Some of them didn't really fit
into the app all that well.

831
00:43:07.935 --> 00:43:15.070
832
00:43:15.070 --> 00:43:17.520
Because of the way the app was
written, they didn't really

833
00:43:17.520 --> 00:43:18.610
fit all that well.

834
00:43:18.610 --> 00:43:20.890
They were one of those things
where it's like ah, OK, well

835
00:43:20.890 --> 00:43:22.920
this wasn't really particularly
needed.

836
00:43:22.920 --> 00:43:25.750
But I still thought they were
really cool and definitely

837
00:43:25.750 --> 00:43:27.000
worth talking about.

838
00:43:27.000 --> 00:43:30.930
839
00:43:30.930 --> 00:43:34.490
There's a new Identity API
that's available that allows

840
00:43:34.490 --> 00:43:36.460
you to have your application
automatically

841
00:43:36.460 --> 00:43:38.630
log into Google services.

842
00:43:38.630 --> 00:43:41.450
So the user says hey, I want to
log in to this particular

843
00:43:41.450 --> 00:43:43.460
Google service.

844
00:43:43.460 --> 00:43:46.740
This is really for making it
easy so that you can get

845
00:43:46.740 --> 00:43:50.110
things up to drive, or if you
want to access any of the

846
00:43:50.110 --> 00:43:52.760
other APIs that Google
has to offer.

847
00:43:52.760 --> 00:43:55.080
So there's a couple of things
that we need do here in

848
00:43:55.080 --> 00:43:57.530
order to use it.

849
00:43:57.530 --> 00:44:03.750
First thing you need to do, add
that identity permission.

850
00:44:03.750 --> 00:44:09.980
And then we create a new block
within the manifest file, and

851
00:44:09.980 --> 00:44:15.560
we say OAuth 2.0 so it uses
the OAuth 2.0 protocol, I

852
00:44:15.560 --> 00:44:17.330
guess it is.

853
00:44:17.330 --> 00:44:20.070
And we go in and we provide
a client ID.

854
00:44:20.070 --> 00:44:27.030
So you get your client ID
from the dev console, so

855
00:44:27.030 --> 00:44:29.170
code.google.com/API/console.

856
00:44:29.170 --> 00:44:33.280
You get your client ID from
there, and then you specify

857
00:44:33.280 --> 00:44:36.120
the scopes that you want
to get access to.

858
00:44:36.120 --> 00:44:42.350
Much like you do if you're
writing any kind of other web

859
00:44:42.350 --> 00:44:44.320
app that uses OAuth.

860
00:44:44.320 --> 00:44:47.090
We take all that complexity, all
that pain in the butt-- if

861
00:44:47.090 --> 00:44:50.240
you've ever done OAuth 2.0,
it's definitely at least

862
00:44:50.240 --> 00:44:53.770
easier than OAuth 1.0, but it's
still not exactly the

863
00:44:53.770 --> 00:44:55.830
most fun thing to do.

864
00:44:55.830 --> 00:44:58.020
And we simplify it for
you all in here.

865
00:44:58.020 --> 00:45:01.790
So we'll ask the user to sign
in, yep, great, here you go.

866
00:45:01.790 --> 00:45:04.970
And then you don't ever have
to worry about it again,

867
00:45:04.970 --> 00:45:09.220
because all those requests that
you make will be done

868
00:45:09.220 --> 00:45:10.470
with the right set
of permissions.

869
00:45:10.470 --> 00:45:15.100
870
00:45:15.100 --> 00:45:18.030
And then there's also when
you need to go get the

871
00:45:18.030 --> 00:45:20.730
authentication token, there's
just a simple API that you

872
00:45:20.730 --> 00:45:23.750
call and say hey, go
get me that token.

873
00:45:23.750 --> 00:45:27.470
All right, we're good to go,
we can start doing things.

874
00:45:27.470 --> 00:45:33.060
One of the ways that I wanted
to use this and see myself

875
00:45:33.060 --> 00:45:38.410
using this for in the future,
is if you wanted to build an

876
00:45:38.410 --> 00:45:44.340
offline RSS reader that actually
grabs the user's feed

877
00:45:44.340 --> 00:45:48.470
from Google Reader, you could
use exactly this API to say

878
00:45:48.470 --> 00:45:50.620
all right, let's go authenticate
the user.

879
00:45:50.620 --> 00:45:53.800
Now we can go and get their feed
information, figure out

880
00:45:53.800 --> 00:45:56.350
what they're reading and
pull it in that way.

881
00:45:56.350 --> 00:45:59.550
So that way instead of having to
go deal with anything else,

882
00:45:59.550 --> 00:46:00.940
we're golden.

883
00:46:00.940 --> 00:46:04.240
We can just, sweet, don't have
to write anything crazy in

884
00:46:04.240 --> 00:46:06.920
order to do that.

885
00:46:06.920 --> 00:46:11.130
There's a bunch of other stuff
that I think is pretty slick.

886
00:46:11.130 --> 00:46:13.860
Context menus, like real apps.

887
00:46:13.860 --> 00:46:16.540
If I've got an app that's
installed on my computer, I

888
00:46:16.540 --> 00:46:18.540
expect to be able to right-click
on it and pull up

889
00:46:18.540 --> 00:46:19.910
a context menu.

890
00:46:19.910 --> 00:46:22.780
Chrome apps have the ability
to say hey, I

891
00:46:22.780 --> 00:46:23.900
want a context menu.

892
00:46:23.900 --> 00:46:26.750
So through Chrome context
menus create, you

893
00:46:26.750 --> 00:46:28.670
can go and do that.

894
00:46:28.670 --> 00:46:29.590
All of these--

895
00:46:29.590 --> 00:46:31.640
don't worry about writing any
of these down if you can't

896
00:46:31.640 --> 00:46:34.220
really read it all that well.

897
00:46:34.220 --> 00:46:36.780
You can go check the slides
later, or have a look at some

898
00:46:36.780 --> 00:46:38.590
of the docs--

899
00:46:38.590 --> 00:46:40.440
create windows.

900
00:46:40.440 --> 00:46:44.350
Apps should be able to create
as many windows as often as

901
00:46:44.350 --> 00:46:48.260
they want without being spammy
or annoying, but

902
00:46:48.260 --> 00:46:49.570
real apps can do that.

903
00:46:49.570 --> 00:46:51.990
We're kind of prevented from
doing that on the web.

904
00:46:51.990 --> 00:46:53.920
For a good reason most
of the time.

905
00:46:53.920 --> 00:46:58.320
But we just say create a
window, provide a URL--

906
00:46:58.320 --> 00:47:00.720
that URL is a local URL.

907
00:47:00.720 --> 00:47:04.960
We can't say open a URL to HTTP
whack whack Google, or

908
00:47:04.960 --> 00:47:06.720
whack whack whatever,
it has to be a

909
00:47:06.720 --> 00:47:10.080
file within our package.

910
00:47:10.080 --> 00:47:13.280
We've got great stuff for doing
window manipulation.

911
00:47:13.280 --> 00:47:15.270
So I can go and set
focus on a window.

912
00:47:15.270 --> 00:47:18.750
I could say this window should
be in focus right now, or

913
00:47:18.750 --> 00:47:20.960
minimize and maximize windows.

914
00:47:20.960 --> 00:47:24.870
Just like you can with regular
applications that

915
00:47:24.870 --> 00:47:25.950
the user has installed.

916
00:47:25.950 --> 00:47:28.980
They're used to having app do
that, like hey, this app, I

917
00:47:28.980 --> 00:47:30.440
want you to go away because
I'm not really

918
00:47:30.440 --> 00:47:32.350
using you right now.

919
00:47:32.350 --> 00:47:33.330
Great, done.

920
00:47:33.330 --> 00:47:37.380
We can have them restore, move
and resize, just like we can

921
00:47:37.380 --> 00:47:40.195
with regular installed
applications.

922
00:47:40.195 --> 00:47:43.170
923
00:47:43.170 --> 00:47:44.440
One of the ones that
I think is kind of

924
00:47:44.440 --> 00:47:45.920
cool, text to speech.

925
00:47:45.920 --> 00:47:50.570
So you can have your apps
start talking to you.

926
00:47:50.570 --> 00:47:53.270
There's even one that'll listen
for what you say, so

927
00:47:53.270 --> 00:47:54.993
there's a speech recognition.

928
00:47:54.993 --> 00:47:59.170
Hmm, speech recognition plus a
little text speech, you could

929
00:47:59.170 --> 00:48:01.070
start writing your
own kind of fun--

930
00:48:01.070 --> 00:48:03.630
anyway, you can figure out where
we're going on that one,

931
00:48:03.630 --> 00:48:07.650
or where I think you should
go on that one.

932
00:48:07.650 --> 00:48:10.200
There's a couple other API
changes that I want to call

933
00:48:10.200 --> 00:48:14.140
out because I think they're
pretty important.

934
00:48:14.140 --> 00:48:15.085
Links.

935
00:48:15.085 --> 00:48:17.920
When we're used to writing web
apps, we put links in our

936
00:48:17.920 --> 00:48:18.320
apps, right?

937
00:48:18.320 --> 00:48:20.840
Like, you've got a link that
goes to here, you've got a

938
00:48:20.840 --> 00:48:22.630
link that goes to there.

939
00:48:22.630 --> 00:48:26.580
Links will open in a new Chrome
window if they go to

940
00:48:26.580 --> 00:48:28.470
somewhere external.

941
00:48:28.470 --> 00:48:29.960
So keep that in mind.

942
00:48:29.960 --> 00:48:32.855
That like hey, if you put a
link to HTTP whack whack

943
00:48:32.855 --> 00:48:35.780
Google.com, it's going to go and
open up a browser window.

944
00:48:35.780 --> 00:48:37.620
It's not going to
open up within

945
00:48:37.620 --> 00:48:39.980
your application window.

946
00:48:39.980 --> 00:48:45.370
So links to outside places will
open in a new window.

947
00:48:45.370 --> 00:48:49.243
By default, this one threw me
when I first did it, because I

948
00:48:49.243 --> 00:48:50.840
was like, why can't
I select anything?

949
00:48:50.840 --> 00:48:52.090
I'm trying select something.

950
00:48:52.090 --> 00:48:54.450
951
00:48:54.450 --> 00:48:56.380
Think about most applications
that you have.

952
00:48:56.380 --> 00:48:58.880
You can't go and select most
of the text on there unless

953
00:48:58.880 --> 00:49:00.240
it's a text box.

954
00:49:00.240 --> 00:49:04.060
So just like an installed
application, you can't select

955
00:49:04.060 --> 00:49:06.700
the text in one of these
applications unless you

956
00:49:06.700 --> 00:49:12.070
specifically say this region,
this block here, the C S S div

957
00:49:12.070 --> 00:49:14.410
span, whatever, is selectable.

958
00:49:14.410 --> 00:49:18.140
So by default, we say
user select is none.

959
00:49:18.140 --> 00:49:22.320
We can't put iframes in there,
we got to use something called

960
00:49:22.320 --> 00:49:25.940
the browser tag instead.

961
00:49:25.940 --> 00:49:28.460
Again, that's a security
thing.

962
00:49:28.460 --> 00:49:32.050
Think about hey, we've got this
app, this great app, and

963
00:49:32.050 --> 00:49:33.450
we let you put an iframe in.

964
00:49:33.450 --> 00:49:37.050
Or you're rendering content from
somewhere else and they

965
00:49:37.050 --> 00:49:38.440
put an iframe in.

966
00:49:38.440 --> 00:49:43.230
All of a sudden you've just
opened this gigantic potential

967
00:49:43.230 --> 00:49:45.640
security vulnerability, because
other people could

968
00:49:45.640 --> 00:49:48.160
start putting anything they want
within your application.

969
00:49:48.160 --> 00:49:51.210
So we make it very explicit
what you can and can't put

970
00:49:51.210 --> 00:49:52.090
into those.

971
00:49:52.090 --> 00:49:55.740
You could create some sandboxed
iframes, and the

972
00:49:55.740 --> 00:49:58.590
browser tag is a
sandbox thing.

973
00:49:58.590 --> 00:50:02.520
If you didn't make it to Eric
and Mehi's session earlier,

974
00:50:02.520 --> 00:50:06.350
they showed some specific
demos around that.

975
00:50:06.350 --> 00:50:08.980
Kind of neat stuff.

976
00:50:08.980 --> 00:50:16.080
Local storage and Web SQL
are also turned off.

977
00:50:16.080 --> 00:50:17.660
Local storage is turned
off primarily

978
00:50:17.660 --> 00:50:20.580
for performance reasons.

979
00:50:20.580 --> 00:50:23.820
It's synchronous, so hey,
go put something

980
00:50:23.820 --> 00:50:26.420
into the data storage.

981
00:50:26.420 --> 00:50:28.790
OK, please wait while
I do that.

982
00:50:28.790 --> 00:50:32.790
983
00:50:32.790 --> 00:50:34.350
Applications should be fast.

984
00:50:34.350 --> 00:50:37.750
Having synchronous things
happening is not exactly going

985
00:50:37.750 --> 00:50:38.850
to do that.

986
00:50:38.850 --> 00:50:40.600
We've also turned off Web SQL.

987
00:50:40.600 --> 00:50:44.160
It is a deprecated API.

988
00:50:44.160 --> 00:50:45.710
Will it ever go away
from the web?

989
00:50:45.710 --> 00:50:48.070
Probably not, but it's
not getting the

990
00:50:48.070 --> 00:50:49.550
attention it deserves.

991
00:50:49.550 --> 00:50:53.750
So instead, use something like
index db, which has a pretty

992
00:50:53.750 --> 00:51:00.880
strong following right now and
it's got good browser support.

993
00:51:00.880 --> 00:51:03.020
The FileSystem API is
another great one.

994
00:51:03.020 --> 00:51:06.840
It allows you to store big
files on the user's file

995
00:51:06.840 --> 00:51:10.680
system in a sandboxed
environment so you can't

996
00:51:10.680 --> 00:51:13.600
exactly go read their resume and
their user documents file

997
00:51:13.600 --> 00:51:15.280
or something like that.

998
00:51:15.280 --> 00:51:17.880
Or use the storage API that I
talked about earlier, so that

999
00:51:17.880 --> 00:51:20.370
you can go in and say hey, I
want to store something on the

1000
00:51:20.370 --> 00:51:23.830
user's computer, I want it
synced up into the cloud, or

1001
00:51:23.830 --> 00:51:28.070
maybe I just want it locally
in this one specific place.

1002
00:51:28.070 --> 00:51:32.630
Most plug-ins and a number of
the Chrome extension things

1003
00:51:32.630 --> 00:51:33.410
are disabled.

1004
00:51:33.410 --> 00:51:39.010
So you can't go put some kind
of plug-in in your app, we

1005
00:51:39.010 --> 00:51:40.280
stopped those from happening.

1006
00:51:40.280 --> 00:51:44.220
We think the web can be built
without any plug-ins.

1007
00:51:44.220 --> 00:51:46.770
You saw this morning in the
keynote, the Cirque du Soleil

1008
00:51:46.770 --> 00:51:48.850
thing, there were no
plug-ins there.

1009
00:51:48.850 --> 00:51:53.140
That was all HTML, C S S and a
bunch of divs and some images.

1010
00:51:53.140 --> 00:51:56.660
So all that stuff can be done
without plug-ins, so let's

1011
00:51:56.660 --> 00:51:58.670
start doing that.

1012
00:51:58.670 --> 00:52:00.170
And finally--

1013
00:52:00.170 --> 00:52:07.060
I know I'm guilty of it myself
sometime, you put in an alert

1014
00:52:07.060 --> 00:52:08.320
or something like that
so you can do

1015
00:52:08.320 --> 00:52:11.130
debugging modal dialogs.

1016
00:52:11.130 --> 00:52:13.610
Users don't want
modal dialogs.

1017
00:52:13.610 --> 00:52:17.680
So instead, use custom light
boxes, use other things so

1018
00:52:17.680 --> 00:52:19.960
that the app can keep running.

1019
00:52:19.960 --> 00:52:23.180
Because the one key thing
about modal dialogues is

1020
00:52:23.180 --> 00:52:26.860
they're not just a modal for
what the user's doing, but

1021
00:52:26.860 --> 00:52:29.130
they also stop the
app from running.

1022
00:52:29.130 --> 00:52:31.255
So any of the JavaScript is just
sitting there going do da

1023
00:52:31.255 --> 00:52:35.090
do da do, we're not
doing anything.

1024
00:52:35.090 --> 00:52:37.960
I could stand up here for three
minutes and not say

1025
00:52:37.960 --> 00:52:40.390
anything, and it's
just as boring.

1026
00:52:40.390 --> 00:52:44.030
So you want your app
to keep running.

1027
00:52:44.030 --> 00:52:45.280
So what's next?

1028
00:52:45.280 --> 00:52:47.780
1029
00:52:47.780 --> 00:52:50.510
You could start using this and
start playing with this today

1030
00:52:50.510 --> 00:52:53.270
to really build apps that break
out of the browser.

1031
00:52:53.270 --> 00:52:56.100
I go back to those first
four points.

1032
00:52:56.100 --> 00:52:58.550
They break out of the browser so
they don't have the address

1033
00:52:58.550 --> 00:53:04.190
bar, so they don't look like a
browser-based application.

1034
00:53:04.190 --> 00:53:09.750
Takes that power that we think
the web has, and really allows

1035
00:53:09.750 --> 00:53:14.800
it to break out of there and
become a much bigger platform.

1036
00:53:14.800 --> 00:53:17.990
The enhanced UI so that you can
control how applications

1037
00:53:17.990 --> 00:53:22.140
look, how they feel, how they
open and close windows.

1038
00:53:22.140 --> 00:53:25.490
They feel like they're
installed, that they work

1039
00:53:25.490 --> 00:53:26.520
offline by default.

1040
00:53:26.520 --> 00:53:29.740
This is the one I think I'm most
excited about, because it

1041
00:53:29.740 --> 00:53:33.910
means that I can write stuff
that works offline and that

1042
00:53:33.910 --> 00:53:36.510
people expect to work offline.

1043
00:53:36.510 --> 00:53:40.460
I'm going to say, I'm going to
use it again, and some people

1044
00:53:40.460 --> 00:53:41.120
will make fun of me.

1045
00:53:41.120 --> 00:53:43.880
My mom doesn't expect web
apps to work offline.

1046
00:53:43.880 --> 00:53:48.190
She's going to expect these to
work offline, so we got to

1047
00:53:48.190 --> 00:53:49.990
start building them this way.

1048
00:53:49.990 --> 00:53:53.160
And finally, really takes
advantage of the native

1049
00:53:53.160 --> 00:53:55.730
capabilities through new APIs.

1050
00:53:55.730 --> 00:53:58.600
I didn't get into it at all in
this session, but you should

1051
00:53:58.600 --> 00:54:00.720
drop by the Chrome
booth afterwards.

1052
00:54:00.720 --> 00:54:04.660
We actually have taken one of
these new packaged apps, used

1053
00:54:04.660 --> 00:54:08.870
the Bluetooth API through this
packaged app, and we're

1054
00:54:08.870 --> 00:54:11.320
controlling a LEGO Mindstorm
robot with it.

1055
00:54:11.320 --> 00:54:15.210
So you've got access to
Bluetooth, USB, TCP, UDP.

1056
00:54:15.210 --> 00:54:20.070
You've got great access to truly
the device that these

1057
00:54:20.070 --> 00:54:22.630
applications are running on.

1058
00:54:22.630 --> 00:54:24.590
But most importantly, you can
start testing this today.

1059
00:54:24.590 --> 00:54:29.560
Go install the Chrome Canary
build and start playing,

1060
00:54:29.560 --> 00:54:32.400
because there's a lot of
great stuff there.

1061
00:54:32.400 --> 00:54:35.210
There's a bunch of really good
resources if you're looking to

1062
00:54:35.210 --> 00:54:36.930
get started in this.

1063
00:54:36.930 --> 00:54:40.740
The Chrome packaged apps
documentation, the URLs there,

1064
00:54:40.740 --> 00:54:43.520
these slides will go up
online momentarily.

1065
00:54:43.520 --> 00:54:49.500
But if you go to
developers.google.com/chrome,

1066
00:54:49.500 --> 00:54:51.820
all of that stuff will
be linked from there.

1067
00:54:51.820 --> 00:54:53.700
If you've got questions, you're
working on something

1068
00:54:53.700 --> 00:54:56.900
and you're like why isn't
this working?

1069
00:54:56.900 --> 00:54:59.620
Send an email to the
Chromium-Apps Mailing List.

1070
00:54:59.620 --> 00:55:02.570
We all have a whole bunch of
great sample applications, so

1071
00:55:02.570 --> 00:55:06.740
you can see how some of these
applications were built.

1072
00:55:06.740 --> 00:55:09.770
And finally, the last one that
I put up on there because I

1073
00:55:09.770 --> 00:55:11.200
thought it was really useful.

1074
00:55:11.200 --> 00:55:13.850
Mike West, who's at the back
of the room, wrote a

1075
00:55:13.850 --> 00:55:16.560
wonderfully fantastic
article that is an

1076
00:55:16.560 --> 00:55:18.300
introduction to CSP.

1077
00:55:18.300 --> 00:55:22.150
I gave you sort of a taste of
it today, but he goes into a

1078
00:55:22.150 --> 00:55:26.600
lot more depth, additional
things it's useful for.

1079
00:55:26.600 --> 00:55:30.550
And if you're going to use it
in a website, how you can go

1080
00:55:30.550 --> 00:55:33.330
and adjust some of the different
permissions to

1081
00:55:33.330 --> 00:55:37.160
restrict or loosen things
for websites.

1082
00:55:37.160 --> 00:55:40.650
You can't change them in a
Chrome packaged app, but you

1083
00:55:40.650 --> 00:55:43.740
can change them on the web.

1084
00:55:43.740 --> 00:55:46.690
With that, I want to say thank
you guys very much for coming

1085
00:55:46.690 --> 00:55:47.980
and sticking with me.

1086
00:55:47.980 --> 00:55:53.090
I hope this was somewhat
interesting for you.

1087
00:55:53.090 --> 00:55:55.170
The link to the slides is up
there, you could see it,

1088
00:55:55.170 --> 00:55:59.850
goo.gl/5krvb.

1089
00:55:59.850 --> 00:56:02.170
The slides are up there now.

1090
00:56:02.170 --> 00:56:03.740
I'll say thank you,
I'll open it up

1091
00:56:03.740 --> 00:56:04.990
to any of your questions.

1092
00:56:04.990 --> 00:56:11.916
1093
00:56:11.916 --> 00:56:15.965
AUDIENCE: So how would I put
Analytics into an app?

1094
00:56:15.965 --> 00:56:17.420
PETE LEPAGE: That's
a great question.

1095
00:56:17.420 --> 00:56:19.750
So the question, I guess I
don't need to repeat them

1096
00:56:19.750 --> 00:56:22.090
because we have microphones.

1097
00:56:22.090 --> 00:56:25.360
We are working on an Analytics
API that will allow you to go

1098
00:56:25.360 --> 00:56:28.640
and do that so that you can
just say hey, here's my

1099
00:56:28.640 --> 00:56:34.990
Analytics UA string, and here's
the things I want to

1100
00:56:34.990 --> 00:56:35.830
[? apply. ?]

1101
00:56:35.830 --> 00:56:38.350
We're not ready with it yet, but
it will be coming at some

1102
00:56:38.350 --> 00:56:39.462
point in the near future.

1103
00:56:39.462 --> 00:56:41.822
AUDIENCE: Could I copy
the Analytics js

1104
00:56:41.822 --> 00:56:43.240
files and package them?

1105
00:56:43.240 --> 00:56:45.710
PETE LEPAGE: So the question
was, can I copy the Analytics

1106
00:56:45.710 --> 00:56:48.760
js files and include them
in your package?

1107
00:56:48.760 --> 00:56:49.490
You could try.

1108
00:56:49.490 --> 00:56:51.230
My guess is it probably
won't work, I

1109
00:56:51.230 --> 00:56:52.480
haven't tried it myself.

1110
00:56:52.480 --> 00:56:54.670
1111
00:56:54.670 --> 00:56:56.690
It uses cookies, so
the answer is no.

1112
00:56:56.690 --> 00:56:57.940
There you go.

1113
00:56:57.940 --> 00:57:00.174
1114
00:57:00.174 --> 00:57:02.590
AUDIENCE: Is this stuff going
to work on Chrome

1115
00:57:02.590 --> 00:57:03.980
for Android and iOS?

1116
00:57:03.980 --> 00:57:08.370
PETE LEPAGE: So Chrome for
Android, Chrome for iOS, it's

1117
00:57:08.370 --> 00:57:10.060
something we're definitely
thinking about.

1118
00:57:10.060 --> 00:57:12.290
I think as Sundar said this
morning, it's something we

1119
00:57:12.290 --> 00:57:14.165
want to bring there, it's
not there today.

1120
00:57:14.165 --> 00:57:17.430
1121
00:57:17.430 --> 00:57:21.940
I want it just as soon as you
guys do, because hey, if I can

1122
00:57:21.940 --> 00:57:24.640
write an app and have it work
everywhere, I'm a happy guy.

1123
00:57:24.640 --> 00:57:29.490
1124
00:57:29.490 --> 00:57:32.890
AUDIENCE: When can I write
my Chrome app in Dart?

1125
00:57:32.890 --> 00:57:34.900
PETE LEPAGE: When can you write
your Chrome app in Dart?

1126
00:57:34.900 --> 00:57:40.760
I believe you can write your
Chrome app in Dart today.

1127
00:57:40.760 --> 00:57:42.490
I'll give you two answers.

1128
00:57:42.490 --> 00:57:45.020
One, you can write it in Dart
today, compile it down to

1129
00:57:45.020 --> 00:57:48.420
JavaScript, done, you
can publish today.

1130
00:57:48.420 --> 00:57:53.600
In Dart, I'm not sure how close
the Dartium browser is

1131
00:57:53.600 --> 00:57:56.140
staying to the Chrome
dev channel.

1132
00:57:56.140 --> 00:58:00.400
So whenever those guys are close
to whatever we have in

1133
00:58:00.400 --> 00:58:01.880
dev today is then.

1134
00:58:01.880 --> 00:58:06.083
AUDIENCE: The Manifest
by JSON had a

1135
00:58:06.083 --> 00:58:08.418
JavaScript function call?

1136
00:58:08.418 --> 00:58:11.480
PETE LEPAGE: Yes, so that's
a good question.

1137
00:58:11.480 --> 00:58:13.826
I don't have an answer
to that.

1138
00:58:13.826 --> 00:58:15.060
Do either of you guys
know offhand?

1139
00:58:15.060 --> 00:58:16.868
MALE SPEAKER: Right now
they [INAUDIBLE].

1140
00:58:16.868 --> 00:58:24.570
1141
00:58:24.570 --> 00:58:28.980
PETE LEPAGE: So right now
JavaScript only, but it is

1142
00:58:28.980 --> 00:58:31.040
something that potentially
is coming?

1143
00:58:31.040 --> 00:58:32.020
Is--

1144
00:58:32.020 --> 00:58:33.620
yeah, well.

1145
00:58:33.620 --> 00:58:38.466
So Mehi is one of
the developers.

1146
00:58:38.466 --> 00:58:41.190
MEHI: Hi, I'm one of the
engineers on Chrome apps.

1147
00:58:41.190 --> 00:58:46.210
So these APIs have a language
agnostic binding system, and

1148
00:58:46.210 --> 00:58:48.870
the goal is to expose them
to Dart Native Client and

1149
00:58:48.870 --> 00:58:49.880
JavaScript.

1150
00:58:49.880 --> 00:58:52.830
Right now only the JavaScript
part is implemented, but

1151
00:58:52.830 --> 00:58:54.380
coming soon those other two.

1152
00:58:54.380 --> 00:58:57.302
1153
00:58:57.302 --> 00:58:58.180
PETE LEPAGE: Cool.

1154
00:58:58.180 --> 00:58:59.430
Any other questions?

1155
00:58:59.430 --> 00:59:02.490
1156
00:59:02.490 --> 00:59:04.860
All right, well that's
the way to finish.

1157
00:59:04.860 --> 00:59:07.400
I'm sorry, I'm going to let
you out a minute and 20

1158
00:59:07.400 --> 00:59:09.640
seconds early, I hope
you don't mind.

1159
00:59:09.640 --> 00:59:12.590
Thanks guys, have a great
day, have a great I/O.

1160
00:59:12.590 --> 00:59:15.388
WEBVTT

1
00:00:03.189 --> 00:00:04.600
&gt;&gt;Jeff Chang: All right. Can everybody hear
me? Cool. Well, good morning and welcome to

2
00:00:04.600 --> 00:00:10.360
the third day of Google I/O. Thank you everybody
for coming to this. And I'm excited to see

3
00:00:10.360 --> 00:00:15.589
so many bright faces here.
And this is the Chrome fireside chat. We try

4
00:00:15.589 --> 00:00:19.950
to do this every year as an opportunity for
you guys, the developer community, to engage

5
00:00:19.950 --> 00:00:25.290
with us, the Chrome team. So today we have
a few product managers and a few engineering

6
00:00:25.290 --> 00:00:31.880
managers here today to take your questions.
If you look over on that screen, there is

7
00:00:31.880 --> 00:00:35.239
a URL there that you can go to which will
bring you to that page that you see on the

8
00:00:35.239 --> 00:00:40.239
left over there where you can submit questions
and vote on questions. So that will automatically

9
00:00:40.239 --> 00:00:46.199
refresh throughout the session, and I'll take
questions from there and I'll alternate with

10
00:00:46.199 --> 00:00:49.589
questions from the audience.
And so there's two standing microphones, one's

11
00:00:49.589 --> 00:00:54.339
over there and one's over there. I would recommend
actually moving close to the edges so that

12
00:00:54.339 --> 00:00:59.109
you have easy access to the microphones if
you want to ask any questions.

13
00:00:59.109 --> 00:01:04.629
So that's it. We have an hour. Let's start
with some intros. Each of us will tell you

14
00:01:04.629 --> 00:01:10.500
our name and what we work on, and we will
try to say something about either a recently

15
00:01:10.500 --> 00:01:15.410
launched product or feature that we're excited
about or something that's coming up.

16
00:01:15.410 --> 00:01:21.480
So I'll start. My name is Jeff Chang, and
I'm a product manager on the Chrome browser.

17
00:01:21.480 --> 00:01:28.480
And I'm currently responsible for end user
features and I also help coordinate the releases

18
00:01:28.490 --> 00:01:33.990
that we do every six weeks.
And the recently launched feature which I'm

19
00:01:33.990 --> 00:01:38.980
the most excited about, which hopefully you've
heard about by now, is tab sync, the synchronizing

20
00:01:38.980 --> 00:01:43.860
of tabs across the many devices where you
use Chrome.

21
00:01:43.860 --> 00:01:47.440
We had previously already had the ability
to sync your bookmarks and settings and other

22
00:01:47.440 --> 00:01:51.320
stuff like that, but tab sync in particular
allows you to see all the tabs that you have

23
00:01:51.320 --> 00:01:57.730
open on all of your other devices and open
any of them at any time, which I think is

24
00:01:57.730 --> 00:02:00.590
really useful, especially across mobile and
desktop.

25
00:02:00.590 --> 00:02:07.590
And the tab even includes the navigations
history, so you're right back where you left.

26
00:02:07.770 --> 00:02:11.060
But that's me. And I'll pass it off to Alex
now.

27
00:02:11.060 --> 00:02:15.250
&gt;&gt;Alex Komoroske: Cool. Hi. So my name is
Alex Komoroske. I'm a product manager on Chrome

28
00:02:15.250 --> 00:02:19.340
as well. I focus on the open Web platform,
so all the technologies that Web developers

29
00:02:19.340 --> 00:02:24.060
use to build cool apps.
My favorite stuff -- and if you saw my talk

30
00:02:24.060 --> 00:02:29.310
on Wednesday this won't surprise you -- is
Web components. So Web components is a new

31
00:02:29.310 --> 00:02:35.170
technology, a new standard that's being developed.
So relatively early stages, but it promises

32
00:02:35.170 --> 00:02:39.260
to allow people to totally change the way
they architect their Web apps and be much

33
00:02:39.260 --> 00:02:43.670
more productive. So I truly believe this is
one of the technologies that four years from

34
00:02:43.670 --> 00:02:48.340
now we'll look back and say how did we build
stuff without this? I'm really excited about

35
00:02:48.340 --> 00:02:55.340
the Web components in particular.
&gt;&gt;Erik Kay: Hi, my name is Erik Kay. I'm an

36
00:02:55.380 --> 00:03:00.459
engineer on the Chrome team. Actually, I've
been with the Chrome team now for a really

37
00:03:00.459 --> 00:03:07.010
long time, almost since it started, which
is actually getting close to six years ago,

38
00:03:07.010 --> 00:03:12.970
believe it or not. We were secret for almost
two years at the beginning. And so even though

39
00:03:12.970 --> 00:03:18.099
we've only been out for about four years now,
it's been a long road at this point.

40
00:03:18.099 --> 00:03:25.099
Anyway, I've done everything from the auto
update system to Chrome extensions, and our

41
00:03:25.349 --> 00:03:32.349
app system, and I also now help lead the Native
Client effort and a few other things.

42
00:03:32.709 --> 00:03:36.580
The things I'm most excited about -- I'm actually
really excited about Web components too, Alex,

43
00:03:36.580 --> 00:03:42.430
also. I think that's pretty awesome. But selfishly
the new stuff we're doing with apps I think

44
00:03:42.430 --> 00:03:48.380
will really be a big deal for people who want
to use Web technologies to do more advanced

45
00:03:48.380 --> 00:03:52.000
applications going forward. So I'm really
excited to see what people are going to build

46
00:03:52.000 --> 00:03:57.120
with that.
&gt;&gt;Ian Ellison-Taylor: Hi. My name is Ian Ellison-Taylor.

47
00:03:57.120 --> 00:04:01.819
I'm the director of product management for
the Web platform.

48
00:04:01.819 --> 00:04:08.400
And I'm just realizing I probably should have
sat at that end since we already covered a

49
00:04:08.400 --> 00:04:12.980
couple of my favorite features in Web components,
and apps.

50
00:04:12.980 --> 00:04:19.079
I think just to echo Erik's comment, I think
that what is coming with the new generation

51
00:04:19.079 --> 00:04:24.169
of apps is going to be a game changer. We
kind of teased it just a little bit in the

52
00:04:24.169 --> 00:04:31.100
keynote. We tried not to really oversell it
because it's very early days, but there's

53
00:04:31.100 --> 00:04:36.620
a ton of very cool stuff coming there.
But just is to make Pavel's life worse and

54
00:04:36.620 --> 00:04:41.630
not repeat, probably the other thing -- the
other major area I'm really excited about

55
00:04:41.630 --> 00:04:45.570
that's coming up in the next sort of 12 months
is around all the tools work.

56
00:04:45.570 --> 00:04:52.570
We've got -- I think Pavel showed some amazing
stuff with our own dev tools in Chrome, but

57
00:04:53.010 --> 00:04:57.380
if you also saw Adobe did a fantastic talk
on some of the work that they're doing around

58
00:04:57.380 --> 00:05:02.949
Brackets and Shadow. So -- and they're doing
-- have done some great work with Edge and

59
00:05:02.949 --> 00:05:06.729
designer focus tools for the Web platform.
And then there are other lots of companies

60
00:05:06.729 --> 00:05:13.330
as well, Cloud 9 to name but one. So I think
with a big investment in tooling as well as

61
00:05:13.330 --> 00:05:19.490
on top of the platform we can make it much
easier for people like you to build some amazing

62
00:05:19.490 --> 00:05:23.740
experiences. So I think that's really going
to help. So I think that's pretty exciting.

63
00:05:23.740 --> 00:05:30.740
&gt;&gt;Pavel Feldman: Thank you. I'm Pavel Feldman,
software engineer working on the developer

64
00:05:31.050 --> 00:05:34.479
tools.
And the areas we are currently focusing on

65
00:05:34.479 --> 00:05:40.419
are better authoring so that you can develop
Chrome within the tools, its memory. As the

66
00:05:40.419 --> 00:05:44.710
platform matures we see a lot more requests
on the memory. As your apps are running for

67
00:05:44.710 --> 00:05:51.430
days and weeks, you better make sure you have
no memory leaks. So we have a new heap profiler,

68
00:05:51.430 --> 00:05:57.690
we have new tools for native memory measurement,
lots of stuff there.

69
00:05:57.690 --> 00:06:03.040
The other area that is important for us is
support for mobile. We are working on the

70
00:06:03.040 --> 00:06:09.290
remote debugging for the mobile and as well
as emulating mobile handsets on your desktop.

71
00:06:09.290 --> 00:06:16.290
We do support the -- we've created the remote
debugging protocol that we are happy to see

72
00:06:16.530 --> 00:06:23.530
other big players using now around WebKit.
The other area that is important for us is

73
00:06:24.440 --> 00:06:29.800
the rendering smoothness, and you've seen
a couple of sessions on that yesterday. That's

74
00:06:29.800 --> 00:06:34.800
where we make sure your apps are buttery smooth.
And we are happy to see more and more requests

75
00:06:34.800 --> 00:06:41.259
there. And overall we are happy to see the
way the platform matures and the way you have

76
00:06:41.259 --> 00:06:48.080
more and more demand in the tooling. &gt;&gt;Felix
Lin: I'm Felix Lin and I'm on the product

77
00:06:48.080 --> 00:06:53.650
team for Chrome OS. I spend most of my time
working with hardware partners to bring Chrome

78
00:06:53.650 --> 00:07:00.650
devices to markets. I guess I'm most excited
about the recent Samsung Chromebook and Chromebox

79
00:07:00.750 --> 00:07:06.530
that were just released, and the close working
relationship over the past couple of years

80
00:07:06.530 --> 00:07:11.630
we've developed with Intel and Samsung and
Qualcomm and all the other folks in the PC

81
00:07:11.630 --> 00:07:17.759
ecosystem building devices.
I'm a huge fan of Chrome, as you can imagine.

82
00:07:17.759 --> 00:07:22.600
I love all the things these guys have built,
but what we're really trying to do with Chrome

83
00:07:22.600 --> 00:07:28.910
OS is fully integrate Chrome directly with
the hardware and deliver the best possible

84
00:07:28.910 --> 00:07:35.910
experience in a fully integrated package.
And so the benefit of Chromebooks and Chromeboxes

85
00:07:35.919 --> 00:07:40.780
and other devices is that, you know, when
we can control the entire stack all the way

86
00:07:40.780 --> 00:07:46.120
down to the hardware, we can deliver the best
possible experience for Chrome and the Web

87
00:07:46.120 --> 00:07:51.690
on any hardware that people have.
And so it's not about replacing PC's or replacing

88
00:07:51.690 --> 00:07:56.560
other devices, but for the people who are
spending more and more time on the Web, what

89
00:07:56.560 --> 00:08:02.600
we want to do is just deliver an awesome,
magical experience for all the rich, immersive

90
00:08:02.600 --> 00:08:05.690
experiences that you guys are building for
the Web.

91
00:08:05.690 --> 00:08:12.690
&gt;&gt;Jeff Chang: Great. All right. So now we're
open for questions. Feel free to walk up to

92
00:08:13.130 --> 00:08:18.720
any of the microphones and ask or otherwise
we will trade off with the --

93
00:08:18.720 --> 00:08:25.720
&gt;&gt;Erik Kay: We'll take precedent for the people
who actually take some bravery and walk to

94
00:08:27.020 --> 00:08:27.319
the mic.
[Laughter].

95
00:08:27.319 --> 00:08:31.900
&gt;&gt;Erik Kay: We'll just intersperse the ones
from moderator here.

96
00:08:31.900 --> 00:08:35.680
&gt;&gt;Jeff Chang: All right.
&gt;&gt;&gt; Hi. Good morning. I've got a question.

97
00:08:35.680 --> 00:08:42.330
We're seeing yesterday that it's possible
to open tabs on other devices, and sometimes

98
00:08:42.330 --> 00:08:48.070
if you're like left at home or you have the
devices -- the tabs open there and you open

99
00:08:48.070 --> 00:08:55.070
on a mobile device, will it be possible to
close the tabs that are home because I read

100
00:08:55.190 --> 00:08:58.459
it on the mobile device, it's done, the task
is done?

101
00:08:58.459 --> 00:09:02.070
&gt;&gt;Erik Kay: Yeah, I want that, too.
&gt;&gt;Jeff Chang: So the question was it's great

102
00:09:02.070 --> 00:09:06.890
that you can open tabs that are on other devices
from your other devices, but what about closing

103
00:09:06.890 --> 00:09:09.550
them as well?
That's a really interesting feature request.

104
00:09:09.550 --> 00:09:14.200
We'll have to think about that.
It might be possible if Chrome is running

105
00:09:14.200 --> 00:09:18.910
on that device, but if that device has already
been shut down, obviously you couldn't do

106
00:09:18.910 --> 00:09:20.410
it immediately.
&gt;&gt;Erik Kay: I think we could do it.

107
00:09:20.410 --> 00:09:27.050
&gt;&gt;Jeff Chang: Maybe we could -- maybe we could
figure something out there.

108
00:09:27.050 --> 00:09:29.709
But yeah, I imagine that could be useful.
But yeah, when we started designing that feature

109
00:09:29.709 --> 00:09:32.320
we talked about tab sync, I think we realized
pretty quickly on that you wouldn't want the

110
00:09:32.320 --> 00:09:36.260
exact same set of tabs duplicated everywhere.
So that's not the way it works. It's more

111
00:09:36.260 --> 00:09:42.709
or less a dashboard almost. You can see all
of the devices you have, what's open on each

112
00:09:42.709 --> 00:09:49.709
one and you just pick and choose what you
want. But we'll definitely keep that in mind.

113
00:09:51.450 --> 00:09:51.700
&gt;&gt;&gt; Great, thank you.
&gt;&gt;&gt; +1!

114
00:09:51.450 --> 00:09:55.500
&gt;&gt;&gt; Can I make a question on Chrome OS?
&gt;&gt;Jeff Chang: Yes.

115
00:09:55.500 --> 00:10:01.320
&gt;&gt;&gt; What's the road map on Chrome OS and VPN?
Sometimes to configure Chrome OS to VPN's

116
00:10:01.320 --> 00:10:06.720
and getting to the site of a network it's
been a little bit of a hassle. &gt;&gt;Felix Lin:

117
00:10:06.720 --> 00:10:12.490
So Chrome OS today already supports VPN's
and we're doing a ton of work through the

118
00:10:12.490 --> 00:10:19.490
management console to enable I.T. administrators
to centrally manage an entire fleet of devices

119
00:10:20.269 --> 00:10:25.100
quickly and easily to support different authentication
schemes, different access control mechanisms

120
00:10:25.100 --> 00:10:31.190
and all that.
&gt;&gt;Jeff Chang: Looks like we have another megaphone

121
00:10:31.190 --> 00:10:35.170
question over here.
&gt;&gt;&gt; Hi. I'm wondering if anything is in the

122
00:10:35.170 --> 00:10:41.410
works to improve drag and drop interoperability
between Web apps. So A couple of years ago

123
00:10:41.410 --> 00:10:48.250
we had the ability to do file drag and drop
in HTML5 and it was fantastic and I would

124
00:10:48.250 --> 00:10:53.190
love to see sort of the next evolution so
I could, for instance, be in Gmail and just

125
00:10:53.190 --> 00:10:57.930
drag an attachment out of a message over to
another application that can do something

126
00:10:57.930 --> 00:11:02.700
with that file and have that application be
able to sort of interact with Gmail to pull

127
00:11:02.700 --> 00:11:06.750
in the information it needs and do something,
or vice versa, drag out of an application

128
00:11:06.750 --> 00:11:11.620
on to a Gmail, et cetera.
&gt;&gt;Alex Komoroske: So that's a great use case

129
00:11:11.620 --> 00:11:15.709
there.
And there isn't exactly precisely a standard

130
00:11:15.709 --> 00:11:19.080
respect being developed to do precisely what
you're asking for, but something that does

131
00:11:19.080 --> 00:11:23.420
something sort of similar is Web Intents,
which is a spec that we're driving that allows

132
00:11:23.420 --> 00:11:28.100
applications to say I have an attach or whatever
and allow the users to pick which application

133
00:11:28.100 --> 00:11:32.529
they would like to sort of service that request
with. So theoretically you could have a loose

134
00:11:32.529 --> 00:11:36.620
coupling between Gmail and any other Web app
that would want to view those images or what

135
00:11:36.620 --> 00:11:40.360
you have.
But that's a good point that users are familiar

136
00:11:40.360 --> 00:11:43.700
with drag and drop and it makes sense to be
able to drag and drop these things between

137
00:11:43.700 --> 00:11:49.290
tabs, but that's not something that's currently
on the roadmap.

138
00:11:49.290 --> 00:11:52.649
&gt;&gt;Erik Kay: Yeah. I just want to emphasize
that last point, is loose coupling.

139
00:11:52.649 --> 00:11:57.800
So Web Intents is another one of these really
exciting Web technologies that I think is

140
00:11:57.800 --> 00:12:03.079
going to change the Web in a year. That you're
going to look and say, oh, my God, how did

141
00:12:03.079 --> 00:12:09.560
we interact without this? Because the idea
is that now Gmail can interact with a whole

142
00:12:09.560 --> 00:12:13.779
host of Web apps that it knows nothing about.
It didn't have to be performed with the knowledge

143
00:12:13.779 --> 00:12:19.290
that Oh, I want to save this attachment to
Dropbox or G Drive or whatever else or that

144
00:12:19.290 --> 00:12:25.279
I want to share this picture with Twitter
or Google+ or whatever else. That it's up

145
00:12:25.279 --> 00:12:30.620
to you in the apps that are provided. And
just that fact that we can now have these

146
00:12:30.620 --> 00:12:34.260
websites interoperate without having to hard
code relationships between them I think is

147
00:12:34.260 --> 00:12:39.279
going to be a game changer.
&gt;&gt;Jeff Chang: Cool. Any other megaphone questions?

148
00:12:39.279 --> 00:12:45.110
All right. Let's take one from the Google
moderator page.

149
00:12:45.110 --> 00:12:49.209
So offline it's pretty important for the Chrome
OS story. What features are missing from the

150
00:12:49.209 --> 00:12:51.260
Web platform that would help drive offline
application uses?

151
00:12:51.260 --> 00:12:58.180
&gt;&gt;Alex Komoroske: I'll take a stab at this
one. There already are a suite of technologies

152
00:12:58.180 --> 00:13:04.250
in the Web platform that allow you to do offline
things. You've got things like Local Storage,

153
00:13:04.250 --> 00:13:11.250
you have app cache, Index DB and others. They
aren't necessarily a joy to use right now,

154
00:13:11.570 --> 00:13:15.660
but they do exist as alternatives to build
upon. The file API is a great -- another great

155
00:13:15.660 --> 00:13:17.910
example.
But I would argue actually that the way to

156
00:13:17.910 --> 00:13:23.820
think about really driving offline application
usage is the way you develop your applications.

157
00:13:23.820 --> 00:13:28.079
So if you develop your application with an
always on server -- always connected through

158
00:13:28.079 --> 00:13:33.329
a server mindset, you're going to approach
it in certain ways and architect your app

159
00:13:33.329 --> 00:13:37.740
in certain ways. And then when you try to
layer on offline it can be pretty challenging

160
00:13:37.740 --> 00:13:42.320
because you don't have that server connection
all the time. So actually orienting yourself

161
00:13:42.320 --> 00:13:46.519
as a developer and saying I'm going to start
at the beginning working in this world where

162
00:13:46.519 --> 00:13:50.810
I don't know if I have internet connection,
it sort of forces you actually to pivot your

163
00:13:50.810 --> 00:13:53.240
thinking and to design your apps in a different
way.

164
00:13:53.240 --> 00:13:58.339
And that's a great thing about the new -- the
next evolution of Chrome apps is actually

165
00:13:58.339 --> 00:14:03.100
they encourage you as a developer to start
from this world where you are sort of offline

166
00:14:03.100 --> 00:14:08.029
by default, and connecting to the server is
almost an exception. So that really orients

167
00:14:08.029 --> 00:14:12.850
you to sort of the architecture app in the
way that really works for offline.

168
00:14:12.850 --> 00:14:19.500
&gt;&gt;Erik Kay: Right. So thanks for the shout-out
to the Chrome apps, but the -- we really want

169
00:14:19.500 --> 00:14:22.250
to emphasize that this is one of these key
architectural things that we are building

170
00:14:22.250 --> 00:14:26.230
in from the beginning for Chrome apps is to
say that apps should be written to be offline

171
00:14:26.230 --> 00:14:31.130
by default and we're doing a lot of things
built in to them to make it possible to make

172
00:14:31.130 --> 00:14:36.540
it easy for you to not get -- you know, get
your app into a bad state.

173
00:14:36.540 --> 00:14:40.790
One of the interesting things about offline
is people sort of get hung up on, you know,

174
00:14:40.790 --> 00:14:45.120
Oh, well, I've got connectivity everywhere.
Why do we need offline?

175
00:14:45.120 --> 00:14:52.120
And it's because offline isn't such a straightforward
thing. It's not a question of am I on an airplane

176
00:14:52.800 --> 00:14:58.230
with no connectivity? It's, Oh, well, sometimes
I've got spotty connectivity on my cell network

177
00:14:58.230 --> 00:15:05.050
or other times I'm at a trade show with 5,000
people all using the same Wi-Fi, you know,

178
00:15:05.050 --> 00:15:12.050
connection or other times I'm at a hotel with
a captive proxy or, you know -- there's -- offline

179
00:15:14.110 --> 00:15:20.389
is -- has a wide spectrum actually, and making
your apps that is resistant, resilient to

180
00:15:20.389 --> 00:15:25.769
these network conditions takes a little bit
of forethought. You have to build app, assume

181
00:15:25.769 --> 00:15:30.690
that it's offline and basically you're operating
on local data and syncing with the server.

182
00:15:30.690 --> 00:15:37.010
And all these features that Alex was talking
about with local storage, operating on that

183
00:15:37.010 --> 00:15:43.480
local data, having your code running locally
to begin with and then synchronizing the server

184
00:15:43.480 --> 00:15:48.050
and as you get network connectivity is sort
of the key to making offline work.

185
00:15:48.050 --> 00:15:55.050
&gt;&gt;Jeff Chang: All right. The computer that
was projecting the URL for the questions just

186
00:15:55.899 --> 00:16:02.410
died and won't start up. So we're going to
try to replace that, but hopefully we have

187
00:16:02.410 --> 00:16:07.970
a pretty good queue of Google moderator questions
there and audience questions, so let's keep

188
00:16:07.970 --> 00:16:11.130
going.
&gt;&gt;&gt; Morning. So Chrome is a leader of the

189
00:16:11.130 --> 00:16:17.370
HTML5 standard, no doubt. I was curious on
the roadmap for the mobile Android version

190
00:16:17.370 --> 00:16:23.190
of Chrome, when that would kind of catch up
to the current platform. Specifically in my

191
00:16:23.190 --> 00:16:29.550
case for the WebGL implementation, being that
that's super hard in Tegra and Intel chipsets,

192
00:16:29.550 --> 00:16:33.070
but I just wondered if it was on the roadmap
and where that might fall.

193
00:16:33.070 --> 00:16:35.910
&gt;&gt;Ian Ellison-Taylor: Is anyone from that
team here?

194
00:16:35.910 --> 00:16:39.190
[ Laughter ]
&gt;&gt;Ian Ellison-Taylor: Oh, is there someone

195
00:16:39.190 --> 00:16:43.889
in the back? Oh, yes. Oh, Mrs. Smith, good
Lord!

196
00:16:43.889 --> 00:16:48.310
Yes, Grace, come down and maybe answer this
question, otherwise I'll make up something

197
00:16:48.310 --> 00:16:53.260
like it will be there next week, maybe Tuesday.
&gt;&gt;&gt; Yeah. [Indiscernible] is also here.

198
00:16:53.260 --> 00:16:58.829
So WebGL we are under development behind the
flags. There's a performance issue that you

199
00:16:58.829 --> 00:17:05.829
just mentioned and then there's a potential
DOS attack. So we try to work with like OEM

200
00:17:06.490 --> 00:17:11.169
device drivers to try to address these problems.
&gt;&gt;Ian Ellison-Taylor: The high level strategy,

201
00:17:11.169 --> 00:17:16.539
of course, is that all these features end
up on mobile. There's implementation issues,

202
00:17:16.539 --> 00:17:23.539
and also recognizing that the unique power
management requirements make it a little bit

203
00:17:23.689 --> 00:17:28.259
tricky, but generally when we do new features
in the Web platform we're thinking about the

204
00:17:28.259 --> 00:17:33.399
mobile scenarios. Almost -- I would say first
and foremost generally. We worry a little

205
00:17:33.399 --> 00:17:37.669
bit less about the desktop because that's
an easier scenario. So pretty much everything.

206
00:17:37.669 --> 00:17:42.729
I can't think of anything off the top of my
head that we're not thinking about being in

207
00:17:42.729 --> 00:17:49.470
mobile sooner or later.
So hopefully we'll -- that lag between desktop

208
00:17:49.470 --> 00:17:56.470
and mobile will get shorter and shorter.
&gt;&gt;Alex Komoroske: So there's also -- there's

209
00:17:57.720 --> 00:18:01.429
a little bit of this temporary lag, but the
fact that Chrome for Android is relatively

210
00:18:01.429 --> 00:18:05.059
new. So we're still going through and making
sure we get all those pieces that we worked

211
00:18:05.059 --> 00:18:11.019
on to make Chrome for Android work back into
Chrome. So that process takes a little bit

212
00:18:11.019 --> 00:18:16.109
of time, which is why it takes a little bit
for us to catch up to where desktop Chrome

213
00:18:16.109 --> 00:18:19.739
is right now, but that's a temporary problem.
So there's a long-term problem of some of

214
00:18:19.739 --> 00:18:23.869
these features that you have to make sure
you design it in the mobile -- to work well

215
00:18:23.869 --> 00:18:27.330
in mobile use case and other ones that it
just takes awhile for us to catch up to the

216
00:18:27.330 --> 00:18:34.330
desktop.
&gt;&gt;Jeff Chang: Okay. Next question from the

217
00:18:35.100 --> 00:18:40.450
moderator page is, OSX 10.8 has a power nap
feature that keeps various bits of a user's

218
00:18:40.450 --> 00:18:47.009
data synced while the machine is suspended,
email, et cetera. Any plans for such a feature

219
00:18:47.009 --> 00:18:54.009
in Chrome OS?
Felix, do you want to try to take this one?

220
00:18:57.419 --> 00:18:59.840
I guess, you can look at it on that screen,
too.

221
00:18:59.840 --> 00:19:04.519
Since that machine is broken anyway, maybe
we can get that screen mirrored on that screen.

222
00:19:04.519 --> 00:19:10.960
&gt;&gt;Felix Lin: So this is definitely a feature
that we're looking at. I don't know exactly

223
00:19:10.960 --> 00:19:17.960
when we'll have this feature in Chrome OS.
Certainly as we work with Intel and other

224
00:19:18.419 --> 00:19:22.399
hardware partners, these types of capabilities
are much easier for us to implement because

225
00:19:22.399 --> 00:19:26.879
we have full knowledge of the hardware that's
running in these systems and we can actually

226
00:19:26.879 --> 00:19:30.259
design them.
The great thing about Chrome OS, though, is

227
00:19:30.259 --> 00:19:36.419
that you could buy a machine today and if
that machine has the capability at all to

228
00:19:36.419 --> 00:19:41.019
make this possible, we'll roll out that feature
and you will get it automatically.

229
00:19:41.019 --> 00:19:48.019
So a lot of these features, when we spec the
minimum requirements for Chrome OS boxes,

230
00:19:48.159 --> 00:19:52.249
a lot of what we're doing is looking forward
and making sure that we've got the kind of

231
00:19:52.249 --> 00:19:55.999
head room that we need to be able to add new
features, new capabilities, even though what

232
00:19:55.999 --> 00:20:00.519
we release on any given day may not include
this full set of capabilities.

233
00:20:00.519 --> 00:20:06.720
&gt;&gt;Alex Komoroske: I should point out as well,
this basic feature, this basic request, makes

234
00:20:06.720 --> 00:20:10.529
sense in a lot of different scenarios. It
makes sense, especially on mobile as well,

235
00:20:10.529 --> 00:20:15.679
where you don't know, you don't want to constantly
have your radio powered up. There's also been,

236
00:20:15.679 --> 00:20:22.200
with these event pages. Generally we're moving
towards a model where it's possible for Web

237
00:20:22.200 --> 00:20:26.489
apps to sort of allow Chrome to wake them
up, do a little bit of work, put them back

238
00:20:26.489 --> 00:20:31.570
to sleep in response to events. That's really
basically the core of what power nap is doing

239
00:20:31.570 --> 00:20:35.210
as well. So we are looking into this on multiple
fronts.

240
00:20:35.210 --> 00:20:40.739
So while Jeff is figuring that out, I'll move
on to the next one.

241
00:20:40.739 --> 00:20:47.739
Okay. Will I ever be able to run Chrome OS
on a tablet, maybe even a Nexus 7 tablet?

242
00:20:49.779 --> 00:20:56.779
&gt;&gt;Felix Lin: That's a great question.
[ Laughter ]

243
00:20:57.070 --> 00:21:02.989
&gt;&gt;Felix Lin: Um, Chrome OS was really designed
to run on a variety of form factors, so there's

244
00:21:02.989 --> 00:21:08.749
nothing about Chrome OS that says that we
can't run on a tablet or pick your device

245
00:21:08.749 --> 00:21:14.119
form factor. The first device that we focused
on, because of the complexity of use case,

246
00:21:14.119 --> 00:21:21.119
is the calm shell where we just bring full
capabilities of Chrome to bear. You know,

247
00:21:21.359 --> 00:21:27.450
today, Google's OS for tablets is Android
and we are able to bring all of the capabilities

248
00:21:27.450 --> 00:21:34.450
of Chrome to Android for Jelly Bean and Ice
Cream Sandwich. We're working on creating

249
00:21:35.639 --> 00:21:40.769
a completely seamless, coherent experience
across all devices, regardless of whether

250
00:21:40.769 --> 00:21:43.470
the underlying OS happens to be Android or
Chrome OS.

251
00:21:43.470 --> 00:21:49.889
So from the user standpoint, whether you are
buying content from the play store or whether

252
00:21:49.889 --> 00:21:54.749
you are running an app, our goal is to make
it such that you don't have to worry about

253
00:21:54.749 --> 00:22:00.320
whether it's actually Android or Chrome OS
running on that tablet; we want that to work.

254
00:22:00.320 --> 00:22:07.320
&gt;&gt;Jeff Chang: Next. How will the two operating
systems, Android and Chrome OS, eventually

255
00:22:08.809 --> 00:22:14.229
converge? Yeah, we get asked -- we've been
asked about this in the past, you know, one

256
00:22:14.229 --> 00:22:19.970
thing to keep in mind is that Chrome OS has
the goal of designing an end-to-end computing

257
00:22:19.970 --> 00:22:25.519
experience that -- that embodies kind of the
same core principles as Chrome does, the security,

258
00:22:25.519 --> 00:22:30.789
and, you know, over time we've been thinking
about what parts of the technologies between

259
00:22:30.789 --> 00:22:35.359
those two makes sense to integrate, right?
We are very happy to say that Chrome for Android

260
00:22:35.359 --> 00:22:39.399
came out of beta this week, so Chrome for
Android is now stable.

261
00:22:39.399 --> 00:22:42.849
And maybe Felix you have some other comments
on this or --

262
00:22:42.849 --> 00:22:47.479
&gt;&gt;Erik Kay: Well, I can add a few things.
I mean, one thing is that you'll see, I think

263
00:22:47.479 --> 00:22:53.470
you are going to see more and more convergence
over time. You know, we -- first off just

264
00:22:53.470 --> 00:23:00.099
bringing Chrome, you know, to Android was
sort of the first big step. But there are

265
00:23:00.099 --> 00:23:05.769
many places where we -- where we can integrate
more. First off, getting the same set of apps

266
00:23:05.769 --> 00:23:12.369
running, using the same cloud infrastructure.
But I think the opportunities doing some of

267
00:23:12.369 --> 00:23:18.169
the -- I think the Chrome-to-phone stuff that
we had before, we're looking to -- to have

268
00:23:18.169 --> 00:23:21.639
-- to leverage a lot of the same infrastructure
and to have more and more integration over

269
00:23:21.639 --> 00:23:28.149
time.
&gt;&gt;Jeff Chang: All right. Any other microphone

270
00:23:28.149 --> 00:23:33.340
questions? Don't be shy.
Any plans for a messaging platform inside

271
00:23:33.340 --> 00:23:40.200
of Chrome or Chrome OS, similar to C2DM or
iOS notifications, which I believe are coming

272
00:23:40.200 --> 00:23:46.700
to the desktop?
&gt;&gt;Erik Kay: So we actually do have some -- effectively

273
00:23:46.700 --> 00:23:52.349
with the sync we have a notification system
built into Chrome and into Chrome OS and it

274
00:23:52.349 --> 00:23:58.210
turns out that behind the scenes a lot of
the, you know, infrastructure is very similar

275
00:23:58.210 --> 00:24:02.710
and, again, as I said, that we're looking
to unify some of the basic infrastructure

276
00:24:02.710 --> 00:24:07.739
that we share across Android and Chrome. I
would expect to see our messaging systems

277
00:24:07.739 --> 00:24:13.919
converge as well.
&gt;&gt;Alex Komoroske: You can imagine the solution

278
00:24:13.919 --> 00:24:17.159
wouldn't just have to be about messaging,
per se. It could be about notifications, so

279
00:24:17.159 --> 00:24:20.950
different apps could decide different things
that were worthwhile to do. In fact, actually

280
00:24:20.950 --> 00:24:26.580
in the meet the Web platform video series
we showed off a mock of what that could look

281
00:24:26.580 --> 00:24:30.149
like.
&gt;&gt;Jeff Chang: Cool. All right, audience question.

282
00:24:30.149 --> 00:24:35.669
&gt;&gt;&gt; A question about Chrome apps. What's the
plan to get Chrome apps for Chrome on Android,

283
00:24:35.669 --> 00:24:40.989
and how is it going to work? Is it going to
the Chrome Web store, it's going to a (indiscernible)

284
00:24:40.989 --> 00:24:44.879
to play?
&gt;&gt;Erik Kay: Okay. Let's see, how do we start

285
00:24:44.879 --> 00:24:50.269
with this? First off, you know, it's a common
question that we get about what's our plan

286
00:24:50.269 --> 00:24:55.769
for getting, you know, Chrome apps to mobile.
So you heard Sundar say at the keynote, I

287
00:24:55.769 --> 00:25:01.299
said the other day at the apps talk we are
intending to get Chrome apps to mobile, basically

288
00:25:01.299 --> 00:25:06.169
everywhere that we have Chrome.
Now how are we going to do that? The details

289
00:25:06.169 --> 00:25:12.049
of that? The timing of that? You know, it's
too early to say. I can say that we're looking

290
00:25:12.049 --> 00:25:16.690
for your feedback. We want to know from you
what you want. What are the most important

291
00:25:16.690 --> 00:25:23.109
features that you want to see brought to mobile?
And just one last little plug, we are hiring.

292
00:25:23.109 --> 00:25:26.299
[ Laughter ]
&gt;&gt;Erik Kay: So if you want to help make this

293
00:25:26.299 --> 00:25:28.119
happen, you know --
&gt;&gt;&gt; Cool.

294
00:25:28.119 --> 00:25:34.389
&gt;&gt;Erik Kay: Exactly.
&gt;&gt;Jeff Chang: Cool, another audience question.

295
00:25:34.389 --> 00:25:38.599
&gt;&gt;&gt; Also about Chrome apps, you launched them
from within Chrome but with a new version

296
00:25:38.599 --> 00:25:42.619
that will act a lot like they are native to
the platform. Any thoughts about setting them

297
00:25:42.619 --> 00:25:45.409
up so you would be able to launch them as
if they were a native app?

298
00:25:45.409 --> 00:25:50.849
&gt;&gt;Erik Kay: Absolutely. That's one of the
key features of the next evolution of Chrome

299
00:25:50.849 --> 00:25:55.049
apps here is that we are pulling them outside
of the browser. It's not just that they have

300
00:25:55.049 --> 00:25:59.479
standalone Windows; it's that the way that
you launch them will be without even necessarily

301
00:25:59.479 --> 00:26:04.359
having to have Chrome running. So basically
you will just launch them from the native

302
00:26:04.359 --> 00:26:11.359
desktop.
&gt;&gt;&gt; When will we have private key SSH?

303
00:26:12.779 --> 00:26:19.779
&gt;&gt;Erik Kay: Right. So I know that the engineers
working on that pretty -- on the SSH thing

304
00:26:20.849 --> 00:26:26.249
for Chrome OS is a top feature request. So
I know that it's going to come. I don't know

305
00:26:26.249 --> 00:26:33.249
what the timeline is.
&gt;&gt;Jeff Chang: All right. Looks like we've

306
00:26:34.940 --> 00:26:40.789
got someone walking up to the microphone.
Go ahead.

307
00:26:40.789 --> 00:26:45.009
&gt;&gt;&gt; Why was the change to Aura made? I know
when the Chrome was initially announced, the

308
00:26:45.009 --> 00:26:51.659
launch video mentioned that you didn't even
have a desktop background. And the change

309
00:26:51.659 --> 00:26:57.690
on -- to Aura in the newer version of Chrome
OS did make it a lot more like a desktop operating

310
00:26:57.690 --> 00:27:00.759
system. What was the decision, why did that
happen?

311
00:27:00.759 --> 00:27:07.129
&gt;&gt;Ian Ellison-Taylor: It was 99% user feedback.
I mean -- I think when we launched Chrome

312
00:27:07.129 --> 00:27:13.710
OS in the particular UI model, it was something
of an experiment. It was something that no

313
00:27:13.710 --> 00:27:19.940
one had ever done before. We said that we
were going to update it based on user feedback.

314
00:27:19.940 --> 00:27:24.609
And obviously I think Sundar made the point
about performance improvements and feature

315
00:27:24.609 --> 00:27:28.279
improvements, but people just gave us their
feedback that they wanted it to be a little

316
00:27:28.279 --> 00:27:35.279
bit more like a -- you know, a "traditional"
OS and particularly I think that model, I

317
00:27:36.219 --> 00:27:39.989
mean this is just for me personally -- I will
let Felix talk a little bit. For me personally

318
00:27:39.989 --> 00:27:46.989
the tab model I think worked really well on
the smaller screen. But once you get to sort

319
00:27:47.399 --> 00:27:53.789
of Chromebox style and you're on a large monitor,
that's -- that single large window gets a

320
00:27:53.789 --> 00:27:59.059
little weird, you know. It's like you get
a huge crick in your neck going from one side

321
00:27:59.059 --> 00:28:04.019
of the screen to the other. So being able
to like open multiple windows, switch between

322
00:28:04.019 --> 00:28:07.830
-- then multi-tasking, now I've got three
or four things going on at once, I want a

323
00:28:07.830 --> 00:28:14.830
quick way to switch between them. There's
just a use case that seemed pretty important.

324
00:28:14.999 --> 00:28:20.450
And that you can very easily configure it
so it behaves like it used to if you don't

325
00:28:20.450 --> 00:28:24.309
like that. Then you just run everything full
screen, keep everything in a tab. So if you're

326
00:28:24.309 --> 00:28:29.469
in that model, you don't really lose anything,
but if you want something a little bit more

327
00:28:29.469 --> 00:28:32.570
traditional with multiple windows, you can
do that, too.

328
00:28:32.570 --> 00:28:37.749
&gt;&gt;Felix Lin: I think the biggest benefit of
having a windowing system is that people can

329
00:28:37.749 --> 00:28:42.129
do more than one thing at one time, right?
So a very, very common use case is writing

330
00:28:42.129 --> 00:28:45.809
an email and checking your calendar, if you
have to flip between tabs and you only have

331
00:28:45.809 --> 00:28:52.460
one pane, it's a pretty miserable experience.
Also, as -- as Ian was mentioning, you know

332
00:28:52.460 --> 00:28:58.190
with the Chromebox we are now able to deliver
an experience on dual 30-inch monitors, if

333
00:28:58.190 --> 00:29:04.729
you have got a huge desktop having one full-screen
window is not a great use of space.

334
00:29:04.729 --> 00:29:10.009
&gt;&gt;Erik Kay: Also, one other kind of funny
thing that we discovered by having a full

335
00:29:10.009 --> 00:29:16.599
screen browser, which is there's sort of an
interesting psychological effect for users.

336
00:29:16.599 --> 00:29:21.570
So users have sort of preconceived notions
of what a browser can and can't do, it turns

337
00:29:21.570 --> 00:29:27.460
out. And so they see tabs, they see an address
bar, they see a back button and they immediately

338
00:29:27.460 --> 00:29:31.690
assume, oh, well it's, you know, it's only
a Web page, it can't do everything an app

339
00:29:31.690 --> 00:29:37.529
can do. Or it certainly can't run offline,
so there's sort of these interesting things

340
00:29:37.529 --> 00:29:42.700
that sort of get in the way just by having
it there. And as we move to more focus on

341
00:29:42.700 --> 00:29:47.739
apps within Chrome OS and wanting to bring
apps fronts and center, it was important to

342
00:29:47.739 --> 00:29:50.679
pull those out of the browser and really give
them their own windows.

343
00:29:50.679 --> 00:29:53.869
&gt;&gt;Ian Ellison-Taylor: That actually reminds
me since I tease this on Twitter about there

344
00:29:53.869 --> 00:29:59.019
being an Easter egg. It reminds me of one
of them. So Kan, if you saw the keynote yesterday,

345
00:29:59.019 --> 00:30:03.589
Kan did the sort of the spinning window thing,
so that's in Chrome OS. So that wasn't just

346
00:30:03.589 --> 00:30:08.729
something we rigged up for the keynote.
You can -- it shows the power of the window

347
00:30:08.729 --> 00:30:14.059
manager, so one of the keys is very obvious.
&gt;&gt;&gt; Control alt and then refresh button or

348
00:30:14.059 --> 00:30:15.739
something like that?
&gt;&gt;Ian Ellison-Taylor: Sorry, what was that?

349
00:30:15.739 --> 00:30:18.379
&gt;&gt;&gt; Isn't it like control alt and then the
refresh button?

350
00:30:18.379 --> 00:30:20.309
&gt;&gt;Ian Ellison-Taylor: It may or may not be
that.

351
00:30:20.309 --> 00:30:22.499
[ Laughter ]
&gt;&gt;&gt; I have done it before.

352
00:30:22.499 --> 00:30:23.859
&gt;&gt;Ian Ellison-Taylor:.
[ Laughter ]

353
00:30:23.859 --> 00:30:30.639
You give it away. But there's another -- another
Easter egg that was in the keynote as well.

354
00:30:30.639 --> 00:30:35.139
I don't know if anyone spotted that one, but
I'll maybe talk about that later, if the questions

355
00:30:35.139 --> 00:30:37.409
are good enough.
[ Laughter ]

356
00:30:37.409 --> 00:30:44.409
&gt;&gt;Jeff Chang: Go ahead.
&gt;&gt;&gt; Yeah, so the current Chromebook runs on

357
00:30:46.259 --> 00:30:53.259
Intel or Celeron, but all of your Android
devices currently run on ARM, video, Qualcomm,

358
00:30:54.149 --> 00:30:58.269
TI, respectively, if you're ever going to
get to a point in the future where you are

359
00:30:58.269 --> 00:31:02.359
going to be able to dual boot a device, whether
it be a tablet or a laptop, desktop, or even

360
00:31:02.359 --> 00:31:08.070
a smart phone down the road, into either Chrome
OS or Android, you have to get on the same

361
00:31:08.070 --> 00:31:14.709
CPU hardware platform, is there anything inherent
that makes it difficult for Chrome OS to run

362
00:31:14.709 --> 00:31:19.179
on say an ARM chip or is this just a matter
of timing that this is basically something

363
00:31:19.179 --> 00:31:23.349
that you should expect at some undescript
point down the road?

364
00:31:23.349 --> 00:31:29.700
&gt;&gt;Felix Lin: I think -- we can't talk about
any future products obviously. But there's

365
00:31:29.700 --> 00:31:36.109
nothing about Chrome OS that limits it to
a particular processor architecture. Completely

366
00:31:36.109 --> 00:31:43.109
open source. In fact, many of the ARM vendors
have brought Chrome OS up on different ARM

367
00:31:43.459 --> 00:31:50.459
SOCs, and it's really a matter of, you know,
timing and price point and, you know, a variety

368
00:31:50.950 --> 00:31:56.959
of other things with respect to, you know,
packaging a product and bringing it to commercial

369
00:31:56.959 --> 00:32:03.959
release. So I don't -- you know, basically
there's nothing holding anybody back. Other

370
00:32:04.619 --> 00:32:08.820
than, you know, commitment to ship the product.
&gt;&gt;Erik Kay: There is one thing that I will

371
00:32:08.820 --> 00:32:15.820
toss out. Which is it's not a limitation of
Chrome OS. It's more just sort of what our

372
00:32:16.219 --> 00:32:20.279
chip sets have been building -- what the ARM
chip sets and manufacturers have been building,

373
00:32:20.279 --> 00:32:27.099
so their main focus is on phones and now tablets,
and what's interesting is that phones and

374
00:32:27.099 --> 00:32:34.019
tablets have smaller screens. And it turns
out that -- that the thing that you need that's

375
00:32:34.019 --> 00:32:38.559
one of the biggest performance bottlenecks
on computers in general is memory bandwidth

376
00:32:38.559 --> 00:32:42.849
between the CPU and the display architecture.
And the bigger the screen, the more memory

377
00:32:42.849 --> 00:32:47.869
bandwidth that you need. Turns outs the smaller
the screen, the less you need, right, you

378
00:32:47.869 --> 00:32:53.719
know, conversely. So it's an optimization
that you can do to make it use less power,

379
00:32:53.719 --> 00:32:57.519
to be cheaper and that sort of a thing. So
many of the ARM chip sets are designed to

380
00:32:57.519 --> 00:33:01.869
really be only efficient up to a certain screen
size. So it turns out, this is one of the

381
00:33:01.869 --> 00:33:08.440
things that held ARM back getting to the desktop,
bigger monitors, you know, hi-res. But now

382
00:33:08.440 --> 00:33:13.080
as tablets have had -- now get an increased
density, increased size, increased number

383
00:33:13.080 --> 00:33:17.820
of pixels, they've had to solve those same
memory bandwidth problems. So I think we are

384
00:33:17.820 --> 00:33:23.899
right in the cusp of being able to see really
awesome desktop and laptop ARM form factors

385
00:33:23.899 --> 00:33:27.830
coming and you will see it probably for a
variety of systems.

386
00:33:27.830 --> 00:33:34.830
&gt;&gt;Jeff Chang: Thank you, next question. The
moderator page. Speaking of sync, any plan

387
00:33:35.389 --> 00:33:39.659
for app syncing as well, with an API that
would allow apps to sync their data as well?

388
00:33:39.659 --> 00:33:46.659
&gt;&gt;Erik Kay: So, yes. That already exists.
There's an extension API people can start

389
00:33:48.320 --> 00:33:55.320
playing with today, storage API, Chrome.storage.sync,
basically it's a simple key value store so

390
00:33:57.989 --> 00:34:02.639
you can sort of maintain your state and your
preferences and that sort of a thing. It's

391
00:34:02.639 --> 00:34:08.970
an easy way to sort of move app and extension
settings from -- from machine to machine.

392
00:34:08.970 --> 00:34:15.329
We have much more planned for doing more cloud-based
storage and making APIs available to apps.

393
00:34:15.329 --> 00:34:21.409
&gt;&gt;Ian Ellison-Taylor: And obviously there's
a quick plug for our colleagues on drive that

394
00:34:21.409 --> 00:34:26.369
for applications to be able to store their
application, the user data, that's obviously

395
00:34:26.369 --> 00:34:31.659
one of the goals for drive and getting drive
onto lots of devices. So you get sort of both

396
00:34:31.659 --> 00:34:36.579
-- both parts of the equation, your settings
and your data that can travel with you. So

397
00:34:36.579 --> 00:34:40.539
sync is a huge part of the overall strategy
about what we think is really interesting

398
00:34:40.539 --> 00:34:44.260
about having lots of devices, but a Chrome
experience on one of them. So I think it's

399
00:34:44.260 --> 00:34:51.149
pretty key.
&gt;&gt;Jeff Chang: Okay. So regarding Chrome OS

400
00:34:51.149 --> 00:34:54.399
and the enterprise, what plans do you have
for enhancing the management and performance

401
00:34:54.399 --> 00:35:01.399
of Cloud Print, particularly around management
of over 1,000 printers at a given company?

402
00:35:07.039 --> 00:35:12.499
I know that in Chrome, we don't usually talk
about version numbers, but Chrome 20 stable

403
00:35:12.499 --> 00:35:16.710
-- just went to the stable channel this past
week.

404
00:35:16.710 --> 00:35:19.019
Actually, I take that back. I'm mixing up
my versions.

405
00:35:19.019 --> 00:35:22.809
We are always managing multiple releases at
the same time, so we have four different channels,

406
00:35:22.809 --> 00:35:26.970
I'm actually thinking about 21, 21 I know
has Cloud Printing more directly integrated

407
00:35:26.970 --> 00:35:30.980
into the Chrome's print dialogue itself, so
it's easier to find your printers more easily

408
00:35:30.980 --> 00:35:36.019
when you are printing. And know that that
dialogue has a search box that you can search

409
00:35:36.019 --> 00:35:41.000
across all of the printers that are available
to you. So I hope that's -- that the UI team

410
00:35:41.000 --> 00:35:46.960
has considered the issue of -- of when you
have lots of printers there, although I think

411
00:35:46.960 --> 00:35:49.329
this question might be around more from the
enterprise.

412
00:35:49.329 --> 00:35:52.579
&gt;&gt;Ian Ellison-Taylor: Yeah. Actually, I wonder
if any here -- if they have any from Cloud

413
00:35:52.579 --> 00:35:57.069
Print here. They have a session today, so
if there's no one from the cloud print team

414
00:35:57.069 --> 00:36:01.049
right here, definitely go to that session
and ask them if they have done a lot of work

415
00:36:01.049 --> 00:36:04.819
there. So they can probably answer the question.
&gt;&gt;Jeff Chang: Cloud Print is actually the

416
00:36:04.819 --> 00:36:09.700
last session in this room today, I think.
&gt;&gt;Erik Kay: Actually, just so you know, I

417
00:36:09.700 --> 00:36:13.789
mean one of the big strengths that we've seen
with -- with Chromebooks and Chrome OS has

418
00:36:13.789 --> 00:36:20.789
been enterprise management. This ability to,
you know, drop in, you know, a thousand new

419
00:36:21.130 --> 00:36:26.710
devices and just hand them out. And you not
have to image them and configure them on a

420
00:36:26.710 --> 00:36:32.130
per user basis and deploy a whole bunch of
stuff to them is one of the key strengths

421
00:36:32.130 --> 00:36:35.359
we see of Chrome OS.
And so we've been investing pretty heavily

422
00:36:35.359 --> 00:36:40.190
in the enterprise management console to really
make that better. So if there's any limitations

423
00:36:40.190 --> 00:36:47.180
on that, we want to hear about it. File bugs,
you know, talk to us. Because we think that

424
00:36:47.180 --> 00:36:54.180
this is an area that we can really own.
&gt;&gt;Jeff Chang: Yeah, we have an audience question.

425
00:36:56.000 --> 00:36:59.859
&gt;&gt;&gt; So I came in a little bit late, I don't
know if you addressed this yet, but I was

426
00:36:59.859 --> 00:37:04.630
curious about what's the state of eating your
own dogfood within Google? If you could talk

427
00:37:04.630 --> 00:37:10.200
about the transition of getting people to
be full-time Chromebook users instead of regular

428
00:37:10.200 --> 00:37:15.609
desktop users. Are people doing that? How
successful is it? What kind of experience

429
00:37:15.609 --> 00:37:18.670
have you had?
&gt;&gt;Jeff Chang: Sure, yeah. The question is

430
00:37:18.670 --> 00:37:22.430
asking, you know, about the phrase eating
our own dogfood, which means using our own

431
00:37:22.430 --> 00:37:27.990
products as they are being developed at Google.
I can say for sure for Chrome browser, I definitely

432
00:37:27.990 --> 00:37:33.089
eat my own dogfood. I run Canary, which is
the nightly auto update, built side-by-side

433
00:37:33.089 --> 00:37:40.089
with the beta installation on my machine.
So I actually use Canary every day, so I can

434
00:37:40.460 --> 00:37:46.589
stay with the latest engineering. But I don't
recommend that to normal folks. It's painful

435
00:37:46.589 --> 00:37:50.510
at times.
And in terms of Chromebooks, I certainly carry

436
00:37:50.510 --> 00:37:55.039
around my Chromebook with me. I have it right
over there and I use it and it's really convenient

437
00:37:55.039 --> 00:37:59.920
when I'm going to meetings and stuff, especially
when I want to get out an email in like 60

438
00:37:59.920 --> 00:38:04.990
seconds or something. Open it up on my lid,
press the button and be able to fire off the

439
00:38:04.990 --> 00:38:09.690
email and close my lid within 30 seconds while,
you know, like my other Windows laptop might

440
00:38:09.690 --> 00:38:14.039
be churning away on the anti-virus thing for
like a minute because Google corporate makes

441
00:38:14.039 --> 00:38:20.380
us run anti-virus on them. So, yeah, we definitely
see that a lot around the office. But I do,

442
00:38:20.380 --> 00:38:26.180
you know, use multiple devices and multiple
operating systems. And for Canary on Windows,

443
00:38:26.180 --> 00:38:30.130
I run that, because I want to get the latest
code from our engineers as soon as possible.

444
00:38:30.130 --> 00:38:33.390
&gt;&gt;&gt; Do you have anyone going cold turkey,
just Chrome OS exclusively?

445
00:38:33.390 --> 00:38:40.309
&gt;&gt;Felix Lin: I can tell you that the dogfooders
at Google who are using Chrome OS have skyrocketed

446
00:38:40.309 --> 00:38:45.960
since we released the latest Chromebooks running
on Intel Corp. You know the great thing about

447
00:38:45.960 --> 00:38:51.760
Google -- two things, right? We have access
to whatever computer we want. If you want

448
00:38:51.760 --> 00:38:56.490
a Macbook Air or Macbook Pro, whatever high-end
system you want, you can have it. If you want

449
00:38:56.490 --> 00:39:03.160
a Chromebook, you can have it. We don't force
anybody to dogfood Chrome OS, so everybody

450
00:39:03.160 --> 00:39:08.470
who is using Chrome OS uses it by choice,
and when you think about it, the fact that

451
00:39:08.470 --> 00:39:13.440
you see people, more and more Googlers who
have their pick of any hardware that they

452
00:39:13.440 --> 00:39:19.819
want walking around with Chromebooks, typically
which cost often a fraction of what they could

453
00:39:19.819 --> 00:39:26.819
be spending, it's pretty remarkable. I can
tell you that with the latest Chromeboxes

454
00:39:29.940 --> 00:39:36.940
and the latest Chromebooks, these devices
are just completely hassle free, battery life,

455
00:39:39.119 --> 00:39:46.119
power management, superb, you know, even the
-- the first generation Chromebook, just because

456
00:39:46.359 --> 00:39:51.279
of the fact that we have so many existing
customers on older hardware and the fact that

457
00:39:51.279 --> 00:39:58.279
we're constantly updating even older hardware
with newer releases of Chrome OS, you know,

458
00:39:58.410 --> 00:40:04.160
I switch devices continuously, and so yesterday
during a keynote when you saw Brian talk about

459
00:40:04.160 --> 00:40:08.750
the fact that, you know, he's got 7 or 8 different
machines and he just walks from one machine

460
00:40:08.750 --> 00:40:12.920
to the next, he doesn't carry a single machine
he has to worry about, you know, that is all

461
00:40:12.920 --> 00:40:19.920
possible because of Chrome and Chrome OS.
You know, when you're using a machine which

462
00:40:20.269 --> 00:40:25.869
is a year old and you pick it up one day,
and it's running 30% faster than the day before,

463
00:40:25.869 --> 00:40:30.980
because you've got the auto update pushed
to you, it's really noticeable, and users

464
00:40:30.980 --> 00:40:37.980
really love it, and so even today, even though
I've got, you know, you know, the latest Samsung

465
00:40:40.109 --> 00:40:45.309
Chromebook, when I switch to the device that
I've been using for over a year, I really

466
00:40:45.309 --> 00:40:49.049
don't notice much of a performance difference
for most of the things that I do. I'll notice

467
00:40:49.049 --> 00:40:55.589
some things for, you know, high-end video
and things like that, but the device is completely

468
00:40:55.589 --> 00:41:00.940
usable, it's just great.
&gt;&gt;Erik Kay: So let me give you another perspective.

469
00:41:00.940 --> 00:41:07.869
I do use my Chromebook exclusively as my laptop,
I have to use a different laptop, because

470
00:41:07.869 --> 00:41:12.599
in engineering we to test on a bunch of different
platforms, but I do live on my Chromebook,

471
00:41:12.599 --> 00:41:18.920
and it's pretty common now within Google especially
with the hardware, I'll say that the IT staff

472
00:41:18.920 --> 00:41:25.490
within Google, you know, loves it and they
want more people to switch over, as soon as

473
00:41:25.490 --> 00:41:32.490
they can, and Google -- Googlers are a really
demanding audience. It turns out that, as

474
00:41:33.099 --> 00:41:38.140
Felix said, they can use whatever hardware
they want, and -- and a lot of them are doing

475
00:41:38.140 --> 00:41:42.390
heavy-duty development tasks and that sort
of thing, and so making hardware that is going

476
00:41:42.390 --> 00:41:47.519
to be good enough for the majority of Googlers
to actually get their job done is a tall task,

477
00:41:47.519 --> 00:41:52.779
and the biggest bit of feedback that we heard
early on was that for Googlers the previous

478
00:41:52.779 --> 00:41:58.450
generation of hardware wasn't quite powerful
enough. And now the feedback that we've gotten

479
00:41:58.450 --> 00:42:04.240
from people, is like, wow, this is actually
-- this has crossed the line and it's great,

480
00:42:04.240 --> 00:42:10.220
it's easy, and totally what they want. Now,
they want more of course and so we're working

481
00:42:10.220 --> 00:42:16.190
to make -- build even more powerful machines
and a wider variety of form factors, and trust

482
00:42:16.190 --> 00:42:20.769
us when we say that Googlers are some of the
most demanding audience out there, and -- but

483
00:42:20.769 --> 00:42:25.210
the rate that they're growing and they're
selecting in and using it themselves is going

484
00:42:25.210 --> 00:42:28.009
through the roof.
&gt;&gt;&gt; It is a great idea to have kind of your

485
00:42:28.009 --> 00:42:33.650
computer as like an appliance or kiosk, and
I feel very nervous if I have anything on

486
00:42:33.650 --> 00:42:38.210
a single machine, that is my only copy, I
like moving everything to the cloud, just

487
00:42:38.210 --> 00:42:43.019
being able to -- but I know that there's lots
of little, you know, dusty corners of our

488
00:42:43.019 --> 00:42:48.000
lives where they're not all, you know, able
to be pushed to the cloud on Chrome OS yet,

489
00:42:48.000 --> 00:42:51.029
so it's nice that you guys are kind of filling
in those holes.

490
00:42:51.029 --> 00:42:56.640
&gt;&gt;Ian Ellison-Taylor: That's a great point.
I'm the same way. Since I don't do development,

491
00:42:56.640 --> 00:43:02.609
I'm 99% -- 99.9% of my time is spent on a
Chromebook, and mostly that -- honestly it's

492
00:43:02.609 --> 00:43:09.309
about I'm old and I need a keyboard, I love
tablets, but I spend all my time in e-mail,

493
00:43:09.309 --> 00:43:13.769
I just need to be able to type on a real keyboard,
but I love the battery life, that sort of

494
00:43:13.769 --> 00:43:17.819
8, 9 hours, I can get through the day and
I don't have to carry the little power brick

495
00:43:17.819 --> 00:43:23.089
around, so the battery life thing is huge
for me when I'm running around campus. Another

496
00:43:23.089 --> 00:43:27.670
thing that's really nice about Google, and
I bounce between different offices, I'll often

497
00:43:27.670 --> 00:43:32.210
not carry a machine with me, and I'll go to
the other office, we have these little tech

498
00:43:32.210 --> 00:43:37.609
stop places and I can grab a Chromebook from
tech stop, I just log in, carry on from where

499
00:43:37.609 --> 00:43:41.720
I left off, and then I just hand it back at
the end of the day, and I just don't have

500
00:43:41.720 --> 00:43:45.720
to travel with anything, so when I'm going
through security, and, you know, just everything

501
00:43:45.720 --> 00:43:50.019
gets so much easier when I can just pick up
that machine, log in, carry on, hand it back

502
00:43:50.019 --> 00:43:51.980
and not worry, like what did I leave on that
machine?

503
00:43:51.980 --> 00:43:56.349
What was I doing?
Did I do anything weird today?

504
00:43:56.349 --> 00:44:01.440
So for me, that's a hugely important use case,
and I think we'll see more of that as time

505
00:44:01.440 --> 00:44:02.549
goes on.
&gt;&gt;&gt; Thanks.

506
00:44:02.549 --> 00:44:06.079
&gt;&gt;Jeff Chang: Let's take a question from this
side.

507
00:44:06.079 --> 00:44:10.690
&gt;&gt;&gt; My question is on moderator but it seems
to have dropped off. I just want to know about

508
00:44:10.690 --> 00:44:16.839
international availability of Chrome OS devices
particularly the new Samsung Chromebook, because

509
00:44:16.839 --> 00:44:23.650
I'm from New Zealand and, yeah, we just don't
have access to them there.

510
00:44:23.650 --> 00:44:29.480
&gt;&gt;Ian Ellison-Taylor: What's the international
access for Chromebooks, particularly the new

511
00:44:29.480 --> 00:44:35.759
one. Particularly New Zealand?
&gt;&gt;Felix Lin: So the new Chromebooks are currently

512
00:44:35.759 --> 00:44:41.759
available in US and UK. We're looking at getting
them certified in more countries as quickly

513
00:44:41.759 --> 00:44:48.759
as possible, but, you know, as with all things,
it's a matter of just figuring out where the

514
00:44:49.549 --> 00:44:54.700
demand is and how to role out in more countries
and get the certifications. You know, the

515
00:44:54.700 --> 00:45:01.220
demand for the new Chromebooks, i think, have
greatly exceeded the expectations and so,

516
00:45:01.220 --> 00:45:06.479
again, it's just a matter of time, but we're
working on getting it out there.

517
00:45:06.479 --> 00:45:10.410
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;Jeff Chang: All right. Back to this -- actually,

518
00:45:10.410 --> 00:45:17.029
I'll go ahead and let's do a couple of these.
At least one of these. How far is Web GL support

519
00:45:17.029 --> 00:45:22.430
for mobile versions of Chrome? I think we
already answered that earlier up at the microphone.

520
00:45:22.430 --> 00:45:26.819
Next question here is about Chrome on iOS.
So for you guys in here, we launched Chrome

521
00:45:26.819 --> 00:45:33.819
on iOS yesterday, we actually it's like the
number one ranked in the app store now, right?

522
00:45:34.210 --> 00:45:38.259
&gt;&gt;Ian Ellison-Taylor: Yeah, Chrome on iOS
was number one, and drive on iOS was number

523
00:45:38.259 --> 00:45:42.589
two. We'll see how long that lasts.
&gt;&gt;Jeff Chang: So we're happy that --

524
00:45:42.589 --> 00:45:45.670
[ Applause ]
&gt;&gt;Ian Ellison-Taylor: Thank you.

525
00:45:45.670 --> 00:45:51.559
&gt;&gt;Jeff Chang: We are definitely very happy
that we were able to get that out to you guys,

526
00:45:51.559 --> 00:45:56.690
especially with the think store we've been
telling, it's very important that we have

527
00:45:56.690 --> 00:46:02.990
Chrome available on as many platforms as possible.
In terms of how Chrome runs on iOS, you know,

528
00:46:02.990 --> 00:46:07.759
we obviously have to follow Apple's technical
specifications there, so in terms of the actual

529
00:46:07.759 --> 00:46:13.630
Web content it does use the UR WebView. I
don't know if anyone else has any comments

530
00:46:13.630 --> 00:46:18.269
there.
&gt;&gt;Erik Kay: So there's two things: You have

531
00:46:18.269 --> 00:46:22.380
to think about performance on a number of
different axis, right? So one is how long

532
00:46:22.380 --> 00:46:25.890
does it take -- how fast is it to just get
around and get your work done and do stuff

533
00:46:25.890 --> 00:46:30.420
like that and then the second thing is there's
raw compute performance or rendering performance

534
00:46:30.420 --> 00:46:36.309
within the page. I guess you could count those
as three areas. So on the compute -- on the

535
00:46:36.309 --> 00:46:41.220
pure compute side of things, like if you were
to download just a JavaScript benchmark, we're

536
00:46:41.220 --> 00:46:46.829
limited by what Apple provides us in that
they don't allow you to run your own jitted,

537
00:46:46.829 --> 00:46:53.829
you know, JavaScript engine. They don't allow
you to provide your own rendering -- you know,

538
00:46:54.500 --> 00:46:58.609
Web rendering engine, it's just not allowed
by the terms of service, and so we have to

539
00:46:58.609 --> 00:47:04.079
use UI WebView, and the UI WebView is actually
more restrictive than what's in Safari. Even

540
00:47:04.079 --> 00:47:08.980
though it's some of the own code, they actually
turn off some features. And one of the things

541
00:47:08.980 --> 00:47:15.890
they turn off is the use of the JIT in their
JavaScript engine, so that slows down heavy-duty

542
00:47:15.890 --> 00:47:22.680
JavaScript things. The second thing it does
is it affects some of the GPU acceleration,

543
00:47:22.680 --> 00:47:26.430
how that interoperates. So we have some limitations
there, so if you wanted to do just sort of

544
00:47:26.430 --> 00:47:32.559
the raw how fast is this particular page spinning
in a loop doing stuff, we aren't going to

545
00:47:32.559 --> 00:47:38.329
be as fast as we are on other platforms just
due to limitations; however, the good news

546
00:47:38.329 --> 00:47:42.380
is is that that's not the entire story. The
usability, you know, in terms of how long

547
00:47:42.380 --> 00:47:49.380
does it take you to get from point A to point
B is how much we predict what you're going

548
00:47:49.460 --> 00:47:54.869
to type, that helps with sync, your usage
patterns, the Omni box, how we're able to

549
00:47:54.869 --> 00:48:01.519
pre-fetch -- guess what you're able to do
using our pre-rendering and some of our DNS

550
00:48:01.519 --> 00:48:06.849
pre-fetching stuff. We have a lot of tricks
within Chrome beyond just the JavaScript engine

551
00:48:06.849 --> 00:48:13.230
and what we're doing inside the Web rendering
engine. So actually if you read some of the

552
00:48:13.230 --> 00:48:17.450
reviews that are floating around out there,
if you see the ones that load up a benchmark

553
00:48:17.450 --> 00:48:22.720
and compare them AB, you'll see that we're
slower. If you see the ones that try to use

554
00:48:22.720 --> 00:48:27.680
it and say I navigated to the following three
sites and time that, you'll see that we're

555
00:48:27.680 --> 00:48:31.440
actually way faster, that some people are
getting things done twice as fast. Getting

556
00:48:31.440 --> 00:48:36.109
to their web pages, so if what you're doing
is surfing and navigating around, actually

557
00:48:36.109 --> 00:48:38.640
I think you'll find Chrome on iOS is really
fast.

558
00:48:38.640 --> 00:48:42.319
&gt;&gt;Jeff Chang: Yeah, for me just the fact that
all my favorite websites all ready auto complete.

559
00:48:42.319 --> 00:48:49.319
It just helps a ton, and for me I use a lot
of tabs. I tend to open a lot of tabs in the

560
00:48:49.940 --> 00:48:54.819
background when I'm reading stuff, like read
it or something. Being able to flip through

561
00:48:54.819 --> 00:49:01.240
really easy, switch through them is a huge
usability improvement for me. All right. Go

562
00:49:01.240 --> 00:49:04.279
ahead.
&gt;&gt;&gt; On a similar note, one of the things that

563
00:49:04.279 --> 00:49:09.329
makes Chrome so much more fast than anything
else is the extensions, and in particular

564
00:49:09.329 --> 00:49:16.329
for me, the Omni box extension capability
of making completion work. When are you considering

565
00:49:16.869 --> 00:49:21.130
bringing this to mobile?
&gt;&gt;Erik Kay: So I think we talked a little

566
00:49:21.130 --> 00:49:25.829
bit about this before, but basically, you
know, Chrome is a pretty big set of features

567
00:49:25.829 --> 00:49:31.499
and the Web has a very broad set of features
and so we only just got, you know, Android

568
00:49:31.499 --> 00:49:37.970
to -- Chrome to Android a few months ago,
and we only just got Chrome to iOS today,

569
00:49:37.970 --> 00:49:43.720
or yesterday. So we've got a little ways to
go to get to feature parity, and extension

570
00:49:43.720 --> 00:49:48.680
is one of those parts that we actually like
to take our time with because it has, you

571
00:49:48.680 --> 00:49:52.740
know, deep integration to all of the various
hooks in the browser. We also think that in

572
00:49:52.740 --> 00:49:59.740
mobile it's quite likely that how you want
to extend the browser is going to be different.

573
00:50:00.160 --> 00:50:05.680
Also the performance needs of mobile are different.
So -- so some of the changes we've been making

574
00:50:05.680 --> 00:50:10.009
in the desktop has have been anticipating
our needs in mobile. If you look at the new

575
00:50:10.009 --> 00:50:14.660
stuff we've done with event pages in extensions
where basically there's no longer going to

576
00:50:14.660 --> 00:50:19.329
be an always-running persistent background
page for every single extension, that way

577
00:50:19.329 --> 00:50:23.950
we can be a little more on demand, this is
partly to reduce the resource function of

578
00:50:23.950 --> 00:50:27.799
extensions, and we think will make it more
adaptable to mobile down the road. Unfortunately,

579
00:50:27.799 --> 00:50:31.999
you know, I don't have a good timetable to
tell you, but it is something we're interested

580
00:50:31.999 --> 00:50:35.720
in.
&gt;&gt;Jeff Chang: All right, switch over to this

581
00:50:35.720 --> 00:50:39.839
side again.
&gt;&gt;&gt; I'm curious if there's going to be any

582
00:50:39.839 --> 00:50:45.430
advancements in printer support without Google
Cloud Print. Right now it seems like you need

583
00:50:45.430 --> 00:50:52.430
a separate machine in order to be able to
print. Is there any way that it's going to

584
00:50:53.999 --> 00:50:58.109
be possible with a Chromebook alone.
&gt;&gt;Jeff Chang: Sounds like you're asking about

585
00:50:58.109 --> 00:51:02.150
printing outside of Google cloud but specifically
for Chrome OS.

586
00:51:02.150 --> 00:51:05.299
&gt;&gt;&gt; Yes.
&gt;&gt;Felix Lin: Today people can use any of their

587
00:51:05.299 --> 00:51:12.299
legacy printers by using Cloud Print through
an existing machine on the network. On my

588
00:51:12.809 --> 00:51:18.490
home machine I have windows XP set up, I've
got Cloud Print installed and I can get to

589
00:51:18.490 --> 00:51:25.490
any of my legacy printers on the network through
that with pretty much every printer I'm aware

590
00:51:25.660 --> 00:51:32.349
of on the market today. They're already Cloud
Print enabled, so by simply going any new

591
00:51:32.349 --> 00:51:36.910
printer that you get today pretty much can
just be on the network and accessible to any

592
00:51:36.910 --> 00:51:40.640
Chrome OS or any other device that uses Cloud
Print.

593
00:51:40.640 --> 00:51:46.089
&gt;&gt;&gt; Oh, okay.
&gt;&gt;Jeff Chang: All right. Back to this side.

594
00:51:46.089 --> 00:51:53.089
&gt;&gt;&gt; I found out I think next year that Google
is giving my daughter's school a bunch of

595
00:51:53.880 --> 00:52:00.880
Chrome OS netbooks and we live right next
to Mountain View, so I was just curious like

596
00:52:00.880 --> 00:52:04.249
what's the thinking behind that, and is it
more than just a local thing?

597
00:52:04.249 --> 00:52:07.130
Is it like going to be in other places around
the country?

598
00:52:07.130 --> 00:52:14.039
&gt;&gt;Jeff Chang: So I know for sure that we've
had a lot of -- a lot of schools around the

599
00:52:14.039 --> 00:52:16.589
country starting to adopt Chromebooks. Felix
can probably tell you the exact numbers, but

600
00:52:16.589 --> 00:52:22.740
I know that the feedback has been very positive.
&gt;&gt;Felix Lin: Education is one of the most

601
00:52:22.740 --> 00:52:29.740
-- most aggressively verticals adopting Chromebooks.
And the beauty of the Web and education is

602
00:52:30.930 --> 00:52:33.900
that, you know, the Web is really a great
equalizer, right?

603
00:52:33.900 --> 00:52:40.900
All the best content, apps, information, accessible
to students, very, very low cost, always up-to-date.

604
00:52:42.240 --> 00:52:47.269
Chromebooks are phenomenal platform for schools
because schools have, you know, shrinking

605
00:52:47.269 --> 00:52:53.470
budgets, no IT staff, and being able to take
a device that has zero maintenance, zero management,

606
00:52:53.470 --> 00:52:58.779
always up to date, doesn't require a ton of
care and feeding, and gives people access

607
00:52:58.779 --> 00:53:05.779
to all of the tools that they use is really
just a great formula for education. We're

608
00:53:07.170 --> 00:53:13.130
-- in addition to, you know, the hundreds
and hundreds of schools I think in 48 states,

609
00:53:13.130 --> 00:53:20.130
there are schools that are deploying Chromebooks,
we're seeing huge initiatives at national

610
00:53:20.839 --> 00:53:27.150
levels where in many emerging markets countries
are looking to Chromebooks as a way to, you

611
00:53:27.150 --> 00:53:34.150
know, transform education and really transform
great economic transformation across the country.

612
00:53:35.140 --> 00:53:42.140
And, you know, it's really all about, you
know, the rich content that's available, all

613
00:53:42.839 --> 00:53:49.130
the educational material that is available,
and just the ability to get a situation where

614
00:53:49.130 --> 00:53:56.130
instead of, you know, a 20 students to one
computer type ratio in a school, giving students

615
00:53:56.920 --> 00:54:03.089
a one to one opportunity where every student
has a computer that they're using to enhance

616
00:54:03.089 --> 00:54:09.440
their learning, is truly transformational.
And so, you know, from our standpoint, and,

617
00:54:09.440 --> 00:54:14.650
you know, this is the great thing about working
with many of our hardware partners, in education

618
00:54:14.650 --> 00:54:21.650
we're finding a great willingness on the part
of companies to be able to foster education.

619
00:54:22.720 --> 00:54:28.390
People don't seem to have as large a profit
motive in education as they do in other verticals

620
00:54:28.390 --> 00:54:33.930
where they need to be making, you know, an
enterprise profit, but this is just a huge

621
00:54:33.930 --> 00:54:40.930
opportunity for us and for -- for future students.
&gt;&gt;Jeff Chang: All right, back to this side.

622
00:54:41.200 --> 00:54:47.749
&gt;&gt;&gt; Okay. Congratulations, by the way, on
shipping Chrome for iOS. It's a good thing.

623
00:54:47.749 --> 00:54:54.749
I was in a session yesterday afternoon, optimizing
your HTML for -- for a mobile device, and

624
00:54:55.829 --> 00:55:01.130
the presenter invited us to follow along,
give URL for slides, and said we're going

625
00:55:01.130 --> 00:55:05.890
to working on this interactively, so I pulled
out my iPad and downloaded Chrome for the

626
00:55:05.890 --> 00:55:10.319
iPad, and was following right along, and then
he said, okay, now we're going to install

627
00:55:10.319 --> 00:55:15.369
the page speed extension, so we can watch
and see what happens, and I said, great, search

628
00:55:15.369 --> 00:55:21.519
for page speed, right here, Chrome Web store,
and it said umm, the Chrome Web store is not

629
00:55:21.519 --> 00:55:27.680
supported on your OS.
&gt;&gt;Erik Kay: I tried to touch on this earlier,

630
00:55:27.680 --> 00:55:31.999
but extensions are something we definitely
want to support down the road on mobile and

631
00:55:31.999 --> 00:55:37.529
other platforms. It's just very early days
and getting into mobile is going to take us

632
00:55:37.529 --> 00:55:40.950
a fair amount of work.
&gt;&gt;&gt; Okay.

633
00:55:40.950 --> 00:55:45.529
&gt;&gt;Jeff Chang: Go ahead.
&gt;&gt;&gt; So another Chrome on iOS question. I'm

634
00:55:45.529 --> 00:55:51.720
just wondering if it does or is going to support
URL schemes so that iOS developers launch

635
00:55:51.720 --> 00:55:58.720
Chrome if they choose to.
&gt;&gt;Erik Kay: Do we have anybody from the iOS

636
00:55:59.319 --> 00:56:06.319
team around here that can answer that?
Tell you what, why don't you -- if you want

637
00:56:07.369 --> 00:56:09.799
we can look that up for you and leave your
e-mail for us.

638
00:56:09.799 --> 00:56:11.619
&gt;&gt;Jeff Chang: We can put you in touch with
the right people.

639
00:56:11.619 --> 00:56:13.299
&gt;&gt;&gt; Okay, thanks.
&gt;&gt;&gt; Hi.

640
00:56:13.299 --> 00:56:19.319
&gt;&gt;Jeff Chang: Hi.
&gt;&gt;&gt; I have a question about my Chromebook.

641
00:56:19.319 --> 00:56:26.319
I would like to use it as a Web development
platform with my HTML JavaScript files, and

642
00:56:29.109 --> 00:56:36.109
I tried that yesterday and then I ran into
two problems. One is that I don't have a text

643
00:56:38.059 --> 00:56:45.059
editor for my HTML files, and I saw one of
the presentations that was using an app, I

644
00:56:45.099 --> 00:56:52.099
want to know which app that is. And the second
problem is how to run my HTML files from Google

645
00:56:52.599 --> 00:56:57.670
Drive. I only get a preview of the source
code. I don't get a run.

646
00:56:57.670 --> 00:57:03.440
&gt;&gt;Erik Kay: So I can talk to that. So that
you're probably talking about our presentation

647
00:57:03.440 --> 00:57:09.670
where we had some text editors running on
Chrome OS, and this is using some of the new

648
00:57:09.670 --> 00:57:14.049
apps features that we've been working on.
They're pretty early on, so they're right

649
00:57:14.049 --> 00:57:18.769
now available to people developing in Canary,
but we hope to have them more broadly available

650
00:57:18.769 --> 00:57:23.930
later this year. If you're a developer, want
to ride the ragged edge, you know, you can

651
00:57:23.930 --> 00:57:29.779
come check out -- we've got some sample code.
I think that particular little micro editor

652
00:57:29.779 --> 00:57:36.779
is checked into GitHub, and our Google Chrome
repo, but a warning is that it's early, it's

653
00:57:37.640 --> 00:57:44.640
very simple. It actually isn't as cool as
it looked. We -- we -- we actually hit over

654
00:57:45.499 --> 00:57:50.940
all the rough spots. But there are -- I'll
tell you that just one of the cool, fun things

655
00:57:50.940 --> 00:57:54.819
about the new apps stuff we've been doing,
is just once you add these new capabilities

656
00:57:54.819 --> 00:57:59.730
of seeing what people want to build with them,
and within Chrome team, one of the first things

657
00:57:59.730 --> 00:58:03.900
people wanted to build actually was code editors,
and in fact we have like three of them already

658
00:58:03.900 --> 00:58:09.509
that people are just doing different things
with, and so we actually expect there to be

659
00:58:09.509 --> 00:58:12.710
a plethora of code editors.
&gt;&gt;Jeff Chang: I don't know if you mentioned

660
00:58:12.710 --> 00:58:16.390
it already or not, there's definitely IDEs
available in the Chrome Web store. A bunch

661
00:58:16.390 --> 00:58:23.390
of them are pretty highly ranked.
&gt;&gt;Jeff Chang: The number of cloud ID's emerging

662
00:58:24.279 --> 00:58:30.509
and you can use them, and as the Chrome, we
are providing them with the extension APIs

663
00:58:30.509 --> 00:58:36.900
so they could plug into the instrumentation
and get the dev tools integrated into the

664
00:58:36.900 --> 00:58:43.900
cloud tools, so you have both complete ID
with the remote persistence and the debugging

665
00:58:44.529 --> 00:58:49.220
capabilities on the Chrome OS. But it's all
coming. We're working on that. We're working

666
00:58:49.220 --> 00:58:54.749
with base teams on these capabilities.
&gt;&gt;&gt; And then how do I run my HTML file? When

667
00:58:54.749 --> 00:59:00.619
I clicked on the file from Google Drive, I
just got a preview.

668
00:59:00.619 --> 00:59:06.910
&gt;&gt;Erik Kay: So you have to ask the Drive team,
so unfortunately none of us are from there,

669
00:59:06.910 --> 00:59:11.109
so I don't know if they have any plans to
allow direct hosting of HTML straight from

670
00:59:11.109 --> 00:59:17.160
Drive. I assume that's what you mean for public
consumption, but if you just want to do local

671
00:59:17.160 --> 00:59:22.170
development, it should be possible to do -- to
read the files locally and render them, you

672
00:59:22.170 --> 00:59:22.880
know, in Chrome.
&gt;&gt;Ian Ellison-Taylor: (inaudible)

673
00:59:22.880 --> 00:59:24.319
&gt;&gt;Erik Kay: Yeah, we can check with the drive
team.

674
00:59:24.319 --> 00:59:30.180
&gt;&gt;Jeff Chang: Yeah, we can check with the
Drive team. It looks like we pretty much ran

675
00:59:30.180 --> 00:59:33.619
out of time.
&gt;&gt;Ian Ellison-Taylor: Hang on. I forgot one

676
00:59:33.619 --> 00:59:38.519
other Easter Egg, you probably already know,
there's another Easter Egg in the video, the

677
00:59:38.519 --> 00:59:44.200
History of Chrome, so you might want to study
that video and -- and there's something pretty

678
00:59:44.200 --> 00:59:48.829
cool in there so --
&gt;&gt;Jeff Chang: All right. Perfect timing. Yeah.

679
00:59:48.829 --> 00:59:53.130
So thank you for coming. We enjoy doing this
every year as long as you guys come, and so

680
00:59:53.130 --> 00:59:56.799
hopefully see you next year, otherwise if
you just stay in this room, there's a bunch

681
00:59:56.799 --> 01:00:02.710
of Chrome sessions after us, looks like high
performance HTML5, history and future of Google

682
01:00:02.710 --> 01:00:06.859
Web tool kit, writing secure Web Apps, and
Chrome extensions and the Google Cloud Print

683
01:00:06.859 --> 01:00:10.530
section, so please enjoy the rest of conference,
and thank you.

684
01:00:10.530 --> 01:00:10.780
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:01.280

2
00:00:01.280 --> 00:00:02.420
Hello.

3
00:00:02.420 --> 00:00:04.210
Welcome to Breaking the
JavaScript Speed

4
00:00:04.210 --> 00:00:05.220
Barrier with V8.

5
00:00:05.220 --> 00:00:07.190
My name is Daniel Clifford.

6
00:00:07.190 --> 00:00:10.240
I'm the tech lead and manager
of the V8 team.

7
00:00:10.240 --> 00:00:12.410
If you'd like to follow along in
the slides, there's a link

8
00:00:12.410 --> 00:00:14.230
here on the first slide.

9
00:00:14.230 --> 00:00:18.060
It might help for you in the
back rows to read the smaller

10
00:00:18.060 --> 00:00:20.025
fonts in some of the
code slides later.

11
00:00:20.025 --> 00:00:23.720
12
00:00:23.720 --> 00:00:26.300
I'd like to talk to you today
about optimizing the

13
00:00:26.300 --> 00:00:28.020
performance of your
web application.

14
00:00:28.020 --> 00:00:30.130
Now this could mean a lot of
different things to a lot of

15
00:00:30.130 --> 00:00:31.090
different people.

16
00:00:31.090 --> 00:00:34.030
This could mean optimizing your
WebGL code to get more

17
00:00:34.030 --> 00:00:35.270
frames per second in the game.

18
00:00:35.270 --> 00:00:39.040
This could mean reducing the
number of network round trips

19
00:00:39.040 --> 00:00:40.910
in a client server
application.

20
00:00:40.910 --> 00:00:46.500
But what I'd like to talk to
you about today is Raw

21
00:00:46.500 --> 00:00:50.290
JavaScript Execution Performance
with V8, the

22
00:00:50.290 --> 00:00:53.110
JavaScript engine inside
of Chrome.

23
00:00:53.110 --> 00:00:56.150
The V8 project has recently
moved to the development

24
00:00:56.150 --> 00:00:58.860
center, the Google Development
Center in Munich, Germany.

25
00:00:58.860 --> 00:01:05.459
And as you may know, Germany is
the home of the Autobahn.

26
00:01:05.459 --> 00:01:08.520
And what you may not know is the
Autobahn is not actually a

27
00:01:08.520 --> 00:01:12.690
single stretch of road from
Hamburg to Munich that runs

28
00:01:12.690 --> 00:01:14.200
straight through the middle
of the country.

29
00:01:14.200 --> 00:01:15.950
But rather it's a network
of roads.

30
00:01:15.950 --> 00:01:19.030
And these days, most
of the Autobahn

31
00:01:19.030 --> 00:01:20.420
actually has a speed limit.

32
00:01:20.420 --> 00:01:23.590
But there are still a few
stretches of the road that

33
00:01:23.590 --> 00:01:25.880
don't have any speed
limit whatsoever.

34
00:01:25.880 --> 00:01:29.990
And you can go as fast as you
want, as fast as you can.

35
00:01:29.990 --> 00:01:34.280
And so, as a resident of Munich
and a resident of

36
00:01:34.280 --> 00:01:36.990
Germany, I feel especially
qualified to speak about

37
00:01:36.990 --> 00:01:39.000
moving at speeds that would get
you ticketed here in the

38
00:01:39.000 --> 00:01:40.250
United States.

39
00:01:40.250 --> 00:01:42.880
40
00:01:42.880 --> 00:01:44.770
You might ask the question, who
cares about performance?

41
00:01:44.770 --> 00:01:46.180
JavaScript performance
is fast enough.

42
00:01:46.180 --> 00:01:48.350
This is something that only game
developers need to worry

43
00:01:48.350 --> 00:01:50.490
about, or the developers
of highly interactive

44
00:01:50.490 --> 00:01:52.240
applications.

45
00:01:52.240 --> 00:01:55.450
But I'm here to tell you that
you should care about

46
00:01:55.450 --> 00:01:55.900
performance.

47
00:01:55.900 --> 00:01:58.690
Everybody who develops a web
application should care about

48
00:01:58.690 --> 00:01:59.690
performance.

49
00:01:59.690 --> 00:02:01.390
And the reason is, is that

50
00:02:01.390 --> 00:02:03.140
JavaScript performance matters.

51
00:02:03.140 --> 00:02:06.080
It still matters.

52
00:02:06.080 --> 00:02:08.210
It's not just about making
your current

53
00:02:08.210 --> 00:02:09.460
application run faster.

54
00:02:09.460 --> 00:02:11.760
55
00:02:11.760 --> 00:02:14.270
It's about enabling things that
you have never been able

56
00:02:14.270 --> 00:02:14.950
to do in the past.

57
00:02:14.950 --> 00:02:18.010
Every cycle that you win back
when you do performance

58
00:02:18.010 --> 00:02:21.560
optimization, you can invest
in something new that you

59
00:02:21.560 --> 00:02:23.430
haven't been able
to do before.

60
00:02:23.430 --> 00:02:25.280
An interesting comment about
these pictures, they were

61
00:02:25.280 --> 00:02:27.890
taken on the same street,
only a few feet away.

62
00:02:27.890 --> 00:02:30.490
I think it's interesting that
in the same place, given a

63
00:02:30.490 --> 00:02:32.290
slightly different perspective,
you can have a

64
00:02:32.290 --> 00:02:35.550
completely different
view of the world.

65
00:02:35.550 --> 00:02:36.800
So let's see.

66
00:02:36.800 --> 00:02:41.450
Let's talk about breaking
the speed limit today.

67
00:02:41.450 --> 00:02:47.570
I'd like to use a checklist as
the basis of how you optimize

68
00:02:47.570 --> 00:02:49.080
your web application.

69
00:02:49.080 --> 00:02:51.950
It's a relatively
straightforward model.

70
00:02:51.950 --> 00:02:54.390
But it's very powerful.

71
00:02:54.390 --> 00:02:57.880
And the first step of the
checklist is to make sure you

72
00:02:57.880 --> 00:03:00.320
are prepared before you
have a problem.

73
00:03:00.320 --> 00:03:02.620
This is the piece that is
the most expensive.

74
00:03:02.620 --> 00:03:04.180
This is the one that takes
the most amount of time.

75
00:03:04.180 --> 00:03:05.870
And I'll be spending the
most amount of time

76
00:03:05.870 --> 00:03:08.160
talking about it today.

77
00:03:08.160 --> 00:03:11.230
But this is the one that you
have to do to make the second

78
00:03:11.230 --> 00:03:13.770
two steps possible at all.

79
00:03:13.770 --> 00:03:16.540
The second step is to identify
and understand the crux of

80
00:03:16.540 --> 00:03:18.050
your problem.

81
00:03:18.050 --> 00:03:22.180
And if you know how
a system works.

82
00:03:22.180 --> 00:03:24.550
If you prepare before you go
into the second step, it makes

83
00:03:24.550 --> 00:03:27.650
it much easier to find
your problem.

84
00:03:27.650 --> 00:03:30.830
The third step, you
fix what matters.

85
00:03:30.830 --> 00:03:33.300
And hopefully this is the step
that's actually really easy

86
00:03:33.300 --> 00:03:36.920
after you've done
the first two.

87
00:03:36.920 --> 00:03:40.050
Now, this is a relatively
simple model.

88
00:03:40.050 --> 00:03:41.700
But, like I said, it's
very powerful.

89
00:03:41.700 --> 00:03:45.230
And you can even apply it to
real world situations.

90
00:03:45.230 --> 00:03:47.460
So I'd like to tell you a story

91
00:03:47.460 --> 00:03:48.800
about using the checklist.

92
00:03:48.800 --> 00:03:52.450
And I like to do recreational
mountain climbing.

93
00:03:52.450 --> 00:03:53.340
I'm not very good at it.

94
00:03:53.340 --> 00:03:55.190
But I have a friend
who is very good

95
00:03:55.190 --> 00:03:56.900
at it, Michael Stanton.

96
00:03:56.900 --> 00:03:59.130
And he's taught me
everything I know

97
00:03:59.130 --> 00:04:00.700
about mountain climbing.

98
00:04:00.700 --> 00:04:03.420
And I trust him on
the mountain.

99
00:04:03.420 --> 00:04:04.700
I trust him with my life.

100
00:04:04.700 --> 00:04:07.150
And that's how we found
ourselves in the summer of

101
00:04:07.150 --> 00:04:10.040
2010 up here.

102
00:04:10.040 --> 00:04:11.650
And it was a beautiful day.

103
00:04:11.650 --> 00:04:13.030
We'd been on the mountain
all day.

104
00:04:13.030 --> 00:04:14.210
We hadn't seen another soul.

105
00:04:14.210 --> 00:04:15.960
We had the whole mountain
to ourselves.

106
00:04:15.960 --> 00:04:18.820
And we were two rope lengths
from the top, from the summit.

107
00:04:18.820 --> 00:04:20.589
We were almost there.

108
00:04:20.589 --> 00:04:21.970
And I was belaying Michael.

109
00:04:21.970 --> 00:04:23.840
I was making sure that if
he were to fall that

110
00:04:23.840 --> 00:04:24.520
I would catch him.

111
00:04:24.520 --> 00:04:26.280
And he was leading ahead.

112
00:04:26.280 --> 00:04:29.700
And he climbed ahead of me
around a corner, out of sight.

113
00:04:29.700 --> 00:04:31.620
And I heard him struggling with
a particularly tricky

114
00:04:31.620 --> 00:04:32.300
climbing problem.

115
00:04:32.300 --> 00:04:35.290
Then I heard two sounds that I
will never forget in my life.

116
00:04:35.290 --> 00:04:39.200
And the first one was the
percussive sound of a rock

117
00:04:39.200 --> 00:04:40.160
coming loose.

118
00:04:40.160 --> 00:04:43.707
And the second sound was the
sickening thud of that rock

119
00:04:43.707 --> 00:04:46.110
hitting Michael.

120
00:04:46.110 --> 00:04:48.070
He fell.

121
00:04:48.070 --> 00:04:49.680
I called his name.

122
00:04:49.680 --> 00:04:52.640
But all I heard was silence.

123
00:04:52.640 --> 00:04:55.895
I realized in that moment that
I had a performance problem.

124
00:04:55.895 --> 00:04:58.740
125
00:04:58.740 --> 00:05:02.100
And the checklist that I just
presented to you would be the

126
00:05:02.100 --> 00:05:05.650
key for me to get out
of that situation.

127
00:05:05.650 --> 00:05:09.630
I had to be prepared before I
ever got on that mountain.

128
00:05:09.630 --> 00:05:13.320
I had to make sure to identify
the problem that I had in that

129
00:05:13.320 --> 00:05:15.090
very moment, the key
problem, so that I

130
00:05:15.090 --> 00:05:16.490
could fix it quickly.

131
00:05:16.490 --> 00:05:19.710
Somebody's life could
depend on it.

132
00:05:19.710 --> 00:05:24.030
Now, I hope you never are in a
situation like that, that your

133
00:05:24.030 --> 00:05:26.690
life depends on applying
the checklist.

134
00:05:26.690 --> 00:05:29.960
So why don't we go to an
example, which talks about a

135
00:05:29.960 --> 00:05:32.430
less life threatening
performance problem.

136
00:05:32.430 --> 00:05:34.940
Let's talk about JavaScript.

137
00:05:34.940 --> 00:05:38.290
So I have put together a sample
problem that I'd like

138
00:05:38.290 --> 00:05:40.900
to talk about throughout the
course of this talk.

139
00:05:40.900 --> 00:05:44.690
And it is a toy problem that
I've come up with.

140
00:05:44.690 --> 00:05:46.030
But I think it's representative
of some of the

141
00:05:46.030 --> 00:05:46.710
things that--

142
00:05:46.710 --> 00:05:48.260
some of the performance problems
that you might face

143
00:05:48.260 --> 00:05:49.590
in your own code.

144
00:05:49.590 --> 00:05:54.980
And the problem is to compute
the 25,000th prime.

145
00:05:54.980 --> 00:05:57.880
Pretty simple algorithm here,
you start at one.

146
00:05:57.880 --> 00:05:59.120
You count up.

147
00:05:59.120 --> 00:06:02.180
And you take each candidate
number.

148
00:06:02.180 --> 00:06:04.260
And you look in a list of primes
that you're maintaining

149
00:06:04.260 --> 00:06:07.720
and see if any of those primes
can be divided into that

150
00:06:07.720 --> 00:06:08.590
candidate number.

151
00:06:08.590 --> 00:06:10.690
And if it can, then
the candidate

152
00:06:10.690 --> 00:06:12.030
number is not a prime.

153
00:06:12.030 --> 00:06:14.940
If none of the prime numbers go
into that candidate number,

154
00:06:14.940 --> 00:06:19.150
then we have a new prime
and we add it to list.

155
00:06:19.150 --> 00:06:25.330
And I wrote some code in
C++ and in JavaScript.

156
00:06:25.330 --> 00:06:27.730
Don't sweat the details
of this code.

157
00:06:27.730 --> 00:06:29.390
I just wanted to show you
that it's about the

158
00:06:29.390 --> 00:06:30.170
same amount of code.

159
00:06:30.170 --> 00:06:33.600
And I tried to do a pretty good
job of porting the code

160
00:06:33.600 --> 00:06:35.410
from JavaScript to C++.

161
00:06:35.410 --> 00:06:36.660
So it does the same thing.

162
00:06:36.660 --> 00:06:39.520
163
00:06:39.520 --> 00:06:42.280
And then what I did is I
actually ran the code.

164
00:06:42.280 --> 00:06:47.490
I compiled the C++ code
with GCC and ran it.

165
00:06:47.490 --> 00:06:51.580
And you can see it took about
three seconds to compute the

166
00:06:51.580 --> 00:06:53.840
25,000th prime.

167
00:06:53.840 --> 00:06:56.030
Then I took the JavaScript
code.

168
00:06:56.030 --> 00:06:57.090
And I didn't run
it in browser.

169
00:06:57.090 --> 00:06:58.910
What I did was I took the
debugging shell that's

170
00:06:58.910 --> 00:07:01.530
available as part of the V8
open source code project.

171
00:07:01.530 --> 00:07:05.250
And I compiled that and ran
the JavaScript with the

172
00:07:05.250 --> 00:07:06.240
debugging shell.

173
00:07:06.240 --> 00:07:08.030
The debugging shell makes
it possible for you to

174
00:07:08.030 --> 00:07:10.350
concentrate on JavaScript
specific problems.

175
00:07:10.350 --> 00:07:13.620
So for this presentation, I'll
refer to the debugging shell

176
00:07:13.620 --> 00:07:14.950
in most of my examples.

177
00:07:14.950 --> 00:07:19.700
You'll see that when I ran the
prime code in JavaScript, it

178
00:07:19.700 --> 00:07:24.060
took 15 seconds.

179
00:07:24.060 --> 00:07:28.290
So JavaScript's about five
times slower than C++.

180
00:07:28.290 --> 00:07:29.540
That's not so bad, right?

181
00:07:29.540 --> 00:07:31.760
182
00:07:31.760 --> 00:07:34.800
Of course it is, yeah.

183
00:07:34.800 --> 00:07:37.880
So I just made a big mistake.

184
00:07:37.880 --> 00:07:39.490
I've told you about
this checklist.

185
00:07:39.490 --> 00:07:42.070
And I just completely
ignored it.

186
00:07:42.070 --> 00:07:43.910
I was not prepared.

187
00:07:43.910 --> 00:07:45.660
I don't have enough information
to make judgment

188
00:07:45.660 --> 00:07:49.120
about whether my code is bad or
good, whether that number

189
00:07:49.120 --> 00:07:51.290
is something I should
expect or not.

190
00:07:51.290 --> 00:07:53.910
I didn't even try
to analyze any

191
00:07:53.910 --> 00:07:55.810
potential performance problem.

192
00:07:55.810 --> 00:08:01.100
And I didn't even get anywhere
close to fixing any problem.

193
00:08:01.100 --> 00:08:05.180
I'd like to show you
how V8 has improved

194
00:08:05.180 --> 00:08:07.480
since Chrome came out.

195
00:08:07.480 --> 00:08:11.100
This is V8's score on the V8
benchmark, version seven.

196
00:08:11.100 --> 00:08:13.780
And you can see that it's
got a lot better

197
00:08:13.780 --> 00:08:16.120
since we launched Chrome.

198
00:08:16.120 --> 00:08:20.830
And we're now at the position
with V8 that we can actually

199
00:08:20.830 --> 00:08:25.690
make a comparison against the
performance of C and C++ code.

200
00:08:25.690 --> 00:08:30.620
You can expect to be in the
ballpark for certain code.

201
00:08:30.620 --> 00:08:33.330
So don't give up here.

202
00:08:33.330 --> 00:08:36.000
When you're in the same
situation, where you say,

203
00:08:36.000 --> 00:08:37.549
we're slower than C++.

204
00:08:37.549 --> 00:08:39.030
Or I'm slower where
I want to be.

205
00:08:39.030 --> 00:08:40.760
Don't just give up.

206
00:08:40.760 --> 00:08:43.370
Apply the checklist that
I presented to you.

207
00:08:43.370 --> 00:08:45.630
And see how far you can get.

208
00:08:45.630 --> 00:08:50.260
Demand that your application
is faster.

209
00:08:50.260 --> 00:08:53.680
So how much faster do you
think we can get the

210
00:08:53.680 --> 00:08:56.680
JavaScript code to run?

211
00:08:56.680 --> 00:08:58.130
Who here thinks we can do it--

212
00:08:58.130 --> 00:09:00.921
we can get it three and
a half times faster?

213
00:09:00.921 --> 00:09:03.650
All right, we've got
maybe 5, 10 people.

214
00:09:03.650 --> 00:09:04.810
35 times?

215
00:09:04.810 --> 00:09:06.080
Takers?

216
00:09:06.080 --> 00:09:08.430
OK, also a couple of people,
I know you know

217
00:09:08.430 --> 00:09:09.520
how this game works.

218
00:09:09.520 --> 00:09:12.030
350 times?

219
00:09:12.030 --> 00:09:17.305
OK, one person, the V8 PMs.

220
00:09:17.305 --> 00:09:19.650
[LAUGHTER]

221
00:09:19.650 --> 00:09:22.090
3,500?

222
00:09:22.090 --> 00:09:25.140
All right, we've got to get at
least one brave taker here.

223
00:09:25.140 --> 00:09:29.910
So I think the most votes
were for 35 times.

224
00:09:29.910 --> 00:09:34.770
Let's apply the checklist and
see how far we can get.

225
00:09:34.770 --> 00:09:38.450
Now I told you the first step
was to be prepared.

226
00:09:38.450 --> 00:09:40.270
And this means we're going to
dive into some technical

227
00:09:40.270 --> 00:09:44.450
details of V8, so you can
understand how it works.

228
00:09:44.450 --> 00:09:46.730
So fasten your seat belts.

229
00:09:46.730 --> 00:09:51.410
This is where things get
a little bit racy.

230
00:09:51.410 --> 00:09:53.460
So what does prepared
mean for V8?

231
00:09:53.460 --> 00:09:54.840
I mentioned this before.

232
00:09:54.840 --> 00:09:57.860
You need to understand
how V8 optimizes

233
00:09:57.860 --> 00:09:59.000
your JavaScript code.

234
00:09:59.000 --> 00:10:02.330
You need to understand how V8
actually works so that you can

235
00:10:02.330 --> 00:10:05.070
help it optimize your code.

236
00:10:05.070 --> 00:10:08.770
Because once you understand how
V8 works, then when you

237
00:10:08.770 --> 00:10:10.780
actually write your JavaScript
code, you can keep those

238
00:10:10.780 --> 00:10:12.400
things in mind and make sure
that you don't make some of

239
00:10:12.400 --> 00:10:16.850
the mistakes that
will fool V8.

240
00:10:16.850 --> 00:10:19.020
Make sure you learn the tools
that are available to you.

241
00:10:19.020 --> 00:10:21.770
There's some great tools in
Chrome, the dev tools.

242
00:10:21.770 --> 00:10:25.520
And V8 has some built-in tools
in the debugging shell that

243
00:10:25.520 --> 00:10:27.350
can really help you understand
what's going on in your

244
00:10:27.350 --> 00:10:29.050
JavaScript and help you
make it better.

245
00:10:29.050 --> 00:10:31.770
246
00:10:31.770 --> 00:10:32.020
All right.

247
00:10:32.020 --> 00:10:33.620
So the first thing I'd
like to talk to you

248
00:10:33.620 --> 00:10:36.720
about is hidden classes.

249
00:10:36.720 --> 00:10:40.070
So JavaScript doesn't
have explicit types.

250
00:10:40.070 --> 00:10:43.260
And this presents a bit of
a challenge to a language

251
00:10:43.260 --> 00:10:46.930
implementer, because type
information is very valuable

252
00:10:46.930 --> 00:10:50.750
in specializing generated code
to be very efficient.

253
00:10:50.750 --> 00:10:52.870
And if you don't have that type
information, it makes it

254
00:10:52.870 --> 00:10:54.520
much more difficult.

255
00:10:54.520 --> 00:10:57.180
And it's hard to gather this
information efficiently and

256
00:10:57.180 --> 00:10:59.290
quickly when you're compiling
JavaScript code because

257
00:10:59.290 --> 00:11:02.230
compilation is part of
the execution time of

258
00:11:02.230 --> 00:11:03.140
a JavaScript program.

259
00:11:03.140 --> 00:11:06.870
Every cycle that you spend
compiling a JavaScript script

260
00:11:06.870 --> 00:11:10.050
before you execute it is a cycle
longer than it takes to

261
00:11:10.050 --> 00:11:11.830
actually get to doing
the work.

262
00:11:11.830 --> 00:11:15.730
So we have to find a way
to get executing

263
00:11:15.730 --> 00:11:17.000
code as fast as possible.

264
00:11:17.000 --> 00:11:20.950
And it makes it difficult to do
expensive reasoning about

265
00:11:20.950 --> 00:11:23.470
types at compilation time.

266
00:11:23.470 --> 00:11:26.440
And that makes it extremely
difficult to get it close to

267
00:11:26.440 --> 00:11:29.700
the performance of C++.

268
00:11:29.700 --> 00:11:34.170
However, there are
some tricks.

269
00:11:34.170 --> 00:11:39.250
Hidden classes help make V8
run JavaScript faster.

270
00:11:39.250 --> 00:11:44.550
V8 internally creates hidden
classes for objects at run

271
00:11:44.550 --> 00:11:47.290
time, not at compile time.

272
00:11:47.290 --> 00:11:50.510
And that's how we get around
the problem of compiling

273
00:11:50.510 --> 00:11:52.820
upfront, getting the information
upfront, because

274
00:11:52.820 --> 00:11:56.480
we gather the hidden class
information as we go.

275
00:11:56.480 --> 00:11:58.150
And here's a key insight.

276
00:11:58.150 --> 00:12:00.000
And this is one that we'll
repeat throughout the

277
00:12:00.000 --> 00:12:00.600
presentation.

278
00:12:00.600 --> 00:12:03.530
Objects with the same hidden
class can use the same

279
00:12:03.530 --> 00:12:05.390
optimized generated code.

280
00:12:05.390 --> 00:12:08.710
And that means if you help teach
V8 through the way that

281
00:12:08.710 --> 00:12:11.920
you structure your code, which
object has the same hidden

282
00:12:11.920 --> 00:12:15.300
class, you can help it to
generate optimized code for

283
00:12:15.300 --> 00:12:17.490
those cases.

284
00:12:17.490 --> 00:12:18.940
I'd like to show you
how this works in

285
00:12:18.940 --> 00:12:21.180
a very simple example.

286
00:12:21.180 --> 00:12:23.650
So I've got a constructor
function here

287
00:12:23.650 --> 00:12:25.870
for an object point.

288
00:12:25.870 --> 00:12:28.700
And I'm going to instantiate
it twice.

289
00:12:28.700 --> 00:12:32.470
And let's see actually what
V8 does behind the scenes.

290
00:12:32.470 --> 00:12:37.020
So the first time the
constructor gets called, V8

291
00:12:37.020 --> 00:12:38.260
creates a new hidden class.

292
00:12:38.260 --> 00:12:40.910
So what you see here is-- on the
right hand side-- is you

293
00:12:40.910 --> 00:12:43.160
see the new point object.

294
00:12:43.160 --> 00:12:47.940
The first entry in the point
object is a hidden class to an

295
00:12:47.940 --> 00:12:50.420
empty point hidden class.

296
00:12:50.420 --> 00:12:54.750
And as we assign to the members,
in point, what V8

297
00:12:54.750 --> 00:12:57.750
does is actually realizes, ah,
you're changing the hidden

298
00:12:57.750 --> 00:13:00.020
class by adding a
member to it.

299
00:13:00.020 --> 00:13:03.610
And we create a new
hidden class.

300
00:13:03.610 --> 00:13:06.280
And the point object
gets assigned to

301
00:13:06.280 --> 00:13:07.510
this new hidden class.

302
00:13:07.510 --> 00:13:09.680
And if we had another member--

303
00:13:09.680 --> 00:13:10.920
in this case y--

304
00:13:10.920 --> 00:13:12.740
we get yet another
hidden class.

305
00:13:12.740 --> 00:13:15.190
And you see what happens here
is that not only does V8

306
00:13:15.190 --> 00:13:18.120
create new hidden classes as
new members are added.

307
00:13:18.120 --> 00:13:21.480
But it keeps track of what had
to happen to get from one

308
00:13:21.480 --> 00:13:23.500
hidden class to another one.

309
00:13:23.500 --> 00:13:26.290
So you see we went from empty
point object to a point object

310
00:13:26.290 --> 00:13:31.190
with an x, to a point object
with an x and a y.

311
00:13:31.190 --> 00:13:34.880
And that's important because the
second time that we call

312
00:13:34.880 --> 00:13:38.890
the point constructor, this
hidden class structure is

313
00:13:38.890 --> 00:13:40.460
already there.

314
00:13:40.460 --> 00:13:44.720
And as the code is executed to
add the members x and the

315
00:13:44.720 --> 00:13:49.160
members y, you'll see
that the object also

316
00:13:49.160 --> 00:13:50.650
gets new hidden classes.

317
00:13:50.650 --> 00:13:52.570
But it gets the same hidden
classes that we created the

318
00:13:52.570 --> 00:13:54.050
first time through.

319
00:13:54.050 --> 00:13:59.290
So that at the end, we actually
have P1 and P2 having

320
00:13:59.290 --> 00:14:01.050
the same hidden class.

321
00:14:01.050 --> 00:14:06.670
The problem is, is that if we
add a member to P2 that we

322
00:14:06.670 --> 00:14:08.040
haven't added to P1--

323
00:14:08.040 --> 00:14:10.550
after the fact, outside
of the constructor--

324
00:14:10.550 --> 00:14:13.020
what happens is that we
create yet another

325
00:14:13.020 --> 00:14:14.810
hidden class for P2.

326
00:14:14.810 --> 00:14:17.660
And it is different from
the class for P1.

327
00:14:17.660 --> 00:14:20.780
So they are now-- we're not able
to use the same optimize

328
00:14:20.780 --> 00:14:23.050
code for both of
those objects.

329
00:14:23.050 --> 00:14:27.880
So be aware that by doing
something like this and

330
00:14:27.880 --> 00:14:29.780
creating hidden classes, you're
defeating some of the

331
00:14:29.780 --> 00:14:34.480
optimizations that V8 can do.

332
00:14:34.480 --> 00:14:37.990
I'd like to talk about speed
traps to avoid in this

333
00:14:37.990 --> 00:14:39.030
presentation.

334
00:14:39.030 --> 00:14:41.690
For the most part, all of the
advice I'm going to give you

335
00:14:41.690 --> 00:14:44.050
today is something
that is eternal.

336
00:14:44.050 --> 00:14:47.850
You can assume that the tips
that I give you today you can

337
00:14:47.850 --> 00:14:50.530
use forever, except for a couple
of cases where I'll

338
00:14:50.530 --> 00:14:52.280
say, this is something that's
temporary, something that

339
00:14:52.280 --> 00:14:54.230
we're working on and we're
trying to make better.

340
00:14:54.230 --> 00:14:57.580
So let's get to the first speed
trap, which is make sure

341
00:14:57.580 --> 00:15:00.070
to initialize all members in
your constructor functions.

342
00:15:00.070 --> 00:15:02.470
This comes from the example I
just showed you, which is you

343
00:15:02.470 --> 00:15:06.100
need to teach V8 which hidden
class objects should have

344
00:15:06.100 --> 00:15:07.150
after they're constructed.

345
00:15:07.150 --> 00:15:09.730
And the way to do that is by
putting all of the member

346
00:15:09.730 --> 00:15:12.450
initialization in
the constructor.

347
00:15:12.450 --> 00:15:15.490
Always initialize object members
in the same order.

348
00:15:15.490 --> 00:15:18.310
This follows from that example
that I gave you.

349
00:15:18.310 --> 00:15:21.710
If you add members in different
orders, you create a

350
00:15:21.710 --> 00:15:23.720
different tree of
hidden classes.

351
00:15:23.720 --> 00:15:25.950
And at the end, you'll have
objects with two different

352
00:15:25.950 --> 00:15:27.840
hidden classes that can't use
the same optimized code.

353
00:15:27.840 --> 00:15:31.370
354
00:15:31.370 --> 00:15:36.290
Next thing I'd like to talk
about are numbers.

355
00:15:36.290 --> 00:15:39.870
So because we don't have a lot
of type information in

356
00:15:39.870 --> 00:15:42.560
JavaScript, we have
this dilemma.

357
00:15:42.560 --> 00:15:45.400
We want to be able to generate
code that can handle all

358
00:15:45.400 --> 00:15:49.700
possible different values, all
different possible types.

359
00:15:49.700 --> 00:15:52.560
But you want to be able
to have an efficient

360
00:15:52.560 --> 00:15:55.400
representation of numbers.

361
00:15:55.400 --> 00:15:56.470
And how do we do this?

362
00:15:56.470 --> 00:15:59.530
Well, we use a technique
called tagging.

363
00:15:59.530 --> 00:16:02.380
So inside of V8 we pass
around values of

364
00:16:02.380 --> 00:16:05.310
32-bit numbers and objects.

365
00:16:05.310 --> 00:16:07.800
But we want to be able to
use the same 32 bits

366
00:16:07.800 --> 00:16:09.240
to represent both.

367
00:16:09.240 --> 00:16:12.580
And that way we can have one
code path that can handle, in

368
00:16:12.580 --> 00:16:16.020
many cases, the objects
and integers.

369
00:16:16.020 --> 00:16:19.240
So what we do is we use
the bottom bit.

370
00:16:19.240 --> 00:16:22.110
And each of the values have
a special meaning.

371
00:16:22.110 --> 00:16:24.695
If the bit is set, it's
an object pointer.

372
00:16:24.695 --> 00:16:28.470
If it's clear, it's what we
call small integer or smi.

373
00:16:28.470 --> 00:16:32.120
And that's a 31-bit
signed integer.

374
00:16:32.120 --> 00:16:34.660
Now if you have a numeric value
that you're passing

375
00:16:34.660 --> 00:16:37.810
around, assigning to a member
that is bigger--

376
00:16:37.810 --> 00:16:41.620
it's a numeric value that's
bigger than 31 signed bits--

377
00:16:41.620 --> 00:16:45.420
then it doesn't fit in
one of these smis.

378
00:16:45.420 --> 00:16:47.400
And we have to create what's
called a box for it.

379
00:16:47.400 --> 00:16:49.160
We box the number.

380
00:16:49.160 --> 00:16:50.490
We turn it into a double.

381
00:16:50.490 --> 00:16:53.380
And we create a new object to
put that number inside of it.

382
00:16:53.380 --> 00:16:56.960
And what follows from that is
the next speed trap to avoid,

383
00:16:56.960 --> 00:17:02.340
which is make sure, whenever
possible, you use 31-bit

384
00:17:02.340 --> 00:17:06.510
signed numbers for performance
critical calculations.

385
00:17:06.510 --> 00:17:09.819
Because if you exceed 31 signed
bits, we will have to

386
00:17:09.819 --> 00:17:12.000
convert it to a double value.

387
00:17:12.000 --> 00:17:14.369
Now there's some optimizations
that we have that doesn't make

388
00:17:14.369 --> 00:17:15.390
it as bad as it seems.

389
00:17:15.390 --> 00:17:18.859
But there are cases where that
process causes an allocation.

390
00:17:18.859 --> 00:17:20.790
And that means that some
mathematical operations can

391
00:17:20.790 --> 00:17:22.040
cause allocation.

392
00:17:22.040 --> 00:17:25.250
393
00:17:25.250 --> 00:17:26.940
The next thing I'd like to
talk about is arrays.

394
00:17:26.940 --> 00:17:28.840
This brings some of the elements
together of the

395
00:17:28.840 --> 00:17:30.880
previous two sections.

396
00:17:30.880 --> 00:17:32.610
In JavaScript, you can have
very large arrays.

397
00:17:32.610 --> 00:17:34.440
And you can have arrays that
are sparse, that don't have

398
00:17:34.440 --> 00:17:36.230
every element inside of them.

399
00:17:36.230 --> 00:17:40.230
And so V8 actually has two
different methods to handle

400
00:17:40.230 --> 00:17:41.710
two different types of arrays.

401
00:17:41.710 --> 00:17:43.990
The first one is
fast elements.

402
00:17:43.990 --> 00:17:47.400
And fast elements, they have
a linear storage buffer.

403
00:17:47.400 --> 00:17:49.840
And V8 uses them if the
set of keys for the

404
00:17:49.840 --> 00:17:51.600
array is very compact.

405
00:17:51.600 --> 00:17:54.150
406
00:17:54.150 --> 00:17:56.830
If that's not the case-- so you
have a very sparse array--

407
00:17:56.830 --> 00:17:58.150
then it uses a different
format, which

408
00:17:58.150 --> 00:17:59.830
is dictionary elements.

409
00:17:59.830 --> 00:18:03.380
Fast elements, linear buffer,
very fast and

410
00:18:03.380 --> 00:18:05.550
efficient to access.

411
00:18:05.550 --> 00:18:07.930
Dictionary elements,
it's a hash table.

412
00:18:07.930 --> 00:18:11.410
Much more compact but
also more expensive

413
00:18:11.410 --> 00:18:12.660
at run time to access.

414
00:18:12.660 --> 00:18:15.670
415
00:18:15.670 --> 00:18:19.600
Kind of obvious here, if you
want to have your arrays be

416
00:18:19.600 --> 00:18:24.310
very fast, make sure that
V8 uses fast elements to

417
00:18:24.310 --> 00:18:24.870
represent them.

418
00:18:24.870 --> 00:18:28.090
And the way to do this is to
make sure that your keys start

419
00:18:28.090 --> 00:18:30.390
at zero and that they're
contiguous.

420
00:18:30.390 --> 00:18:33.620
So don't create an array
and start using

421
00:18:33.620 --> 00:18:36.280
index number 25,000.

422
00:18:36.280 --> 00:18:40.010
Start at zero and go up.

423
00:18:40.010 --> 00:18:43.990
Also, don't allocate really
large arrays that you're not

424
00:18:43.990 --> 00:18:45.160
going to use everything in.

425
00:18:45.160 --> 00:18:48.390
So if you allocate an array with
65,000 elements and you

426
00:18:48.390 --> 00:18:51.070
only use the first five, V8
thinks, well, that's a very

427
00:18:51.070 --> 00:18:55.050
sparse array, and will switch
into dictionary mode, which

428
00:18:55.050 --> 00:19:00.250
means the access of the elements
will be slower.

429
00:19:00.250 --> 00:19:02.970
Don't delete elements
inside of arrays.

430
00:19:02.970 --> 00:19:05.900
Same principle here, because
when you delete elements, it

431
00:19:05.900 --> 00:19:08.910
makes the key set sparse.

432
00:19:08.910 --> 00:19:11.780
And it can lead to V8 switching
the elements to

433
00:19:11.780 --> 00:19:14.620
dictionary mode.

434
00:19:14.620 --> 00:19:17.650
Don't load from uninitialized
or deleted elements.

435
00:19:17.650 --> 00:19:18.710
This is an important one.

436
00:19:18.710 --> 00:19:21.440
It's easy to get wrong.

437
00:19:21.440 --> 00:19:22.960
Here's an example.

438
00:19:22.960 --> 00:19:24.430
Your code will work.

439
00:19:24.430 --> 00:19:25.750
You won't notice.

440
00:19:25.750 --> 00:19:27.930
And it won't make a difference
in the output.

441
00:19:27.930 --> 00:19:30.350
However, it will make
things a lot slower.

442
00:19:30.350 --> 00:19:33.630
So here's an example of
doing exactly this.

443
00:19:33.630 --> 00:19:37.330
I have a loop here that
accesses an array.

444
00:19:37.330 --> 00:19:39.570
And it uses the or equals
operator, which means it takes

445
00:19:39.570 --> 00:19:42.380
the existing value in the array,
ors it to something and

446
00:19:42.380 --> 00:19:43.210
then writes it back.

447
00:19:43.210 --> 00:19:47.770
But the first time that you do
that, you're accessing an

448
00:19:47.770 --> 00:19:50.150
empty array.

449
00:19:50.150 --> 00:19:53.960
And when you do that, the
JavaScript spec says, that's

450
00:19:53.960 --> 00:19:55.480
an undefined value.

451
00:19:55.480 --> 00:19:56.270
But that's OK.

452
00:19:56.270 --> 00:19:57.410
It can be converted to zero.

453
00:19:57.410 --> 00:19:59.640
And it's exactly what
it does here.

454
00:19:59.640 --> 00:20:01.660
It converts that zero to do the
or equals and then stores

455
00:20:01.660 --> 00:20:01.940
it back in.

456
00:20:01.940 --> 00:20:04.990
But that process of conversion
means that this operation has

457
00:20:04.990 --> 00:20:05.740
to do more checking.

458
00:20:05.740 --> 00:20:07.300
And it's more expensive.

459
00:20:07.300 --> 00:20:10.030
And by simply initializing the
value before you use it--

460
00:20:10.030 --> 00:20:12.200
that's the second
example here--

461
00:20:12.200 --> 00:20:14.020
you can make your code,
in this case,

462
00:20:14.020 --> 00:20:15.270
about twice as fast.

463
00:20:15.270 --> 00:20:18.100
464
00:20:18.100 --> 00:20:20.200
So what about arrays
of doubles?

465
00:20:20.200 --> 00:20:22.350
Remember I talked about tagging,
that we have to wrap

466
00:20:22.350 --> 00:20:26.100
double numbers inside
of special objects.

467
00:20:26.100 --> 00:20:27.480
So if you have an array of them,
doesn't that make it

468
00:20:27.480 --> 00:20:29.880
expensive because each element
has to have this wrapper

469
00:20:29.880 --> 00:20:32.230
object to store the
double value.

470
00:20:32.230 --> 00:20:35.480
Well, there's a trick that we
can use there too as well.

471
00:20:35.480 --> 00:20:39.520
So we have a mechanism
called unboxing.

472
00:20:39.520 --> 00:20:44.450
When you unbox a double, you
take the 64-bit IEEE number

473
00:20:44.450 --> 00:20:46.200
inside of this double object.

474
00:20:46.200 --> 00:20:47.100
And you take it out.

475
00:20:47.100 --> 00:20:49.650
And you put it into
a linear buffer.

476
00:20:49.650 --> 00:20:54.740
So what we can do is track in
the hidden class of an array

477
00:20:54.740 --> 00:20:56.720
the types of elements that are
contained in the array.

478
00:20:56.720 --> 00:20:59.620
And if the array contains
only double

479
00:20:59.620 --> 00:21:02.075
values, it becomes unboxed.

480
00:21:02.075 --> 00:21:04.550
And what that means is that it
takes all of those numbers out

481
00:21:04.550 --> 00:21:07.800
of the heap objects, out of the
wrapper objects, and lays

482
00:21:07.800 --> 00:21:10.900
them out in a linear
buffer of doubles.

483
00:21:10.900 --> 00:21:12.900
But again, it's only if there
are double numbers

484
00:21:12.900 --> 00:21:15.720
inside of the array.

485
00:21:15.720 --> 00:21:18.290
This causes the hidden
class change.

486
00:21:18.290 --> 00:21:20.970
Generally, that's good because
if you convert the double

487
00:21:20.970 --> 00:21:22.470
numbers into a flat buffer--

488
00:21:22.470 --> 00:21:25.090
if you have array of doubles
and it's in a flat

489
00:21:25.090 --> 00:21:28.150
representation, it's very
efficient to access that.

490
00:21:28.150 --> 00:21:29.830
And when you store into it,
it doesn't require any

491
00:21:29.830 --> 00:21:30.950
allocation.

492
00:21:30.950 --> 00:21:35.280
But you must be aware that
converting between the array

493
00:21:35.280 --> 00:21:37.650
that's boxed and unboxed
has a cost.

494
00:21:37.650 --> 00:21:40.490
And it changes the
hidden class.

495
00:21:40.490 --> 00:21:44.170
And careless manipulation of
arrays can lead to a lot of

496
00:21:44.170 --> 00:21:46.500
extra work through this
boxing and unboxing.

497
00:21:46.500 --> 00:21:49.180
I'll give you an example
of that.

498
00:21:49.180 --> 00:21:52.250
Here's a pretty simple
snippet of code.

499
00:21:52.250 --> 00:21:53.220
I create a new array.

500
00:21:53.220 --> 00:21:55.860
And I sign a bunch
of values to the

501
00:21:55.860 --> 00:21:57.920
first couple of elements.

502
00:21:57.920 --> 00:22:00.730
Looks like there's not a whole
lot of work to do here.

503
00:22:00.730 --> 00:22:04.060
But because I create an empty
array, the initial

504
00:22:04.060 --> 00:22:05.490
object that I have--

505
00:22:05.490 --> 00:22:06.490
you'll see--

506
00:22:06.490 --> 00:22:07.890
doesn't actually have
any elements at all

507
00:22:07.890 --> 00:22:09.680
because it's empty.

508
00:22:09.680 --> 00:22:13.820
So the hidden class says,
hey, I'm an array.

509
00:22:13.820 --> 00:22:18.530
And I'm optimistically going
to assume it contains smi

510
00:22:18.530 --> 00:22:23.690
values and that I'm not going to
have any deletes, no holes.

511
00:22:23.690 --> 00:22:25.050
We can do that because
the arrays empty.

512
00:22:25.050 --> 00:22:27.210
So it's actually a
true statement.

513
00:22:27.210 --> 00:22:29.970
It only has smis because
it has nothing in it.

514
00:22:29.970 --> 00:22:33.230
What happens when we assigned
the first element of the

515
00:22:33.230 --> 00:22:36.190
array, because we didn't have
a backing store for the

516
00:22:36.190 --> 00:22:39.130
elements yet, we have
to allocate it.

517
00:22:39.130 --> 00:22:42.910
And by default, we allocate
a buffer that has

518
00:22:42.910 --> 00:22:45.420
room for four elements.

519
00:22:45.420 --> 00:22:47.870
Now that the backing store is
actually there, we can store

520
00:22:47.870 --> 00:22:48.920
the first element in here.

521
00:22:48.920 --> 00:22:51.520
And, again, this is stored as a
smi, as one of these compact

522
00:22:51.520 --> 00:22:54.860
31-bit signed integers.

523
00:22:54.860 --> 00:22:57.840
And now that we have space, we
can also assign the second

524
00:22:57.840 --> 00:23:00.360
element, also not a problem.

525
00:23:00.360 --> 00:23:05.440
However, the next assignment
assigns a double value.

526
00:23:05.440 --> 00:23:10.450
And what this does is forces
V8 to convert the format of

527
00:23:10.450 --> 00:23:15.530
the backing store, because we
can't store a double value

528
00:23:15.530 --> 00:23:16.750
directly into the array.

529
00:23:16.750 --> 00:23:18.610
But what we could do is we could
convert the existing

530
00:23:18.610 --> 00:23:20.500
integer values to doubles.

531
00:23:20.500 --> 00:23:24.060
And then, with the unboxed
version of this array, we

532
00:23:24.060 --> 00:23:26.080
could store the 0.5 value.

533
00:23:26.080 --> 00:23:27.510
And that's exactly
what V8 does.

534
00:23:27.510 --> 00:23:28.960
It reallocates a new buffer.

535
00:23:28.960 --> 00:23:32.970
This time each of the elements
slots is 64 bits.

536
00:23:32.970 --> 00:23:36.640
It converts the existing small
integers into double values.

537
00:23:36.640 --> 00:23:43.800
And then it assigns the 0.5
to the third element.

538
00:23:43.800 --> 00:23:45.670
You'll also notice that a hidden
class change happened

539
00:23:45.670 --> 00:23:48.810
here, because what we did
is added a double value.

540
00:23:48.810 --> 00:23:52.580
So it's no longer true that
the array only has smis.

541
00:23:52.580 --> 00:23:54.600
We now have doubles in there.

542
00:23:54.600 --> 00:23:56.615
That means that the hidden
class has to be changed.

543
00:23:56.615 --> 00:23:59.450
It causes a hidden
class change.

544
00:23:59.450 --> 00:24:02.760
Something similar happens when
we try to assign true.

545
00:24:02.760 --> 00:24:05.490
So true, there are certain
objects in JavaScript which

546
00:24:05.490 --> 00:24:07.130
are kind of oddballs.

547
00:24:07.130 --> 00:24:08.740
We actually call
them oddballs.

548
00:24:08.740 --> 00:24:12.960
True, undefined, null, they
are not really objects.

549
00:24:12.960 --> 00:24:14.240
But they kind of act
like objects.

550
00:24:14.240 --> 00:24:15.490
But they're certainly
not numbers.

551
00:24:15.490 --> 00:24:18.560
So when I assign true to the
third element or the fourth

552
00:24:18.560 --> 00:24:22.160
element here, it causes another
allocation because we

553
00:24:22.160 --> 00:24:26.890
can no longer represent this
new value in this unboxed

554
00:24:26.890 --> 00:24:27.420
double array.

555
00:24:27.420 --> 00:24:30.720
So we have to convert it back
into its tagged format, which

556
00:24:30.720 --> 00:24:34.650
means converting the elements
that can be represented as

557
00:24:34.650 --> 00:24:36.090
smis back into smis.

558
00:24:36.090 --> 00:24:39.370
It means reboxing the
double value.

559
00:24:39.370 --> 00:24:41.900
And now we have a backing store
that we can actually

560
00:24:41.900 --> 00:24:43.560
store the true value in.

561
00:24:43.560 --> 00:24:46.060
562
00:24:46.060 --> 00:24:47.440
That's a lot of work.

563
00:24:47.440 --> 00:24:48.430
This is a very short
piece of code.

564
00:24:48.430 --> 00:24:55.360
But we did four allocations,
two array, two hidden class

565
00:24:55.360 --> 00:24:58.150
changes for just a couple
lines of code.

566
00:24:58.150 --> 00:25:00.250
There is a better way.

567
00:25:00.250 --> 00:25:05.130
If you use an array literal,
this is a hint to V8 upfront

568
00:25:05.130 --> 00:25:08.630
what the values are going to
be inside of the array.

569
00:25:08.630 --> 00:25:11.170
And given this example here, we
have a single allocation.

570
00:25:11.170 --> 00:25:13.490
All of this can be done
in one allocation.

571
00:25:13.490 --> 00:25:17.980
The correct backing store format
can be selected at

572
00:25:17.980 --> 00:25:19.300
compile time.

573
00:25:19.300 --> 00:25:22.030
And we don't have all of these
conversions in the

574
00:25:22.030 --> 00:25:23.280
initialization of the array.

575
00:25:23.280 --> 00:25:25.670
576
00:25:25.670 --> 00:25:27.960
So touched on this already.

577
00:25:27.960 --> 00:25:30.690
Speed trap, make sure, wherever
possible, you

578
00:25:30.690 --> 00:25:34.890
initialize arrays with array
literals, especially for fixed

579
00:25:34.890 --> 00:25:38.180
size, small arrays.

580
00:25:38.180 --> 00:25:42.910
Also for small arrays, make
sure to preallocate them

581
00:25:42.910 --> 00:25:44.580
before you use them.

582
00:25:44.580 --> 00:25:46.150
Now, again, this is different
than large arrays.

583
00:25:46.150 --> 00:25:49.590
Large arrays, remember, more
than 65,000 elements, you want

584
00:25:49.590 --> 00:25:51.840
to make sure you grow as you go
so that you don't go into

585
00:25:51.840 --> 00:25:52.450
dictionary mode.

586
00:25:52.450 --> 00:25:56.390
For small arrays, even if
they're not completely filled,

587
00:25:56.390 --> 00:25:59.930
even if they're small, if
they're sparse, if they're

588
00:25:59.930 --> 00:26:04.650
small, V8 will use fast
elements for them.

589
00:26:04.650 --> 00:26:08.710
But only if you allocate the
correct size will you be able

590
00:26:08.710 --> 00:26:12.020
to avoid allocations when you
go from an empty array and

591
00:26:12.020 --> 00:26:15.410
store the first element
into it.

592
00:26:15.410 --> 00:26:18.380
Don't store non-numeric values
in numeric arrays.

593
00:26:18.380 --> 00:26:22.600
So if you have an array of
double values, V8 can generate

594
00:26:22.600 --> 00:26:25.370
very good code for manipulating
those values, for

595
00:26:25.370 --> 00:26:26.150
those double values.

596
00:26:26.150 --> 00:26:28.840
But if you put an object into
the array, we have to box

597
00:26:28.840 --> 00:26:29.500
everything again.

598
00:26:29.500 --> 00:26:34.660
And the code that we generate
is a lot less efficient.

599
00:26:34.660 --> 00:26:37.540
OK, we've talked about hidden
classes and how they are an

600
00:26:37.540 --> 00:26:39.810
important piece of
optimizing code.

601
00:26:39.810 --> 00:26:42.810
Let's actually talk about how
we generate code in V8.

602
00:26:42.810 --> 00:26:44.380
And this will maybe help you
understand a little bit better

603
00:26:44.380 --> 00:26:47.060
why it's important to make sure
that you understand the

604
00:26:47.060 --> 00:26:48.490
hidden classes.

605
00:26:48.490 --> 00:26:50.130
So a V8 has two compilers.

606
00:26:50.130 --> 00:26:52.300
The first one is called the full
compiler, because it can

607
00:26:52.300 --> 00:26:56.810
actually implement the full set
of JavaScript features.

608
00:26:56.810 --> 00:27:00.430
It generates good code
but not great code.

609
00:27:00.430 --> 00:27:01.870
There's an optimizing compiler,
which I'll talk

610
00:27:01.870 --> 00:27:05.500
about later, which produces much
better code for most of

611
00:27:05.500 --> 00:27:06.750
the language.

612
00:27:06.750 --> 00:27:08.380
613
00:27:08.380 --> 00:27:12.280
The goal of the full compiler
is to generate code quickly.

614
00:27:12.280 --> 00:27:14.830
I talked about before the fact
that any time you spend

615
00:27:14.830 --> 00:27:20.270
compiling code is added to
your execution time.

616
00:27:20.270 --> 00:27:23.610
So the full compiler strategy
is to get executing code as

617
00:27:23.610 --> 00:27:24.480
quickly as possible.

618
00:27:24.480 --> 00:27:27.430
It generates code that
is just good enough.

619
00:27:27.430 --> 00:27:30.230
But because of that,
it basically

620
00:27:30.230 --> 00:27:31.600
doesn't do any type analysis.

621
00:27:31.600 --> 00:27:34.430
It doesn't know anything
about types.

622
00:27:34.430 --> 00:27:39.200
And the way that it solves the
problem of implementing

623
00:27:39.200 --> 00:27:41.630
operations on different types
efficiently is a technique

624
00:27:41.630 --> 00:27:44.640
called inline caching
or inline caches.

625
00:27:44.640 --> 00:27:48.270
And what inline caches do is
they gather type information

626
00:27:48.270 --> 00:27:49.460
and run time.

627
00:27:49.460 --> 00:27:51.030
And they optimize the
code as you go.

628
00:27:51.030 --> 00:27:54.220
So you pay as you go.

629
00:27:54.220 --> 00:27:57.540
And here's the way inline
caches work.

630
00:27:57.540 --> 00:28:02.110
An inline cache, or an IC, is
a type-dependent small chunk

631
00:28:02.110 --> 00:28:05.850
of code that knows how to do
an operation given specific

632
00:28:05.850 --> 00:28:07.130
hidden class--

633
00:28:07.130 --> 00:28:09.840
inputs of a particular
hidden class.

634
00:28:09.840 --> 00:28:12.760
And what they do is they
validate the type assumptions.

635
00:28:12.760 --> 00:28:14.530
They get a couple
arguments in.

636
00:28:14.530 --> 00:28:15.750
They check to see if the hidden

637
00:28:15.750 --> 00:28:17.590
classes are as they expect.

638
00:28:17.590 --> 00:28:19.690
And if they are, then they know
that the code that is in

639
00:28:19.690 --> 00:28:22.950
the IC is the optimal code for
implementing that operation.

640
00:28:22.950 --> 00:28:25.160
If not, something
has to happen.

641
00:28:25.160 --> 00:28:27.620
A new IC has to be generated
that can handle the new type

642
00:28:27.620 --> 00:28:29.780
information.

643
00:28:29.780 --> 00:28:33.460
And at runtime, if different
types are seen than what are

644
00:28:33.460 --> 00:28:37.970
expected, then through
backpatching the code is

645
00:28:37.970 --> 00:28:41.290
changed to use new specialized
code for the new

646
00:28:41.290 --> 00:28:42.380
types that are seen.

647
00:28:42.380 --> 00:28:45.200
I'll give you an example
of how that works.

648
00:28:45.200 --> 00:28:49.330
Here's a fragment from the code
example at the beginning,

649
00:28:49.330 --> 00:28:50.420
a prime number generator.

650
00:28:50.420 --> 00:28:53.620
I'd like to take a particular
fragment of code there, which

651
00:28:53.620 --> 00:28:58.510
takes an element from the
prime's array and checks

652
00:28:58.510 --> 00:29:01.700
whether the candidate number is
divisible by that number.

653
00:29:01.700 --> 00:29:03.800
And let's see what the
full code generator

654
00:29:03.800 --> 00:29:04.850
does with this code.

655
00:29:04.850 --> 00:29:05.920
Don't sweat the details.

656
00:29:05.920 --> 00:29:07.760
I'm going to show some assembly
language here.

657
00:29:07.760 --> 00:29:10.370
And it's not actually
important what

658
00:29:10.370 --> 00:29:11.480
the details are here.

659
00:29:11.480 --> 00:29:14.460
But I want to show the pattern
of what actually goes on here.

660
00:29:14.460 --> 00:29:17.480
So each expression generates a
little chunk of code here.

661
00:29:17.480 --> 00:29:19.680
You'll see that there's some
preparation code and then

662
00:29:19.680 --> 00:29:25.870
there's a call out, a call to an
IC to actually do the work.

663
00:29:25.870 --> 00:29:29.340
Likewise, for the array element
access, there is some

664
00:29:29.340 --> 00:29:32.540
preparation work and then a call
out to the IC to do the

665
00:29:32.540 --> 00:29:35.630
work, and for the [INAUDIBLE]
the same thing.

666
00:29:35.630 --> 00:29:39.230
And the thing to notice here is
that, initially, the call

667
00:29:39.230 --> 00:29:43.380
is to this initialize version
of the IC, because we don't

668
00:29:43.380 --> 00:29:44.760
know what the types
are going to be.

669
00:29:44.760 --> 00:29:47.940
We'll only know that
at run time.

670
00:29:47.940 --> 00:29:49.410
And this is how it works
at run time.

671
00:29:49.410 --> 00:29:52.100
The code on the left here is a
small, almost impossible to

672
00:29:52.100 --> 00:29:54.470
read version of the code
I just showed you.

673
00:29:54.470 --> 00:29:58.240
And when we're executing this
code for the first time, and

674
00:29:58.240 --> 00:30:02.920
we get to this IC, the first
IC, it calls an internal

675
00:30:02.920 --> 00:30:04.580
routine that initializes
the IC.

676
00:30:04.580 --> 00:30:06.790
It looks at what the arguments
are to that operation the

677
00:30:06.790 --> 00:30:07.250
first time.

678
00:30:07.250 --> 00:30:09.050
It checks the hidden classes.

679
00:30:09.050 --> 00:30:10.670
And it says, oh, I know
how to do that.

680
00:30:10.670 --> 00:30:13.200
I can generate specialized
code for that.

681
00:30:13.200 --> 00:30:15.190
It does so.

682
00:30:15.190 --> 00:30:18.480
And it backpatches the address
so that the next time you come

683
00:30:18.480 --> 00:30:20.070
to the code, it does the
same thing again.

684
00:30:20.070 --> 00:30:23.330
Assuming that the next time you
run, you're going to have

685
00:30:23.330 --> 00:30:25.580
the same hidden classes, the
same types of objects, which

686
00:30:25.580 --> 00:30:28.320
is an optimistic but usually
valid assumption.

687
00:30:28.320 --> 00:30:32.740
It does the same thing for the
access of the array element

688
00:30:32.740 --> 00:30:35.990
and for the [? lot ?]
operation.

689
00:30:35.990 --> 00:30:39.880
And you'll see that each of
the ICs, all they are is

690
00:30:39.880 --> 00:30:44.640
specialized code that know how
to do the specific operation

691
00:30:44.640 --> 00:30:47.820
for a given set of object
types that are input.

692
00:30:47.820 --> 00:30:51.690
693
00:30:51.690 --> 00:30:53.470
This makes a big difference
in performance.

694
00:30:53.470 --> 00:30:56.200
And this is why you need to
understand how some of this

695
00:30:56.200 --> 00:30:58.550
stuff works with hidden classes,
because if you get it

696
00:30:58.550 --> 00:31:01.750
wrong, you don't actually get
the performance improvement

697
00:31:01.750 --> 00:31:04.830
that you will see or should see
when using ICs and then,

698
00:31:04.830 --> 00:31:06.480
later, the optimizing
compiler.

699
00:31:06.480 --> 00:31:08.790
So if you're running the sample
code that I showed at

700
00:31:08.790 --> 00:31:13.000
the beginning to generate primes
without ICs, you get an

701
00:31:13.000 --> 00:31:15.710
execution time that's
over 600 seconds.

702
00:31:15.710 --> 00:31:18.220
When you turn ICs on--

703
00:31:18.220 --> 00:31:20.030
don't have the optimizing
compiler on yet--

704
00:31:20.030 --> 00:31:22.070
it makes a big difference.

705
00:31:22.070 --> 00:31:26.295
So this is about a 20 times
speed improvement.

706
00:31:26.295 --> 00:31:29.480
707
00:31:29.480 --> 00:31:31.700
Now I'd like to introduce a
concept that we'll also come

708
00:31:31.700 --> 00:31:32.590
back to later.

709
00:31:32.590 --> 00:31:33.865
Monomorphic better
than polymorphic.

710
00:31:33.865 --> 00:31:35.360
It sounds pretty complicated.

711
00:31:35.360 --> 00:31:38.040
It isn't really.

712
00:31:38.040 --> 00:31:41.790
Monomorphic operations are
operations that always work on

713
00:31:41.790 --> 00:31:45.800
objects with the same
hidden classes.

714
00:31:45.800 --> 00:31:49.900
So the first time you execute an
IC, we look at the argument

715
00:31:49.900 --> 00:31:51.000
types for the operation.

716
00:31:51.000 --> 00:31:52.230
We look at the hidden classes.

717
00:31:52.230 --> 00:31:53.900
And we remember them.

718
00:31:53.900 --> 00:31:55.770
And if the next time, through
those hidden classes, are the

719
00:31:55.770 --> 00:31:58.020
same, it's monomorphic.

720
00:31:58.020 --> 00:32:01.090
And if the next time they're
the same, it's still

721
00:32:01.090 --> 00:32:01.530
monomorphic.

722
00:32:01.530 --> 00:32:03.200
And it stays that way.

723
00:32:03.200 --> 00:32:06.300
If at any time we see different
hidden classes for

724
00:32:06.300 --> 00:32:10.880
the arguments to an operation
then it becomes polymorphic.

725
00:32:10.880 --> 00:32:13.470
And it turns out that
monomorphic operations are

726
00:32:13.470 --> 00:32:14.135
easier to optimize.

727
00:32:14.135 --> 00:32:16.860
Or the code that we generate is
better than for polymorphic

728
00:32:16.860 --> 00:32:18.220
operations.

729
00:32:18.220 --> 00:32:21.020
So here's an example.

730
00:32:21.020 --> 00:32:25.260
Let's say we have a function
add that adds two things.

731
00:32:25.260 --> 00:32:29.480
And if I call that with two
integer arguments, it's

732
00:32:29.480 --> 00:32:31.150
monomorphic.

733
00:32:31.150 --> 00:32:34.680
However, if I call it again with
two string arguments, I

734
00:32:34.680 --> 00:32:36.870
use the same operation--
this plus operation--

735
00:32:36.870 --> 00:32:39.950
to work both on integers
and on strings.

736
00:32:39.950 --> 00:32:41.790
And at that moment, it
becomes polymorphic.

737
00:32:41.790 --> 00:32:45.180
And it becomes more difficult
for V8 to generate good,

738
00:32:45.180 --> 00:32:47.710
really efficient code for
that plus operation.

739
00:32:47.710 --> 00:32:51.820
So the speed trap to avoid here
is, wherever possible,

740
00:32:51.820 --> 00:32:59.420
don't try to mix operations or
objects of different types in

741
00:32:59.420 --> 00:33:01.470
operations at a particular
place in your code.

742
00:33:01.470 --> 00:33:04.540
Prefer monomorphic code
to polymorphic code

743
00:33:04.540 --> 00:33:05.790
wherever you can.

744
00:33:05.790 --> 00:33:09.240
745
00:33:09.240 --> 00:33:12.030
I'd like to talk about the
optimizing compiler.

746
00:33:12.030 --> 00:33:14.080
We talked about the full
compiler, generates pretty

747
00:33:14.080 --> 00:33:17.070
good code, gets executing
as fast as possible.

748
00:33:17.070 --> 00:33:20.420
The optimizing compiler comes
back later for the code that's

749
00:33:20.420 --> 00:33:22.885
really hot and recompiles
the hot functions.

750
00:33:22.885 --> 00:33:26.720
751
00:33:26.720 --> 00:33:27.570
Why does it do this?

752
00:33:27.570 --> 00:33:30.850
Well, we've gathered information
about the types of

753
00:33:30.850 --> 00:33:35.560
the objects that we're operating
on through the ICs.

754
00:33:35.560 --> 00:33:38.920
And the optimizing compiler can
take that information and

755
00:33:38.920 --> 00:33:42.820
make decisions about how to
optimize the code better.

756
00:33:42.820 --> 00:33:45.350
What happens is the optimizing
compiler takes that type

757
00:33:45.350 --> 00:33:46.900
information from the ICs.

758
00:33:46.900 --> 00:33:50.470
And it speculatively inlines a
version of the operation based

759
00:33:50.470 --> 00:33:54.940
on history, what it's seen
before in the ICs.

760
00:33:54.940 --> 00:33:59.600
And it also means that it can
inline function calls that are

761
00:33:59.600 --> 00:34:00.600
monomorphic.

762
00:34:00.600 --> 00:34:01.760
This includes constructors.

763
00:34:01.760 --> 00:34:06.050
This is actually a new feature
that we've added recently.

764
00:34:06.050 --> 00:34:09.620
765
00:34:09.620 --> 00:34:13.670
By enabling inlining, by
inlining this operation in the

766
00:34:13.670 --> 00:34:16.230
optimize code, other
optimizations become possible.

767
00:34:16.230 --> 00:34:18.320
And that's what the optimizing
compiler will actually do.

768
00:34:18.320 --> 00:34:21.590
We'll go over this inline code
and find more opportunities to

769
00:34:21.590 --> 00:34:23.810
make it faster.

770
00:34:23.810 --> 00:34:24.650
Let's see how that works.

771
00:34:24.650 --> 00:34:27.820
Again, a warning, here's
assembly code.

772
00:34:27.820 --> 00:34:32.739
It's a very similar process to
the full code generator.

773
00:34:32.739 --> 00:34:35.000
We generate a little piece
of code for each of the

774
00:34:35.000 --> 00:34:35.909
expressions.

775
00:34:35.909 --> 00:34:39.280
But this time, you'll notice,
as we generate each piece of

776
00:34:39.280 --> 00:34:41.590
code, there's no call
at the end.

777
00:34:41.590 --> 00:34:44.449
And in fact, when we're done,
it's straight line code.

778
00:34:44.449 --> 00:34:48.850
779
00:34:48.850 --> 00:34:52.566
So let's compare the performance
using the

780
00:34:52.566 --> 00:34:57.070
optimizing compiler with the two
runs that we did before.

781
00:34:57.070 --> 00:34:59.250
You'll see that with the
optimizing compiler, we're

782
00:34:59.250 --> 00:35:01.350
even fast-- we're about
50 times faster than

783
00:35:01.350 --> 00:35:02.600
the original code.

784
00:35:02.600 --> 00:35:04.850
785
00:35:04.850 --> 00:35:07.730
One thing that's really useful
is actually to find out which

786
00:35:07.730 --> 00:35:10.210
functions are being
optimized by the

787
00:35:10.210 --> 00:35:13.460
optimizing compiler in V8.

788
00:35:13.460 --> 00:35:16.090
So there's an option you can
pass to the DHL that

789
00:35:16.090 --> 00:35:16.860
will do just that.

790
00:35:16.860 --> 00:35:19.050
It'll output the information
about which

791
00:35:19.050 --> 00:35:20.300
functions get optimized.

792
00:35:20.300 --> 00:35:23.460
793
00:35:23.460 --> 00:35:25.920
However, there are certain
circumstances in which the

794
00:35:25.920 --> 00:35:29.070
optimizing compiler can't
optimize a function.

795
00:35:29.070 --> 00:35:30.940
This is called bailing out.

796
00:35:30.940 --> 00:35:33.100
Or that's what we call
it, bailing out.

797
00:35:33.100 --> 00:35:35.100
And the reason is there are
certain language features that

798
00:35:35.100 --> 00:35:39.790
are just not supported yet by
the optimizing compiler.

799
00:35:39.790 --> 00:35:43.380
The most obvious example
is try catch.

800
00:35:43.380 --> 00:35:45.810
So if you have a function that
contains a try catch block,

801
00:35:45.810 --> 00:35:49.830
the optimizing compiler, right
now, can't optimize that.

802
00:35:49.830 --> 00:35:51.590
We hope to change that
in the future.

803
00:35:51.590 --> 00:35:54.980
But until then, there's
a work around.

804
00:35:54.980 --> 00:35:57.490
If you have performance
sensitive code that you'd like

805
00:35:57.490 --> 00:36:01.130
to access from try
catch block, wrap

806
00:36:01.130 --> 00:36:02.670
it in its own function.

807
00:36:02.670 --> 00:36:03.370
Here's an example.

808
00:36:03.370 --> 00:36:05.850
We have a function that's
performance sensitive.

809
00:36:05.850 --> 00:36:09.060
We call that from the try piece
of a try catch block in

810
00:36:09.060 --> 00:36:11.670
another function.

811
00:36:11.670 --> 00:36:15.230
And by doing that, it allows
the optimizing compiler to

812
00:36:15.230 --> 00:36:18.020
optimize the performance
sensitive function, even

813
00:36:18.020 --> 00:36:20.722
though it can't optimize
the try catch block.

814
00:36:20.722 --> 00:36:23.320
815
00:36:23.320 --> 00:36:26.830
If you want to find out which
routines cannot be optimized

816
00:36:26.830 --> 00:36:29.790
by the optimizing compiler and
why, there's an option you can

817
00:36:29.790 --> 00:36:32.570
pass through the debugging shell
called trace bailout.

818
00:36:32.570 --> 00:36:37.950
And that'll actually tell you
the functions that could not

819
00:36:37.950 --> 00:36:39.200
be compiled and why.

820
00:36:39.200 --> 00:36:41.500
821
00:36:41.500 --> 00:36:45.110
The last thing I'd like to talk
about is deoptimization.

822
00:36:45.110 --> 00:36:48.100
So the optimizing compiler
is pretty good

823
00:36:48.100 --> 00:36:50.180
at generating code.

824
00:36:50.180 --> 00:36:51.690
But there's a catch.

825
00:36:51.690 --> 00:36:54.890
The optimizations that it
does are speculative.

826
00:36:54.890 --> 00:36:57.910
It makes the optimistic
assumption that what it has

827
00:36:57.910 --> 00:37:01.630
seen in the past is going to be
just like what it's going

828
00:37:01.630 --> 00:37:04.140
to see in the future.

829
00:37:04.140 --> 00:37:07.170
And that usually pays off,
because usually your code

830
00:37:07.170 --> 00:37:09.730
keeps running like
it has before.

831
00:37:09.730 --> 00:37:13.820
However, as with all optimistic
assumptions, that

832
00:37:13.820 --> 00:37:14.700
may not be the case.

833
00:37:14.700 --> 00:37:18.310
So when you're driving down the
Autobahn in Germany and

834
00:37:18.310 --> 00:37:21.680
you're doing 200 kilometers an
hour, sometimes you're working

835
00:37:21.680 --> 00:37:24.690
under the optimistic assumption
that you're not

836
00:37:24.690 --> 00:37:26.920
going to be caught going
over the speed limit.

837
00:37:26.920 --> 00:37:29.000
Remember, I told you there are
some stretches of the Autobahn

838
00:37:29.000 --> 00:37:30.340
with a speed limit.

839
00:37:30.340 --> 00:37:32.380
And you'll see out of the corner
of your eye, a red

840
00:37:32.380 --> 00:37:36.370
flash from two of these things
on the side of the road.

841
00:37:36.370 --> 00:37:38.590
And you've just been caught in
a speed trap, because your

842
00:37:38.590 --> 00:37:41.550
optimistic assumption that you
were not going to be caught

843
00:37:41.550 --> 00:37:43.650
speeding was wrong.

844
00:37:43.650 --> 00:37:44.080
And what do you do?

845
00:37:44.080 --> 00:37:45.050
You slam on the brakes.

846
00:37:45.050 --> 00:37:46.660
You slow down to the
speed limit.

847
00:37:46.660 --> 00:37:50.055
And you probably drive that
way for a while, slower.

848
00:37:50.055 --> 00:37:52.620
849
00:37:52.620 --> 00:37:54.270
There's a similar process
that happens in

850
00:37:54.270 --> 00:37:56.480
optimized code in V8.

851
00:37:56.480 --> 00:37:59.440
Invalid assumptions lead
to deoptimization.

852
00:37:59.440 --> 00:38:01.410
When one of the assumptions is
no longer true, when one of

853
00:38:01.410 --> 00:38:03.990
the hidden classes that you
get for an argument to an

854
00:38:03.990 --> 00:38:07.470
operation is not what you
expected, then the specialized

855
00:38:07.470 --> 00:38:09.540
code we generated is
no longer valid.

856
00:38:09.540 --> 00:38:10.720
And we have to deoptimize.

857
00:38:10.720 --> 00:38:11.750
What does that mean?

858
00:38:11.750 --> 00:38:14.170
That means we throw way the
optimize code, because we know

859
00:38:14.170 --> 00:38:16.630
the assumptions we made are just
simply no longer valid.

860
00:38:16.630 --> 00:38:19.660
We resume execution in the
right place in the full

861
00:38:19.660 --> 00:38:21.450
compiler code.

862
00:38:21.450 --> 00:38:23.260
So we can continue
our execution.

863
00:38:23.260 --> 00:38:25.740
But now it's at a slower speed,
because we're using the

864
00:38:25.740 --> 00:38:28.650
version of code that is
good, but not great.

865
00:38:28.650 --> 00:38:32.600
And a reoptimization of the
function might happen later,

866
00:38:32.600 --> 00:38:34.920
because we're going to continue
to gather type

867
00:38:34.920 --> 00:38:39.160
information in the ICs in
the full compiler code.

868
00:38:39.160 --> 00:38:42.150
But for the short term, you're
going to run more slowly.

869
00:38:42.150 --> 00:38:45.770
And what that means is that
deoptimization is something

870
00:38:45.770 --> 00:38:46.530
you want to avoid.

871
00:38:46.530 --> 00:38:49.210
And one way to do that is to
make sure that you don't

872
00:38:49.210 --> 00:38:52.910
introduce hidden class changes
at a late time

873
00:38:52.910 --> 00:38:53.850
running your code.

874
00:38:53.850 --> 00:38:57.740
If you have types, object types
that you run in optimize

875
00:38:57.740 --> 00:39:01.420
code, and V8 chooses to optimize
that code, and then

876
00:39:01.420 --> 00:39:04.720
you later introduce new types,
that optimize code will

877
00:39:04.720 --> 00:39:05.590
deoptimize.

878
00:39:05.590 --> 00:39:08.860
And if you do that too
often, it has a cost.

879
00:39:08.860 --> 00:39:13.090
You can tell the debugging shell
to output the routines,

880
00:39:13.090 --> 00:39:15.470
the functions that it optimizes
on by passing the

881
00:39:15.470 --> 00:39:18.340
trace deopt option to
the debug shell.

882
00:39:18.340 --> 00:39:21.560
And it'll output which one it
deoptimized on and why.

883
00:39:21.560 --> 00:39:24.110
884
00:39:24.110 --> 00:39:28.400
Now most of you are doing web
development, I assume.

885
00:39:28.400 --> 00:39:31.770
And therefore, you probably
want to be able to look at

886
00:39:31.770 --> 00:39:35.290
your code in Chrome, as well
as directly in the DHL.

887
00:39:35.290 --> 00:39:40.190
You can pass these options
that I've mentioned also

888
00:39:40.190 --> 00:39:43.090
directly to Chrome using
the js flags option.

889
00:39:43.090 --> 00:39:47.460
And the output will all show
up in standard out when

890
00:39:47.460 --> 00:39:49.080
running Chrome.

891
00:39:49.080 --> 00:39:51.315
OK, so that was the
be prepared part.

892
00:39:51.315 --> 00:39:56.150
You now understand a little
bit about how V8 works.

893
00:39:56.150 --> 00:39:58.630
Let's talk now about identifying
and understanding

894
00:39:58.630 --> 00:40:00.710
problems using that knowledge.

895
00:40:00.710 --> 00:40:02.020
What does that mean for V8?

896
00:40:02.020 --> 00:40:04.020
First of all, ensure the problem
that you're looking at

897
00:40:04.020 --> 00:40:05.680
is a JavaScript problem.

898
00:40:05.680 --> 00:40:08.160
And this is sometimes
a little bit tricky.

899
00:40:08.160 --> 00:40:11.910
You could use the dev tools in
Chrome to figure out where

900
00:40:11.910 --> 00:40:14.000
you're spending time in
your web application.

901
00:40:14.000 --> 00:40:15.170
It may look like JavaScript.

902
00:40:15.170 --> 00:40:17.740
But be careful it might be the
case that there's also DOM

903
00:40:17.740 --> 00:40:18.940
interaction.

904
00:40:18.940 --> 00:40:22.320
So a really good way to do that
is, if you can take that

905
00:40:22.320 --> 00:40:24.920
code that you think is the
performance bottleneck, pull

906
00:40:24.920 --> 00:40:27.720
it out, and run it in the DHL,
that means it's pure

907
00:40:27.720 --> 00:40:28.250
JavaScript.

908
00:40:28.250 --> 00:40:32.090
Because the V8 project is just
JavaScript, it doesn't have--

909
00:40:32.090 --> 00:40:32.990
it's integrated into Chrome.

910
00:40:32.990 --> 00:40:36.230
But it, in itself, is just
the JavaScript execution

911
00:40:36.230 --> 00:40:37.080
environment.

912
00:40:37.080 --> 00:40:40.330
So if you can take that code and
run it with the DHL, then

913
00:40:40.330 --> 00:40:41.140
you're pretty--

914
00:40:41.140 --> 00:40:43.130
then you can analyze the
problems of JavaScript only

915
00:40:43.130 --> 00:40:45.600
performance problem.

916
00:40:45.600 --> 00:40:48.710
Collect metrics, measure
where you're spending

917
00:40:48.710 --> 00:40:50.760
your time in the code.

918
00:40:50.760 --> 00:40:54.780
And then locate the bottlenecks
and fix them.

919
00:40:54.780 --> 00:40:57.770
So remember the example that we
had at the beginning, the

920
00:40:57.770 --> 00:41:00.140
prime number generator.

921
00:41:00.140 --> 00:41:03.820
If you run it in the shell and
pass an additional argument,

922
00:41:03.820 --> 00:41:10.190
the dash dash prof argument, it
will run the program while

923
00:41:10.190 --> 00:41:13.560
also sampling the execution
profile.

924
00:41:13.560 --> 00:41:16.140
And it'll write a log that you
can then analyze with another

925
00:41:16.140 --> 00:41:19.160
tool to see where you're
spending your time.

926
00:41:19.160 --> 00:41:21.520
Before we look at that output,
where we're spending the time,

927
00:41:21.520 --> 00:41:24.750
I'd like to go over briefly
again where we're spending the

928
00:41:24.750 --> 00:41:26.530
time-- or what we're doing
in the program.

929
00:41:26.530 --> 00:41:28.210
There's a couple important
functions here

930
00:41:28.210 --> 00:41:29.020
in the prime generator.

931
00:41:29.020 --> 00:41:31.250
First, we add a prime.

932
00:41:31.250 --> 00:41:33.950
There's a function to add a
prime to the existing list.

933
00:41:33.950 --> 00:41:35.360
There's a function that
actually tests whether

934
00:41:35.360 --> 00:41:40.090
candidate number is divisible or
is divisible by one of the

935
00:41:40.090 --> 00:41:41.550
existing primes.

936
00:41:41.550 --> 00:41:44.180
And then there's the main
routine, which does the high

937
00:41:44.180 --> 00:41:45.480
level algorithm.

938
00:41:45.480 --> 00:41:48.240
It starts at one, goes up,
checks that number, whether

939
00:41:48.240 --> 00:41:50.570
it's divisible by an
existing prime.

940
00:41:50.570 --> 00:41:53.060
If not, it adds it to the prime
list, otherwise it goes

941
00:41:53.060 --> 00:41:54.030
to the next number.

942
00:41:54.030 --> 00:41:56.010
So what's our expectation?

943
00:41:56.010 --> 00:41:57.460
The prediction is that we're
going to spend most of the

944
00:41:57.460 --> 00:41:58.330
time in main.

945
00:41:58.330 --> 00:42:00.720
And the reason for that is all
properties and functions are

946
00:42:00.720 --> 00:42:02.180
monomorphic.

947
00:42:02.180 --> 00:42:03.650
I wrote the code
to be that way.

948
00:42:03.650 --> 00:42:05.540
All numeric operations
are smis.

949
00:42:05.540 --> 00:42:08.670
We do a pretty good job
at optimizing those.

950
00:42:08.670 --> 00:42:11.790
All the functions could
be inlined.

951
00:42:11.790 --> 00:42:13.390
And there are no deoptimizations
or bailouts.

952
00:42:13.390 --> 00:42:16.390
So my expectation is V8 is going
to do a really good job

953
00:42:16.390 --> 00:42:17.520
of optimizing this code.

954
00:42:17.520 --> 00:42:19.910
OK, so let's take a look at the
output and see where we

955
00:42:19.910 --> 00:42:22.430
were spending our time.

956
00:42:22.430 --> 00:42:27.040
So this is the output of
the tick processor.

957
00:42:27.040 --> 00:42:28.600
It takes this output log
that's written with

958
00:42:28.600 --> 00:42:30.510
performance data.

959
00:42:30.510 --> 00:42:31.830
And it prints it in
a pretty format.

960
00:42:31.830 --> 00:42:33.500
You see there's two sections
of the output here.

961
00:42:33.500 --> 00:42:35.180
I've actually abridged this.

962
00:42:35.180 --> 00:42:36.290
It's much longer.

963
00:42:36.290 --> 00:42:38.500
But these are the important
parts for our profile here.

964
00:42:38.500 --> 00:42:39.510
There's a JavaScript section.

965
00:42:39.510 --> 00:42:42.160
This is the time we're spending
in generated code.

966
00:42:42.160 --> 00:42:46.820
This is JavaScript code
executing in either the full

967
00:42:46.820 --> 00:42:48.740
compiler code or
optimize code.

968
00:42:48.740 --> 00:42:52.570
And then there's the C++
section, which is--

969
00:42:52.570 --> 00:42:54.660
it's often the case that you'll
have C++ symbols in the

970
00:42:54.660 --> 00:42:57.560
profile, because there's some
operations that we can't do in

971
00:42:57.560 --> 00:42:58.070
generated code.

972
00:42:58.070 --> 00:42:59.970
So we have to call out.

973
00:42:59.970 --> 00:43:04.310
And as expected, we spend
a lot of time in main.

974
00:43:04.310 --> 00:43:05.650
But it's actually about 25%.

975
00:43:05.650 --> 00:43:06.770
You'll see there's three
columns here.

976
00:43:06.770 --> 00:43:10.740
You see how many ticks you're
spending in that routine, in

977
00:43:10.740 --> 00:43:11.815
this function.

978
00:43:11.815 --> 00:43:14.560
And you'll see what the
percentage is of the overall

979
00:43:14.560 --> 00:43:16.010
execution time.

980
00:43:16.010 --> 00:43:17.400
But in this case
it's only 25%.

981
00:43:17.400 --> 00:43:20.570
That's weird because I
expected a lot more.

982
00:43:20.570 --> 00:43:22.740
V8 should do a really good
job on this code.

983
00:43:22.740 --> 00:43:24.720
If you look at the other items
that show up in this profile,

984
00:43:24.720 --> 00:43:25.410
this is weird.

985
00:43:25.410 --> 00:43:28.260
We're spending time
doing a binary op

986
00:43:28.260 --> 00:43:29.990
stub with an oddball.

987
00:43:29.990 --> 00:43:31.440
An oddball, remember, I told
you those are things like

988
00:43:31.440 --> 00:43:33.530
true, undefined, and null.

989
00:43:33.530 --> 00:43:34.220
We don't have that
in our code.

990
00:43:34.220 --> 00:43:35.540
That's kind of strange.

991
00:43:35.540 --> 00:43:36.590
And we're spending
a lot of time in

992
00:43:36.590 --> 00:43:38.400
library code doing modulo.

993
00:43:38.400 --> 00:43:40.340
And that's kind of strange.

994
00:43:40.340 --> 00:43:42.020
We should be able to inline
that as well.

995
00:43:42.020 --> 00:43:42.850
I didn't expect that.

996
00:43:42.850 --> 00:43:44.100
And then here's another one
that's kind of weird.

997
00:43:44.100 --> 00:43:46.490
We're doing a conversion
from a number--

998
00:43:46.490 --> 00:43:47.840
extracting--

999
00:43:47.840 --> 00:43:50.830
we're taking a number
and boxing it.

1000
00:43:50.830 --> 00:43:55.950
And we really should be
generating very good code for

1001
00:43:55.950 --> 00:43:57.180
this program.

1002
00:43:57.180 --> 00:43:58.740
We're spending way too much time
doing something that's

1003
00:43:58.740 --> 00:44:01.170
not executing the JavaScript.

1004
00:44:01.170 --> 00:44:02.310
We're calling out
to libraries.

1005
00:44:02.310 --> 00:44:05.200
Something is very wrong
with this code.

1006
00:44:05.200 --> 00:44:08.140
So can you spot the bug?

1007
00:44:08.140 --> 00:44:13.140
The hint is, is that our array
is only of length prime count.

1008
00:44:13.140 --> 00:44:17.070
And we've actually exceeded the
end of the array in our

1009
00:44:17.070 --> 00:44:18.030
calculations.

1010
00:44:18.030 --> 00:44:20.770
And in both the C++ and
JavaScript version, it doesn't

1011
00:44:20.770 --> 00:44:22.980
make a difference
in the results.

1012
00:44:22.980 --> 00:44:26.350
And this is the thing that
you've got to watch out for,

1013
00:44:26.350 --> 00:44:29.600
is that even though you don't
see that there's a problem in

1014
00:44:29.600 --> 00:44:31.810
the results, the program's
a lot slower

1015
00:44:31.810 --> 00:44:32.460
than it needs to be.

1016
00:44:32.460 --> 00:44:33.310
So let's fix that.

1017
00:44:33.310 --> 00:44:37.790
Let's actually not do an
out-of-bounds array access.

1018
00:44:37.790 --> 00:44:42.470
And we'll re-run the profile
with the fix.

1019
00:44:42.470 --> 00:44:45.000
And you'll see this time, this
is what we were expecting.

1020
00:44:45.000 --> 00:44:50.450
That small change now makes us
generate much better code

1021
00:44:50.450 --> 00:44:52.960
because we're not accessing
outside of the array, getting

1022
00:44:52.960 --> 00:44:55.490
an undefined object-- this
oddball-- that we're trying to

1023
00:44:55.490 --> 00:44:57.530
do math on.

1024
00:44:57.530 --> 00:45:00.750
And now we're spending over
99% of our time in main.

1025
00:45:00.750 --> 00:45:01.760
This is what we expected.

1026
00:45:01.760 --> 00:45:04.840
So let's see actually how big of
a difference this makes on

1027
00:45:04.840 --> 00:45:05.660
the profile.

1028
00:45:05.660 --> 00:45:09.130
And when we run the code against
the C++ code again,

1029
00:45:09.130 --> 00:45:10.580
look at that.

1030
00:45:10.580 --> 00:45:14.130
C++ code, three seconds,
JavaScript, 1.8 seconds--

1031
00:45:14.130 --> 00:45:18.452
we're 60% faster.

1032
00:45:18.452 --> 00:45:22.520
Well, I forgot to optimize
the C++ code.

1033
00:45:22.520 --> 00:45:26.870
So when you do that, C++
is still faster.

1034
00:45:26.870 --> 00:45:28.960
But it's 17% faster.

1035
00:45:28.960 --> 00:45:31.010
It's ball park.

1036
00:45:31.010 --> 00:45:32.460
I have to take all of this
with a grain of salt.

1037
00:45:32.460 --> 00:45:34.370
I chose an example where
I knew V8 would do a

1038
00:45:34.370 --> 00:45:36.600
pretty darn good job.

1039
00:45:36.600 --> 00:45:41.680
More and more, we're optimizing
more cases that

1040
00:45:41.680 --> 00:45:45.240
makes V8 faster in
more situations.

1041
00:45:45.240 --> 00:45:47.940
So I expect in the future, we'll
get closer and closer.

1042
00:45:47.940 --> 00:45:50.500
But my point here is that
you need to make sure

1043
00:45:50.500 --> 00:45:51.650
to take a look at--

1044
00:45:51.650 --> 00:45:54.140
spend the time optimizing your
code to know where you're

1045
00:45:54.140 --> 00:45:56.480
spending your time, because
you can actually make your

1046
00:45:56.480 --> 00:45:58.850
code very fast.

1047
00:45:58.850 --> 00:46:02.680
So fix what matters.

1048
00:46:02.680 --> 00:46:05.960
We did a lot of time analyzing
our existing profile, tweaking

1049
00:46:05.960 --> 00:46:08.280
it, knowing how V8 works.

1050
00:46:08.280 --> 00:46:10.940
The last thing I'd like to point
out is, make sure you

1051
00:46:10.940 --> 00:46:13.640
don't forget to optimize
your algorithm.

1052
00:46:13.640 --> 00:46:16.710
So I have a new version of the
program here, where instead of

1053
00:46:16.710 --> 00:46:19.790
iterating over all the prime
numbers, I only iterate to the

1054
00:46:19.790 --> 00:46:21.860
square root of the candidate,
which is sufficient to

1055
00:46:21.860 --> 00:46:26.480
actually test for whether it can
be divided by one of the

1056
00:46:26.480 --> 00:46:27.320
prime numbers.

1057
00:46:27.320 --> 00:46:29.995
And if I run that result--

1058
00:46:29.995 --> 00:46:32.150
if I run that in the--

1059
00:46:32.150 --> 00:46:34.537
I time that, then you'll
see that now I'm

1060
00:46:34.537 --> 00:46:38.050
under 5/100 of a second.

1061
00:46:38.050 --> 00:46:39.660
And if we compare that with the
original version, which

1062
00:46:39.660 --> 00:46:45.940
was 15 seconds, that's
350 times speed up.

1063
00:46:45.940 --> 00:46:50.740
So, in summary, keep your
eyes on the road.

1064
00:46:50.740 --> 00:46:51.330
Be prepared.

1065
00:46:51.330 --> 00:46:54.140
Learn a little bit about
how V8 works.

1066
00:46:54.140 --> 00:46:58.170
Identify and understand the
crux of your problem.

1067
00:46:58.170 --> 00:47:00.000
And fix the thing
that matters.

1068
00:47:00.000 --> 00:47:01.640
You don't have a whole lot
of time to do performance

1069
00:47:01.640 --> 00:47:02.520
optimization.

1070
00:47:02.520 --> 00:47:05.880
Make sure that every
minute counts.

1071
00:47:05.880 --> 00:47:07.260
And my friend Michael is fine.

1072
00:47:07.260 --> 00:47:10.660
He had taught me how to tie a
special knot, which freed my

1073
00:47:10.660 --> 00:47:12.530
hands while he was hanging.

1074
00:47:12.530 --> 00:47:16.320
I was able to call on my cell
phone the mountain rescue.

1075
00:47:16.320 --> 00:47:17.950
Michael regained consciousness,
and I could

1076
00:47:17.950 --> 00:47:19.040
lower him down.

1077
00:47:19.040 --> 00:47:21.600
The helicopter came and took
us off the mountain.

1078
00:47:21.600 --> 00:47:26.600
So even though he had a couple
broken ribs, he's fine.

1079
00:47:26.600 --> 00:47:27.400
Thank you.

1080
00:47:27.400 --> 00:47:34.553
[APPLAUSE]

WEBVTT

1
00:00:03.129 --> 00:00:07.729
&gt;&gt;Ray Cromwell: Hi. Good afternoon. Welcome
to the history and future of Google Web Toolkit.

2
00:00:07.729 --> 00:00:14.729
My name is ray Cromwell, I'm tech lead for
GWT. So I'd like to just jump right in because

3
00:00:16.369 --> 00:00:20.109
we've got seven years, believe it or not,
of history to cover.

4
00:00:20.109 --> 00:00:25.519
So, often people actually come up to me and
say why did Google even create GWT in the

5
00:00:25.519 --> 00:00:32.519
first place? Isn't JavaScript good enough
for you? Why do you need Java for Web programming?

6
00:00:33.350 --> 00:00:39.400
So I think it's instrumental to go back and
look at the context in which GWT was conceived

7
00:00:39.400 --> 00:00:45.850
seven years ago. So if you think back seven
years ago, which is an eternity in Web time,

8
00:00:45.850 --> 00:00:50.780
Web 2.0 was just starting, AJAX apps, rich
internet applications were just being created,

9
00:00:50.780 --> 00:00:55.270
the first sort of series of them. And people
were actually thinking back then that the

10
00:00:55.270 --> 00:00:59.829
future of rich internet applications was going
to be something like a war between Adobe Air

11
00:00:59.829 --> 00:01:04.360
and Microsoft Silverlight. I mean, there were
conventions on this. And people did not think

12
00:01:04.360 --> 00:01:08.819
that the browsers were powerful enough to
do really, really capable applications.

13
00:01:08.819 --> 00:01:15.819
And then Google released Gmail in 2004 and
Google Maps in 2005, and I think that started

14
00:01:15.829 --> 00:01:20.850
to change people's imagination because for
the first time, especially with Google Maps,

15
00:01:20.850 --> 00:01:26.439
people saw an application that was written
in the Web that was fast, it was fluid, it

16
00:01:26.439 --> 00:01:30.079
was -- in fact, this was before touch. It
was touchable. The way you interacted with

17
00:01:30.079 --> 00:01:33.319
the Google Maps application is you grabbed
it with the mouse pointer and flung the map

18
00:01:33.319 --> 00:01:38.759
around. So that fired up people's imagination
and people really wanted to start building

19
00:01:38.759 --> 00:01:42.630
rich Web applications like this.
But at the time if you looked around and surveyed

20
00:01:42.630 --> 00:01:48.560
the landscape there wasn't a lot of good tools
to do this in just raw JavaScript by hand.

21
00:01:48.560 --> 00:01:52.869
In fact, jQuery, which is really the most
popular library out there, wasn't even released

22
00:01:52.869 --> 00:01:59.539
until 2006. And I think probably Bruce Johnson
and Joe Weber who created GWT were sitting

23
00:01:59.539 --> 00:02:03.170
around somewhere in a cafe and saying How
can we solve this problem without building

24
00:02:03.170 --> 00:02:08.920
our own JavaScript bidi, JavaScript testing
frameworks and build servers and all this

25
00:02:08.920 --> 00:02:11.130
other kind of stuff that's been there for
a long time.

26
00:02:11.130 --> 00:02:16.310
And if you look at Java they were like wow,
it has seven million programmers, it has intelliJ

27
00:02:16.310 --> 00:02:22.310
and Eclipse, it's got Ant and Maven and it's
got J Unit and Test Mg and it has bug analysis

28
00:02:22.310 --> 00:02:25.790
software and dependency package management
and all this stuff.

29
00:02:25.790 --> 00:02:28.990
The only thing you can't do with it is you
can't write a client side Web application

30
00:02:28.990 --> 00:02:34.700
except if you want to do applets or something.
If I could only compile Java to JavaScript

31
00:02:34.700 --> 00:02:39.280
it would close the loop and we would get massive
leverage on that ecosystem. So that I think

32
00:02:39.280 --> 00:02:46.280
was the foundation context for GWT.
So it's evolved a lot since then. The first

33
00:02:46.870 --> 00:02:53.040
version of GWT was released in 2006, followed
very shortly by a few other versions that

34
00:02:53.040 --> 00:02:58.890
really didn't add much to fix bugs. The really
important thing is with GWT 1.3 in 2007 early

35
00:02:58.890 --> 00:03:04.150
on we released it as open source. And for
the first time everyone could contribute to

36
00:03:04.150 --> 00:03:09.840
GWT if they wanted to. And it was also the
first to get OSX support.

37
00:03:09.840 --> 00:03:15.380
Later in 2007 we added J Unit testing framework
support as well as automatic sprite sheeting.

38
00:03:15.380 --> 00:03:20.720
This was another first because back in 2007
we were automatically creating CSS sprite

39
00:03:20.720 --> 00:03:25.310
sheets on the fly well before actually people
had built tools to do this for hand-coded

40
00:03:25.310 --> 00:03:28.810
JavaScript. But the biggest thing people were
asking us over and over again is when are

41
00:03:28.810 --> 00:03:32.610
you going to have Java 5 support? We want
generics, we want enoms, we want auto boxing,

42
00:03:32.610 --> 00:03:38.070
all that stuff. So they did a fire drill,
they crunched down and in 2008 they got Java

43
00:03:38.070 --> 00:03:45.070
1.5 support. In fact, 1.5 was one of the biggest
releases. It added not just Java 1.5 support,

44
00:03:45.180 --> 00:03:49.180
but this new overlay type system that allowed
you to link with JavaScript for the first

45
00:03:49.180 --> 00:03:55.650
time with zero overhead in the compiler. It
had a new low level DOM API, and we added

46
00:03:55.650 --> 00:03:59.200
CSS themes to the widgets for the first time,
so everyone who used GWT early on knew that

47
00:03:59.200 --> 00:04:04.540
the widgets no style whatsoever. Out of the
box it just looked like nothing. So we added

48
00:04:04.540 --> 00:04:09.170
a couple of CSS themes so at least out of
the box someone could actually look at the

49
00:04:09.170 --> 00:04:11.319
app and not puke.
[ Laughter ]

50
00:04:11.319 --> 00:04:15.650
&gt;&gt;Ray Cromwell: And we added this thing called
linkers which has some useful things that

51
00:04:15.650 --> 00:04:21.230
I can perhaps get into later.
And with 2009 we basically redid the event

52
00:04:21.230 --> 00:04:25.720
handler system to make event handling more
generic and not just tied to the DOM. Now

53
00:04:25.720 --> 00:04:30.120
you could fire custom events and reuse events
on both the client and in your server code.

54
00:04:30.120 --> 00:04:34.110
We added code coverage support with Emma.
We added war directory support so you could

55
00:04:34.110 --> 00:04:38.220
just point our tools at a war directory and
it would work. And we added a parallelized

56
00:04:38.220 --> 00:04:41.280
build system that today is mostly used by
Google.

57
00:04:41.280 --> 00:04:48.280
In 2009 we had a minor release that mostly
just added support. 2009, though, was the

58
00:04:49.720 --> 00:04:54.160
year of a really big release, and that was
GWT 2.0. And GWT 2.0 was an overhaul. It was

59
00:04:54.160 --> 00:04:58.760
the biggest release ever. We added a totally
new dev mode so that you could develop in

60
00:04:58.760 --> 00:05:02.710
development mode with any browser you liked.
So whether it was Chrome or whether it was

61
00:05:02.710 --> 00:05:08.210
IE, whether it was Safari, Firefox, you had
the same experience. Previously we were bundling

62
00:05:08.210 --> 00:05:13.870
a really old version of Firefox or IE directly
into the GWT toolkit, so you couldn't even

63
00:05:13.870 --> 00:05:18.660
upgrade the browser you were developing with.
We added draft compilation to speed up your

64
00:05:18.660 --> 00:05:24.490
compiles. We added this new templating system
called UI binder. We added layout panels for

65
00:05:24.490 --> 00:05:30.240
really efficient CSS style layout. And we
added the code splitter, which was an overhaul

66
00:05:30.240 --> 00:05:34.760
to compiler to allow you to tell the compiler
that certain pieces of code don't need to

67
00:05:34.760 --> 00:05:39.260
be loaded when your app starts up, but they
can be loaded later. And a new system for

68
00:05:39.260 --> 00:05:42.940
bundling resources into your application,
which was called client bundle, which was

69
00:05:42.940 --> 00:05:47.340
the evolution of image bundle, which did sprite
sheets. With client bundle we also bundle

70
00:05:47.340 --> 00:05:53.070
in CSS and we have a CSS compiler that performs
optimizations on the CSS to shrink that down

71
00:05:53.070 --> 00:05:58.180
as well.
In 2010 we partnered with VMWare to support

72
00:05:58.180 --> 00:06:04.480
their cloud, and that necessitated a new RPC
system that was not as tied to Java as GWT

73
00:06:04.480 --> 00:06:10.699
RPC was, and that was request factory, which
was a more JSON oriented RPC framework. We

74
00:06:10.699 --> 00:06:16.370
did data binding with the editor framework.
JSR 303 bean validation support, model view

75
00:06:16.370 --> 00:06:22.760
presenter pattern support, and a new system
of cell widgets which are efficient widgets

76
00:06:22.760 --> 00:06:28.250
for rendering like tables and grids.
Then we had a couple of minor releases. We

77
00:06:28.250 --> 00:06:33.360
acquired this company called Instantiations
and we released as open source WYSIWYG designer

78
00:06:33.360 --> 00:06:39.990
for GWT UIs. We added a lot of HTML5 support,
like canvas and storage and things like that.

79
00:06:39.990 --> 00:06:46.350
And we dropped in a little bit of stuff for
Google in terms of enhancing app integration.

80
00:06:46.350 --> 00:06:50.020
And then finally, in the last release we sort
of started to think that we need to move off

81
00:06:50.020 --> 00:06:54.460
Ant and get more towards Maven, so we sort
of Mavenized it.

82
00:06:54.460 --> 00:06:59.260
So that's where we were. That's the history
of GWT.

83
00:06:59.260 --> 00:07:02.680
So where are we today?
Well, as far as we can tell the SDK has been

84
00:07:02.680 --> 00:07:06.620
downloaded over a million times, but that's
probably not an accurate number because a

85
00:07:06.620 --> 00:07:13.620
lot of people are getting it from Maven central
now. We have over 100,000 monthly active developers.

86
00:07:13.820 --> 00:07:17.830
Because software basically periodically checks
to see if there's a new version to give you

87
00:07:17.830 --> 00:07:22.169
a notification that GWT 2.5 is available.
So we at least know of Eclipse users there's

88
00:07:22.169 --> 00:07:27.229
100,000 active developers. We have deep integration
with Eclipse through the Google Eclipse plug-in

89
00:07:27.229 --> 00:07:33.639
with intelliJ and with VMWare spring tools.
And our products are used widely within Google,

90
00:07:33.639 --> 00:07:39.520
including our biggest product, which is AdWords,
Google Flights, Offers, Google Groups, Blogger,

91
00:07:39.520 --> 00:07:43.040
many that you haven't even imagined that were
written in GWT.

92
00:07:43.040 --> 00:07:48.150
And we did a couple of fun things. We ported
Quake, first-person shooter in 2009 using

93
00:07:48.150 --> 00:07:53.759
GWT to the Web and it ran smoothly at 60 frames
per second in a browser, and Angry Birds for

94
00:07:53.759 --> 00:07:57.570
the Web, if you've ever played for Chrome,
is written in GWT.

95
00:07:57.570 --> 00:08:02.350
So GWT today is a mature, high quality code
base.

96
00:08:02.350 --> 00:08:06.940
What more could we do? Is there anything left
to actually do to improve GWT?

97
00:08:06.940 --> 00:08:13.940
And I'm happy to say over the last year we've
done a lot. In fact, the GWT 2.5 release that

98
00:08:14.389 --> 00:08:19.740
we're introducing today is the largest release
we've done, I think, since GWT 2.1. We've

99
00:08:19.740 --> 00:08:25.630
added more stuff in 2.5 than we did in 2.2,
2.3, 2.4 put together.

100
00:08:25.630 --> 00:08:31.960
Let me go over a few of them. First, we did
a lot of work on the compiler. So out of the

101
00:08:31.960 --> 00:08:36.740
box with no changes to your code, if you just
recompile your application you will get a

102
00:08:36.740 --> 00:08:40.690
substantial code size reduction.
For example, the showcase application, if

103
00:08:40.690 --> 00:08:46.680
you just recompile the GWT 2.5, 14% smaller
JavaScript. And that is undercounting because

104
00:08:46.680 --> 00:08:52.140
the GWT user library has added a lot more
bloat in terms of the underlying library code.

105
00:08:52.140 --> 00:08:56.240
So it probably would have been even smaller.
The mobile Web app, eight percent smaller.

106
00:08:56.240 --> 00:09:00.880
Your mileage may vary. The larger the app
probably the better the benefit. Smaller apps,

107
00:09:00.880 --> 00:09:06.210
smaller benefit.
But we can do better. We also integrated the

108
00:09:06.210 --> 00:09:10.860
JavaScript closure compiler that is used at
Google for like Gmail and Google+ and Google

109
00:09:10.860 --> 00:09:16.640
Docs and a lot of other large JavaScript applications.
And the closure compiler has a lot of really

110
00:09:16.640 --> 00:09:21.560
low level JavaScript optimizations that we
never really would think to do in GWT because

111
00:09:21.560 --> 00:09:26.710
it's Java oriented, things like putting bang
zero instead of true or if you have a number

112
00:09:26.710 --> 00:09:32.600
like 10,000, rewrite it as 1E4 in scientific
language. It saves off two bytes.

113
00:09:32.600 --> 00:09:37.860
So here you can see if you enable closure
compiler you get an extra five percent co-size

114
00:09:37.860 --> 00:09:44.020
reduction. So now versus GWT 2.4, recompiled
with the switch closure compiler, we're 20%

115
00:09:44.020 --> 00:09:51.020
smaller than GWT 2.4.
But we can do better. We've also looked at

116
00:09:51.589 --> 00:09:55.540
the code splitter and so the showcase application,
for example, does a live code splitting. If

117
00:09:55.540 --> 00:09:59.160
you're not aware of what code splitting does,
it allows you to pick parts of your application,

118
00:09:59.160 --> 00:10:04.310
like a composed window or settings page, that
may not be displayed immediately when your

119
00:10:04.310 --> 00:10:08.110
application is loaded up. You can mark them
as split points that the compiler has the

120
00:10:08.110 --> 00:10:12.300
option of deferring and loading later. So
it can move that code out into a separate

121
00:10:12.300 --> 00:10:18.020
JS file, shrinking the initial size of the
JS that has to be loaded. So any bit of code

122
00:10:18.020 --> 00:10:23.000
that is exclusive to one particular fragment
and is not shared is called exclusive code.

123
00:10:23.000 --> 00:10:27.330
What I'm showing up here is there's split
points. They have some code that is only referenced

124
00:10:27.330 --> 00:10:31.830
within those split points, and if there is
some like, let's say, job util list that both

125
00:10:31.830 --> 00:10:36.240
of them use, and so any time there's shared
code we put that code in a shared fragment

126
00:10:36.240 --> 00:10:41.640
called the leftovers fragment.
Here's the problem. As you continue to increase

127
00:10:41.640 --> 00:10:46.250
the number of split points in your application,
the probability of there being shared code

128
00:10:46.250 --> 00:10:51.700
between any two split points rises. And what
that means is that that leftovers fragment

129
00:10:51.700 --> 00:10:56.020
at the bottom gets larger and larger. So when
your application loads up, before it can run

130
00:10:56.020 --> 00:11:01.370
any of these split points it has to load the
leftovers fragment because it's a shared library.

131
00:11:01.370 --> 00:11:04.399
So we needed to do something about that leftovers
fragment.

132
00:11:04.399 --> 00:11:10.110
What we do is we perform a kind of clustering.
We analyze all the fragments that you've split

133
00:11:10.110 --> 00:11:14.470
out and looked for ones that are most similar,
that basically use the most amount of code

134
00:11:14.470 --> 00:11:19.920
together, and we merge them into one fragment.
And hopefully there's a lot of shared code

135
00:11:19.920 --> 00:11:26.050
that no longer is used by anybody else. It's
only used now within that new merged fragment

136
00:11:26.050 --> 00:11:29.700
that you see in the middle of the screen.
That leaves the leftovers fragment down at

137
00:11:29.700 --> 00:11:35.140
the bottom empty where we've hoisted some
code out of it into this new shared fragment.

138
00:11:35.140 --> 00:11:42.110
So what can of effect can this have on an
application like Showcase? 39% reduction in

139
00:11:42.110 --> 00:11:45.959
code size of the initial JavaScript that your
application has to load before it can present

140
00:11:45.959 --> 00:11:49.490
the UI to the user.
The first time I saw this I thought we had

141
00:11:49.490 --> 00:11:53.779
a bug in the compiler and it was wrong, it
was removing too much code, but I've measured

142
00:11:53.779 --> 00:12:00.779
it several times and it's true. 39% code size
reduction.

143
00:12:00.920 --> 00:12:05.839
But there are other things we had to do. We
had to improve the overall diagnostics of

144
00:12:05.839 --> 00:12:09.560
the compiler. Things that you might rely on
like if someone is running your application

145
00:12:09.560 --> 00:12:13.110
and a user hits an exception, how are you
going to find out what happened and what line

146
00:12:13.110 --> 00:12:17.220
of code it happened on?
So there's this new standard that Google has

147
00:12:17.220 --> 00:12:20.930
proposed and other people have adopted called
source maps. What it does is whenever you

148
00:12:20.930 --> 00:12:25.980
compile anything to JavaScript, be it Java,
Closure, Coffee Script, whatever, we write

149
00:12:25.980 --> 00:12:30.320
out the standardized mapping file which says
this piece of Java or Coffee Script or whatever

150
00:12:30.320 --> 00:12:33.740
source language became this bit of obfuscated
JavaScript in the output.

151
00:12:33.740 --> 00:12:39.410
But having that bidirectional mapping, now
when you go to debug or inspect obfuscated

152
00:12:39.410 --> 00:12:42.830
compiled JavaScript code, it can actually
tell you the original line of code that it

153
00:12:42.830 --> 00:12:47.600
came from in your source language before you
messed with it.

154
00:12:47.600 --> 00:12:52.500
So this permits de-obfuscation of script,
but it allows GWT, more importantly, to construct

155
00:12:52.500 --> 00:12:57.350
perfectly accurate stack traces.
So right now today if the user encounters

156
00:12:57.350 --> 00:13:02.420
like an exception in one of the GWT applications,
you get the line number of the method, the

157
00:13:02.420 --> 00:13:06.380
name of the method that it occurred in, but
you actually don't actually get the actual

158
00:13:06.380 --> 00:13:09.980
line number of code within the method that
it occurred on.

159
00:13:09.980 --> 00:13:15.339
And in fact, if the compiler has inline several
methods and rolled them up into one, you actually

160
00:13:15.339 --> 00:13:19.440
don't even know what method it occurred in
because now those small inline methods are

161
00:13:19.440 --> 00:13:24.769
not even on the call stack. They've been basically
moved in to the parent caller.

162
00:13:24.769 --> 00:13:29.089
Not so with source maps. Now you will actually
know the exact original function, regardless

163
00:13:29.089 --> 00:13:33.680
of optimizations, where the error occurred.
It's Chrome only for now. Firefox has demoed

164
00:13:33.680 --> 00:13:40.680
it and they promise to support it.
Okay. So this kind of dovetails into super

165
00:13:42.470 --> 00:13:46.870
dev mode because it's what enables it. But
here's the problem. Over the years people

166
00:13:46.870 --> 00:13:51.649
have complained we haven't kept our dev mode,
C++ plug-ins up to date.

167
00:13:51.649 --> 00:13:54.910
Basically we use these native plug-ins that
we install into the browser so that when you

168
00:13:54.910 --> 00:13:59.370
run in dev mode and it's running Java code
and it has to remote control the browser and

169
00:13:59.370 --> 00:14:04.040
tell the browser add a DOM element somewhere,
it talks to this plug-in, which then remotes

170
00:14:04.040 --> 00:14:06.829
controls the browser to actually update the
browser.

171
00:14:06.829 --> 00:14:13.170
The problem is that the browser vendors have
accelerated their iteration on their browser.

172
00:14:13.170 --> 00:14:17.720
Used to be they would release a browser once
a year, Firefox 4, 5, it would take a year.

173
00:14:17.720 --> 00:14:21.670
That would give the GWT team more than enough
time to actually update three or four different

174
00:14:21.670 --> 00:14:25.839
plug-ins on three or four different operating
systems. But now we simply can't handle it

175
00:14:25.839 --> 00:14:28.600
because every six weeks they're releasing
a new version.

176
00:14:28.600 --> 00:14:35.600
Like, for example, every time Firefox releases
a new version of Firefox it breaks the C++

177
00:14:35.850 --> 00:14:39.160
plug-ins that we have.
So we needed a new solution. Plus on things

178
00:14:39.160 --> 00:14:42.990
like mobile devices like iOS you can't even
have plug-ins in the browser, so how would

179
00:14:42.990 --> 00:14:49.990
you debug a GWT application on an iPad?
So what if we could create a GWT compiler

180
00:14:50.100 --> 00:14:53.860
that was so fast we could compile your Java
code in one second? Biggest complaint we get

181
00:14:53.860 --> 00:14:57.620
is the compiler is slow. So what if we could
speed it up so we could compile your code

182
00:14:57.620 --> 00:15:03.420
in one second or 10 seconds? Then you could
actually iterate by loading up JavaScript

183
00:15:03.420 --> 00:15:08.769
into their browser. And with the combination
of source maps, you actually could debug source

184
00:15:08.769 --> 00:15:15.769
level Java code right in your browser.
So let me show you a demo of that. So I've

185
00:15:18.070 --> 00:15:23.180
got the GWT code server running, which is
the new super dev mode server. It's a servlet.

186
00:15:23.180 --> 00:15:26.519
It starts up on your GWT module and basically
it's waiting there for me to connect. It's

187
00:15:26.519 --> 00:15:31.459
going to serve up the compiled code.
So I'm going to go to this application I have

188
00:15:31.459 --> 00:15:38.459
called Silver Comet, and hopefully I've got
a network connection and it can load up.

189
00:15:45.610 --> 00:15:52.610
I might be in trouble here. If that doesn't,
what I'll do is I have another version. Here

190
00:16:02.220 --> 00:16:08.160
let's do this.
I'll just skip ahead for a second and I'll

191
00:16:08.160 --> 00:16:15.160
come back to that and show it to you.
All right. Let's let that go for a second.

192
00:16:15.310 --> 00:16:18.760
Okay. There it is.
So this is an application, it's graphing marathon

193
00:16:18.760 --> 00:16:23.250
data from the Silver Comet half-marathon in
Atlanta. You can see I can do things like

194
00:16:23.250 --> 00:16:28.540
I can hit a character, click on a person,
it tells me where the runner is.

195
00:16:28.540 --> 00:16:35.540
If I were to try to debug this today, I would
bring up the Chrome inspector and I go to

196
00:16:37.160 --> 00:16:43.930
scripts. You can see that it's basically compiled
JavaScript. So it would be really hard to

197
00:16:43.930 --> 00:16:50.930
like set a break point in here and debug it.
So let's go down to here and click on this

198
00:16:51.589 --> 00:16:57.450
little -- in the Chrome inspector this little
gearbox and say enable source maps. So now

199
00:16:57.450 --> 00:17:00.820
I'm going to click this -- I'm going to go
back to the code server and I'm going to drag

200
00:17:00.820 --> 00:17:06.159
this bookmarklet up here and I'm going to
turn on super dev mode.

201
00:17:06.159 --> 00:17:13.159
So hopefully it's going to reload. I think
my network is having problems.

202
00:17:15.939 --> 00:17:22.939
Okay. There it is. I'm going to click super
dev mode, click compile. And it's compiling.

203
00:17:29.350 --> 00:17:34.169
And usually this takes like less than two
seconds, but network is loading already, so

204
00:17:34.169 --> 00:17:35.660
it's already finished, but it's loading on
the bottom.

205
00:17:35.660 --> 00:17:42.500
There we go.
Now it's reloading the compiled JavaScript.

206
00:17:42.500 --> 00:17:47.150
It's already been compiled at this point.
I go over to this window over here and I can

207
00:17:47.150 --> 00:17:53.130
probably show you compiled in 0.979 seconds,
if you can see that.

208
00:17:53.130 --> 00:17:58.770
So the issue is there is some kind of network
thing that's hurting my demo here.

209
00:17:58.770 --> 00:18:05.770
Let me bring up the inspector and see if I
can show this to you.

210
00:18:05.870 --> 00:18:12.870
Oh, there it is. So it's back up. I'm going
to go to the scripts tag now, scripts. Now

211
00:18:17.150 --> 00:18:22.049
you can see I have Java code in here.
[ Applause ]

212
00:18:22.049 --> 00:18:28.000
&gt;&gt;Ray Cromwell: And I promise you it won't
take this long when you actually do it on

213
00:18:28.000 --> 00:18:31.770
your own computer. I'm going to go and I can
set a break point here. See that? And I will

214
00:18:31.770 --> 00:18:35.610
come up here and hit a character and you can
see it doing a break point. I can hit play

215
00:18:35.610 --> 00:18:39.770
and you see the things up there? So I'm stepping
through Java code. In fact, you can do something

216
00:18:39.770 --> 00:18:42.510
in super dev mode that you could never do
in regular dev mode. I'm going to step down

217
00:18:42.510 --> 00:18:49.510
into a JSNI function. I'm going to step into
this item shell, step into remove property,

218
00:18:50.640 --> 00:18:57.070
JSNI JavaScript function. You could never
do that before in regular dev mode.

219
00:18:57.070 --> 00:19:04.070
[Applause].
So let's go back to slides. Okay. UI binder.

220
00:19:08.270 --> 00:19:10.770
If you use UI binder we have more good news
for you.

221
00:19:10.770 --> 00:19:16.900
First of all, if you sell widgets, you can
now actually -- you don't have to write Java

222
00:19:16.900 --> 00:19:21.770
code, you can actually specify the template
for a cell that renders in a table grid or

223
00:19:21.770 --> 00:19:28.020
in a tree with a UI binder template. There's
sort of a new interface called UI render and

224
00:19:28.020 --> 00:19:31.950
it does that.
Secondly, we have optimized the way UI binder

225
00:19:31.950 --> 00:19:36.140
constructs the HTML and injects into the page
significantly. We have vastly reduced the

226
00:19:36.140 --> 00:19:42.860
number of DOM operations down to just a few.
The end result of that is start-up latency

227
00:19:42.860 --> 00:19:48.350
for Orchid, which also uses GWT was reduced
by 20%, and the rendering speed it was taking

228
00:19:48.350 --> 00:19:53.960
to refresh the HTML on the page went up by
300%. So not just the compiler has been improved,

229
00:19:53.960 --> 00:20:00.190
but the speed of the widgets has been improved
up to 300%.

230
00:20:00.190 --> 00:20:06.400
And we've also started the beginnings of adding
support for using the same I 18 and message

231
00:20:06.400 --> 00:20:11.840
class used on the client side in the server.
So using GWT.create in the server, and what

232
00:20:11.840 --> 00:20:16.850
that will get to is sometimes you want to
share code between the client server in terms

233
00:20:16.850 --> 00:20:22.110
of internationalization resource bundles,
this will basically get you there eventually.

234
00:20:22.110 --> 00:20:27.730
And we have updated the ARIA library support
in the GWT to the newest W3C standard. If

235
00:20:27.730 --> 00:20:34.730
you have accessibility concerns, we have better
support for that. Lastly, we're introducing

236
00:20:37.160 --> 00:20:44.160
a new experimental library called Elemental.
So what is Elemental? Well, over the years,

237
00:20:46.140 --> 00:20:50.330
as I said, the browser vendors are iterating
faster and faster, every week they are adding

238
00:20:50.330 --> 00:20:57.330
a new HTML5 API into JavaScript. And we just
can't keep up hand wrapping those APIs, so

239
00:20:57.700 --> 00:21:03.090
every release, GWT 2.2, 2.3, 2.4, we added
a few. We added canvas and then we added local

240
00:21:03.090 --> 00:21:07.380
storage, an index database, so on.
But there's just too many. We can't keep it

241
00:21:07.380 --> 00:21:12.740
up as a manual process.
So what Elemental is, it's a library that

242
00:21:12.740 --> 00:21:19.740
builds a complete 100% HTML5 mapping to the
latest Chrome, WebKit and soon Firefox, by

243
00:21:21.970 --> 00:21:27.500
actually looking at the C++ source code definitions
for the JavaScript run times used for exporting

244
00:21:27.500 --> 00:21:34.340
their APIs and auto generating a complete
set of GWT classes that directly call into

245
00:21:34.340 --> 00:21:39.450
those APIs, look, it's all done -- I've got
a typo in there -- with JavaScript overlay

246
00:21:39.450 --> 00:21:44.570
type. So when you compile this, they all melt
away, it's a small or smaller than you could

247
00:21:44.570 --> 00:21:49.950
write by hand. There's no overhead. Every
API you could think of is there, WebGL, Web

248
00:21:49.950 --> 00:21:54.270
audio sockets, RTC, even Web Intents, Shadow
DOM, these new things that you might have

249
00:21:54.270 --> 00:21:59.770
just seen at the show today. We have a new
set of collection classes that you can use

250
00:21:59.770 --> 00:22:05.860
as an alternative to JavaScript util collections
that are mapped directly to underline JavaScript

251
00:22:05.860 --> 00:22:10.789
collections, so there's no overhead if you
use like maps or arrays, no extra bloat. And

252
00:22:10.789 --> 00:22:15.760
a new JSON library, similarly that has no
overhead if you use it, just directly access

253
00:22:15.760 --> 00:22:22.760
JSON objects and no bloat in the output. I
think this is an excellent library for doing

254
00:22:23.169 --> 00:22:26.870
mobile device development because the mobile
device browsers are often on the bleeding

255
00:22:26.870 --> 00:22:31.539
edge of CSS3 and things like that because
that's how they get their extra performance.

256
00:22:31.539 --> 00:22:37.890
So it could also work for desktop. But you
might have the -- already using the existing

257
00:22:37.890 --> 00:22:40.610
stuff, so you will have to decide whether
or not you want to move over to this library.

258
00:22:40.610 --> 00:22:47.610
But try it out. I'm going to show you a demo.
Real quick. And I cooked up sort of a hack

259
00:22:49.590 --> 00:22:54.360
to show you the power of super dev mode and
to show the power of Elemental.

260
00:22:54.360 --> 00:22:59.070
And so what I have done is I've built this
servlet filter that if you try to load up

261
00:22:59.070 --> 00:23:04.580
an HTML page and if you have something in
there like this ... I'm going to type a script

262
00:23:04.580 --> 00:23:11.580
tag. I'm going to say type the SQL to text/
-- no, not JavaScript, Java. And in here,

263
00:23:14.179 --> 00:23:18.460
I'm just going to write like I would write
JavaScript. Window.alert.

264
00:23:18.460 --> 00:23:25.460
Hello. Believe it or not, that's Java code,
not JavaScript. So I have a servlet filter,

265
00:23:26.850 --> 00:23:30.910
when this file is being piped out will catch
that script tag and see well, that's Java

266
00:23:30.910 --> 00:23:35.990
code, automatically synthesize a GWT module
entry point on the fly, right into the super

267
00:23:35.990 --> 00:23:40.200
dev mode compiler, compile it in one second,
then replace it back with a regular script

268
00:23:40.200 --> 00:23:46.820
type, text JavaScript, and then the page loads.
And so -- so my computer is kind of slow on

269
00:23:46.820 --> 00:23:51.130
a real computer -- if I would upgrade my computer
it would run a lot faster, but I will show

270
00:23:51.130 --> 00:23:58.130
you that right now. Let's see -- if I just
write some code there, and it's -- oops. Wait.

271
00:24:05.020 --> 00:24:11.990
Okay. Is it running? It is running. Okay.
Demo problems again. Oh, that's because it's

272
00:24:11.990 --> 00:24:17.500
on my local machine.
That would make all difference okay. Let's

273
00:24:17.500 --> 00:24:20.340
let that load. There you go.
[ Applause ]

274
00:24:20.340 --> 00:24:26.690
&gt;&gt;Ray Cromwell: So now you can develop -- if
I were to release this servlet filter, you

275
00:24:26.690 --> 00:24:30.809
can actually develop Java code in a really
lightweight fashion, where you can have multiple

276
00:24:30.809 --> 00:24:34.950
HTML pages and just sprinkle a little bit
of Java code in each page a page at a time

277
00:24:34.950 --> 00:24:39.010
and just get a little tiny bit of compiled
Java code out of it. Well, why would you do

278
00:24:39.010 --> 00:24:42.020
that?
Well, simple. Any of you know by heart the

279
00:24:42.020 --> 00:24:49.020
new Web RTC camera API? I sure don't. There's
a lot of APIs in HTML5. But because this is

280
00:24:49.669 --> 00:24:56.039
Java, this is my Java IDE, you know, I can
do things like this, you know, window -- this

281
00:24:56.039 --> 00:25:02.200
is the Elemental library -- .getnavigator
or .get -- you see all of these APIs in geolocation,

282
00:25:02.200 --> 00:25:08.450
platform plug-ins, product, I can do WebKitgetusermedia,
which is the new Web RTC API to access the

283
00:25:08.450 --> 00:25:11.470
camera.
So you can get full completion, all of the

284
00:25:11.470 --> 00:25:15.720
normal stuff that you love in your IPE, but
with the sort of lightweight HTML programming

285
00:25:15.720 --> 00:25:18.850
experience. So let's try that out and see
if that works.

286
00:25:18.850 --> 00:25:25.850
Going to take a second to recompile. And hopefully
this works. There you go.

287
00:25:30.799 --> 00:25:36.409
[ Applause ]
&gt;&gt;Ray Cromwell: So try this out, it's experimental,

288
00:25:36.409 --> 00:25:39.809
but it has a lot of cool APIs in it to try
out. Okay.

289
00:25:39.809 --> 00:25:46.460
So you have seen the past, you have seen the
now, let's talk about the future.

290
00:25:46.460 --> 00:25:51.780
So one of the problems that's been happening
over the last year or so is that ability to

291
00:25:51.780 --> 00:25:56.970
iterate on GWT by taking outside community
contributions has slowed a lot. The reason

292
00:25:56.970 --> 00:26:02.090
why, it has been paradoxically due to GWT's
success within Google. So as more and more

293
00:26:02.090 --> 00:26:09.070
internal Google apps migrated to GWT, we could
not take much of a chance accepting patches

294
00:26:09.070 --> 00:26:14.110
without thoroughly reviewing them. Imagine
somebody submits a patch and it puts a bug

295
00:26:14.110 --> 00:26:19.320
into ad words, we could lose billions of dollars
of revenue. So we have to be really careful

296
00:26:19.320 --> 00:26:25.400
about accepting external community patches.
So you might have noticed a lot of frustration

297
00:26:25.400 --> 00:26:29.039
with the issue tracker because we had our
internal issue tracker, and we were proprietary

298
00:26:29.039 --> 00:26:33.679
to internal bugs. Hundreds of internal GWT
apps, you know, our internal customers come

299
00:26:33.679 --> 00:26:39.390
first, compared to the community because that's
where our money is coming from. And so -- so

300
00:26:39.390 --> 00:26:42.480
I thought that was a really sorry situation
to be in because a lot of the people in the

301
00:26:42.480 --> 00:26:46.970
community have contributed so much to GWT
over the years and we really needed to do

302
00:26:46.970 --> 00:26:52.210
them better.
And so I suggested and we adopted that we're

303
00:26:52.210 --> 00:26:59.210
going to basically change the governor -- governing
body of GWT to no longer just be Google as

304
00:26:59.549 --> 00:27:06.549
a dictator, but be as a peer. So we're introducing
the GWT steering committee. So now the control

305
00:27:06.620 --> 00:27:11.210
over the future roadmap of GWT, when features
go into it, who gets to be a committer, who

306
00:27:11.210 --> 00:27:15.909
is a code reviewer, what patches get landed
is now going to be controlled by a committee

307
00:27:15.909 --> 00:27:20.789
of several of the top, you know, star contributors
to the GWT community and some of the biggest

308
00:27:20.789 --> 00:27:26.090
companies using GWT. Google goes from being
now a gatekeeper to a peer amongst equals.

309
00:27:26.090 --> 00:27:29.890
So we have to be more responsive, we have
to think more about what other people are

310
00:27:29.890 --> 00:27:33.450
using GWT for, not only what we are using
it for. The steering committee is going to

311
00:27:33.450 --> 00:27:36.440
determine what the project guidelines are,
what the policies and philosophies of the

312
00:27:36.440 --> 00:27:41.289
project is going forward and determine who
gets direct commit access to the master branch.

313
00:27:41.289 --> 00:27:45.400
And it's going to set the overall future roadmap
as I said. We have drawn from a mix of star

314
00:27:45.400 --> 00:27:49.100
contributors, and here they are. This is the
initial GWT steering committee. It's Google,

315
00:27:49.100 --> 00:27:55.490
Vaadin, Sencha, Red Hat, Thomas Broyer, and
Stephan Haberman, who have done an enormous

316
00:27:55.490 --> 00:28:01.120
number of bug fixes to GWT over the years.
Daniel Kurka, who has done an absolutely awesome

317
00:28:01.120 --> 00:28:06.970
mobile GWT library, and Christian Goudreau
of Arcbees, who has done the GWT team library

318
00:28:06.970 --> 00:28:10.659
which a lot of people use because it extends
our MVP library, it's really fabulous.

319
00:28:10.659 --> 00:28:15.020
We've had some early decisions. We've had
a couple of meetings already. We've decided,

320
00:28:15.020 --> 00:28:20.450
this might please many of you, we're moving
the DMT repository from Subversion to Git.

321
00:28:20.450 --> 00:28:25.669
[ Applause ]
&gt;&gt;Ray Cromwell: And we're going to have two

322
00:28:25.669 --> 00:28:32.020
official branches now. The master dev line
trunk, where all of you if you have a feature,

323
00:28:32.020 --> 00:28:37.150
you can submit your patch, and it can land,
whether or not it may break an internal GWT

324
00:28:37.150 --> 00:28:40.309
application. This will be the bleeding edge
branch. Everyone when you get a nightly build

325
00:28:40.309 --> 00:28:44.570
one and try it out, we can figure out what
needs to be rolled back. But if it makes it

326
00:28:44.570 --> 00:28:49.370
through the dev branch and doesn't destroy
anybody's applications, then it's going to

327
00:28:49.370 --> 00:28:53.820
be cherry picked into the beta branch, which
represents the work on the next release, let's

328
00:28:53.820 --> 00:28:59.710
say GWT 2.6 or GWT 3.0. The beta release is
what Google is going to be building our internal

329
00:28:59.710 --> 00:29:03.570
apps off of. So there's going to be a lot
of quality assurance on that branch so you

330
00:29:03.570 --> 00:29:07.760
can be sure if you want to pick up something
that's a little more stable, you can be trusting

331
00:29:07.760 --> 00:29:11.700
in, that would be beta branch. Our partners
like Sencha and Vaadin will probably also

332
00:29:11.700 --> 00:29:18.700
be shipping code based off of beta branch
works, not the dev link. So you will have

333
00:29:19.830 --> 00:29:24.400
a much lower probability of breakage.
So here's where you will find us, there's

334
00:29:24.400 --> 00:29:28.840
going to be a new website, not up yet. It's
google.com/gwtsteering. You can read about

335
00:29:28.840 --> 00:29:33.950
all of the new rules, processes for contributing
to the GWT. And there's a GWT steering mailing

336
00:29:33.950 --> 00:29:36.820
list where you can read our meeting minutes
and our discussions on what's happening with

337
00:29:36.820 --> 00:29:40.520
the future of GWT and where it's going. So
you won't to wait ages for a blog post from

338
00:29:40.520 --> 00:29:45.000
us to see what's happening.
Now you can read it in real-time.

339
00:29:45.000 --> 00:29:49.450
So now I would like to ask Michael Mullany,
CEO of Sencha, to talk about all of the brave

340
00:29:49.450 --> 00:29:54.220
and exciting things that they're going to
do with GWT now and in the future.

341
00:29:54.220 --> 00:30:01.220
[ Applause ]
&gt;&gt;Michael Mullany: Awesome, it's great to

342
00:30:01.610 --> 00:30:07.240
be here. My name is Michael Mullany, I run
Sencha. Also joined by Darrell Meyer here

343
00:30:07.240 --> 00:30:13.159
in the audience who is a tech lead for Sencha
GXT at Sencha. Do you want to stand up, say

344
00:30:13.159 --> 00:30:15.540
hi?
&gt;&gt;&gt; Hi there.

345
00:30:15.540 --> 00:30:19.289
[ Applause ]
&gt;&gt;Michael Mullany: Okay. So before we start

346
00:30:19.289 --> 00:30:23.830
just a quick poll. How many people have developed
with GWT, since you're in the GWT session,

347
00:30:23.830 --> 00:30:30.830
right? Good. How many people have done an
app over 10,000 lines? 50,000 lines? 100,000

348
00:30:31.799 --> 00:30:35.740
lines? Half a million lines? Over a million
lines of code?

349
00:30:35.740 --> 00:30:41.110
Okay. That's a good distribution.
Well, one of the reasons that we are excited

350
00:30:41.110 --> 00:30:44.720
about GWT is because it does really help you
with very large applications and very large

351
00:30:44.720 --> 00:30:50.750
teams working together. We are a company that
has about 2 million worldwide developers in

352
00:30:50.750 --> 00:30:57.750
JavaScript and in Java. Across all sorts of
applications and all sorts of geographies.

353
00:30:58.080 --> 00:31:02.669
Of that, we have about 400,000 registered
community members on an incredibly active

354
00:31:02.669 --> 00:31:06.789
forum, so we're approaching kind of a million
posts on our forums over time.

355
00:31:06.789 --> 00:31:13.000
We're also expanding geographically pretty
rapidly. We started on the East Coast, moved

356
00:31:13.000 --> 00:31:18.000
to California, we just opened a Vancouver
office and an Amsterdam office. I'm not allowed

357
00:31:18.000 --> 00:31:21.960
to say we're hiring, so I won't say that.
[ Laughter ]

358
00:31:21.960 --> 00:31:28.960
&gt;&gt;Michael Mullany: We have a really amazing
array of applications built with Sencha Technologies

359
00:31:29.110 --> 00:31:35.360
with XGS, with Sencha Touch and with GWT.
We have everything from very large clinical

360
00:31:35.360 --> 00:31:42.360
trials management applications to CAs, admin
interfaces to Dell's warehouse management

361
00:31:42.620 --> 00:31:49.090
system, Best Buy's store system, all built
with Sencha technologies. We're primarily

362
00:31:49.090 --> 00:31:52.760
focused on business applications and very
large applications. That's why people use

363
00:31:52.760 --> 00:31:59.760
a very structured framework, like XGS or GWT.
And our goal is to take -- to really provide

364
00:32:00.549 --> 00:32:07.549
a complete productivity capability from design
time to development run, all the way to deployment.

365
00:32:07.960 --> 00:32:13.830
So Sencha architect, if you stopped by our
sandbox yesterday, is a drag and drop visual

366
00:32:13.830 --> 00:32:18.929
app builder for Sencha Touch and XGS so you
can get mobile and desktop on the same tool.

367
00:32:18.929 --> 00:32:25.929
We are also happy to be working on GWT designer
integration for GXT. Sencha (indiscernible)

368
00:32:26.950 --> 00:32:31.399
is focused on content animations. The build
side JavaScript frameworks for mobile and

369
00:32:31.399 --> 00:32:37.840
desktop and we have GXT for Java. Our deployment
is the newest thing that we have. It's cloud

370
00:32:37.840 --> 00:32:42.760
services that basically provide back end point
services like notifications, authentications,

371
00:32:42.760 --> 00:32:49.760
app messaging for mobile and desktop applications.
Our goal, and I think this is a common thing

372
00:32:50.000 --> 00:32:56.890
across developer bases today, is to as much
as possible provide a single HTML platform

373
00:32:56.890 --> 00:33:02.070
across all of these -- in the multi-device
world, right? So from phones to tablets to

374
00:33:02.070 --> 00:33:06.730
TVs to desktops, people are trying to create
application experiences that follow you from

375
00:33:06.730 --> 00:33:12.929
device to device, that reuse data, reuse models,
reuse business logic, controller logic as

376
00:33:12.929 --> 00:33:18.070
much as possible and that's really our design
point for Sencha Technologies, whether in

377
00:33:18.070 --> 00:33:25.070
JavaScript or in Java. XGS 4 is our JavaScript
framework, I won't spend much time on it.

378
00:33:25.270 --> 00:33:32.270
It basically provides structure for JavaScript
programmers who want to create large applications

379
00:33:32.950 --> 00:33:38.049
that are pixel perfect across browser. The
companion to that is that Sencha Touch, which

380
00:33:38.049 --> 00:33:41.409
is again a JavaScript framework for modern
mobile devices.

381
00:33:41.409 --> 00:33:45.789
We made a bet that smart phones were the only
phones that smarted and that turned out that

382
00:33:45.789 --> 00:33:51.490
was the case. We do an awful lot of low level
platform code switching abstraction to make

383
00:33:51.490 --> 00:33:57.179
the code base work across every device that
you can think of. I mentioned architect and

384
00:33:57.179 --> 00:34:04.179
IL. So on to Sencha GXT, which is a meet for
this room. GXT started about five years ago

385
00:34:06.330 --> 00:34:13.330
as the -- as Darrell's project and then Darrell
joined Sencha and merged with the Sencha team.

386
00:34:14.639 --> 00:34:18.419
It's basically fully featured, theme-able,
high performance widgets.

387
00:34:18.419 --> 00:34:25.419
It's a true GWT implementation, even more
so in GXT 3 than was the case in GXT 2. The

388
00:34:25.599 --> 00:34:32.159
big thing that GXT brings to the table is
full alignment with GWT conventions in GXT

389
00:34:32.159 --> 00:34:37.839
3. But really the thing that knocks you on
the head when you look at GXT is just the

390
00:34:37.839 --> 00:34:43.739
sheer volume and weight of UI widgets that
we bring to the table that you don't have

391
00:34:43.739 --> 00:34:49.589
to create yourself. There's -- there's literally
several hundred widgets of all types for all

392
00:34:49.589 --> 00:34:55.309
types of applications that work the way that
GXT or GWT expects.

393
00:34:55.309 --> 00:35:02.309
So GXT we just completed an enormous release,
our GXT release. It was just released about

394
00:35:02.769 --> 00:35:09.769
six or eight weeks ago. It basically takes
what we had built ourselves from our own custom

395
00:35:10.799 --> 00:35:17.799
conventions for things like event handling,
all into GWT 2.1 through 2.3 conventions.

396
00:35:19.539 --> 00:35:26.539
So, for example, we now use the cells to render
our trees and our grids and it's much, much

397
00:35:28.019 --> 00:35:32.219
faster and much, much lighter weight. We have
also moved to interface-based design, so for

398
00:35:32.219 --> 00:35:38.900
large applications it's much easier to create
mocks and to do testing. We've done --

399
00:35:38.900 --> 00:35:43.089
[ Applause ]
&gt;&gt;Michael Mullany: Thank you. Custom theming,

400
00:35:43.089 --> 00:35:46.940
so we now use the appearance pattern. We've
pulled out theming information out of the

401
00:35:46.940 --> 00:35:52.579
components and out of widgets, so it's much,
much easier to add raw HTML and CSS styling

402
00:35:52.579 --> 00:35:58.789
into your components without standing on your
head. We also have much improved model support.

403
00:35:58.789 --> 00:36:05.789
So in -- in GXT 2, you basically have to use
our custom data stores and that was the only

404
00:36:05.959 --> 00:36:11.259
way of getting data into an application again
without standing on your head. Now you can

405
00:36:11.259 --> 00:36:17.700
basically pull in -- pull in model data from
plain Java objects or for any beans that you

406
00:36:17.700 --> 00:36:24.700
have. Much more flexible. We also added full
UI binder support so you can declare your

407
00:36:24.700 --> 00:36:31.700
UI widgets with the UI binder XML conventions.
Another thing, strongly type layout engine.

408
00:36:33.380 --> 00:36:40.380
One of the big issues with our layouts in
GXT 2 was that you could basically have a

409
00:36:41.369 --> 00:36:46.339
lot of mismatches between a container type
and a layout. So now we've gone to strongly

410
00:36:46.339 --> 00:36:50.450
typed layouts, so it's much harder to make
a mistake and the compiler will catch it if

411
00:36:50.450 --> 00:36:56.650
you try and associate a layout with a container
that doesn't match it.

412
00:36:56.650 --> 00:37:03.650
And there's a lot of other things in the release,
but basically the whole theme was have a huge

413
00:37:04.549 --> 00:37:11.549
widget library and theming that works with
the new GWT conventions and I think we've

414
00:37:12.160 --> 00:37:16.109
been pretty successful with that. It's had
a great response and a great reception in

415
00:37:16.109 --> 00:37:23.109
the short weeks that we've released it. And
we're really happy to have released it. So

416
00:37:24.079 --> 00:37:30.390
we're actually incredibly excited about this
opening up of GWT with the steering committee.

417
00:37:30.390 --> 00:37:36.219
One of the main reasons that we ended it with
custom conventions in GXT 2 was the fact that

418
00:37:36.219 --> 00:37:41.339
we had no idea what was coming down the road
from the GWT team. So we had our own event

419
00:37:41.339 --> 00:37:45.349
system and I think it was literally a couple
of months afterwards there was a new event

420
00:37:45.349 --> 00:37:51.859
system from GWT that if we had known was coming,
we probably would have aligned with.

421
00:37:51.859 --> 00:37:56.819
So we're really happy to continue to promote
RIA for Java developers. We're really excited

422
00:37:56.819 --> 00:38:02.140
to be a member of the steering committee.
We would love to hear you, as a member of

423
00:38:02.140 --> 00:38:07.719
the steering committee, your ideas for how
we can improve GWT going forward. GWT we feel

424
00:38:07.719 --> 00:38:12.900
is the best way for organizations that are
committed to Java to build front end applications,

425
00:38:12.900 --> 00:38:18.390
particularly larger ones, larger teams, that's
what our customer base tells us why GWT is

426
00:38:18.390 --> 00:38:24.140
an awesome solution for them.
So what are we doing?

427
00:38:24.140 --> 00:38:28.130
We've just finished our GXT release, so it
was pretty huge. We're just getting around

428
00:38:28.130 --> 00:38:34.690
to planning the next release. But a couple
of things we're doing is making the appearance

429
00:38:34.690 --> 00:38:39.339
implementation that we have better with a
more flexible client bundle, we are doing

430
00:38:39.339 --> 00:38:43.349
some updates to UI binder, and I think some
of our changes have actually made it into

431
00:38:43.349 --> 00:38:50.349
the 2.5 code base. Theme building. You know,
it's actually a huge request across our product

432
00:38:51.469 --> 00:38:57.400
line, which is how can we do better visual
design without having to hack into SASS or

433
00:38:57.400 --> 00:39:04.130
hack into custom CSS. Better IDE support and
tooling. So there's some support coming in

434
00:39:04.130 --> 00:39:11.130
GWT designer for GXT 3. But our goal is to
make it easier and easier to create GXT applications

435
00:39:11.160 --> 00:39:18.160
using standard Eclipse and stand IDEs.
There's much, much more detail into what we've

436
00:39:19.539 --> 00:39:23.299
put into GXT 3, we're really proud of the
release. Probably the best place to learn

437
00:39:23.299 --> 00:39:30.299
more about it is on our blog, that's the link.
Just Sencha-GXT from our blog. Also Darrell

438
00:39:33.319 --> 00:39:36.940
and myself will be here hanging around after
the session if you want to talk to us more

439
00:39:36.940 --> 00:39:40.049
about GXT.
We're really excited about the directions,

440
00:39:40.049 --> 00:39:44.150
we're really honored that Google has asked
us to participate in the steering committee,

441
00:39:44.150 --> 00:39:50.779
and we hope to be able to serve the GWT community
as best we can in this new role. So thanks

442
00:39:50.779 --> 00:39:53.479
again.
[ Applause ]

443
00:39:53.479 --> 00:40:00.479
&gt;&gt;Ray Cromwell: I would like to ask Joonas
Lehtinen to come up. He's the C.E.O. of Vaadin,

444
00:40:03.219 --> 00:40:10.109
which he has a fabulous framework. He's going
to tell you all how Vaadin is going to contribute

445
00:40:10.109 --> 00:40:17.109
to GWT and what they're all about.
&gt;&gt;Joonas Lehtinen: Yeah, I'm really excited

446
00:40:20.650 --> 00:40:27.039
to be here and see where GWT is going at the
moment. Let's first kind of give a brief intro

447
00:40:27.039 --> 00:40:34.039
to (indiscernible) how we are using GWT and
where that relationship is going in the future.

448
00:40:34.539 --> 00:40:41.539
So you can say that Vaadin is a Java frame
building rich web applications, and as that

449
00:40:41.660 --> 00:40:46.380
it's quite like GWT, but at the same time
it's different from GWT; in Vaadin you're

450
00:40:46.380 --> 00:40:51.969
doing everything from the server side. It's
basically based on three different items.

451
00:40:51.969 --> 00:40:58.709
So first we want to have amazing components,
both as URL components as well as data sources

452
00:40:58.709 --> 00:41:05.329
and data (indiscernible) themes and so on.
So we have really nice set of widgets in the

453
00:41:05.329 --> 00:41:12.329
core product, hundred or so widgets, you can
go to vaadin.com/demo to see that out. There

454
00:41:13.249 --> 00:41:19.709
are also widgets for mobile, Android, iPhone,
iPad. What I'm mostly excited about is the

455
00:41:19.709 --> 00:41:23.549
community around Vaadin, so there are hundreds
of plug-ins in for Vaadin.

456
00:41:23.549 --> 00:41:30.549
Those plug-ins might be widget outbreaks or
integrations or themes or tools. Second idea

457
00:41:31.099 --> 00:41:37.829
is that they're combining server side RIA
together with (inaudible) so what is this

458
00:41:37.829 --> 00:41:43.949
search? Look at this, so basically you have
five layers in your (inaudible), so you have

459
00:41:43.949 --> 00:41:49.019
the back end layer and the Web server. You
have communications. And you're going to have

460
00:41:49.019 --> 00:41:55.489
Java to Java compiler, and then Java to Java
within Web browser, so if you look at GWT,

461
00:41:55.489 --> 00:42:00.150
it looks like this, so this
(indiscernible) four layers, and optionally

462
00:42:00.150 --> 00:42:06.489
you can do on JavaScript on top of that. Vaadin
is quite different. You are only writing two

463
00:42:06.489 --> 00:42:11.209
layers. You're only writing code on the server
side, so everything on the (indiscernible)

464
00:42:11.209 --> 00:42:16.559
layer and on the browser side is total automatic.
You don't have to write any line of code for

465
00:42:16.559 --> 00:42:22.160
those. And if you're converting this to Java
frameworks, I like XJS, it's probably the

466
00:42:22.160 --> 00:42:28.549
best one out there at the moment. So also
in here you're writing four layers, and this

467
00:42:28.549 --> 00:42:35.440
is the core of the (indiscernible) you can
kind of skip half -- half of your program

468
00:42:35.440 --> 00:42:40.229
when you're writing in Vaadin. It actually
works like this. So all of the components

469
00:42:40.229 --> 00:42:45.949
have two parts. You have server side component,
it's basically API that your program is against,

470
00:42:45.949 --> 00:42:52.789
so whole UI is on the server side. On the
client side, you are rendering and event handling,

471
00:42:52.789 --> 00:42:59.789
and that part is totally done with Web toolkit.
(indiscernible) Third thing, Java, basically

472
00:43:02.630 --> 00:43:08.369
everything in Vaadin is (indiscernible) object,
so all of the components are plain ole objects

473
00:43:08.369 --> 00:43:15.369
just running on the server side in the real
JVM. (indiscernible) you can write UI in any

474
00:43:15.380 --> 00:43:22.380
language out there. You can use (indiscernible)
what have you. You can use any tooling, any

475
00:43:22.519 --> 00:43:29.519
IDs. You can deploy this to almost any server
out there, most of the clouds, and at the

476
00:43:30.979 --> 00:43:33.559
end of the day, it's just one file, so you
can use that in any web browser. Just drop

477
00:43:33.559 --> 00:43:40.559
that (indiscernible) into a project, you can
start adding UIs with that. It's (indiscernible)

478
00:43:41.130 --> 00:43:46.989
license so it should be the same license as
GWT. So what's the relation between Vaadin

479
00:43:46.989 --> 00:43:51.319
and GWT? Let's look at the history. This is
actually quite an old project. We started

480
00:43:51.319 --> 00:43:58.319
in 2001 already. So we've had 11 years of
history behind us. And then we kind of started

481
00:43:58.369 --> 00:44:03.869
to have huge number of JavaScript code lines
on the client side to render all of those

482
00:44:03.869 --> 00:44:10.729
components, and it turned out to be not that
nice, so fortunately GWT came along and we

483
00:44:10.729 --> 00:44:17.459
threw all of that away and we wrote everything
in GWT. (indiscernible) It was a perfect fit

484
00:44:17.459 --> 00:44:24.199
to Vaadin. Both are written in Java. Both
(indiscernible) oriented and both recorded

485
00:44:24.199 --> 00:44:29.739
across browsers, something very important
for us. So I could say that this has been

486
00:44:29.739 --> 00:44:34.940
kind of like standing on the shoulder of a
giant, this giant being Google and (indiscernible)

487
00:44:34.940 --> 00:44:40.719
you have been doing a really, really excellent
job, and it has been helping to write quite

488
00:44:40.719 --> 00:44:46.569
a bit, so we haven't had to deal with all
the browser differences ourself. So you can

489
00:44:46.569 --> 00:44:49.920
see this as
our engagement period of five years for us,

490
00:44:49.920 --> 00:44:56.829
and this has been strange engagement because
after five years, we are still in love with

491
00:44:56.829 --> 00:45:02.880
GWT. I truly think that GWT is the best way
of building Web scripts, Web application on

492
00:45:02.880 --> 00:45:07.979
the client side with Java. So if you're building
a huge application, there is -- that's the

493
00:45:07.979 --> 00:45:13.839
kind of number one way of doing that on the
client side. But the relationship have been

494
00:45:13.839 --> 00:45:19.699
kind of unidirectional. We have been getting
a lot from GWT. And we haven't been giving

495
00:45:19.699 --> 00:45:25.229
too much back. And I think this is the same
for many of us, so we have been using GWT,

496
00:45:25.229 --> 00:45:31.619
we haven't been giving too much back to GWT.
And I'm really thrilled to see this new development

497
00:45:31.619 --> 00:45:38.319
with the steering committee and more open
process for GWT, so we can come back to GWT,

498
00:45:38.319 --> 00:45:45.319
and I hope in the end this grows to be something
much, much, much bigger than it is today.

499
00:45:45.949 --> 00:45:51.599
So where do we go next?
You have been kind of jumping in five year

500
00:45:51.599 --> 00:45:56.349
leaps. What's the next leap for us?
So I'm really thrilled to announce the new

501
00:45:56.349 --> 00:46:03.349
study for Vaadin. We are adding GWT to Vaadin.
So what does it mean?

502
00:46:03.539 --> 00:46:08.739
At the moment we are kind of using GWT as
a dependents. We are using GWT as a rendering

503
00:46:08.739 --> 00:46:14.019
agent behind the scenes in Vaadin. What they
are doing, they are moving inside Vaadin,

504
00:46:14.019 --> 00:46:17.869
so they're taking copy, putting that inside
Vaadin and maintaining ourselves

505
00:46:17.869 --> 00:46:24.869
(indiscernible) and we, of course, are contributing
all of those back to GWT. This also means

506
00:46:28.249 --> 00:46:35.249
that Vaadin will be combined with GWT. So
for two days project you can use Vaadin for

507
00:46:35.709 --> 00:46:39.660
that, and as a win developer, a new customer
what's more in there?

508
00:46:39.660 --> 00:46:46.209
There are a couple of things. But first, there
are actually two sides of Vaadin. So we have

509
00:46:46.209 --> 00:46:50.989
two program modules. We have server side programming
and we have client side programming. Server

510
00:46:50.989 --> 00:46:55.920
side being optimized for the productivity
and the client side being optimized for the

511
00:46:55.920 --> 00:47:02.920
controlling. So you get both around 50 reduction
of code lines when you're programming in the

512
00:47:04.140 --> 00:47:10.089
server side as well as all of the wonderful
controller on the platform on the client side.

513
00:47:10.089 --> 00:47:14.999
So you can see that from the developer point
of view we are adding

514
00:47:14.999 --> 00:47:21.999
(indiscernible) components, tools, themes,
but also there's one more theme. (indiscernible)

515
00:47:22.880 --> 00:47:29.249
support, we are serving companies who are
using our technology to build applications,

516
00:47:29.249 --> 00:47:35.170
and now that we are merging GWT in the Vaadin
directly, we are starting the support with

517
00:47:35.170 --> 00:47:42.170
Vaadin. If (indiscernible) we are a good project
for you. This is going to be available pretty

518
00:47:45.949 --> 00:47:52.949
soon now. So we are targeting for the Java
1 release with Vaadin 7 that will be including

519
00:47:53.589 --> 00:48:00.589
GWT, and it's available as a developer preview
today. This is an early alpha release, but

520
00:48:01.019 --> 00:48:07.559
it's there for you to try out. There is a
ton of more things to read about how Vaadin

521
00:48:07.559 --> 00:48:14.559
would kind of combine and what that old aspect,
(indiscernible) and read more about this.

522
00:48:15.439 --> 00:48:15.979
Thank you.
[ Applause ]

523
00:48:15.979 --> 00:48:22.979
&gt;&gt; Ray Cromwell: Let me switch back to my
slides. Okay. So there were a couple of other

524
00:48:35.599 --> 00:48:38.549
steering committee members who couldn't be
here, I don't want to spend too much time.

525
00:48:38.549 --> 00:48:45.509
But Christian Goudreau has developed a wonderful
library called GWT, and he is on the steering

526
00:48:45.509 --> 00:48:49.439
committee as well, and he has some wonderful
things to say, and I'll just leave that up

527
00:48:49.439 --> 00:48:55.689
there for a second for posterity. As well
as Daniel Kurka who has done an incredible

528
00:48:55.689 --> 00:48:59.839
mobile library for web property (indiscernible)
I encourage you to go to n-gwt.com, check

529
00:48:59.839 --> 00:49:04.069
it out. And he is also on the steering committee.
I'm sure he's going to be focused on making

530
00:49:04.069 --> 00:49:11.069
GWT better for mobile. Finally, we are hiring.
Believe it or not. So if you are a unemployed

531
00:49:14.729 --> 00:49:18.779
GWT programmer and you're looking to join
Google, and work on (indiscernible) please

532
00:49:18.779 --> 00:49:25.779
send your resume to Google.com/jobs. And now
I will turn the microphone over to you. You're

533
00:49:26.779 --> 00:49:33.779
free to ask questions.
[ Applause ]

534
00:49:35.369 --> 00:49:42.369
&gt;&gt;&gt; Hi. So my first question is about validation.
You said you've implemented the 303 at 2010,

535
00:49:42.959 --> 00:49:49.959
but as for now, our classes in package validation
are marked as experimental, and they say do

536
00:49:52.039 --> 00:49:56.839
not use them in production.
&gt;&gt;Ray Cromwell: Yes. I'll answer very quickly.

537
00:49:56.839 --> 00:50:02.609
We have recently hired someone to specifically
work on the support in GWT and to make it

538
00:50:02.609 --> 00:50:09.609
100% compatible with the 303 TCK test compatibility
kit. So if you look at the event logs right

539
00:50:09.999 --> 00:50:14.579
now, you'll see a new guy who is committing
-- or actually one by one he's fixing the

540
00:50:14.579 --> 00:50:19.380
TCK test, and once they pass the TCK, then
we'll remove the experimental tag.

541
00:50:19.380 --> 00:50:26.140
&gt;&gt;&gt; Okay, thanks. When will 2.5 be released?
&gt;&gt;Ray Cromwell: RC1 is out already. You can

542
00:50:26.140 --> 00:50:31.559
download it now. Probably in maybe a week
or two, the final version, after we get some

543
00:50:31.559 --> 00:50:34.579
bug reports back and smoke test it more. Okay.
Thank you.

544
00:50:34.579 --> 00:50:39.579
I'll go over to this one.
&gt;&gt;&gt; Hi, I'm a GIS developer, I use Google

545
00:50:39.579 --> 00:50:46.579
maps to do -- in my projects. Most of -- I
hate JavaScript. Most of the time I'm looking

546
00:50:47.449 --> 00:50:54.449
for a GWT wrappers around Google maps API.
Are you guys coordinating between the two

547
00:50:57.269 --> 00:51:03.719
teams to always have a GWT library for Google
maps once a new version of Google maps API

548
00:51:03.719 --> 00:51:06.469
comes out?
&gt;&gt;Ray Cromwell: Yeah, a good question. So,

549
00:51:06.469 --> 00:51:10.539
yes, in the past, we have done that, I believe
recently they may have released an update

550
00:51:10.539 --> 00:51:17.539
to the Google API libraries for GWT which
included some support I think for 3.0. I don't

551
00:51:17.749 --> 00:51:24.589
know what state it's in. Unfortunately, the
person who is working on it, Eric Zundel,

552
00:51:24.589 --> 00:51:30.329
left to go to another company, but we will
try to figure out a solution for that. It

553
00:51:30.329 --> 00:51:33.969
may be that the steering committee takes it
over, like for example, maybe Sencha with

554
00:51:33.969 --> 00:51:38.999
some maps, widgets in there, and they can
basically take on the task of ensuring it's

555
00:51:38.999 --> 00:51:43.299
always up to date. But we'll find out. We
are definitely concerned about it, because

556
00:51:43.299 --> 00:51:47.649
maps are actually very important.
&gt;&gt;&gt; Thank you.

557
00:51:47.649 --> 00:51:54.649
&gt;&gt;&gt; Hello. (saying name). I'm a new developer
and our team is mostly -- we are mostly using

558
00:51:54.979 --> 00:52:00.989
intelliJ to develop and to debug our applications,
and the question is with the new super dev

559
00:52:00.989 --> 00:52:07.289
mode, will we be able to use our favorite
IDE to debug applications, or the only way

560
00:52:07.289 --> 00:52:10.630
to do it will be the browser?
&gt;&gt;Ray Cromwell: Right. Good question. As you

561
00:52:10.630 --> 00:52:17.630
can see. I am a rabid intelliJ user, I love
intelliJ, and I constantly rag on people at

562
00:52:17.930 --> 00:52:24.729
Google that use eclipse. The answer is that
we are trying to talk to JetBrains, they've

563
00:52:24.729 --> 00:52:29.390
done a lot of good support in the past to
basically get support for source maps within

564
00:52:29.390 --> 00:52:34.869
intelliJ, and based on the outcome of those
talks, if they're willing to do it, if source

565
00:52:34.869 --> 00:52:40.869
maps are implemented or if we had a plug-in
to do it for intelliJ, intelliJ can already

566
00:52:40.869 --> 00:52:44.329
attach to JavaScript debuggers, so essentially
instead of attaching it to JVM, you attach

567
00:52:44.329 --> 00:52:48.400
it to the Chrome debugger, and all it has
to do is use the map to actually let you match

568
00:52:48.400 --> 00:52:55.249
it back into the editor, breakpoint intelliJ
to control Chrome. It definitely is a possibility

569
00:52:55.249 --> 00:52:58.539
to make that work, and we need to talk to
the right people and make it happen.

570
00:52:58.539 --> 00:53:01.989
&gt;&gt;&gt; All right. Thanks.
&gt;&gt;Ray Cromwell: Let's go over there.

571
00:53:01.989 --> 00:53:06.869
&gt;&gt;&gt; Hi, I have two questions, actually. First
about the steering committee. I'm very happy

572
00:53:06.869 --> 00:53:13.869
to see that Google is accepting more external
people, but I'm also a little bit concerned

573
00:53:15.359 --> 00:53:22.359
because there are a lot of companies that
have large libraries on the steering committee.

574
00:53:24.019 --> 00:53:30.650
How do you guaranty that -- these companies
have their own agenda. How do you guaranty

575
00:53:30.650 --> 00:53:37.650
that GWT doesn't become bloated with their
features that --

576
00:53:37.739 --> 00:53:43.930
&gt;&gt;Ray Cromwell: I can answer that. First thing
is that when we initially nominated them,

577
00:53:43.930 --> 00:53:47.299
we told them that we realize that they have
commercial interests, but we would like steering

578
00:53:47.299 --> 00:53:53.119
committee members to also kind of wear the
GWT hat. So, for example, we're on the GCC

579
00:53:53.119 --> 00:53:58.359
committee, I think, you know, Google participated
with GCC development, and of course people

580
00:53:58.359 --> 00:54:02.559
on the GCC steering committee, they're all
commercial companies or different chip, you

581
00:54:02.559 --> 00:54:06.539
know, like AMD or Intel or whatever, so they
have interest, but the people on the committee

582
00:54:06.539 --> 00:54:12.199
usually do a pretty good job of wearing their
GCC hats, and we expect that the GWT community

583
00:54:12.199 --> 00:54:17.729
members kind of wear their GWT hats so that
they have things that are competitive, they're

584
00:54:17.729 --> 00:54:22.689
probably going to keep them anyway, because
that's their value, but if there's new core

585
00:54:22.689 --> 00:54:28.619
features they need, like new event handlers
or new support for low level operations or

586
00:54:28.619 --> 00:54:33.359
there's bug fixes that they have been forking
off privately in the past to fix, now they

587
00:54:33.359 --> 00:54:37.709
will contribute them back. The second thing
is that the committee is run by consensus,

588
00:54:37.709 --> 00:54:43.160
so if anyone objects, basically, to a proposal,
it doesn't happen. So we basically all have

589
00:54:43.160 --> 00:54:47.549
to agree, and some people on the committee
will be concerned about bloat, and if, you

590
00:54:47.549 --> 00:54:50.839
know, someone wants to drop in like a two
megabyte JavaScript library, there is going

591
00:54:50.839 --> 00:54:57.109
to be some objections. Is that --
&gt;&gt;&gt; I have a question about the example you

592
00:54:57.109 --> 00:55:03.979
showed with injecting Java code inside the
HTML page, so you type window from lower case

593
00:55:03.979 --> 00:55:10.170
W, it's not class window.
&gt;&gt;Ray Cromwell: That's right. So -- yeah,

594
00:55:10.170 --> 00:55:17.170
so the intelliJ is actually a really fabulous
IDE, (indiscernible) so I told intelliJ to

595
00:55:17.299 --> 00:55:22.929
assume that there's a line in the code that
looks like this, window window is equal to

596
00:55:22.929 --> 00:55:29.929
browser dot get window, and so that is like
implied that's there, and what happens is

597
00:55:30.429 --> 00:55:35.589
the filter, when it's extracting that code
and writing it to disc, it inserts that line,

598
00:55:35.589 --> 00:55:40.709
so the IDE doesn't complain that that window
variable is missing because I told intelliJ

599
00:55:40.709 --> 00:55:44.259
to assume that that's injected. So that is
a feature of intelliJ, so if you're an eclipse

600
00:55:44.259 --> 00:55:48.439
user, you might want to check that out.
[ Laughter ]

601
00:55:48.439 --> 00:55:55.439
&gt;&gt;Ray Cromwell: Okay. Let me go to him first.
&gt;&gt;&gt; So another question I wanted to ask is

602
00:55:56.109 --> 00:56:03.109
about kind of release for GWT, what are the
next versions when they will be out and what

603
00:56:03.339 --> 00:56:07.759
features are planned so probably this question
must go to your committee and what will be

604
00:56:07.759 --> 00:56:11.329
the process? Who will decide?
&gt;&gt;Ray Cromwell: Right. Excellent question.

605
00:56:11.329 --> 00:56:18.329
And, yes, I should have basically made it
clear that 2.5 will actually be the last official

606
00:56:18.539 --> 00:56:24.269
Google controlled release. Every new release,
GWT 2.6 or GWT 3.0, will now be basically

607
00:56:24.269 --> 00:56:29.229
a steering committee release, and so the road
map, we haven't -- we've just started our

608
00:56:29.229 --> 00:56:34.779
first two or three steering committee meetings.
We got basic IP issues, and things like that.

609
00:56:34.779 --> 00:56:40.640
We're getting to starting to find a road map,
where are we going to go, go to GitHub or

610
00:56:40.640 --> 00:56:46.099
somewhere else, there's lots of arguments
in the base over that kind of stuff (indiscernible)

611
00:56:46.099 --> 00:56:50.519
and so one thing we're going to discuss is
what's going to go into the next version and

612
00:56:50.519 --> 00:56:55.719
when is it going to be released. So if you
watch GWT steering -- GWT.steering at Google.com,

613
00:56:55.719 --> 00:57:02.719
you can follow along and probably get some
inkling as to when it's going to happen. Probably

614
00:57:03.609 --> 00:57:06.229
sooner.
Okay. Any last questions?

615
00:57:06.229 --> 00:57:09.829
All right. Well, thanks for coming, guys,
and I hope you continue to join GWT.

WEBVTT

1
00:00:01.010 --> 00:00:01.859
&gt;&gt;Eric Bidelman: All right. Are we ready?
Android is processing my photo. Hold on.

2
00:00:01.859 --> 00:00:04.540
All right. Guys, I really want to thank you
for coming to my session. This is The Web

3
00:00:04.540 --> 00:00:07.410
Can Do That, in case you've misplaced what
session you should be in.

4
00:00:07.410 --> 00:00:11.460
Apparently none of you want to get free Android
hardware downstairs, so I do really appreciate

5
00:00:11.460 --> 00:00:17.820
your time for the next hour.
This is going to be adventures into HTML5.

6
00:00:17.820 --> 00:00:20.730
Just so you know who you're talking to up
here, my name is Eric Bidelman and I work

7
00:00:20.730 --> 00:00:27.730
on the Google Chrome team. I'm an advocate
for Chrome team, I teach developers HTML5,

8
00:00:28.180 --> 00:00:33.159
help them use it by writing tutorials. Of
course, if you want to contact me there's

9
00:00:33.159 --> 00:00:37.600
Google+, there's the Twitter and there's also
a blog that I don't write to very often, but

10
00:00:37.600 --> 00:00:43.600
it does have some interesting things I think
on it. So that's who is up on stage.

11
00:00:43.600 --> 00:00:50.530
I get this a lot. People are really skeptical
about HTML5 still and so they don't know what's

12
00:00:50.530 --> 00:00:54.839
possible. And so part of my job is to come
up here and teach you guys and you too, the

13
00:00:54.839 --> 00:00:59.909
folks at home, what is possible on the Web.
So today's talk is that the agenda is there's

14
00:00:59.909 --> 00:01:04.140
going to be no agenda whatsoever.
So I'm going to sort of highlight really cool,

15
00:01:04.140 --> 00:01:08.190
interesting use cases that HTML5 can now solve
that you probably didn't know were possible

16
00:01:08.190 --> 00:01:12.230
on the Web today.
Things that you probably need to build a real

17
00:01:12.230 --> 00:01:18.940
world application on the Web.
So a little bit of convention about this slide

18
00:01:18.940 --> 00:01:22.050
deck. This is a living, breathing slide deck.
I'm doing something a little bit different

19
00:01:22.050 --> 00:01:26.620
with this. You will see in the top right corner
there's a legend and there's a radar, and

20
00:01:26.620 --> 00:01:30.340
that signifies that stuff is on the radar.
Keep it on your radar, it's still pretty new,

21
00:01:30.340 --> 00:01:36.370
it's changing quickly. I can actually make
CORs requests, cross origin resource requests,

22
00:01:36.370 --> 00:01:40.440
[indiscernible] XHRs, to the WebKit issue
tractor, which is really nice. So as soon

23
00:01:40.440 --> 00:01:44.440
as a bug is fixed, I know it's fixed, I can
mark them, denote it with this little bug

24
00:01:44.440 --> 00:01:48.820
guy as it gets crossed off. So you kind of
know when you go back to this slide at greater@html5.com.

25
00:01:48.820 --> 00:01:55.580
It's not up right now. I'll post it after
the slides. But there are spec links and you

26
00:01:55.580 --> 00:02:01.159
know the stuff is up to date.
Okay. So without further adieu let's jump

27
00:02:01.159 --> 00:02:05.550
into the number one main awesome, sweet thing
that the Web can do. The first is that we

28
00:02:05.550 --> 00:02:10.369
have CSS for Web apps. And you're probably
like whoa -- yeah, Mythbuster style. You're

29
00:02:10.369 --> 00:02:14.870
probably like, whoa, Eric, we've had CSS for
a long time. What's up with that? Well, we

30
00:02:14.870 --> 00:02:18.959
have. We had a lot of great stuff in CSS.
We have floats and absolute positioning and

31
00:02:18.959 --> 00:02:23.269
tables and all this stuff kind of working
together. The real problem with that is it

32
00:02:23.269 --> 00:02:27.950
was all designed in times of websites, not
Web apps. So if you want to do complex Web

33
00:02:27.950 --> 00:02:34.870
layout it's really, really hard until now.
So I'm calling 2012 sort of the rise of CSS

34
00:02:34.870 --> 00:02:39.180
for Web apps, and that's because the working
groups have proposed a number, a slew of new

35
00:02:39.180 --> 00:02:43.909
stuff that we can play with eventually as
Web developers. Regions for things like flowing

36
00:02:43.909 --> 00:02:48.959
and magazine type layout and design. Flexbox
layout, which I will talk about, it's one

37
00:02:48.959 --> 00:02:53.239
of my particular favorites, being able to
easily position things on the page in a flexible

38
00:02:53.239 --> 00:02:56.629
manner.
Grid layouts and hierarchies in ASCII and

39
00:02:56.629 --> 00:03:00.749
CSS so you can define where things show up
on a page. It makes sense. If you're building

40
00:03:00.749 --> 00:03:06.739
something on top of CSS you need engines and
different mechanisms to do that for Web apps.

41
00:03:06.739 --> 00:03:09.769
And then there's the bells and whistles, there's
the hierarchies, there's the folders and effects

42
00:03:09.769 --> 00:03:13.090
and other really cool stuff coming down the
pipeline.

43
00:03:13.090 --> 00:03:17.540
CSS variables. If you guys attended the Web
component session earlier, that stuff is finally

44
00:03:17.540 --> 00:03:22.719
coming to CSS. You can finally use variables
in CSS. It's not that exciting, but it's super

45
00:03:22.719 --> 00:03:28.930
exciting as a Web developer that you don't
have to use a Web processor anymore.

46
00:03:28.930 --> 00:03:34.319
So why am I picking on Flexbox out of all
this new stuff? Flexbox is really great for

47
00:03:34.319 --> 00:03:39.079
Web layout design and it's really going to
solve and is solving the sort of common use

48
00:03:39.079 --> 00:03:44.370
cases of a Web app. So that Holy Grail layout,
that header, that footer, that three-column

49
00:03:44.370 --> 00:03:50.230
tiered system, very hard to do with, notoriously
hard to do with CSS today. Very easy with

50
00:03:50.230 --> 00:03:54.419
Flexbox.
And so the way Flexbox works is that there's

51
00:03:54.419 --> 00:03:59.579
a new display property. So I can tell a container
to be a Flexbox container and I'm doing also

52
00:03:59.579 --> 00:04:03.309
something in this slide deck, nobody is going
to catch me on vendor prefixes. I'm using

53
00:04:03.309 --> 00:04:09.749
sort of a compile type syntax, a mix-in syntax
to denote that any time you see a + for CSS

54
00:04:09.749 --> 00:04:14.919
that means vendor prefixes are involved.
I can tell, for instance, this right container

55
00:04:14.919 --> 00:04:21.260
to be a Flexbox container with display vendor
prefix flex. And we can do things like center

56
00:04:21.260 --> 00:04:25.360
content horizontally and vertically super
easy. With three lines of CSS we can do this

57
00:04:25.360 --> 00:04:30.250
now. We don't have to use negative margins
or JavaScript. So along my main access here

58
00:04:30.250 --> 00:04:35.100
-- this is a little bit of Flexbox terminology.
In my cross origin access, I can justify content

59
00:04:35.100 --> 00:04:39.750
to the center, I can flex it to the start,
I can say everything be adjusted far to the

60
00:04:39.750 --> 00:04:44.310
right. And I can also align those items in
that cross access, so I can align items to

61
00:04:44.310 --> 00:04:49.150
the center, I can allow them to the bottom.
I can do things like stretch to take up the

62
00:04:49.150 --> 00:04:53.340
available content of your parent container.
Very, very handy with layout.

63
00:04:53.340 --> 00:04:57.720
And I can do also things like distribute yourself
evenly in a container. Take up the available

64
00:04:57.720 --> 00:05:04.720
space and put an even distribution of white
space around yourself.

65
00:05:06.030 --> 00:05:09.820
Another cool thing about Flexbox is that it
completely takes away the sort of mapping

66
00:05:09.820 --> 00:05:14.030
of your source to how things are rendered
on the page. So typically what happens is

67
00:05:14.030 --> 00:05:19.460
that you define your A, your B and your C
div. These are just three divs inside of this

68
00:05:19.460 --> 00:05:23.170
flex container. And that's how I've weighted
out my markups, right? I have an A, B and

69
00:05:23.170 --> 00:05:27.250
C in my markup. But maybe I don't want to
render A, B and C in that order, and I can

70
00:05:27.250 --> 00:05:31.780
do that through different properties of Flexbox.
I have this flex direction property, so again

71
00:05:31.780 --> 00:05:37.000
vendor prefix. So right now we're flexing
in a row, but I can choose to change the order

72
00:05:37.000 --> 00:05:42.500
of that row. I can reverse the order of the
row using row reverse. I can tell these items

73
00:05:42.500 --> 00:05:48.470
to be in a column so A, B and C are not in
a row now, but they can be rendered in a column.

74
00:05:48.470 --> 00:05:52.180
And then using the order property I can sort
of change the order depending on what value

75
00:05:52.180 --> 00:05:56.280
I set here. So by default these are all the
same order as they're laid out in markup,

76
00:05:56.280 --> 00:06:02.220
but I can tell the second div to come before
A. So this is independent of how I've got

77
00:06:02.220 --> 00:06:06.230
my markup out, just rendering it different
next to the page using the orientation and

78
00:06:06.230 --> 00:06:12.210
direction properties of Flexbox.
I can also tell it to come after everything

79
00:06:12.210 --> 00:06:15.550
as well.
But another really cool thing that Flexbox

80
00:06:15.550 --> 00:06:20.380
solves is sort of this type of use case where
you have the same height columns. So in order

81
00:06:20.380 --> 00:06:24.780
to do same height columns -- this is a great
example of floating three divs across the

82
00:06:24.780 --> 00:06:29.030
page. But if I want to do something like make
these even, right, I have a really awesome

83
00:06:29.030 --> 00:06:34.030
UI, I can do that with a little bit of JavaScript
where I can set these and get the computed

84
00:06:34.030 --> 00:06:38.340
style of the content and know exactly how
tall they should be.

85
00:06:38.340 --> 00:06:43.620
But what happens if my UI is being rendered
through JSON, I'm porting in an RSS feed or

86
00:06:43.620 --> 00:06:49.530
something, and -- my content is dynamic. As
soon as that happens, I put a little bit more

87
00:06:49.530 --> 00:06:53.000
content, my columns are now out of sync, I
have to recalculate, I have to touch JavaScript,

88
00:06:53.000 --> 00:06:58.970
I have to set properties in CSS. It just feels
super, super icky.

89
00:06:58.970 --> 00:07:04.050
So the way Flexbox solves that is through
its bread and butter, flexibility. So it's

90
00:07:04.050 --> 00:07:08.680
really nice. I can tell things to take up
the available amount of the parent container.

91
00:07:08.680 --> 00:07:13.640
In this case all of these items, A, B, and
C, are equally distributed in the Flexbox

92
00:07:13.640 --> 00:07:17.950
container. But I don't have to do that. I
can tell the second difference to be two times

93
00:07:17.950 --> 00:07:22.740
greater, grow to be two times as big as your
siblings or three times as big or four times

94
00:07:22.740 --> 00:07:26.580
as big.
I can also tell it to shrink. So A and C will

95
00:07:26.580 --> 00:07:31.610
be equal size with a flex property of one
and then B is going to be a negative flex

96
00:07:31.610 --> 00:07:34.990
property.
So it's really handy when it comes to that

97
00:07:34.990 --> 00:07:38.150
Holy Grail layout.
So I want to show you an example of this.

98
00:07:38.150 --> 00:07:43.140
This is a live page. Think of this as that
Holy Grail layout, that header, footer, that

99
00:07:43.140 --> 00:07:46.120
three column in the center.
The first thing you will notice is this whole

100
00:07:46.120 --> 00:07:50.900
thing, maybe not the resolution, but the whole
thing is centered vertically and horizontally

101
00:07:50.900 --> 00:07:55.190
in my page with three lines of CSS, right,
the alignment and justification there.

102
00:07:55.190 --> 00:08:01.250
Next thing to happen on this page is a really
sweet navigation bar. You will notice that

103
00:08:01.250 --> 00:08:05.940
that last button up there has more content
than the rest of my buttons, but that's okay.

104
00:08:05.940 --> 00:08:10.530
We can tell the Flexbox items to grow and
shrink. So all my buttons are exactly the

105
00:08:10.530 --> 00:08:15.760
same size. I didn't set anything in CSS, particularly
the widths of those buttons, it's just flexing

106
00:08:15.760 --> 00:08:20.740
to take up the available space of that complete
Web app. But if I add more, all of these buttons

107
00:08:20.740 --> 00:08:24.620
will continue to flex and be of equal weight
and size and distributed evenly. It's great

108
00:08:24.620 --> 00:08:31.410
for navigation, it's great for UI.
We can also use some CSS transitions on the

109
00:08:31.410 --> 00:08:36.010
flex property so I can do really cool UI flex
here, little zippies here, so these are just

110
00:08:36.010 --> 00:08:42.190
Flexbox items within a Flexbox container with
the column orientation. And with the CSS hover

111
00:08:42.190 --> 00:08:45.450
I can tell them to grow with the flex property
to grow to be two times or three times greater

112
00:08:45.450 --> 00:08:50.000
than rest.
My center content in the center of the article

113
00:08:50.000 --> 00:08:54.060
content I can use transforms to do things
with vertical alignment there on the side,

114
00:08:54.060 --> 00:08:58.950
my navigation on my side.
If I wanted to I could combine the media queries,

115
00:08:58.950 --> 00:09:03.430
and you remember I could independently order
my source and how things are presented using

116
00:09:03.430 --> 00:09:09.270
that order property. So that combined media
source may be in my mobile UI. I have something

117
00:09:09.270 --> 00:09:14.110
that is different. If I scale this down to
mobile UI, notice in the case of my desktop,

118
00:09:14.110 --> 00:09:18.310
the article is in the center. That's my main
content, that's what users should be seeing,

119
00:09:18.310 --> 00:09:22.760
but when I scale on to mobile maybe the articles
should come before that navigation element,

120
00:09:22.760 --> 00:09:27.450
that zippy on the side. So I can do that with
that ordering orientation property, very handy

121
00:09:27.450 --> 00:09:34.450
when combined with media queries.
So that's CSS Flexbox. And that's the new

122
00:09:38.460 --> 00:09:42.650
one. There is an older Flexbox if you've been
following this stuff closely.

123
00:09:42.650 --> 00:09:45.540
That's actually available in a number of browsers
right now. So WebKit, Chrome.

124
00:09:45.540 --> 00:09:50.590
IE 10 will have the new Flexbox as well. So
you can expect to use this relatively soon.

125
00:09:50.590 --> 00:09:57.590
All right. Number two amazing thing is dynamic
CSS. By dynamic CSS I actually mean -- that

126
00:09:58.050 --> 00:10:01.970
was confirmed too.
I actually mean the calc function. If you

127
00:10:01.970 --> 00:10:05.930
attended the session earlier today on Web
components, they have CSS variables coming.

128
00:10:05.930 --> 00:10:10.589
But we actually have the ability to do similar
things now with the calc function. It's been

129
00:10:10.589 --> 00:10:14.529
around in Firefox for a long time, just came
to WebKit very recently.

130
00:10:14.529 --> 00:10:19.870
What I have here is a live example of something
that's in the Flexbox specification. So I

131
00:10:19.870 --> 00:10:24.620
basically have a bunch of divs. I have a div
within a div within a div, and I put a border

132
00:10:24.620 --> 00:10:29.800
radius of 50% on this div, so that's what's
creating the circles.

133
00:10:29.800 --> 00:10:35.110
I've specified the parent circle container
to be 300 wide and 300 tall. What's really

134
00:10:35.110 --> 00:10:41.610
nice about this is I can use the CSS calc
function, so again vendor prefix, to calculate

135
00:10:41.610 --> 00:10:47.540
each of these inner divs to be 100% minus
4 EM. Each of these children divs is 4 EM

136
00:10:47.540 --> 00:10:52.960
smaller than its parent container and that's
producing sort of this target effect.

137
00:10:52.960 --> 00:10:56.339
What's really neat about this is you combine
it with what we just talked about, which is

138
00:10:56.339 --> 00:11:00.029
Flexbox, and so that's what's doing the alignment
of the center and justifying the content to

139
00:11:00.029 --> 00:11:03.890
the center. So that vertical center, that
horizontal center with three lines of CSS

140
00:11:03.890 --> 00:11:06.930
now, combined with the calc function you can
do something like this, which you haven't

141
00:11:06.930 --> 00:11:10.260
been able to do before without a little bit
of JavaScript.

142
00:11:10.260 --> 00:11:15.839
Really awesome. This stuff now can work together
really easily with a lot of new CSS stuff.

143
00:11:15.839 --> 00:11:21.390
And support is actually really good for this
as you can see by this slide.

144
00:11:21.390 --> 00:11:24.089
So that's what's happening with CSS.
Number three amazing, awesome thing that the

145
00:11:24.089 --> 00:11:31.089
Web can do is data binding. And you're like
what? The web can't do data binding. Oh, but

146
00:11:31.860 --> 00:11:35.720
it can.
This is actually old hat for JavaScript frameworks.

147
00:11:35.720 --> 00:11:41.980
If you use your framework like Angular JS,
for example, one of my favorites at the moment,

148
00:11:41.980 --> 00:11:46.589
data binding looks like this. This is how
they define a template in Angular. It's just

149
00:11:46.589 --> 00:11:51.250
HTML, which is really, really nice. I don't
have to learn a new API or markup.

150
00:11:51.250 --> 00:11:57.250
If I want to do one-way data binding I can
have an input, I can change the input, and

151
00:11:57.250 --> 00:12:01.440
as I change that my template is being re-rendered.
I'm just re-rendering the value of the input

152
00:12:01.440 --> 00:12:06.880
as it changes. And that's done through sort
of Angular's magic. My model in this case

153
00:12:06.880 --> 00:12:11.680
is this val. That's what I'm calling the model.
And as I change the input, val is being re-rendered

154
00:12:11.680 --> 00:12:15.960
to the template.
So that's one-way data binding use a JavaScript

155
00:12:15.960 --> 00:12:20.870
framework. But we can actually do a neat little
trick that I kind of discovered, which I'm

156
00:12:20.870 --> 00:12:25.029
calling it poor man's data binding, and it's
using data attributes, HTML data attributes.

157
00:12:25.029 --> 00:12:29.670
So we don't need a framework to do one-way
data binding. So the way this works is that

158
00:12:29.670 --> 00:12:33.160
you have a data attribute. That's your data
model. That's where you're going to be storing

159
00:12:33.160 --> 00:12:36.589
your values.
And then a lot of people don't know, but there's

160
00:12:36.589 --> 00:12:41.880
this really awesome, amazing attribute that
you can use to pull out values from the DOM

161
00:12:41.880 --> 00:12:45.860
and use those values in CSS.
So that's how we'll get the data from the

162
00:12:45.860 --> 00:12:50.600
data model. Then our view from this case,
what we're rendering this data to, is generated

163
00:12:50.600 --> 00:12:56.480
content. So before and after pseudo elements
and generating that model to those elements.

164
00:12:56.480 --> 00:12:59.779
And so we don't have a JavaScript framework
to work for us in this case so we have to

165
00:12:59.779 --> 00:13:05.990
actually hook up Web event listeners to do
this and watch for the changes.

166
00:13:05.990 --> 00:13:09.920
So what you get back with the poor man's data
binding is exactly the same thing. So I can

167
00:13:09.920 --> 00:13:15.330
have an input, and as I change that input,
I can re-render that to my template, my pseudo

168
00:13:15.330 --> 00:13:20.860
elements, on the fly.
So a small amount of code to do this. I set

169
00:13:20.860 --> 00:13:25.800
up an event change event on my input. And
then as that input changes, the user changes

170
00:13:25.800 --> 00:13:30.960
it, I'm sending a data attribute using the
data set object. So data-values is my thing

171
00:13:30.960 --> 00:13:36.290
that I'm changing to the new value. And the
really cool part of this is that I'm using

172
00:13:36.290 --> 00:13:40.149
before and after pseudo selectors for this.
So I'm using that attribute method to rip

173
00:13:40.149 --> 00:13:45.010
out that data element, that data attribute,
from the DOM, dividing it by the max attribute,

174
00:13:45.010 --> 00:13:48.520
in this case 100.
So you get the exact same thing as the Angular

175
00:13:48.520 --> 00:13:53.339
JS case. I don't need a framework to do the
-- this type of one-way data binding.

176
00:13:53.339 --> 00:13:58.529
You can do the exact same thing with an extra
span or DOM node and just render the inner

177
00:13:58.529 --> 00:14:02.760
text of that. That's cool. This is a little
cooler in my opinion and it illustrates that

178
00:14:02.760 --> 00:14:07.420
we can do this now in HTML5.
But we can also use something better, which

179
00:14:07.420 --> 00:14:11.750
is the dataless element, something new to
WebKit, and Opera has had this for a slew

180
00:14:11.750 --> 00:14:16.959
of time. This is sort of a semantic way to
do one-way data binding. So in this case your

181
00:14:16.959 --> 00:14:20.930
data model is actually defined in markup.
You have data list element, you can reference

182
00:14:20.930 --> 00:14:26.709
it by an ID, so the browser's out, and each
option is sort of the values of this data

183
00:14:26.709 --> 00:14:29.529
list.
And what we bind to in this case is an input

184
00:14:29.529 --> 00:14:34.779
element, so we reference it by the list attribute
of ID and so we're finding this data list

185
00:14:34.779 --> 00:14:39.730
-- these values to this input element. So
it's a great way to do things like auto complete.

186
00:14:39.730 --> 00:14:44.480
So I have an example of that in here. I have
the list of browsers. When I click on this

187
00:14:44.480 --> 00:14:48.760
I get the values from that data list. We bound
that data to this input.

188
00:14:48.760 --> 00:14:55.760
If I do things like -- if I start typing,
just as you expect I have auto complete behavior.

189
00:14:56.570 --> 00:15:01.170
That's super handy. That's the HTML5 way to
do one-way data binding. You actually saw

190
00:15:01.170 --> 00:15:07.709
it in that blue column example, you saw me
use this data attribute trick as well to render

191
00:15:07.709 --> 00:15:11.850
out the heights of those columns as they were
changing when I clicked on them. And both

192
00:15:11.850 --> 00:15:15.310
of these methods for data binding are actually
all supported on all the bottom browsers,

193
00:15:15.310 --> 00:15:18.730
which is really, really sweet. But if you're
doing something simple like I just showed

194
00:15:18.730 --> 00:15:23.410
you, you can do one-way data binding just
with HTML, just on the Web.

195
00:15:23.410 --> 00:15:27.480
How many people think HTML can access a file
system?

196
00:15:27.480 --> 00:15:33.470
It's hard to see up here, we have some believers.
We have a lot of naysayers.

197
00:15:33.470 --> 00:15:38.610
It's cool. This one is totally confirmed.
It's confirmed because I got really excited

198
00:15:38.610 --> 00:15:41.060
about this one. I got so excited that I wrote
a book.

199
00:15:41.060 --> 00:15:44.649
[Laughter]
&gt;&gt;Eric Bidelman: Shameless plug, I know.

200
00:15:44.649 --> 00:15:49.550
What we have now in HTML5 is a file system
API. This is something that you can do very

201
00:15:49.550 --> 00:15:55.899
easily in a native app. You can read and write
folders and persist data. That's very common.

202
00:15:55.899 --> 00:15:59.430
We should be able to do this on the Web as
well and we can do that with the file system

203
00:15:59.430 --> 00:16:03.670
API.
So there's a new property on the window method

204
00:16:03.670 --> 00:16:08.950
called request file system, and this is vendor
prefixes alluded to by this underline here.

205
00:16:08.950 --> 00:16:13.040
You can open the file system and read and
write files and folders. That's really huge.

206
00:16:13.040 --> 00:16:18.420
The security behind this is exactly like the
other offline storage API. So it's on a per-origin

207
00:16:18.420 --> 00:16:23.209
basis. You can't read and write to somebody
else's Web app and you certainly can't come

208
00:16:23.209 --> 00:16:27.390
out of the browser and write to somebody's
My Pictures folder or the system's My Documents

209
00:16:27.390 --> 00:16:32.730
folder. It's all on a per-origin for your
Web app. But it's super powerful. And the

210
00:16:32.730 --> 00:16:38.570
real benefit of this is to get around issues
that something like App Cache does. So if

211
00:16:38.570 --> 00:16:41.839
you've used App Cache, it's kind of clunky,
it's hard to use. With the file system API

212
00:16:41.839 --> 00:16:46.440
we can easily and dynamically cache individual
files and folders very quickly. Store them

213
00:16:46.440 --> 00:16:50.600
in folders, arrange them in a hierarchy, nuke
that if we need to.

214
00:16:50.600 --> 00:16:55.580
So as a quick example of caching an image
file, for instance, just a png file, we're

215
00:16:55.580 --> 00:17:01.209
going to use a friend, XMLhtpp request, pull
that guy down, and we're not pulling it as

216
00:17:01.209 --> 00:17:04.640
a streamer, but we're pulling it as an array
buffer, so we'll set the response type and

217
00:17:04.640 --> 00:17:08.819
we're just going to get a raw byte array back
from that image.

218
00:17:08.819 --> 00:17:13.370
And we get the response and we'll open the
file system using WebKit file request file

219
00:17:13.370 --> 00:17:20.370
system, give it a store, so maybe we'll store
a megabyte worth of data in this. We'll use

220
00:17:20.380 --> 00:17:26.699
the file system's root directory, just the
root entry of my file system, and we'll call

221
00:17:26.699 --> 00:17:32.970
it image.png, we'll create it if it doesn't
exist using this param here. We'll get back

222
00:17:32.970 --> 00:17:37.580
a file entry, we'll then write that response
of the XHR out to the file system and save

223
00:17:37.580 --> 00:17:42.710
that data. So this is just creating a file
writer object. We can set up events for when

224
00:17:42.710 --> 00:17:46.950
the write has ended, if there's any errors
that happened. And the important part is this

225
00:17:46.950 --> 00:17:51.880
guy right here, this writer.write. We're gonna
write out that data, the response of the XHR,

226
00:17:51.880 --> 00:17:55.410
create a new blog from the response and that's
going to be saved. The image is gonna be saved

227
00:17:55.410 --> 00:17:59.380
locally to our Web app and we can use that
as if it were a local resource to our Web

228
00:17:59.380 --> 00:18:06.380
app.
So that's the final product. You can see there's

229
00:18:06.730 --> 00:18:11.679
a lot of callbacks that are involved here.
I have at least one, two, three, four -- four

230
00:18:11.679 --> 00:18:17.110
to five levels of sort of callback -- callback
spaghetti that's happening here. Callbacks

231
00:18:17.110 --> 00:18:23.700
are hard. People don't like to deal with them.
This is a famous quote that I just said.

232
00:18:23.700 --> 00:18:24.440
[Laughter]
&gt;&gt;Eric Bidelman: Actually, I wanted to make

233
00:18:24.440 --> 00:18:29.240
it simpler for developers. Again, I'm really
passionate about this API. It's very powerful.

234
00:18:29.240 --> 00:18:34.140
So I wrote this library called filer.js. You
can check out the GitHub URL there. But essentially

235
00:18:34.140 --> 00:18:39.880
what it is is a library that wraps common
UNIX commands on top of the file system API

236
00:18:39.880 --> 00:18:44.400
calls. So we have things like LS and CD and
copy and the things that you know from interface

237
00:18:44.400 --> 00:18:51.350
that make it super easy to use this API.
If I want to copy a file, for instance, filer.copy,

238
00:18:51.350 --> 00:18:57.000
the file path you want to copy to and then
renaming it as well. So super handy.

239
00:18:57.000 --> 00:18:59.410
It makes the whole thing much more approachable
if you're familiar with this sort of development.

240
00:18:59.410 --> 00:19:06.410
Let's see a demo of this guy. So this is called
the file system API playground. Essentially

241
00:19:12.220 --> 00:19:16.790
what this is is a Web app that sits on top
of the file system API. So right now I don't

242
00:19:16.790 --> 00:19:21.450
have anything in this guy, but you can easily
use HTML5 Dragon drop to add some files, boom,

243
00:19:21.450 --> 00:19:27.760
I can add some text files. I can open these
files, right, so there's this sort of notion

244
00:19:27.760 --> 00:19:33.490
of using this -- this resource locally with
referencing it via URL. Can use that within

245
00:19:33.490 --> 00:19:38.370
my Web app. Can also read this file and preview
it if I wanted to using the file reader API,

246
00:19:38.370 --> 00:19:44.040
and get some metadata such as the date and
last modified times. Can use filer.js and

247
00:19:44.040 --> 00:19:49.370
API to rename the file. The best part about
this is I've actually cached these resources,

248
00:19:49.370 --> 00:19:54.049
so if I refresh this page, my Web app, right,
has those values and those resources saved

249
00:19:54.049 --> 00:19:59.710
in them, so all the changes I made are being
persisted, which is really awesome. Can create

250
00:19:59.710 --> 00:20:06.710
files and folders. Create a folder using the
API. You can drill into it. Import some data

251
00:20:07.490 --> 00:20:12.799
here. Luckily it's after lunch so, you guys
don't have to get too hungry. But this is

252
00:20:12.799 --> 00:20:15.100
really great.
I mean, this is native stuff, but it's on

253
00:20:15.100 --> 00:20:22.100
the Web. We can write and read files and folders
now using the file system API. So you're probably

254
00:20:23.990 --> 00:20:28.140
asking yourself this: This is great, but if
it's only in Chrome, like why am I going to

255
00:20:28.140 --> 00:20:34.280
use it?
Then I'm like, oh, yeah. So again, I really

256
00:20:34.280 --> 00:20:39.030
like this API, you guys, so I decided to implement
a polyfill stream library that sits on top

257
00:20:39.030 --> 00:20:43.640
of index DB that then you can use in your
Web app to have basically the file system

258
00:20:43.640 --> 00:20:48.730
API in browsers that support index DB. So
same Web app, right? Same Web app running

259
00:20:48.730 --> 00:20:55.730
in Chrome is running in FireFox. And I can
add files and folders to this guy, maybe -- it's

260
00:20:56.200 --> 00:21:03.200
a nightly build, so I don't know -- there
we go. And if I refresh this up, those files

261
00:21:03.630 --> 00:21:10.630
that I just wrote to the Web app are preserved.
So that library is called IDBfilesystem.js.

262
00:21:12.510 --> 00:21:17.540
And if you're interested in this API, the
file system API, check it out, it basically

263
00:21:17.540 --> 00:21:22.290
means that we can now use this API in a relatively
performant way in the browsers that do support

264
00:21:22.290 --> 00:21:27.360
index DB. Super Stoked about it. Hope you
guys get Stoked about it, too. Files and folders,

265
00:21:27.360 --> 00:21:34.360
the Web can do that. All right, Number 5.
This one looks suspicious. Totally is busted.

266
00:21:34.620 --> 00:21:38.309
Just making sure you guys are paying attention.
[ Laughter ]

267
00:21:38.309 --> 00:21:44.640
&gt;&gt;Eric Bidleman: The real Number 5 is serverless
downloads. So we got data in the file system,

268
00:21:44.640 --> 00:21:50.830
we're storing data in our Web app -- where
is my clicker?

269
00:21:50.830 --> 00:21:54.440
What happens when you want to get data back
out of your Web app, right?

270
00:21:54.440 --> 00:21:59.910
So for a long time, if you wanted to download
a file and trick the browser into downloading

271
00:21:59.910 --> 00:22:03.010
a file from the response of your server, you
would have had to do something like this:

272
00:22:03.010 --> 00:22:07.929
You would send a content disposition header
as an attachment, give it a file name, and

273
00:22:07.929 --> 00:22:11.790
essentially what this did was when the browser
hit this response, the browser would sort

274
00:22:11.790 --> 00:22:15.900
of -- it would trick it into downloading a
file and it would invoke the browser's download

275
00:22:15.900 --> 00:22:21.860
manager. What we have now is a lot of people
are writing thick clients, right? Maybe there's

276
00:22:21.860 --> 00:22:24.220
no server involved whatsoever, so how do you
do this?

277
00:22:24.220 --> 00:22:28.790
How do you send a header if you don't have
a server? It's impossible. So smart folks

278
00:22:28.790 --> 00:22:32.520
in the Web community were like, hey, we can
solve this, we've got this great idea, let's

279
00:22:32.520 --> 00:22:36.590
make an attribute, we'll call it "download".
That makes a lot of sense. And what download

280
00:22:36.590 --> 00:22:42.830
does is you can use with an anchor tag for
instance, and so what happens is -- normally

281
00:22:42.830 --> 00:22:48.320
what happens is if you -- if a user clicks
on this H ref to this logo.png, what happens

282
00:22:48.320 --> 00:22:53.309
is the browser will open that image in a new
tab and you can view the image. That's cool.

283
00:22:53.309 --> 00:22:57.120
But what happens if you have download specified,
this attribute, and you can give it the name

284
00:22:57.120 --> 00:23:00.250
of the file you want to download as, is that
it's going to trick the browser into doing

285
00:23:00.250 --> 00:23:04.200
the exact same thing as the content disposition
header, and then you can download that file

286
00:23:04.200 --> 00:23:11.070
instead of navigating to that resource. So
if none of that makes any sense to you, I

287
00:23:11.070 --> 00:23:17.950
have an epic novel creator here, and this
is just a text area that I'm typing into,

288
00:23:17.950 --> 00:23:24.950
so let me bring this up a little bit. So just
to show you that I'm typing live. I'm just

289
00:23:25.559 --> 00:23:29.559
typing in this. I'm composing my epic novel.
And then I want to have the user save what

290
00:23:29.559 --> 00:23:35.049
they've just done, so I can do that using
the download attribute. When I click this

291
00:23:35.049 --> 00:23:39.910
button, I'm going to create a txt file, a
text file in JavaScript using the block builder

292
00:23:39.910 --> 00:23:46.910
API. Create a dynamic link in JavaScript.
Attach that download attribute as my file

293
00:23:47.530 --> 00:23:52.630
.txt as its value. When I click that, the
browser is not going to open that resource,

294
00:23:52.630 --> 00:23:57.179
it's actually going to download the file that
I just created in JavaScript, and if I open

295
00:23:57.179 --> 00:24:01.190
this, it's going to be native to my system,
and as you can see, the text content that

296
00:24:01.190 --> 00:24:04.660
I just pulled out from that text area has
been saved. I've just downloaded a file in

297
00:24:04.660 --> 00:24:11.660
JavaScript, all clientside, no servers. That's
pretty sweet.

298
00:24:14.500 --> 00:24:18.950
So we have the ability to save data in the
file system, we have the ability to get it

299
00:24:18.950 --> 00:24:25.419
back out using the down attribute. What about
getting data in between apps? Now, there's

300
00:24:25.419 --> 00:24:30.530
this thing called Web intense, and I encourage
you to go to Paul Kinlan and James' session

301
00:24:30.530 --> 00:24:36.809
later in the week. But one way to officially
transfer data is rocketships, of course. But

302
00:24:36.809 --> 00:24:40.870
another way is with post message. And in order
to describe this and set this up for you guys,

303
00:24:40.870 --> 00:24:45.720
I want to take you down sort of memory lane
of post message. Post message started off

304
00:24:45.720 --> 00:24:50.370
as a way to communicate with a Webworker or
a window object, right? You could send a string.

305
00:24:50.370 --> 00:24:54.309
You could send "hello world" to a worker,
and then it could, I don't know, do something

306
00:24:54.309 --> 00:24:58.410
interesting with that. But what happened is,
hey, people are gonna -- the browsers are

307
00:24:58.410 --> 00:25:03.380
like -- developers got smart, they were like
let's just send JSON stringify data. So they'd

308
00:25:03.380 --> 00:25:09.110
stringify some JSON, and pass some commands
in and out of worker or to a window object.

309
00:25:09.110 --> 00:25:14.059
So it was totally cool, but then the browsers
were like, hey, like, we can do better, let's

310
00:25:14.059 --> 00:25:19.530
just do that for them, just not have the ability
to stringify JSON, but let's just do it under

311
00:25:19.530 --> 00:25:24.150
the hood, so what happens is the browser would
JSON stringify and JSON parse this message

312
00:25:24.150 --> 00:25:30.250
out, so that was cool. That got us one step
further. Sort of this post message evolution,

313
00:25:30.250 --> 00:25:33.720
but then the third step that came along was
the ability to send more complex data, right?

314
00:25:33.720 --> 00:25:39.110
You just saw me send a file -- create a file
in JavaScript. Why can't I send a file into

315
00:25:39.110 --> 00:25:43.179
a Web worker and do something interesting
with it, or a Web GL texter as an array buffer?

316
00:25:43.179 --> 00:25:48.340
All right, we have binary data in -- on the
Web now; we should be able to do interesting

317
00:25:48.340 --> 00:25:50.890
things with it. So eventually , the browser
is like, hey, we'll open this up, we're going

318
00:25:50.890 --> 00:25:56.480
to use this structured cloning algorithm to
pass a blob, a file into the Web worker and

319
00:25:56.480 --> 00:26:00.760
process it. Or you can send an array buffer,
so this is really, really cool, right? And

320
00:26:00.760 --> 00:26:04.650
a lot of the modern browsers support this.
You can send a massive, you know, data set

321
00:26:04.650 --> 00:26:10.090
into a Web worker. Do some computation on
it in this sort of multi-thread environment

322
00:26:10.090 --> 00:26:13.600
and then get it back out and do something
interesting. So the real problem with this,

323
00:26:13.600 --> 00:26:17.750
though, is that these are all -- all the methods
I just covered are copies, so that becomes

324
00:26:17.750 --> 00:26:22.120
very inefficient when you're copying and sending
amounts of data in and out of a Web worker.

325
00:26:22.120 --> 00:26:26.309
It's kind of pointless to have this awesome,
you know, multi-threaded Web worker doing

326
00:26:26.309 --> 00:26:30.960
its thing, but if you can't get data in and
out very quickly, then it defeats the purpose.

327
00:26:30.960 --> 00:26:36.250
So of course I wouldn't be up here if we can't
do better, and we can do better, and that

328
00:26:36.250 --> 00:26:40.030
comes via transferable objects. Transferable
objects are something that the Web GL community

329
00:26:40.030 --> 00:26:44.919
thought up because they need this ability
to do processing on large amounts of data.

330
00:26:44.919 --> 00:26:49.900
And so you can see this guy is using your
old friend, but it has different semantics,

331
00:26:49.900 --> 00:26:54.610
and that's why this method is prefixed with
WebKit post message. This is something that

332
00:26:54.610 --> 00:27:01.610
is supported in Chrome. So what happens with
the new post message is that it's a zero copy,

333
00:27:01.740 --> 00:27:06.230
so if you're familiar with like C++ or C,
think of it as a pass-by reference rather

334
00:27:06.230 --> 00:27:11.340
than a pass-by value. And so the ownership
of this data is actually transferred from

335
00:27:11.340 --> 00:27:17.549
your main app to the worker or window context
that you're posting to. And so what happens

336
00:27:17.549 --> 00:27:22.000
is that this becomes actually really, really
efficient, up to 50 times faster. I measured

337
00:27:22.000 --> 00:27:26.370
this in Chrome 17. So Chrome 17, you know,
that is sort of long gone now, but it could

338
00:27:26.370 --> 00:27:31.750
even be faster. I don't know. But the important
point of this graph are these last two columns

339
00:27:31.750 --> 00:27:36.289
here. In Chrome 17 the difference between
the regular post message, which is on the

340
00:27:36.289 --> 00:27:40.700
left, the middle one, and the right, is orders
and orders of magnitude. This is a logarithmic

341
00:27:40.700 --> 00:27:45.970
scale, keep in mind. Faster. So basically
what I did in this test was I sent a 32 megabyte

342
00:27:45.970 --> 00:27:50.260
file into a Web worker. I didn't do any processing
on that file, and then I sent it right back

343
00:27:50.260 --> 00:27:55.360
just to see how fast that was. I measured
that. And you can see the rate -- the round

344
00:27:55.360 --> 00:28:01.929
trip simulated rate of that is super, super
fast. So this is really sweet for things like

345
00:28:01.929 --> 00:28:06.850
physics simulations and again Web GL, gaming.
I have an example of this, and unfortunately

346
00:28:06.850 --> 00:28:13.850
this is not super sexy to demo, but this is
my awesome sexy demo for transferable object.

347
00:28:14.549 --> 00:28:20.570
This page has basically set up a Web worker.
I got a worker ready to be post messaged to,

348
00:28:20.570 --> 00:28:25.000
and when I hit this run button, it's going
to use that new WebKit post message to send

349
00:28:25.000 --> 00:28:30.929
data into Web worker. I think we're sending
-- we're sending a 32 megabyte array buffer,

350
00:28:30.929 --> 00:28:35.080
so this 32 megabyte file into a web worker,
and then sending that right back, seeing how

351
00:28:35.080 --> 00:28:42.080
fast that is. So I'll hit this, ready?
Boom, boom, boom, boom. 6 milliseconds. 5,000

352
00:28:45.049 --> 00:28:47.850
megabytes a second simulated rate, right?
I mean, that is kind of ridiculous, right?

353
00:28:47.850 --> 00:28:51.169
That's awesome. That's awesome for sending
large amounts of data. And that's a lot of

354
00:28:51.169 --> 00:28:58.169
data. 32 megabytes is no joke.
Pop up a full screen here. Just to show you

355
00:28:59.220 --> 00:29:04.409
the difference -- I'm not picking on any browser
in particular -- but a browser that doesn't

356
00:29:04.409 --> 00:29:09.740
support transferable object, you can actually
noticeably see the difference here. Let me

357
00:29:09.740 --> 00:29:16.740
zoom in. So when I hit this, run, boom, boom.
So, not only do the numbers speak for themselves,

358
00:29:18.700 --> 00:29:23.730
157 as opposed to 5,000 megabytes a second,
you can actually see the delay, right, visually

359
00:29:23.730 --> 00:29:29.590
the delay that it takes for this Web app to
make that round trip request. So significant

360
00:29:29.590 --> 00:29:34.159
difference using transferable objects and
performance. In my opinion this is something

361
00:29:34.159 --> 00:29:38.169
that, you know, the Web path form and workers
in window and post message should have had

362
00:29:38.169 --> 00:29:42.250
available in the first place, but this is
sort of a common thing in the Web, right?

363
00:29:42.250 --> 00:29:45.590
We're sort of incrementally improving on what
we already had, making it better and better

364
00:29:45.590 --> 00:29:49.400
and better every time. This one's only in
Chrome, again something that should be in

365
00:29:49.400 --> 00:29:55.419
every browser. Efficiency is something we
love in the Web. How many people think the

366
00:29:55.419 --> 00:30:00.549
Web can access native hardware?
Not using phone gap or something like that?

367
00:30:00.549 --> 00:30:05.220
Okay. Got some believers. I love it. You guys
know this is when it's going to be confirmed.

368
00:30:05.220 --> 00:30:10.409
It's confirmed. It's totally confirmed. What
I mean by accessing hardware is device APIs.

369
00:30:10.409 --> 00:30:15.650
There's a whole working group dedicated to
figuring this stuff out now. And what I mean

370
00:30:15.650 --> 00:30:22.179
by devices are things like geolocation and
accessing the accelerometer of this laptop,

371
00:30:22.179 --> 00:30:26.580
using web GL to access the GPU, right, the
graphics processor unit of the laptop, using

372
00:30:26.580 --> 00:30:31.390
a very high level JavaScript API. I just showed
you the file system API. We can read and write

373
00:30:31.390 --> 00:30:37.200
folders and files on the Web now. Whether
I'm online or offline, network connectivity,

374
00:30:37.200 --> 00:30:44.200
all via JavaScript, battery API, game pad
API, all super possible. Web RTC and Web audio,

375
00:30:44.380 --> 00:30:48.090
I want to briefly mention on. There's two
dedicated sessions to these two topics, because

376
00:30:48.090 --> 00:30:53.140
they're very -- they're noteworthy and very
complex and they should have a dedicated session.

377
00:30:53.140 --> 00:30:58.110
Being able to access voice and video on the
Web is sort of this coveted grail, right?

378
00:30:58.110 --> 00:31:02.490
I mean, we've wanted to access the microphone
for a long time or get camera for a long time,

379
00:31:02.490 --> 00:31:07.190
but you've needed a plug in to do this, so
this is one example of being able to sort

380
00:31:07.190 --> 00:31:12.480
of -- the first step along this path to do
that, with one attribute, this x WebKit speech

381
00:31:12.480 --> 00:31:16.600
attribute, we can annotate an input, and the
browser is going to annotate it with this

382
00:31:16.600 --> 00:31:20.620
little microphone input. Instead of typing
in this Web app, it can actually interact

383
00:31:20.620 --> 00:31:27.620
with the microphone in this Web app. "I want
some coffee". All right. It worked. Sometimes

384
00:31:28.710 --> 00:31:33.380
it doesn't. Or you get some weird rendition.
But this is really great. A different way

385
00:31:33.380 --> 00:31:37.419
to interact with my Web app. I don't have
much of an API to play with, right? It's sort

386
00:31:37.419 --> 00:31:44.419
of happening under the hood. But I'm accessing
the microphone of this laptop using one attribute.

387
00:31:45.390 --> 00:31:50.309
So what we have now is something way better.
We have camera and microphone access via Get

388
00:31:50.309 --> 00:31:55.390
User Media. Get User Media is coming out of
the Web RTC project, navigator dot -- either

389
00:31:55.390 --> 00:32:01.900
Get User Media or the prefix version. Also
Christian from FireFox tells me this is coming

390
00:32:01.900 --> 00:32:08.320
to FireFox and nightly builds, so that should
be on there as well. To the camera, the device

391
00:32:08.320 --> 00:32:12.799
and the microphone device. With this call,
I can specify that I want audio access, I

392
00:32:12.799 --> 00:32:17.169
want video access, and what I'm going to get
back is a stream object representing that

393
00:32:17.169 --> 00:32:22.309
data that I get from both devices. And then
what's really cool is again I'm using different

394
00:32:22.309 --> 00:32:26.450
parts of the platform that have already existed
for a long time. I'm using a video element.

395
00:32:26.450 --> 00:32:32.980
HTML video is one of the core features of
HTML5 when it first came out. Instead of setting

396
00:32:32.980 --> 00:32:39.980
the video source to, you know, a movie file
or an OVG file, I'm setting it to a blob URL

397
00:32:40.120 --> 00:32:44.070
created from the data I get from the camera.
So instead of a file, I'm just sending the

398
00:32:44.070 --> 00:32:48.900
camera data and the microphone data directly
into this video tag, so that's what's going

399
00:32:48.900 --> 00:32:53.710
to give us the ability to render live to video
tag. So a little demo. There's a lot of really

400
00:32:53.710 --> 00:32:57.480
cool demos people created using Get User Media
and the ability to access the camera.

401
00:32:57.480 --> 00:33:03.080
This is my demo. I do trust this app. I made
it. I wrote it. So I'm gonna -- I can't see

402
00:33:03.080 --> 00:33:07.590
at the top. I'm going to allow access. We'll
create a video element in JavaScript, and

403
00:33:07.590 --> 00:33:11.700
there we go. My first stage -- you can see
behind -- so this is great, no plug-ins, right?

404
00:33:11.700 --> 00:33:16.220
This is just JavaScript on the Web, but again
I can combine this with different parts of

405
00:33:16.220 --> 00:33:21.580
the Web platform, so I can use CSS filters
in real time to overlay this video with effects

406
00:33:21.580 --> 00:33:25.940
like gray scale. How about a blur effect in
real time?

407
00:33:25.940 --> 00:33:29.520
That's pretty -- that is pretty trippy. Version
effects, right?

408
00:33:29.520 --> 00:33:33.679
Just using CSS, applying to this video, I
can do all that and still really awesome,

409
00:33:33.679 --> 00:33:36.150
looks great. I can combine it with a canvas,
right, do a photo booth effect.

410
00:33:36.150 --> 00:33:36.600
[chuckling]
&gt;&gt;Eric Bidleman: All right. That's enough

411
00:33:36.600 --> 00:33:43.600
of that. One of my favorites, though, is this
one called the Web cam toy, so I'll grant

412
00:33:52.900 --> 00:33:59.679
access to this. Okay, that uses my camera.
This is not going to use CSS filters, but

413
00:33:59.679 --> 00:34:03.750
it's going to use the power of camera, the
power of Web GL, right? So with Web GL we

414
00:34:03.750 --> 00:34:08.049
can access the GPU, that native access, and
we can do things -- really awesome things

415
00:34:08.049 --> 00:34:12.720
with shaders. Shader technology is amazing.
Again, this is all JavaScript using Web GL.

416
00:34:12.720 --> 00:34:19.720
No plug-ins. Look how fast it is. Really trippy
things. Let me get to the cool stuff. There

417
00:34:27.940 --> 00:34:29.460
it is.
[chuckling]

418
00:34:29.460 --> 00:34:33.520
[ APPLAUSE ]
&gt;&gt;Eric Bidleman: Yeah. This one is cool.

419
00:34:33.520 --> 00:34:40.349
Super trippy. Oh, yeah, 3D. This is after
you've had a few drinks at the party tonight.

420
00:34:40.349 --> 00:34:43.389
Just amazing things. People have done thing
with augmented reality, right, holding up

421
00:34:43.389 --> 00:34:48.510
a paper -- piece of paper with a QR code on
it, the camera tracks you. So play around

422
00:34:48.510 --> 00:34:52.820
with those. When I put the slide up later,
just really awesome, amazing things. Support

423
00:34:52.820 --> 00:34:56.010
for this is actually really good. Opera just
released Opera 12; it has this. They've had

424
00:34:56.010 --> 00:35:00.109
it in the mobile version for a long time.
It's coming to FireFox nightly I'm told, and

425
00:35:00.109 --> 00:35:03.820
Chrome just released a stable version with
Get User Media, so we can do camera access,

426
00:35:03.820 --> 00:35:09.349
we can do microphone access without a plug-in
now.

427
00:35:09.349 --> 00:35:16.349
HTML5 audio has had a little bit of a slack
-- been problematic, to say the least. But

428
00:35:18.550 --> 00:35:25.550
what we can do now with the Web audio, guys,
make it -- make it sexy again. So HTML5 audio

429
00:35:25.690 --> 00:35:30.640
is great. It's just like video, right? Without
a plug-in, we can play audio on the Web, just

430
00:35:30.640 --> 00:35:35.920
populate a source attribute of an audio tag.
Play it, that's cool, we don't need a plug-in,

431
00:35:35.920 --> 00:35:40.500
but what if you want to do something like
this.

432
00:35:40.500 --> 00:35:47.210
[Music Playing]
What if you want to visualize that data in

433
00:35:47.210 --> 00:35:48.220
real time, get the frequency analysis as it
plays?

434
00:35:48.220 --> 00:35:50.490
Visualize that on two canvas tags, plus Web
GL transforms a little bit of a reflection

435
00:35:50.490 --> 00:35:57.490
on the bottom there. Can't do that with HTML5
audio. What we have now is ability to tie

436
00:36:01.109 --> 00:36:07.740
in to what's called a Web audio API, tie in
an audio tag as a source to that API, so instead

437
00:36:07.740 --> 00:36:10.380
of driving the Web audio API, via, you know,
an XHR request or something, we can just send

438
00:36:10.380 --> 00:36:11.320
data directly to it -- sorry -- via -- via
this audio tag, so it's really, really important.

439
00:36:11.320 --> 00:36:11.570
This doesn't have to just be a video. It could
be a -- excuse me, an audio tag, it could

440
00:36:11.430 --> 00:36:18.430
be a video tag, so imagine I had a HTML5 video
playing, and that is the source to the Web

441
00:36:22.050 --> 00:36:29.050
audio API, then you're visualizing sort of
effects, as movie changes and dark monsters

442
00:36:32.400 --> 00:36:36.530
pop out, you can really scare people. But
the way the search works is really easy, so

443
00:36:36.530 --> 00:36:39.880
we have the Web audio guy. I encourage you
to go to Chris Wilson's session later in the

444
00:36:39.880 --> 00:36:45.270
week about this, really amazing API. A lot
of low level access to the core audio of the

445
00:36:45.270 --> 00:36:50.350
system. High level JavaScript API on top of
it. Create an audio context. Notifications

446
00:36:50.350 --> 00:36:57.350
-- I will create HTML5 audio element, I will
populate it with MP3 as its source, set up

447
00:36:59.859 --> 00:37:04.330
a couple of controls, some auto play on it.
The important integration point between these

448
00:37:04.330 --> 00:37:09.599
two, sort of the old audio working with the
new Web audio, the capabilities of that API

449
00:37:09.599 --> 00:37:15.140
is this create element source, media element
source. That's how the audio tag is sort of

450
00:37:15.140 --> 00:37:22.140
filtered and piped into the Web audio API.
Which leads us conveniently into Number 10.

451
00:37:27.210 --> 00:37:31.980
So I get this one a lot. A lot of people ask:
"Hey, how come HTML5 can't do, you know, streaming

452
00:37:31.980 --> 00:37:33.740
audio?
Or streaming media?"

453
00:37:33.740 --> 00:37:39.580
And it actually can. It can do that through
another old friend, WebSockets. So WebSockets

454
00:37:39.580 --> 00:37:43.830
have been around for a while. It sort of suffered
from the same limitation of Webworker, where

455
00:37:43.830 --> 00:37:49.140
you can only send just basic data. It can
send string data. That's not so handy, right?

456
00:37:49.140 --> 00:37:54.210
We have things like files and array buffers
and ability to use complex data. We should

457
00:37:54.210 --> 00:37:58.540
be able to send and stream multi-media or
files to our web apps.

458
00:37:58.540 --> 00:38:04.260
So we can do that now with WebSockets. And
WebSockets has a new sort of socket, that

459
00:38:04.260 --> 00:38:07.790
binary type is the property you set on this.
And you set it to a blob or you set it to

460
00:38:07.790 --> 00:38:12.470
an array buffer, and that tells the WebSocket
that's going to be speaking binary data instead

461
00:38:12.470 --> 00:38:18.670
of just regular string data. What's awesome
about this is on my on message event, I can

462
00:38:18.670 --> 00:38:23.720
use that directly to set an image source,
for instance, from a blog URL. Instead of

463
00:38:23.720 --> 00:38:28.310
having to base 64 encode data on either end,
decode it, which is, you know, the overhead

464
00:38:28.310 --> 00:38:32.910
associated with that, we can just use the
data directly that we get back.

465
00:38:32.910 --> 00:38:39.910
So I have a couple of demos of this. The first
is a Chrome extension. So I have a little

466
00:38:42.030 --> 00:38:47.589
Chrome extension installed here and top right
corner. I'm going to click this guy. Imagine

467
00:38:47.589 --> 00:38:52.770
this is my viewer. I'm going to basically
do a sort of screen cast from the Web.

468
00:38:52.770 --> 00:38:57.030
This is my viewer, imagine this is somewhere
around the globe. I'm going to open a new

469
00:38:57.030 --> 00:39:01.820
window, pretend that's here.
So when I click this guy again, it's going

470
00:39:01.820 --> 00:39:07.839
to fire up a Websocket, binary Websocket,
and use the Chrome extension, screen capture

471
00:39:07.839 --> 00:39:14.839
API to capture the current tab. Google.com.
Sports, because sports is great.

472
00:39:15.190 --> 00:39:21.210
So on the right side, I have my presenter,
this is just capturing the current tab as

473
00:39:21.210 --> 00:39:26.640
a png as I scroll. It's sending that data
through a WebSocket to the remote party. You

474
00:39:26.640 --> 00:39:30.450
can see it's very performant. I don't have
to do any basic 64 encoding. As I'm scrolling

475
00:39:30.450 --> 00:39:35.310
on the right on the live page, that image
is just being sent across the wire in near

476
00:39:35.310 --> 00:39:39.820
real-time using the WebSocket. That's really,
really sweet, right? We can do this now thanks

477
00:39:39.820 --> 00:39:44.500
to the Chrome extension API, yes, but also
via a binary WebSocket.

478
00:39:44.500 --> 00:39:50.430
Whoa, inception.
[Laughter].

479
00:39:50.430 --> 00:39:57.140
&gt;&gt;Eric Bidelman: We can also do other things
with different types of media. So I just showed

480
00:39:57.140 --> 00:40:02.890
you a little teaser preview of the Web audio
API. The API allows you to analyze sound in

481
00:40:02.890 --> 00:40:08.290
real-time as it plays.
What I have here is a page that sets up a

482
00:40:08.290 --> 00:40:13.640
binary WebSocket, and it's going to use the
file reader API to essentially cut an MP3

483
00:40:13.640 --> 00:40:19.089
file up into multiple smaller chunks and then
it's going to connect to that WebSocket, send

484
00:40:19.089 --> 00:40:25.280
each of those chunks across the wire, on my
-- on my left side here, the viewer side,

485
00:40:25.280 --> 00:40:30.300
I'm going to use the Web audio API to schedule
those chunks at very precise times exactly

486
00:40:30.300 --> 00:40:33.349
when they should happen.
So essentially I reconstruct the audio on

487
00:40:33.349 --> 00:40:38.930
the other end and just sort of use the sequence
that it should be in and then visualize that

488
00:40:38.930 --> 00:40:45.060
using the Web audio API. I'm going to load
up an MP3 file here on my DJ machine, this

489
00:40:45.060 --> 00:40:49.930
guy in the right corner. Binary WebSocket,
web audio API.

490
00:40:49.930 --> 00:40:53.530
No sound?
There we go, there's sound.

491
00:40:53.530 --> 00:40:57.140
[ Music ]
&gt;&gt;Eric Bidelman: So again, streaming from

492
00:40:57.140 --> 00:41:04.140
one client, streaming audio data using a WebSocket,
using the Web to reconstruct it and then visualizing

493
00:41:08.339 --> 00:41:11.150
in real-time.
You can see the chunks coming in, I'm receiving

494
00:41:11.150 --> 00:41:14.150
sort of mini chunks of that MP3 file as I
reconstruct the audio and sort of the current

495
00:41:14.150 --> 00:41:21.150
time is playing. Just to prove to you this
is streaming, I refresh this, come back at

496
00:41:22.810 --> 00:41:25.300
the exact same spot. It's using two brand
new search capabilities on the Web platform

497
00:41:25.300 --> 00:41:27.690
together, something that you probably maybe
not hopefully didn't think was possible, in

498
00:41:27.690 --> 00:41:34.690
streaming audio on the Web.
No more plug-ins for this, you can do is now

499
00:41:42.640 --> 00:41:47.570
using the Web platform.
[ Music ]

500
00:41:47.570 --> 00:41:51.690
So that was really quick. I covered a lot.
I just want to point out that we did cover,

501
00:41:51.690 --> 00:41:56.140
you know, sort of everything under the sun.
The Web can do really amazing things, I hope

502
00:41:56.140 --> 00:42:02.240
you do agree. CSS, whether it's the new CSS
stuff for Web application layout and design,

503
00:42:02.240 --> 00:42:07.990
doing data binding, doing things like file
access, accessing the native hardware, using

504
00:42:07.990 --> 00:42:11.470
-- officially transferring data once you have
it in your Web app, and then doing really

505
00:42:11.470 --> 00:42:16.740
awesome things with some of the older capabilities
of HTML5 multi-media, and also some of the

506
00:42:16.740 --> 00:42:21.520
newer stuff, combine those two with the integration
points.

507
00:42:21.520 --> 00:42:23.950
Just want to point out, we have a Google+
developers page. If you guys want to know

508
00:42:23.950 --> 00:42:29.349
more about what Chrome is doing with HTML5,
and the open web, check that out. If you are

509
00:42:29.349 --> 00:42:33.550
not using Chrome Canary, or the developer
channel, Chrome really does heart HTML5. A

510
00:42:33.550 --> 00:42:37.440
lot of this stuff I just showed you again
is very new. So play with the new Chrome file

511
00:42:37.440 --> 00:42:42.660
bugs on new.crbug.com. Let us know what you
think. Give us the feedback.

512
00:42:42.660 --> 00:42:47.390
This presentation will be up on my GitHub
account at HTML5can, as soon as I exit this

513
00:42:47.390 --> 00:42:54.200
stage. You can also access these slides at
HTMLfive, with the five spelled out, can.com.

514
00:42:54.200 --> 00:42:57.400
There's my social stuff if you want to follow
or Tweet at me. I'm happy to take questions

515
00:42:57.400 --> 00:43:01.680
here and I will also be available after the
show, as well as office hours tomorrow.

516
00:43:01.680 --> 00:43:03.150
Thanks, guys, appreciate your time.
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:14.310

2
00:00:14.310 --> 00:00:16.980
VIJAY MENON: Thanks
for coming.

3
00:00:16.980 --> 00:00:20.580
We're talking about Putting the
App Back Into Web App--

4
00:00:20.580 --> 00:00:22.150
Web Programming With Dart.

5
00:00:22.150 --> 00:00:24.880
How many of you just attended
the last talk by Lars and

6
00:00:24.880 --> 00:00:26.895
Kasper on Dart?

7
00:00:26.895 --> 00:00:27.390
Great.

8
00:00:27.390 --> 00:00:28.570
I think that was most of you.

9
00:00:28.570 --> 00:00:30.440
If you haven't, you should
be able to pick it up.

10
00:00:30.440 --> 00:00:32.080
Dart's a very familiar
language.

11
00:00:32.080 --> 00:00:34.690
We're excited about the Dart
programming language for its

12
00:00:34.690 --> 00:00:37.760
potential for creating web apps,
particularly apps code

13
00:00:37.760 --> 00:00:39.035
that runs in the browser.

14
00:00:39.035 --> 00:00:40.110
I'm Vijay Menon.

15
00:00:40.110 --> 00:00:41.520
DAN GROVE: And I'm Dan Grove.

16
00:00:41.520 --> 00:00:45.310
We're here from Google's
Seattle Team.

17
00:00:45.310 --> 00:00:49.490
So how many of you have
used web apps before?

18
00:00:49.490 --> 00:00:53.108
It looks something like this.

19
00:00:53.108 --> 00:00:53.596
All right.

20
00:00:53.596 --> 00:00:57.012
How many of you are
happy with this?

21
00:00:57.012 --> 00:00:57.500
Beautiful.

22
00:00:57.500 --> 00:00:59.460
I had to ask.

23
00:00:59.460 --> 00:01:00.670
VIJAY MENON: This talk
is not for you.

24
00:01:00.670 --> 00:01:02.852
Sorry.

25
00:01:02.852 --> 00:01:06.310
DAN GROVE: When I got to Google
back in late 2007,

26
00:01:06.310 --> 00:01:10.262
there was a lot of talk about
developing [INAUDIBLE].

27
00:01:10.262 --> 00:01:12.050
But they're really ugly.

28
00:01:12.050 --> 00:01:14.375
But that's OK because they
all [INAUDIBLE].

29
00:01:14.375 --> 00:01:15.770
AUDIENCE: Your mic's
not working.

30
00:01:15.770 --> 00:01:17.202
VIJAY MENON: Oh, your
mic is off.

31
00:01:17.202 --> 00:01:20.034
DAN GROVE: It says it's on.

32
00:01:20.034 --> 00:01:20.978
I'll try it again.

33
00:01:20.978 --> 00:01:22.394
Let's see.

34
00:01:22.394 --> 00:01:23.935
VIJAY MENON: You got it?

35
00:01:23.935 --> 00:01:25.420
DAN GROVE: It's not working.

36
00:01:25.420 --> 00:01:26.410
How about now?

37
00:01:26.410 --> 00:01:27.660
No?

38
00:01:27.660 --> 00:01:30.640
39
00:01:30.640 --> 00:01:32.570
VIJAY MENON: Why don't I take
over for a little bit while we

40
00:01:32.570 --> 00:01:34.070
get Dan miced up properly.

41
00:01:34.070 --> 00:01:41.120
So yeah, now it's 2012, and our
expectations have changed.

42
00:01:41.120 --> 00:01:44.760
And one big thing that's changed
in the past five

43
00:01:44.760 --> 00:01:46.880
years-- you've seen it here at
Google I/O. We have these

44
00:01:46.880 --> 00:01:49.840
things now like tablets
and mobile devices.

45
00:01:49.840 --> 00:01:55.790
And that's really changed
our expectations of

46
00:01:55.790 --> 00:01:57.540
what a nice app is.

47
00:01:57.540 --> 00:02:03.040
And this is an app that we wrote
to specifically run well

48
00:02:03.040 --> 00:02:04.200
on a tablet.

49
00:02:04.200 --> 00:02:05.940
And we had quite a few
aims with this.

50
00:02:05.940 --> 00:02:08.000
One is that we wanted to
make it beautiful.

51
00:02:08.000 --> 00:02:10.800
And to do that, we really wanted
precise control over

52
00:02:10.800 --> 00:02:14.620
how the app looked on the screen
and on a variety of

53
00:02:14.620 --> 00:02:16.120
different form factors.

54
00:02:16.120 --> 00:02:19.220
We wanted it to be very nice to
interact with, particularly

55
00:02:19.220 --> 00:02:22.000
with the latest and
greatest devices.

56
00:02:22.000 --> 00:02:23.800
Touch.

57
00:02:23.800 --> 00:02:25.300
We wanted rich animation.

58
00:02:25.300 --> 00:02:28.930
So we want the illusion
of infinite scroll.

59
00:02:28.930 --> 00:02:33.470
We want 60 frames per
second interaction.

60
00:02:33.470 --> 00:02:36.800
We just want this thing to be
able to respond to us very

61
00:02:36.800 --> 00:02:39.330
quickly in, again, a variety
of form factors.

62
00:02:39.330 --> 00:02:42.320
So what we were interested in
figuring out is whether we

63
00:02:42.320 --> 00:02:45.780
could build this sort of
an app in the browser.

64
00:02:45.780 --> 00:02:48.630
So basically our experiences
were validated.

65
00:02:48.630 --> 00:02:56.130
And this is the same exact app
running on Chrome with pretty

66
00:02:56.130 --> 00:02:58.900
much the same sort of interface
capabilities and

67
00:02:58.900 --> 00:03:01.270
interactivity with it.

68
00:03:01.270 --> 00:03:05.140
69
00:03:05.140 --> 00:03:06.520
DAN GROVE: Yeah, so users
really wanted to have

70
00:03:06.520 --> 00:03:08.810
something that was a lot better
than what we were

71
00:03:08.810 --> 00:03:10.320
giving them back in 2007.

72
00:03:10.320 --> 00:03:13.120
And when we designed Swarm, we
really wanted to make this

73
00:03:13.120 --> 00:03:13.670
thing beautiful.

74
00:03:13.670 --> 00:03:18.110
And we think that the mobile
space really has driven the

75
00:03:18.110 --> 00:03:19.690
beauty requirements
for apps quite a

76
00:03:19.690 --> 00:03:20.980
long way at this point.

77
00:03:20.980 --> 00:03:22.580
We also wanted the app
to be really fast.

78
00:03:22.580 --> 00:03:24.450
We wanted it to start
up instantly.

79
00:03:24.450 --> 00:03:25.810
And we also wanted
it to be super

80
00:03:25.810 --> 00:03:27.800
responsive to user actions.

81
00:03:27.800 --> 00:03:29.090
And there are a bunch of
good reasons for that.

82
00:03:29.090 --> 00:03:31.120
One of them is how many of you
guys have had Wi-Fi problems

83
00:03:31.120 --> 00:03:32.670
here today?

84
00:03:32.670 --> 00:03:33.700
Anyone?

85
00:03:33.700 --> 00:03:35.030
So that sucks, right?

86
00:03:35.030 --> 00:03:36.900
You're trying to use
your application.

87
00:03:36.900 --> 00:03:38.960
You're waiting for the
web to respond.

88
00:03:38.960 --> 00:03:40.700
It's terrible.

89
00:03:40.700 --> 00:03:43.250
We were told this morning that
no Wi-Fi was working at all

90
00:03:43.250 --> 00:03:44.720
for speaker talks.

91
00:03:44.720 --> 00:03:46.950
And so we were happy that our
app actually works offline.

92
00:03:46.950 --> 00:03:48.600
So that was great.

93
00:03:48.600 --> 00:03:50.060
We really wanted an app
that works offline.

94
00:03:50.060 --> 00:03:51.970
But we also wanted one that
would leverage the cloud when

95
00:03:51.970 --> 00:03:53.110
the cloud was available.

96
00:03:53.110 --> 00:03:54.800
VIJAY MENON: Yeah,
Lars and Kasper

97
00:03:54.800 --> 00:03:55.510
talked about this theme.

98
00:03:55.510 --> 00:03:56.820
It's been hit a few times.

99
00:03:56.820 --> 00:03:59.860
One of the reasons we did it,
the news app as our test

100
00:03:59.860 --> 00:04:01.970
application in Dart, well
one, we're news junkies.

101
00:04:01.970 --> 00:04:04.440
And we knew it was an app we'd
use, which is always good.

102
00:04:04.440 --> 00:04:07.100
But the other is that, that
was a fairly common

103
00:04:07.100 --> 00:04:08.860
experience.

104
00:04:08.860 --> 00:04:11.390
With the web, you don't
have to install.

105
00:04:11.390 --> 00:04:14.300
Probably, most of you've
gotten this experience,

106
00:04:14.300 --> 00:04:16.350
particularly on a mobile device,
where you get a link

107
00:04:16.350 --> 00:04:18.950
to a news story, you click on
it, and then you get this

108
00:04:18.950 --> 00:04:22.440
message that says, please
install this app for

109
00:04:22.440 --> 00:04:25.430
such-and-such newspaper you've
never heard of to get the best

110
00:04:25.430 --> 00:04:26.760
viewing experience.

111
00:04:26.760 --> 00:04:28.450
And there's many cases
where it makes

112
00:04:28.450 --> 00:04:29.400
sense to install apps.

113
00:04:29.400 --> 00:04:31.520
But that's one where at
least we think it

114
00:04:31.520 --> 00:04:33.310
made no sense at all.

115
00:04:33.310 --> 00:04:35.420
We just want the system to get
out of our way and be able to

116
00:04:35.420 --> 00:04:38.670
just get to our content in
the browser on the web.

117
00:04:38.670 --> 00:04:40.660
DAN GROVE: Yeah, so we wanted
to build a web application

118
00:04:40.660 --> 00:04:43.360
that was really first
class in every way.

119
00:04:43.360 --> 00:04:46.100
The good thing was that the web
had actually changed a ton

120
00:04:46.100 --> 00:04:47.350
in the last five years.

121
00:04:47.350 --> 00:04:49.680
So one thing that's happened is
that web capabilities have

122
00:04:49.680 --> 00:04:51.260
improved radically.

123
00:04:51.260 --> 00:04:53.160
So you've gotten things
like animation

124
00:04:53.160 --> 00:04:55.780
and Canvas and WebGL.

125
00:04:55.780 --> 00:04:56.420
I'll tell you a story.

126
00:04:56.420 --> 00:04:59.570
I was incredibly disappointed
when I first arrived at Google

127
00:04:59.570 --> 00:05:01.660
back coming up on
five years ago.

128
00:05:01.660 --> 00:05:04.340
Because I thought, the web can
do all this cool stuff.

129
00:05:04.340 --> 00:05:05.640
There's all this great stuff.

130
00:05:05.640 --> 00:05:07.630
And I went out, and I met with
a bunch of teams to find out

131
00:05:07.630 --> 00:05:08.130
what they're doing.

132
00:05:08.130 --> 00:05:12.260
They said, well Web 2.0, it's
string concatenation,

133
00:05:12.260 --> 00:05:13.620
essentially.

134
00:05:13.620 --> 00:05:14.610
That was basically it.

135
00:05:14.610 --> 00:05:16.880
There was nothing more
to it than that.

136
00:05:16.880 --> 00:05:18.230
And we've moved way past that.

137
00:05:18.230 --> 00:05:20.830
You can actually do these kinds
of cool animations and

138
00:05:20.830 --> 00:05:23.870
3D graphics on the web,
which is fantastic.

139
00:05:23.870 --> 00:05:25.350
We've also gotten rid of
a lot of plug-ins.

140
00:05:25.350 --> 00:05:27.970
So you can actually build audio
that competes with the

141
00:05:27.970 --> 00:05:29.520
best native audio.

142
00:05:29.520 --> 00:05:30.840
You don't need plug-ins
for video.

143
00:05:30.840 --> 00:05:33.880
That's another fantastic
thing.

144
00:05:33.880 --> 00:05:35.850
And then there are really crazy
things that have been

145
00:05:35.850 --> 00:05:38.300
developed, like sockets.

146
00:05:38.300 --> 00:05:40.156
You could actually have a socket
between the client and

147
00:05:40.156 --> 00:05:40.620
the server.

148
00:05:40.620 --> 00:05:41.580
I mean, it's 2012.

149
00:05:41.580 --> 00:05:44.420
It's about time, but you
can actually do it.

150
00:05:44.420 --> 00:05:46.920
One nice thing I'd point out
here is that this is code for

151
00:05:46.920 --> 00:05:50.080
creating a web socket in Dart,
and it's actually very pretty.

152
00:05:50.080 --> 00:05:51.160
It's actually typed.

153
00:05:51.160 --> 00:05:52.750
It's very easy to
reason about it.

154
00:05:52.750 --> 00:05:54.450
It has nice closures.

155
00:05:54.450 --> 00:05:55.810
When I first put up the
code for this--

156
00:05:55.810 --> 00:05:57.400
I actually put up the
JavaScript code for

157
00:05:57.400 --> 00:05:58.060
WebSockets--

158
00:05:58.060 --> 00:06:01.430
and frankly, it was a lot uglier
than the Dart code.

159
00:06:01.430 --> 00:06:02.980
So we'll be talking a
lot more about this.

160
00:06:02.980 --> 00:06:05.430
But I think it's really
fantastic.

161
00:06:05.430 --> 00:06:07.500
And there are a lot of other
really cool features that are

162
00:06:07.500 --> 00:06:08.140
coming on the web.

163
00:06:08.140 --> 00:06:09.150
And there are more coming
all the time.

164
00:06:09.150 --> 00:06:12.170
There are all kinds of talks
here about doing new P2P

165
00:06:12.170 --> 00:06:17.630
real-time video and audio and
all kinds of other neat stuff.

166
00:06:17.630 --> 00:06:21.260
VIJAY MENON: The other axis, big
axis, that's changed over

167
00:06:21.260 --> 00:06:22.940
time is JavaScript
performance.

168
00:06:22.940 --> 00:06:24.250
And this is a really
interesting graph.

169
00:06:24.250 --> 00:06:28.630
Because for a very, very long
period of time, up to 2007,

170
00:06:28.630 --> 00:06:30.740
performance of code running
in the browser

171
00:06:30.740 --> 00:06:32.250
didn't really change.

172
00:06:32.250 --> 00:06:35.210
And then in 2008, something
happened.

173
00:06:35.210 --> 00:06:37.700
One of those things, at least,
was that Chrome was released

174
00:06:37.700 --> 00:06:39.670
with V8, its JavaScript
engine.

175
00:06:39.670 --> 00:06:42.560
And performance suddenly
got a lot better.

176
00:06:42.560 --> 00:06:45.190
And then over the past five
years, it's really gotten

177
00:06:45.190 --> 00:06:48.010
much, much better, not
just on Chrome but on

178
00:06:48.010 --> 00:06:49.520
other browsers as well.

179
00:06:49.520 --> 00:06:53.080
In fact, even your mobile
devices today run JavaScript

180
00:06:53.080 --> 00:06:57.690
far faster than what a desktop
did five years ago.

181
00:06:57.690 --> 00:07:00.250
And what's interesting about
this is that a lot of the apps

182
00:07:00.250 --> 00:07:04.290
that we interact with were
designed in this old world,

183
00:07:04.290 --> 00:07:06.650
where you really had no ability
to do any interesting

184
00:07:06.650 --> 00:07:08.430
compute on the browser itself.

185
00:07:08.430 --> 00:07:10.170
It was just way too slow.

186
00:07:10.170 --> 00:07:12.750
And this is going to be kind of
a running theme here that

187
00:07:12.750 --> 00:07:16.550
we'll get to later, that we
can rethink apps today.

188
00:07:16.550 --> 00:07:17.690
This is not Moore's Law.

189
00:07:17.690 --> 00:07:23.000
This is Moore's Law on steroids
if you look at the

190
00:07:23.000 --> 00:07:24.570
gains that we've seen
in performance

191
00:07:24.570 --> 00:07:26.030
in just five years.

192
00:07:26.030 --> 00:07:31.250
And that lets us dramatically
rethink how we design apps.

193
00:07:31.250 --> 00:07:31.510
DAN GROVE: Right.

194
00:07:31.510 --> 00:07:33.530
So the bottom line here is that
the browser has really

195
00:07:33.530 --> 00:07:34.880
changed across two axes.

196
00:07:34.880 --> 00:07:37.110
It's gotten far more
capabilities, and the

197
00:07:37.110 --> 00:07:39.470
performance has increased so
much that we can start doing

198
00:07:39.470 --> 00:07:41.590
things radically differently
from the way we were doing

199
00:07:41.590 --> 00:07:44.570
them in the past.

200
00:07:44.570 --> 00:07:45.910
So we talked about the web.

201
00:07:45.910 --> 00:07:48.060
But why are we here talking
about Dart?

202
00:07:48.060 --> 00:07:53.540
Well, programs don't just
get better magically.

203
00:07:53.540 --> 00:07:55.390
They get better because
programmers develop them.

204
00:07:55.390 --> 00:07:57.830
And developing these better
apps often requires bigger

205
00:07:57.830 --> 00:07:59.800
apps that are made out
of building blocks.

206
00:07:59.800 --> 00:08:02.760
And that requires actually
programming at scale.

207
00:08:02.760 --> 00:08:05.900
And when we talk about
programming in scale on Dart,

208
00:08:05.900 --> 00:08:08.500
we're talking about things
like 100,000-line or a

209
00:08:08.500 --> 00:08:10.720
million-line application.

210
00:08:10.720 --> 00:08:12.550
You're unlikely to build
that yourself.

211
00:08:12.550 --> 00:08:14.100
In fact, you're unlikely to
have two or three people

212
00:08:14.100 --> 00:08:16.060
building that in
a small group.

213
00:08:16.060 --> 00:08:17.570
What you're likely to
have are actual

214
00:08:17.570 --> 00:08:19.790
composable building blocks.

215
00:08:19.790 --> 00:08:21.250
You're going to need
to reuse code.

216
00:08:21.250 --> 00:08:24.420
And we're not talking about
copying and pasting code or

217
00:08:24.420 --> 00:08:26.460
downloading a little
piece of JavaScript

218
00:08:26.460 --> 00:08:28.240
and pasting it together.

219
00:08:28.240 --> 00:08:29.956
We're talking about something
where you actually want to be

220
00:08:29.956 --> 00:08:33.039
able to build libraries and
reuse those libraries.

221
00:08:33.039 --> 00:08:36.250
In order to do that, you
actually want structure.

222
00:08:36.250 --> 00:08:38.820
So structure is great, because
it actually lets you start

223
00:08:38.820 --> 00:08:40.850
reasoning about your
application.

224
00:08:40.850 --> 00:08:43.750
All those things you learned
back in Computer Science 101

225
00:08:43.750 --> 00:08:45.100
are actually very relevant
in Dart.

226
00:08:45.100 --> 00:08:47.580
You have classes, and you have
interface, and you have all

227
00:08:47.580 --> 00:08:49.780
these nice things.

228
00:08:49.780 --> 00:08:51.230
You also want to have
static checking.

229
00:08:51.230 --> 00:08:56.030
So grep works great when you
have 1,000 lines of code or

230
00:08:56.030 --> 00:08:57.410
something like that.

231
00:08:57.410 --> 00:08:58.800
Grep doesn't work great
when you have a

232
00:08:58.800 --> 00:08:59.680
million lines of code.

233
00:08:59.680 --> 00:09:01.420
And at Google, we actually have
a number of people who

234
00:09:01.420 --> 00:09:04.070
spend their time thinking about
tools to go and search

235
00:09:04.070 --> 00:09:06.460
over your code and reason
about your code.

236
00:09:06.460 --> 00:09:09.390
Static checking and static
checkability of a language

237
00:09:09.390 --> 00:09:10.600
really assist this.

238
00:09:10.600 --> 00:09:12.870
You also want it
to be toolable.

239
00:09:12.870 --> 00:09:15.800
vi or TextMate probably start
breaking down when your

240
00:09:15.800 --> 00:09:17.590
application gets to
be 100,000 lines.

241
00:09:17.590 --> 00:09:20.120
You actually want to be able
to jump to definition.

242
00:09:20.120 --> 00:09:22.660
You want to be able to find out
if a type exists, or you

243
00:09:22.660 --> 00:09:24.830
want to be able to find out
if a method exists.

244
00:09:24.830 --> 00:09:27.510
All these things are really
important, and one of the

245
00:09:27.510 --> 00:09:29.990
things we'll be talking about
in this talk is the Dart

246
00:09:29.990 --> 00:09:33.730
Editor and how it helps
you with these things.

247
00:09:33.730 --> 00:09:37.290
So we have a bunch of tools to
make Dart easier to program.

248
00:09:37.290 --> 00:09:38.840
And the first of these
is the Dart Editor.

249
00:09:38.840 --> 00:09:42.010
This is an Eclipse-based editor
that Kasper showed off

250
00:09:42.010 --> 00:09:42.840
in the last talk.

251
00:09:42.840 --> 00:09:45.630
And it provides a lot of very
nice features, which Vijay

252
00:09:45.630 --> 00:09:47.820
will be popping into
in a minute.

253
00:09:47.820 --> 00:09:49.590
We also have something
that we call Dartium.

254
00:09:49.590 --> 00:09:51.900
And Dartium is our own
home-brewed version of

255
00:09:51.900 --> 00:09:54.730
Chromium with the Dart
VM embedded in it.

256
00:09:54.730 --> 00:09:56.985
And this is really fantastic
because it gives you that

257
00:09:56.985 --> 00:09:59.790
instant edit refresh cycle
that everyone likes.

258
00:09:59.790 --> 00:10:02.860
When it's time to actually
deploy your app, Kasper talked

259
00:10:02.860 --> 00:10:05.690
at length about the Dart2JS
Compiler in the last talk.

260
00:10:05.690 --> 00:10:08.030
The goal here is that Dart
does not break the web.

261
00:10:08.030 --> 00:10:11.320
We compiled Dart to the tip of
all the major browsers that

262
00:10:11.320 --> 00:10:12.590
are auto updated.

263
00:10:12.590 --> 00:10:16.260
And we also compile
it to run on IE9+.

264
00:10:16.260 --> 00:10:18.800
VIJAY MENON: So rather than
just tell you about this,

265
00:10:18.800 --> 00:10:20.730
let's dive in and show.

266
00:10:20.730 --> 00:10:23.850
And one of things we're going to
show later in this talk is

267
00:10:23.850 --> 00:10:26.930
we're going to go into detail
on the Swarm newsreader.

268
00:10:26.930 --> 00:10:30.670
But before I dive into that,
let's start with something

269
00:10:30.670 --> 00:10:31.290
really simple.

270
00:10:31.290 --> 00:10:34.370
Let's just go into the Dart
Editor here and create a new

271
00:10:34.370 --> 00:10:34.850
application.

272
00:10:34.850 --> 00:10:38.060
Let's just create a "Hello
World!" application here.

273
00:10:38.060 --> 00:10:41.100
So it's a nice wizard to just
get me bootstrapped.

274
00:10:41.100 --> 00:10:42.700
But it's really quite
simple here.

275
00:10:42.700 --> 00:10:43.370
There's just--

276
00:10:43.370 --> 00:10:47.240
If you look at what this
created, I have an HTML file.

277
00:10:47.240 --> 00:10:48.530
Let's go there first.

278
00:10:48.530 --> 00:10:50.890
That's, of course,
where you land.

279
00:10:50.890 --> 00:10:54.790
And it's HTML.

280
00:10:54.790 --> 00:10:57.460
The things I really want to call
out to you here are some

281
00:10:57.460 --> 00:11:00.870
things that we've done to help
you debug your application on

282
00:11:00.870 --> 00:11:02.940
Dartium and also deploy
it on any browser with

283
00:11:02.940 --> 00:11:05.890
the same HTML file.

284
00:11:05.890 --> 00:11:07.630
So first you'll notice two
script tags at the bottom.

285
00:11:07.630 --> 00:11:10.110
The first one has a type you
may not have seen before,

286
00:11:10.110 --> 00:11:11.390
application slash dart.

287
00:11:11.390 --> 00:11:14.600
That's a new type that is
intended for browsers that

288
00:11:14.600 --> 00:11:16.300
support Dart natively.

289
00:11:16.300 --> 00:11:19.050
And in our case,
that's Dartium.

290
00:11:19.050 --> 00:11:22.910
And so Dartium will be able to
just run hello.dart directly

291
00:11:22.910 --> 00:11:23.995
with no tools involved.

292
00:11:23.995 --> 00:11:26.410
You just change your
app, reload it in

293
00:11:26.410 --> 00:11:28.210
Dartium, and it works.

294
00:11:28.210 --> 00:11:31.110
Of course, you want your app
to run on all browsers.

295
00:11:31.110 --> 00:11:34.280
And to make that easy, at least
for the development

296
00:11:34.280 --> 00:11:37.110
perspective, we have this little
script called dart.js,

297
00:11:37.110 --> 00:11:38.400
which just bootstraps.

298
00:11:38.400 --> 00:11:41.330
It detects if you've got
Dart loaded or not--

299
00:11:41.330 --> 00:11:42.960
or Dart supported
natively or not.

300
00:11:42.960 --> 00:11:46.780
And if you don't have Dart
supported natively, it will

301
00:11:46.780 --> 00:11:51.420
replace it with a JS version
instead that you've generated.

302
00:11:51.420 --> 00:11:54.050
And of course, if you're
deploying this, you don't

303
00:11:54.050 --> 00:11:56.400
necessarily want to do this
stuff, you could just deploy

304
00:11:56.400 --> 00:12:00.880
directly with the JavaScript
that you generate

305
00:12:00.880 --> 00:12:02.640
out of Dart to JS.

306
00:12:02.640 --> 00:12:06.390
So let's take a look
at hello.dart.

307
00:12:06.390 --> 00:12:08.390
We're importing a library.

308
00:12:08.390 --> 00:12:09.450
I'll get to that in a moment.

309
00:12:09.450 --> 00:12:14.535
The main entry point of any
Dart application is Main.

310
00:12:14.535 --> 00:12:18.420
And it's calling a method called
showMessage here, which

311
00:12:18.420 --> 00:12:24.120
is taking a string and doing an
operation on it to show the

312
00:12:24.120 --> 00:12:26.620
message "Welcome to Dart"
on a web page.

313
00:12:26.620 --> 00:12:28.210
So let's just fire that up.

314
00:12:28.210 --> 00:12:30.090
This is running in Dartium.

315
00:12:30.090 --> 00:12:33.610
And you can see it's just
loaded up right here.

316
00:12:33.610 --> 00:12:34.730
So let's take a look at this.

317
00:12:34.730 --> 00:12:39.080
So first of all, dart:HTML is
the way you interact with the

318
00:12:39.080 --> 00:12:42.560
browser at the lowest
level in Dart.

319
00:12:42.560 --> 00:12:44.670
And we had a few things that we
were trying to do when we

320
00:12:44.670 --> 00:12:45.710
created this library.

321
00:12:45.710 --> 00:12:48.770
First, we wanted to basically
give you all the capabilities

322
00:12:48.770 --> 00:12:52.800
that you have in JavaScript for
interacting with the DOM.

323
00:12:52.800 --> 00:12:56.140
So anything you can pretty much
do in JavaScript you can

324
00:12:56.140 --> 00:12:57.510
do in Dart as well.

325
00:12:57.510 --> 00:12:59.900
But we also wanted to take
the opportunity to

326
00:12:59.900 --> 00:13:01.370
clean up the API.

327
00:13:01.370 --> 00:13:05.410
A lot of times, people will use
frameworks, like jQuery,

328
00:13:05.410 --> 00:13:10.270
for example, just because the
raw DOM API is kind of clumsy

329
00:13:10.270 --> 00:13:12.830
to use and shows its age.

330
00:13:12.830 --> 00:13:15.750
So we definitely took
inspiration from some of these

331
00:13:15.750 --> 00:13:19.000
frameworks and tried to just
clean up the raw DOM.

332
00:13:19.000 --> 00:13:24.060
So just accessing the DOM
directly was nice.

333
00:13:24.060 --> 00:13:28.370
And then finally, this library
was really codesigned as the

334
00:13:28.370 --> 00:13:29.970
Dart language itself evolved.

335
00:13:29.970 --> 00:13:34.670
And we tried to make the API
take advantage of all the

336
00:13:34.670 --> 00:13:35.920
features of Dart.

337
00:13:35.920 --> 00:13:39.550
So for example, this query API
here is-- it's kind of

338
00:13:39.550 --> 00:13:42.950
analogous to the dollar-sign
operation in jQuery if you're

339
00:13:42.950 --> 00:13:43.230
used to that.

340
00:13:43.230 --> 00:13:47.010
It's basically a querySelector
on the DOM looking for an

341
00:13:47.010 --> 00:13:51.160
element of ID text and
then setting its Text

342
00:13:51.160 --> 00:13:52.650
field to the message.

343
00:13:52.650 --> 00:13:55.550
And the nice thing about this
is that it's typed.

344
00:13:55.550 --> 00:13:58.150
So let's take a look at this.

345
00:13:58.150 --> 00:14:03.610
So suppose we just want to
go to the declaration.

346
00:14:03.610 --> 00:14:05.860
We've got the tooling to
go ahead and do that.

347
00:14:05.860 --> 00:14:07.820
So we can just see, what
is this query method?

348
00:14:07.820 --> 00:14:10.260
Well, we have this comment here
that tells us that it's

349
00:14:10.260 --> 00:14:13.070
returns the first element in
some traversal of the document

350
00:14:13.070 --> 00:14:14.810
given a string.

351
00:14:14.810 --> 00:14:16.290
What is an element?

352
00:14:16.290 --> 00:14:18.750
Well, we can do that too.

353
00:14:18.750 --> 00:14:20.640
Just chase that down, and we
see it's an interface.

354
00:14:20.640 --> 00:14:24.030
This ends up actually being one
of the basic interfaces in

355
00:14:24.030 --> 00:14:29.410
the HTML DOM that we can
go ahead and work with.

356
00:14:29.410 --> 00:14:32.790
So a nice thing also about using
the Dart Editor is that

357
00:14:32.790 --> 00:14:34.080
it's doing some analysis here.

358
00:14:34.080 --> 00:14:35.190
So it knows the type.

359
00:14:35.190 --> 00:14:37.140
So remember, query returns
an element.

360
00:14:37.140 --> 00:14:40.780
And so you're able to use that
information and get auto

361
00:14:40.780 --> 00:14:41.580
completion here.

362
00:14:41.580 --> 00:14:43.480
And we know what
the fields are.

363
00:14:43.480 --> 00:14:46.800
And so, as a programmer,
you can quickly search.

364
00:14:46.800 --> 00:14:48.230
You don't have to look
up documentation.

365
00:14:48.230 --> 00:14:52.940
You have at your fingertips
what you can do.

366
00:14:52.940 --> 00:14:56.760
Another nice thing is if
you do make typos,

367
00:14:56.760 --> 00:14:57.770
the editor can tell.

368
00:14:57.770 --> 00:15:01.000
It'll look at the type
information, and show you that

369
00:15:01.000 --> 00:15:04.110
you did something wrong.

370
00:15:04.110 --> 00:15:05.355
DAN GROVE: There's a red
line under there, for

371
00:15:05.355 --> 00:15:06.230
those in the back.

372
00:15:06.230 --> 00:15:08.050
VIJAY MENON: The yellow line or
problem, and if we look at

373
00:15:08.050 --> 00:15:10.300
the list of problems
here, we see, hey,

374
00:15:10.300 --> 00:15:11.190
there's something wrong.

375
00:15:11.190 --> 00:15:13.730
Text is not a member
of element.

376
00:15:13.730 --> 00:15:17.260
If you were at the last talk,
one of the things that Kasper

377
00:15:17.260 --> 00:15:19.800
talked about in terms of
JavaScript is that it had this

378
00:15:19.800 --> 00:15:21.640
just trucking mentality.

379
00:15:21.640 --> 00:15:24.800
And this is a case where, if
you do this kind of code in

380
00:15:24.800 --> 00:15:27.030
JavaScript and you misspell
the field, it will happily

381
00:15:27.030 --> 00:15:30.630
just create a new property
called txt on your element.

382
00:15:30.630 --> 00:15:31.560
And it won't show up.

383
00:15:31.560 --> 00:15:33.010
And you'll just be wondering
what happened.

384
00:15:33.010 --> 00:15:35.480
And you'll have to dig
that out yourself.

385
00:15:35.480 --> 00:15:38.980
Here, we get that information
right away.

386
00:15:38.980 --> 00:15:41.920
And that's, again, the
philosophy of early error

387
00:15:41.920 --> 00:15:44.360
information in Dart, which we
think is going to be very

388
00:15:44.360 --> 00:15:46.880
important as we go
to larger apps.

389
00:15:46.880 --> 00:15:51.080
So let's show more about Dart
HTML before we move on.

390
00:15:51.080 --> 00:15:53.925
One of the fundamental things
you want to do with DOM is

391
00:15:53.925 --> 00:15:54.710
create elements.

392
00:15:54.710 --> 00:15:57.910
And we have a nice way
of doing that.

393
00:15:57.910 --> 00:16:00.020
In JavaScript you
need a factory.

394
00:16:00.020 --> 00:16:01.740
In Dart you just call
a constructor.

395
00:16:01.740 --> 00:16:03.960
So we can call new
CanvasElement

396
00:16:03.960 --> 00:16:06.120
to create the Canvas.

397
00:16:06.120 --> 00:16:10.450
And the constructor for Canvas
takes height and width.

398
00:16:10.450 --> 00:16:13.800
It uses a feature called
Optional Named Parameters.

399
00:16:13.800 --> 00:16:19.820
So I don't have to remember
the order in which it's--

400
00:16:19.820 --> 00:16:20.920
whether it's height or width.

401
00:16:20.920 --> 00:16:23.550
I can just go ahead
and invoke that.

402
00:16:23.550 --> 00:16:27.215
And this typo, at least,
was on purpose.

403
00:16:27.215 --> 00:16:29.420
It shows that, hey,
I got it wrong.

404
00:16:29.420 --> 00:16:31.680
That was the wrong name
of the field.

405
00:16:31.680 --> 00:16:33.740
Every time I give this talk
I have different typos.

406
00:16:33.740 --> 00:16:35.910
So you can guess which ones--

407
00:16:35.910 --> 00:16:37.460
They're all on purpose.

408
00:16:37.460 --> 00:16:39.840
It's all right.

409
00:16:39.840 --> 00:16:42.310
So yeah, I could tell right away
that there's a problem.

410
00:16:42.310 --> 00:16:44.620
And I can go ahead
and fix that.

411
00:16:44.620 --> 00:16:50.520
And again, I get cool type
completion from here.

412
00:16:50.520 --> 00:16:54.040
So again, I know what's
on the Canvas.

413
00:16:54.040 --> 00:16:56.840
I know that it's got a context,
a 2D context, in

414
00:16:56.840 --> 00:16:57.450
particular.

415
00:16:57.450 --> 00:17:01.140
Usually want to get at the
context to be able to do

416
00:17:01.140 --> 00:17:02.620
interesting things.

417
00:17:02.620 --> 00:17:08.372
And then if I want to set the
fill style in the context, not

418
00:17:08.372 --> 00:17:13.930
the Context 2D, again, I
can see what's there.

419
00:17:13.930 --> 00:17:15.180
Let's make this one red.

420
00:17:15.180 --> 00:17:17.930
421
00:17:17.930 --> 00:17:19.216
Let's also fill a rectangle.

422
00:17:19.216 --> 00:17:24.190
423
00:17:24.190 --> 00:17:26.130
Go with something very
simple here.

424
00:17:26.130 --> 00:17:29.340
But again, I see, as I'm typing
in, what the signature

425
00:17:29.340 --> 00:17:30.370
of this method is.

426
00:17:30.370 --> 00:17:31.990
So I don't have to really guess
at what the parameters

427
00:17:31.990 --> 00:17:34.820
are or have to look up
things on the side.

428
00:17:34.820 --> 00:17:36.370
It just sort of works for me.

429
00:17:36.370 --> 00:17:39.890
And let's go ahead and add this
to the document and see

430
00:17:39.890 --> 00:17:41.870
how that looks.

431
00:17:41.870 --> 00:17:44.575
So I'm just going to get the
nodes of the document's body.

432
00:17:44.575 --> 00:17:47.310
And I'm going to go ahead
and add the Canvas.

433
00:17:47.310 --> 00:17:50.410
434
00:17:50.410 --> 00:17:53.290
And let's load that
up in Dartium.

435
00:17:53.290 --> 00:17:55.340
And now you can see our "hello"
app with just a little

436
00:17:55.340 --> 00:17:57.840
Canvas at the bottom.

437
00:17:57.840 --> 00:17:58.330
All right.

438
00:17:58.330 --> 00:18:00.600
So let's make this a little
bit more interesting.

439
00:18:00.600 --> 00:18:03.250
First of all let's just--

440
00:18:03.250 --> 00:18:05.140
Because I don't type too fast,
let me just do some cut and

441
00:18:05.140 --> 00:18:07.500
paste and create a second
Canvas here,

442
00:18:07.500 --> 00:18:09.060
and save this off.

443
00:18:09.060 --> 00:18:12.810
And as I do this, one nice thing
I get is, hey there's

444
00:18:12.810 --> 00:18:13.630
some errors.

445
00:18:13.630 --> 00:18:15.730
You can't just do it
the way you did.

446
00:18:15.730 --> 00:18:20.290
The editor shows me right away
that Canvas and context are

447
00:18:20.290 --> 00:18:21.360
duplicate definitions.

448
00:18:21.360 --> 00:18:23.870
And in this case, I can look at
my code and know that these

449
00:18:23.870 --> 00:18:26.200
two definitions don't conflict
with each other.

450
00:18:26.200 --> 00:18:29.520
And I can make sure that I'm
doing the right thing here.

451
00:18:29.520 --> 00:18:33.870
And let's make this one a little
bit different for fun.

452
00:18:33.870 --> 00:18:35.380
Give it a different width.

453
00:18:35.380 --> 00:18:42.230
Let's make it blue, and
just load it back up.

454
00:18:42.230 --> 00:18:44.740
And again, I'm just
reloading--

455
00:18:44.740 --> 00:18:46.660
I'm restarting the browser,
because it's so fast.

456
00:18:46.660 --> 00:18:48.370
But you don't have to do that.

457
00:18:48.370 --> 00:18:51.140
I can just go change it here.

458
00:18:51.140 --> 00:18:52.220
I do have to save my file.

459
00:18:52.220 --> 00:18:56.000
But then I can just go
back into Dartium

460
00:18:56.000 --> 00:18:57.720
here and reload it.

461
00:18:57.720 --> 00:19:00.030
And everything just works.

462
00:19:00.030 --> 00:19:02.140
So that's how you
create elements.

463
00:19:02.140 --> 00:19:04.110
You've got nice constructors
in Dart that you

464
00:19:04.110 --> 00:19:05.210
can use to do it.

465
00:19:05.210 --> 00:19:07.700
You've got named optional
parameters to make it easy to

466
00:19:07.700 --> 00:19:09.440
set things up.

467
00:19:09.440 --> 00:19:10.450
Let's say you want a query.

468
00:19:10.450 --> 00:19:12.320
That's a fundamental
operation.

469
00:19:12.320 --> 00:19:14.400
And we showed one example
right here where we're

470
00:19:14.400 --> 00:19:19.230
querying for text, for the
element with the text ID.

471
00:19:19.230 --> 00:19:28.070
Let's do another one where we
get a list of all of the

472
00:19:28.070 --> 00:19:30.800
Canvas objects.

473
00:19:30.800 --> 00:19:34.270
So Query All is another
operation like query, but this

474
00:19:34.270 --> 00:19:35.150
returns a list.

475
00:19:35.150 --> 00:19:37.770
So now you get nice typing
information.

476
00:19:37.770 --> 00:19:41.480
List is a fundamental data
structure in Dart.

477
00:19:41.480 --> 00:19:43.250
And there's nice language
support for it.

478
00:19:43.250 --> 00:19:49.750
So I get this list, and it's
really easy to just iterate

479
00:19:49.750 --> 00:19:51.950
over all the elements
in the list.

480
00:19:51.950 --> 00:19:54.840
So this will give me each
Canvas, and I can do something

481
00:19:54.840 --> 00:19:55.620
interesting with it.

482
00:19:55.620 --> 00:20:02.010
So in this case, let's go ahead
and set the context.

483
00:20:02.010 --> 00:20:03.940
And note that this
is pretty cool.

484
00:20:03.940 --> 00:20:07.850
The editor is still able to
reason about this and do some

485
00:20:07.850 --> 00:20:09.450
nice auto complete for me.

486
00:20:09.450 --> 00:20:14.660
So let's fill in another
rectangle, slightly different,

487
00:20:14.660 --> 00:20:15.910
so we can actually
see something.

488
00:20:15.910 --> 00:20:18.530
489
00:20:18.530 --> 00:20:21.300
So this should go through the
two Canvases on my page and

490
00:20:21.300 --> 00:20:23.740
draw an existing rectangle.

491
00:20:23.740 --> 00:20:25.500
So let's see if I
did this right.

492
00:20:25.500 --> 00:20:27.500
And yes, you can see that
here is the second

493
00:20:27.500 --> 00:20:30.390
rectangle on both.

494
00:20:30.390 --> 00:20:32.160
Iterating over properties,
this is kind of a

495
00:20:32.160 --> 00:20:33.930
cool, subtle thing.

496
00:20:33.930 --> 00:20:36.950
You can write this code
in JavaScript and

497
00:20:36.950 --> 00:20:37.840
iterate over the list.

498
00:20:37.840 --> 00:20:39.320
But it doesn't do exactly
what you want.

499
00:20:39.320 --> 00:20:41.750
It will not only give you the
Canvas objects, it will also

500
00:20:41.750 --> 00:20:43.760
give you the length property
and so on.

501
00:20:43.760 --> 00:20:46.670
So it's not as nicely integrated
as it is in Dart.

502
00:20:46.670 --> 00:20:48.790
And that makes for a pretty
cool experience.

503
00:20:48.790 --> 00:20:51.430
504
00:20:51.430 --> 00:20:53.570
One of the things we liked
a lot about jQuery is the

505
00:20:53.570 --> 00:20:55.010
ability to chain things
together.

506
00:20:55.010 --> 00:20:58.190
And you can do that in pretty
cool ways in Dart, too.

507
00:20:58.190 --> 00:21:03.030
So let's do another operation
on the Canvas here.

508
00:21:03.030 --> 00:21:05.150
And again, this is going
to give me a

509
00:21:05.150 --> 00:21:07.830
list of all the Canvases.

510
00:21:07.830 --> 00:21:11.790
And the list object in Dart has
a lot of nice functional

511
00:21:11.790 --> 00:21:12.460
style methods.

512
00:21:12.460 --> 00:21:15.980
So one of the things we
can do is filter.

513
00:21:15.980 --> 00:21:18.020
And that takes a closure.

514
00:21:18.020 --> 00:21:22.540
So we can basically say, well
let's get all of the elements

515
00:21:22.540 --> 00:21:27.650
where the width is
equal to 100.

516
00:21:27.650 --> 00:21:32.840
So that should give me
the second Canvas.

517
00:21:32.840 --> 00:21:34.640
A lot of times--

518
00:21:34.640 --> 00:21:37.390
And again, I get the nice
auto complete as I go.

519
00:21:37.390 --> 00:21:43.350
A lot of times, again, when
you're working with a Canvas,

520
00:21:43.350 --> 00:21:45.140
you really just want to
work with its context.

521
00:21:45.140 --> 00:21:50.780
So we can go ahead and pull
out the context 2D.

522
00:21:50.780 --> 00:21:54.860
So now instead of a list of
Canvas elements, we have a

523
00:21:54.860 --> 00:21:57.020
list of Canvas rendering
context 2D.

524
00:21:57.020 --> 00:21:59.515
That's a bit of a mouthful, but
we haven't actually had to

525
00:21:59.515 --> 00:21:59.930
type that in.

526
00:21:59.930 --> 00:22:02.920
So it's not so bad.

527
00:22:02.920 --> 00:22:11.360
And then finally, once we have
that context that we want,

528
00:22:11.360 --> 00:22:16.110
let's go ahead and, since I'm
having so much fun with

529
00:22:16.110 --> 00:22:19.330
rectangles, fill another
rectangle this time.

530
00:22:19.330 --> 00:22:22.550
531
00:22:22.550 --> 00:22:25.465
And let's make this kind of
long, just so it shows up.

532
00:22:25.465 --> 00:22:30.150
533
00:22:30.150 --> 00:22:33.914
And I need to close that off.

534
00:22:33.914 --> 00:22:36.150
Oh, don't have a semicolon
there.

535
00:22:36.150 --> 00:22:38.980
It's awfully nice having an
editor that tells you what you

536
00:22:38.980 --> 00:22:42.370
did wrong when you're giving
a live demo, by the way.

537
00:22:42.370 --> 00:22:42.730
So yeah.

538
00:22:42.730 --> 00:22:44.040
I save that.

539
00:22:44.040 --> 00:22:45.790
Let me go ahead and
load that up.

540
00:22:45.790 --> 00:22:48.340
If I did this right, yes, you
see a difference only on the

541
00:22:48.340 --> 00:22:49.070
second Canvas.

542
00:22:49.070 --> 00:22:51.410
So again, you've got this nice
way of just chaining things

543
00:22:51.410 --> 00:22:54.640
together in Dart that you just
get for free, because we're

544
00:22:54.640 --> 00:22:57.930
able to leverage the core
Dart data structures.

545
00:22:57.930 --> 00:23:01.100
And one final thing I want
to get to in dart:HTML.

546
00:23:01.100 --> 00:23:04.200
Fundamental thing with UIs, of
course, and web UIs, is you

547
00:23:04.200 --> 00:23:07.080
want to be able to
add listeners.

548
00:23:07.080 --> 00:23:08.810
So you can do that.

549
00:23:08.810 --> 00:23:10.980
And that's another thing that
we've changed a bit.

550
00:23:10.980 --> 00:23:15.140
Let me just go ahead and use
this text element here.

551
00:23:15.140 --> 00:23:16.390
This is an element.

552
00:23:16.390 --> 00:23:19.230
We can listen to all of the
events on it by just looking

553
00:23:19.230 --> 00:23:22.080
at this On field, which gives us
a list of all the things we

554
00:23:22.080 --> 00:23:22.910
can listen on to.

555
00:23:22.910 --> 00:23:25.730
So we can easily see
what's there.

556
00:23:25.730 --> 00:23:29.160
And of course, one of the more
interesting ones is click.

557
00:23:29.160 --> 00:23:32.120
We can go ahead and add
our own handler that

558
00:23:32.120 --> 00:23:33.150
listens to an event.

559
00:23:33.150 --> 00:23:34.470
And in this case, we're
not going to do

560
00:23:34.470 --> 00:23:35.280
anything with that event.

561
00:23:35.280 --> 00:23:36.530
We're just going to show
a new message.

562
00:23:36.530 --> 00:23:48.390
563
00:23:48.390 --> 00:23:52.030
And if I did this right,
I have the event here.

564
00:23:52.030 --> 00:23:52.400
OK.

565
00:23:52.400 --> 00:23:54.460
So that's all running
in Dartium.

566
00:23:54.460 --> 00:23:58.950
Of course, you're going to want
to be able to run your

567
00:23:58.950 --> 00:24:00.810
stuff as JavaScript, and
that's easy to do.

568
00:24:00.810 --> 00:24:03.200
You can just generate
JavaScript here.

569
00:24:03.200 --> 00:24:08.570
And let's go there, grab that
same URL, go to another

570
00:24:08.570 --> 00:24:10.260
browser, Firefox--

571
00:24:10.260 --> 00:24:13.980
we haven't actually put
the Dart VM in there.

572
00:24:13.980 --> 00:24:20.350
And OK.

573
00:24:20.350 --> 00:24:21.175
Thank you.

574
00:24:21.175 --> 00:24:23.490
Hey, it's great having an
audience that knows

575
00:24:23.490 --> 00:24:24.220
what I should do.

576
00:24:24.220 --> 00:24:25.010
So Firefox running.

577
00:24:25.010 --> 00:24:26.090
Thank you very much.

578
00:24:26.090 --> 00:24:27.050
And here's the same code.

579
00:24:27.050 --> 00:24:30.800
And glad you're paying attention
and helping me out.

580
00:24:30.800 --> 00:24:37.190
And it's running the same
as it ran in Chrome.

581
00:24:37.190 --> 00:24:40.550
So all this tooling really
helps us out, we believe.

582
00:24:40.550 --> 00:24:44.730
But you don't have to use the
tooling if you don't want to.

583
00:24:44.730 --> 00:24:47.660
All of the stuff is available
there to use

584
00:24:47.660 --> 00:24:49.720
at the command line.

585
00:24:49.720 --> 00:24:50.360
DAN GROVE: Yeah, exactly.

586
00:24:50.360 --> 00:24:53.690
So we certainly have people on
our team that will never use

587
00:24:53.690 --> 00:24:54.950
an IDE ever.

588
00:24:54.950 --> 00:24:58.650
And they're actually perfectly
happy writing Dart code.

589
00:24:58.650 --> 00:25:00.510
These are the same people,
they use vi.

590
00:25:00.510 --> 00:25:01.930
They're really addicted to it.

591
00:25:01.930 --> 00:25:02.940
They're not going to switch.

592
00:25:02.940 --> 00:25:04.510
But all the tools
work fine there.

593
00:25:04.510 --> 00:25:06.660
So you can run the Dart VM
on the command line.

594
00:25:06.660 --> 00:25:09.115
You can run the Dart Compiler
on the command line, produce

595
00:25:09.115 --> 00:25:10.870
your JavaScript for your
web application.

596
00:25:10.870 --> 00:25:11.640
You can use Dartium.

597
00:25:11.640 --> 00:25:12.720
You can use everything.

598
00:25:12.720 --> 00:25:14.890
So you don't have to buy into
all of the tools in order to

599
00:25:14.890 --> 00:25:16.660
make this work.

600
00:25:16.660 --> 00:25:19.040
So let's get back to Swarm and
talk about the design choices

601
00:25:19.040 --> 00:25:20.720
we made and how we
think modern apps

602
00:25:20.720 --> 00:25:23.430
should be built in Dart.

603
00:25:23.430 --> 00:25:26.290
So going back to the goals here,
we really wanted Swarm

604
00:25:26.290 --> 00:25:29.140
to be a great news reader that
was written in Dart.

605
00:25:29.140 --> 00:25:30.890
Why written in Dart?

606
00:25:30.890 --> 00:25:32.720
Because we care a ton about
Dart, and we actually wanted

607
00:25:32.720 --> 00:25:33.880
to learn about the language.

608
00:25:33.880 --> 00:25:36.100
And we wanted to iterate on
the language with a real

609
00:25:36.100 --> 00:25:37.640
application.

610
00:25:37.640 --> 00:25:39.810
Speed is critical.

611
00:25:39.810 --> 00:25:43.570
If you work on the Dart Team,
you have to care about speed.

612
00:25:43.570 --> 00:25:44.820
There's just no way around it.

613
00:25:44.820 --> 00:25:48.990
So 60 frames per second is the
requirement these days.

614
00:25:48.990 --> 00:25:50.900
We needed an application that
could be customized to

615
00:25:50.900 --> 00:25:51.830
different form factors.

616
00:25:51.830 --> 00:25:53.290
I remember the first time
we showed it to someone.

617
00:25:53.290 --> 00:25:55.500
The first question we got was,
so if you want to run this on

618
00:25:55.500 --> 00:25:57.180
a phone, do you have to
rewrite the entire

619
00:25:57.180 --> 00:25:57.840
application?

620
00:25:57.840 --> 00:25:58.970
And the answer is no.

621
00:25:58.970 --> 00:26:01.030
We tried to design it in such
a way that we could actually

622
00:26:01.030 --> 00:26:04.490
build customized UIs relatively
straightforwardly.

623
00:26:04.490 --> 00:26:07.290
And finally, we wanted it
to be offline capable.

624
00:26:07.290 --> 00:26:09.120
And not just so that the demo
would work when we were

625
00:26:09.120 --> 00:26:10.610
talking at Google I/O.
But there are a

626
00:26:10.610 --> 00:26:12.580
lot of other reasons.

627
00:26:12.580 --> 00:26:15.710
Most of you, I guess all of us,
will wind up with these

628
00:26:15.710 --> 00:26:19.550
Wi-Fi-enabled tablets that
have no connectivity when

629
00:26:19.550 --> 00:26:22.780
they're outside a Wi-Fi zone or
when they're at Google I/O.

630
00:26:22.780 --> 00:26:25.240
So people that have those are
going to care a ton about

631
00:26:25.240 --> 00:26:26.430
being offline.

632
00:26:26.430 --> 00:26:28.290
People that live in the US care
a lot about this too.

633
00:26:28.290 --> 00:26:31.060
Because the mobile networks here
are pretty lousy, and you

634
00:26:31.060 --> 00:26:34.030
often wind up without
connectivity.

635
00:26:34.030 --> 00:26:39.210
So we needed to meet all these
goals to make Swarm work well.

636
00:26:39.210 --> 00:26:40.390
So we started with the UI.

637
00:26:40.390 --> 00:26:42.570
And we wanted to build
a great layout.

638
00:26:42.570 --> 00:26:45.050
And we wanted to build a system
that would work nicely

639
00:26:45.050 --> 00:26:48.550
on phones, on tablets,
and on the desktop.

640
00:26:48.550 --> 00:26:50.190
We really liked what we saw
when we went out and

641
00:26:50.190 --> 00:26:51.365
looked at CS's grid.

642
00:26:51.365 --> 00:26:54.120
We thought, that's super cool.

643
00:26:54.120 --> 00:26:55.890
Unfortunately, it's
not everywhere we

644
00:26:55.890 --> 00:26:56.900
needed it to be yet.

645
00:26:56.900 --> 00:26:59.220
It's critical to us that we not
break the web and that we

646
00:26:59.220 --> 00:27:01.320
actually build Dart applications
that work across

647
00:27:01.320 --> 00:27:03.430
all the browsers that
we're targeting.

648
00:27:03.430 --> 00:27:05.350
We also looked at CS's
flex box, which is

649
00:27:05.350 --> 00:27:08.080
also kind of cool.

650
00:27:08.080 --> 00:27:09.340
But it has some problems.

651
00:27:09.340 --> 00:27:10.930
One is that it doesn't
support animation.

652
00:27:10.930 --> 00:27:13.430
And animation is really critical
if we're going to

653
00:27:13.430 --> 00:27:15.290
build really great apps.

654
00:27:15.290 --> 00:27:17.000
It's also not identical
cross browser.

655
00:27:17.000 --> 00:27:18.570
And we didn't really
want to do a lot of

656
00:27:18.570 --> 00:27:20.690
tweaking across browsers.

657
00:27:20.690 --> 00:27:22.770
And then we had a revelation.

658
00:27:22.770 --> 00:27:25.580
We thought about building this
and doing layout in code.

659
00:27:25.580 --> 00:27:27.360
And that's kind of nice.

660
00:27:27.360 --> 00:27:29.550
Because layout in code could
be the same everywhere.

661
00:27:29.550 --> 00:27:32.450
And you can actually get
animations that work.

662
00:27:32.450 --> 00:27:35.340
And we can build on all this
awesome VM speed that has been

663
00:27:35.340 --> 00:27:37.900
developed over the
last five years.

664
00:27:37.900 --> 00:27:41.110
We don't have to rely on only
the browser primitives.

665
00:27:41.110 --> 00:27:43.240
We can actually do interesting
stuff in code.

666
00:27:43.240 --> 00:27:44.590
And that was what we decided
to do for the

667
00:27:44.590 --> 00:27:47.630
layout engine here.

668
00:27:47.630 --> 00:27:50.310
Underneath the layout, we
thought that we would actually

669
00:27:50.310 --> 00:27:52.330
try to take a fairly structured
approach to

670
00:27:52.330 --> 00:27:53.470
building the application.

671
00:27:53.470 --> 00:27:56.120
And it's kind of a mouthful,
like the

672
00:27:56.120 --> 00:27:57.580
Model-View-ViewModel Approach.

673
00:27:57.580 --> 00:28:01.530
And this has been an approach
that's been taken, basically,

674
00:28:01.530 --> 00:28:05.790
since the mid-2000s for rich
client applications.

675
00:28:05.790 --> 00:28:08.570
And the general idea here
is that you have Views.

676
00:28:08.570 --> 00:28:11.020
And each of those Views is
coupled to its own ViewModel.

677
00:28:11.020 --> 00:28:13.800
And the ViewModel essentially
maintains state that is

678
00:28:13.800 --> 00:28:18.460
related to the View but that
isn't the same as the true

679
00:28:18.460 --> 00:28:20.100
model that stores the data.

680
00:28:20.100 --> 00:28:22.330
So ViewModels often have
transient state.

681
00:28:22.330 --> 00:28:23.950
They often interact
with each other.

682
00:28:23.950 --> 00:28:27.430
And they essentially mediate
between the core data model

683
00:28:27.430 --> 00:28:28.880
and the UI.

684
00:28:28.880 --> 00:28:30.510
Underneath the data layer,
we can actually

685
00:28:30.510 --> 00:28:31.240
connect to the cloud.

686
00:28:31.240 --> 00:28:33.480
And the nice thing is, if we
build our application this

687
00:28:33.480 --> 00:28:36.400
way, we can actually deal with
lack of connectivity to the

688
00:28:36.400 --> 00:28:37.880
cloud, which is important.

689
00:28:37.880 --> 00:28:40.410
690
00:28:40.410 --> 00:28:43.580
So let's walk through Swarm
and take a look at these

691
00:28:43.580 --> 00:28:44.320
different parts.

692
00:28:44.320 --> 00:28:46.430
So first of all, the model.

693
00:28:46.430 --> 00:28:49.380
The model is the true
application state, and by that

694
00:28:49.380 --> 00:28:51.860
I mean that all of the data
that we need to be able to

695
00:28:51.860 --> 00:28:54.280
build the application
lives in the model.

696
00:28:54.280 --> 00:28:56.860
One of the important things for
us is that, in order to

697
00:28:56.860 --> 00:28:59.890
have things like offline and
local acceleration where

698
00:28:59.890 --> 00:29:02.650
you're actually responding to
results on the client, you

699
00:29:02.650 --> 00:29:03.980
actually need to be
able to construct

700
00:29:03.980 --> 00:29:05.100
the UI on the client.

701
00:29:05.100 --> 00:29:08.960
And we can do that, because we
have these powerful VMs now.

702
00:29:08.960 --> 00:29:10.770
There are a lot of other neat
things that you can get if you

703
00:29:10.770 --> 00:29:13.120
actually build a model
correctly.

704
00:29:13.120 --> 00:29:14.720
One is tab consistency.

705
00:29:14.720 --> 00:29:17.940
This is something that annoys me
constantly as I have Gmail

706
00:29:17.940 --> 00:29:19.420
open on a couple of
different tabs.

707
00:29:19.420 --> 00:29:22.810
And one tab says I have 20,000
unread messages, and the other

708
00:29:22.810 --> 00:29:24.960
one says I have 20,001
unread messages.

709
00:29:24.960 --> 00:29:26.440
It's really irritating.

710
00:29:26.440 --> 00:29:29.650
We can actually use things like
shared workers on the web

711
00:29:29.650 --> 00:29:32.670
to have a shared model between
different tabs and start

712
00:29:32.670 --> 00:29:34.290
getting tabs that are
actually consistent.

713
00:29:34.290 --> 00:29:38.420
And when that day comes, it
will be a fantastic thing.

714
00:29:38.420 --> 00:29:40.550
We can also get strong data
and View separation.

715
00:29:40.550 --> 00:29:42.470
And that's really nice, because
then we can actually

716
00:29:42.470 --> 00:29:45.010
build different Views and
different UIs without

717
00:29:45.010 --> 00:29:47.320
rebuilding the entire
application.

718
00:29:47.320 --> 00:29:51.930
So let's look at what the pieces
of the Swarm model are.

719
00:29:51.930 --> 00:29:53.850
So first of all, we
have the sections.

720
00:29:53.850 --> 00:29:56.260
And these are the sections of
news that I've decided to

721
00:29:56.260 --> 00:29:56.970
subscribe to.

722
00:29:56.970 --> 00:30:02.840
So no surprise, Google is one of
them, Geek is one of them,

723
00:30:02.840 --> 00:30:04.100
all the usual things.

724
00:30:04.100 --> 00:30:04.950
And then we have feeds.

725
00:30:04.950 --> 00:30:07.620
And the feeds are essentially
RSS feeds that

726
00:30:07.620 --> 00:30:09.670
are stored per section.

727
00:30:09.670 --> 00:30:12.740
And then in the model, we
have articles per feed.

728
00:30:12.740 --> 00:30:14.260
And these articles are
not what you're

729
00:30:14.260 --> 00:30:14.960
seeing on the screen.

730
00:30:14.960 --> 00:30:20.030
These articles are the actual
full text of the articles.

731
00:30:20.030 --> 00:30:21.790
We'll turn that into
UI in a little bit.

732
00:30:21.790 --> 00:30:25.870
But the entire content of the
article is stored here.

733
00:30:25.870 --> 00:30:28.930
Once we have the model, we can
pop up the stack a little bit

734
00:30:28.930 --> 00:30:30.450
into the ViewModel.

735
00:30:30.450 --> 00:30:32.930
And the ViewModel is essentially
responsible for

736
00:30:32.930 --> 00:30:35.030
transforming the model
for the View.

737
00:30:35.030 --> 00:30:37.850
It also performs all the
interactions between the View

738
00:30:37.850 --> 00:30:39.430
and the actual application.

739
00:30:39.430 --> 00:30:41.410
You can think of the View as
really being the UI side of

740
00:30:41.410 --> 00:30:44.180
things and the ViewModel being
where those UI events get

741
00:30:44.180 --> 00:30:47.320
modeled into something that
deals with the rest of the

742
00:30:47.320 --> 00:30:48.570
application.

743
00:30:48.570 --> 00:30:49.600
You can also have Events here.

744
00:30:49.600 --> 00:30:51.590
You might have data that's
changing on the cloud and

745
00:30:51.590 --> 00:30:54.240
popping up through the model, or
changing in some other tab

746
00:30:54.240 --> 00:30:56.350
and then popping up
through the model.

747
00:30:56.350 --> 00:30:58.330
All these things happen
in the ViewModel.

748
00:30:58.330 --> 00:31:02.560
And we build one ViewModel for
each View in the system.

749
00:31:02.560 --> 00:31:03.890
There's also a lot of
transient state

750
00:31:03.890 --> 00:31:05.070
that's stored here.

751
00:31:05.070 --> 00:31:08.020
For instance, in the Swarm
ViewModel, you'd have things

752
00:31:08.020 --> 00:31:09.480
like the Current Section.

753
00:31:09.480 --> 00:31:12.350
And you can see if you're really
close, that there's a

754
00:31:12.350 --> 00:31:13.920
little carrot up underneath
the top.

755
00:31:13.920 --> 00:31:17.260
And you can see the top is
actually written in red.

756
00:31:17.260 --> 00:31:19.230
Current Feed so that you know
what feeds you should be

757
00:31:19.230 --> 00:31:21.010
displaying on the screen.

758
00:31:21.010 --> 00:31:25.130
The Current Article so that you
know where in the where in

759
00:31:25.130 --> 00:31:27.860
the list your cursor is, and
then the Article Tiles.

760
00:31:27.860 --> 00:31:29.820
And the Article Tiles are
things like the title, a

761
00:31:29.820 --> 00:31:33.160
thumbnail for the article, an
abstract for the article, that

762
00:31:33.160 --> 00:31:35.250
sort of thing.

763
00:31:35.250 --> 00:31:39.030
And then, as we rise up the
stack, it's time to get into

764
00:31:39.030 --> 00:31:40.000
the View itself.

765
00:31:40.000 --> 00:31:42.910
And we think of Views as being
composable UI units that are

766
00:31:42.910 --> 00:31:46.320
responsible for handling
all UI interaction.

767
00:31:46.320 --> 00:31:50.320
We build these out of Dart
and HTML and CSS.

768
00:31:50.320 --> 00:31:52.680
We looked at a number of other
options, but in the end, HTML

769
00:31:52.680 --> 00:31:55.870
and CSS are actually a really
good story for the web.

770
00:31:55.870 --> 00:31:57.910
If you need to, you can always
build a Custom View that

771
00:31:57.910 --> 00:32:00.750
decides to render itself in
WebGL or Canvas, but we expect

772
00:32:00.750 --> 00:32:03.890
that most Views will actually
get rendered with HTML.

773
00:32:03.890 --> 00:32:05.850
Views are actual Dart objects.

774
00:32:05.850 --> 00:32:08.340
So this is fantastic, because
you can start doing things

775
00:32:08.340 --> 00:32:09.850
like deriving them
from each other.

776
00:32:09.850 --> 00:32:11.600
So you can build a menu, and
then you could build a

777
00:32:11.600 --> 00:32:15.590
specialized kind of menu and
actually take advantage of the

778
00:32:15.590 --> 00:32:17.770
object-oriented nature
of Dart.

779
00:32:17.770 --> 00:32:19.740
Views are also responsible
for handling events.

780
00:32:19.740 --> 00:32:21.750
And they're responsible for
handling events that come in,

781
00:32:21.750 --> 00:32:22.490
in two directions.

782
00:32:22.490 --> 00:32:24.840
One is they need to handle
UI events that are

783
00:32:24.840 --> 00:32:25.800
coming in from the users.

784
00:32:25.800 --> 00:32:29.510
These might be clicks, or
scrolls, or keyboard events.

785
00:32:29.510 --> 00:32:31.670
The View is also responsible
for handling events that

786
00:32:31.670 --> 00:32:33.130
bubble up from the ViewModels.

787
00:32:33.130 --> 00:32:35.690
So these could be events that
come in from another View and

788
00:32:35.690 --> 00:32:37.450
get mediated through
ViewModels.

789
00:32:37.450 --> 00:32:39.610
Or they could be data that's
changing out in the cloud and

790
00:32:39.610 --> 00:32:42.680
gets pushed up to
the application.

791
00:32:42.680 --> 00:32:45.850
So let's go take a look at
Swarm in the Editor.

792
00:32:45.850 --> 00:32:48.435
VIJAY MENON: So yeah, let's do
a deep dive on Swarm now.

793
00:32:48.435 --> 00:32:50.390
And this is a much bigger
application.

794
00:32:50.390 --> 00:32:54.190
So let's also come at this from
the mindset that we're

795
00:32:54.190 --> 00:32:56.500
actually trying to tackle
here, which is large

796
00:32:56.500 --> 00:32:59.510
applications in a production
environment.

797
00:32:59.510 --> 00:33:03.630
Imagine you are a new team
member on a team that's

798
00:33:03.630 --> 00:33:04.570
writing Swarm.

799
00:33:04.570 --> 00:33:06.880
And you're looking at this
code for the first time.

800
00:33:06.880 --> 00:33:08.850
Can you just jump in
and be productive?

801
00:33:08.850 --> 00:33:11.480
That's the thing that we're
trying to measure.

802
00:33:11.480 --> 00:33:17.400
So let's take a look at Swarm
and find, basically, the main

803
00:33:17.400 --> 00:33:19.510
HTML page here.

804
00:33:19.510 --> 00:33:23.430
It looks a lot like "hello." If
we look down at the bottom,

805
00:33:23.430 --> 00:33:24.820
it's a bit more complicated,
obviously.

806
00:33:24.820 --> 00:33:29.010
But we, again, see the
application Dart, with

807
00:33:29.010 --> 00:33:31.260
swarm.dart, the main
entry point.

808
00:33:31.260 --> 00:33:33.320
And also, this Dart to
JS that will let us

809
00:33:33.320 --> 00:33:34.970
boot-strap and test out.

810
00:33:34.970 --> 00:33:37.120
We have this nice application
View.

811
00:33:37.120 --> 00:33:39.710
So instead of looking at a long
laundry list, you can

812
00:33:39.710 --> 00:33:43.770
actually see the different
libraries that we used to

813
00:33:43.770 --> 00:33:45.910
compose together and
create Swarm.

814
00:33:45.910 --> 00:33:48.250
So we have this entry point.

815
00:33:48.250 --> 00:33:50.670
We've actually put most of the
application itself in a

816
00:33:50.670 --> 00:33:54.850
separate library that we import,
create a new Swarm app

817
00:33:54.850 --> 00:33:56.380
instance, and run.

818
00:33:56.380 --> 00:33:57.950
And you don't have to
go searching for

819
00:33:57.950 --> 00:33:59.010
this again using grep.

820
00:33:59.010 --> 00:34:02.480
You can just dive in and see
what's going on here.

821
00:34:02.480 --> 00:34:06.060
So this gets us to
the Swarm app.

822
00:34:06.060 --> 00:34:09.679
We can take a look at that.

823
00:34:09.679 --> 00:34:11.639
This is the Swarm class.

824
00:34:11.639 --> 00:34:15.489
And the main elements that Dan
talked about are here.

825
00:34:15.489 --> 00:34:19.460
Sections is, essentially, the
model, the data model.

826
00:34:19.460 --> 00:34:21.520
FrontView is the
top-level View.

827
00:34:21.520 --> 00:34:22.880
We'll get to that in a moment.

828
00:34:22.880 --> 00:34:26.270
And Swarm state corresponds
to the ViewModel or the

829
00:34:26.270 --> 00:34:28.600
transient UI state.

830
00:34:28.600 --> 00:34:30.159
Let's take a look at what this
constructor's doing.

831
00:34:30.159 --> 00:34:33.340
The first thing it's doing
is initializing from URL.

832
00:34:33.340 --> 00:34:34.790
Let's take a look at
what that does.

833
00:34:34.790 --> 00:34:36.630
We can just dive in here.

834
00:34:36.630 --> 00:34:38.449
And we can see that,
OK, there's--

835
00:34:38.449 --> 00:34:39.870
Again, you can notice
to-dos here.

836
00:34:39.870 --> 00:34:40.760
This is, again, an app.

837
00:34:40.760 --> 00:34:43.190
You're just diving into any
production app, it's probably

838
00:34:43.190 --> 00:34:44.080
going to have some
to-dos in it.

839
00:34:44.080 --> 00:34:45.940
It's always evolving, right?

840
00:34:45.940 --> 00:34:47.750
And you want to find
out, which path is

841
00:34:47.750 --> 00:34:48.630
this thing going on.

842
00:34:48.630 --> 00:34:50.570
Well, again, we want
to be able to

843
00:34:50.570 --> 00:34:52.070
just set a break point.

844
00:34:52.070 --> 00:34:55.770
So let's run this, and we can
see right away that, hey, it

845
00:34:55.770 --> 00:34:56.730
went down this path.

846
00:34:56.730 --> 00:35:00.210
So we've got an idea, at least
in this mode, of which way

847
00:35:00.210 --> 00:35:01.120
it's going.

848
00:35:01.120 --> 00:35:06.520
So we can follow
the execution.

849
00:35:06.520 --> 00:35:10.940
And let's go ahead and run
that to completion.

850
00:35:10.940 --> 00:35:12.080
And we can see--

851
00:35:12.080 --> 00:35:13.890
Oh, this is running in Chrome.

852
00:35:13.890 --> 00:35:18.680
Let's get the version
here in Dartium.

853
00:35:18.680 --> 00:35:22.280
And you can see that here's the
app running in Dartium.

854
00:35:22.280 --> 00:35:29.390
And if you are used to Chrome
Developer Tools, you can just

855
00:35:29.390 --> 00:35:30.710
load that up as well.

856
00:35:30.710 --> 00:35:32.730
And you can see that all of that
is actually starting to

857
00:35:32.730 --> 00:35:37.150
get pretty nicely integrated,
as well, in Dartium.

858
00:35:37.150 --> 00:35:40.090
So just as a quick thing, let's
just try loading this

859
00:35:40.090 --> 00:35:42.700
application and seeing what's
actually coming across.

860
00:35:42.700 --> 00:35:44.740
And this is all being served
from the local file

861
00:35:44.740 --> 00:35:46.510
system, in this case.

862
00:35:46.510 --> 00:35:47.920
One thing you'll notice
is that there's

863
00:35:47.920 --> 00:35:49.350
lots of Dart files.

864
00:35:49.350 --> 00:35:51.630
If you include transitively all
the libraries that we're

865
00:35:51.630 --> 00:35:53.910
pulling through together
here, there's about

866
00:35:53.910 --> 00:35:55.100
60-some Dart files.

867
00:35:55.100 --> 00:35:58.740
So as you're just editing and
debugging, this is great.

868
00:35:58.740 --> 00:36:01.740
Because I just change one of
those files, I reload, and I

869
00:36:01.740 --> 00:36:03.520
get the new effect right here.

870
00:36:03.520 --> 00:36:06.170
And of course, as you compile
this to JavaScript, it's going

871
00:36:06.170 --> 00:36:09.300
to do the smart thing and
create one or very few

872
00:36:09.300 --> 00:36:11.770
JavaScript files that
you deploy.

873
00:36:11.770 --> 00:36:13.790
And when you eventually deploy,
Dart will do similar

874
00:36:13.790 --> 00:36:15.040
things there as well.

875
00:36:15.040 --> 00:36:18.820
876
00:36:18.820 --> 00:36:21.840
So now you've kind of gotten
familiar with the app.

877
00:36:21.840 --> 00:36:24.390
Let's suppose you have
an initial task.

878
00:36:24.390 --> 00:36:30.560
And the task we have is, as you
dive into a news article,

879
00:36:30.560 --> 00:36:33.250
we want to show the author
as well as the feed name.

880
00:36:33.250 --> 00:36:37.100
So let's say that we want to go
ahead and make that change.

881
00:36:37.100 --> 00:36:37.390
All right.

882
00:36:37.390 --> 00:36:40.160
Let's go back to Swarm.

883
00:36:40.160 --> 00:36:42.160
We saw where the top-level
View is.

884
00:36:42.160 --> 00:36:46.110
We can go in and dive
into there.

885
00:36:46.110 --> 00:36:51.210
The top-level View is
essentially a compositional

886
00:36:51.210 --> 00:36:51.950
set of Views.

887
00:36:51.950 --> 00:36:54.640
So if we look at the different
pieces in this class, we can

888
00:36:54.640 --> 00:36:59.210
see here's a topView, the
headerView, the sliderMenu

889
00:36:59.210 --> 00:37:02.190
Menu that goes across the top.

890
00:37:02.190 --> 00:37:07.160
And again, a lot of other
different names of Views.

891
00:37:07.160 --> 00:37:10.130
If we just click on something,
we can kind of get a sense of

892
00:37:10.130 --> 00:37:12.550
what's what by it, because the
comments just show up at--

893
00:37:12.550 --> 00:37:15.920
The editor's able to see where
the definitions are, embed the

894
00:37:15.920 --> 00:37:18.220
documentation, and pull
it as needed.

895
00:37:18.220 --> 00:37:21.880
And it turns out that
StoryContentView, reading

896
00:37:21.880 --> 00:37:24.580
around a little bit, is the
one we want to modify.

897
00:37:24.580 --> 00:37:26.990
So let's take a look at that.

898
00:37:26.990 --> 00:37:29.000
So the first complaint we
might have is, well,

899
00:37:29.000 --> 00:37:30.560
StoryContentView, that
was a little bit

900
00:37:30.560 --> 00:37:32.420
hard for me to find.

901
00:37:32.420 --> 00:37:35.080
Gee, it would be nice if I could
change that name so the

902
00:37:35.080 --> 00:37:38.520
next person that has
to dive into it can

903
00:37:38.520 --> 00:37:39.600
find it more easily.

904
00:37:39.600 --> 00:37:43.070
So it turns out that that's
a pretty easy thing

905
00:37:43.070 --> 00:37:44.450
to do here in Dart.

906
00:37:44.450 --> 00:37:46.180
We can just go ahead
and rename it.

907
00:37:46.180 --> 00:37:54.140
And we can call it
ExpandedStoryView.

908
00:37:54.140 --> 00:37:56.540
And the editor's able to do the
right thing here, and just

909
00:37:56.540 --> 00:37:57.420
go ahead and change.

910
00:37:57.420 --> 00:38:00.360
And you could see that this
constructor here magically

911
00:38:00.360 --> 00:38:01.820
changed as well.

912
00:38:01.820 --> 00:38:05.020
And if we go to a terminal--

913
00:38:05.020 --> 00:38:08.540
914
00:38:08.540 --> 00:38:10.440
Dan mentioned grep.

915
00:38:10.440 --> 00:38:15.280
Sometimes we like to do tools
like grep or diff.

916
00:38:15.280 --> 00:38:17.730
And we can see that a number
of changes have been made

917
00:38:17.730 --> 00:38:19.450
throughout the code base,
in this case.

918
00:38:19.450 --> 00:38:20.520
Not too many.

919
00:38:20.520 --> 00:38:25.180
This particular View isn't
accessed very many places.

920
00:38:25.180 --> 00:38:27.060
Let's do something maybe a
little bit more risky.

921
00:38:27.060 --> 00:38:31.570
The item shows up all over the
place in our core code.

922
00:38:31.570 --> 00:38:36.150
So that's a case where you don't
want to just do Search

923
00:38:36.150 --> 00:38:39.130
and Replace, because you'll
probably end up changing a lot

924
00:38:39.130 --> 00:38:41.430
of things you didn't
mean to change.

925
00:38:41.430 --> 00:38:43.500
And again, the Rename
facility here is

926
00:38:43.500 --> 00:38:44.420
actually, it's quite nice.

927
00:38:44.420 --> 00:38:47.580
It's able to just use the
structure and the types to

928
00:38:47.580 --> 00:38:49.050
know what the right
thing to do is.

929
00:38:49.050 --> 00:38:54.540
And let's go ahead and Name
Item Article here.

930
00:38:54.540 --> 00:38:57.080
And you can see it
does that live.

931
00:38:57.080 --> 00:39:01.690
And if we go back and grep
again for "item," there's

932
00:39:01.690 --> 00:39:02.800
still a bunch of
"items" there.

933
00:39:02.800 --> 00:39:05.610
So it did the right thing.

934
00:39:05.610 --> 00:39:07.310
Of course, we should actually
make sure that

935
00:39:07.310 --> 00:39:08.795
it runs still, right?

936
00:39:08.795 --> 00:39:10.810
Because otherwise,
it's no good.

937
00:39:10.810 --> 00:39:12.900
And sure enough,
it still runs.

938
00:39:12.900 --> 00:39:13.560
It does the right thing.

939
00:39:13.560 --> 00:39:15.490
It's able to reason
about the code.

940
00:39:15.490 --> 00:39:17.950
The tools help you out, which
is the goal here.

941
00:39:17.950 --> 00:39:20.240
So again, we said we wanted to
actually make a change here.

942
00:39:20.240 --> 00:39:22.420
So we ran into a few things we
wanted to fix just to make the

943
00:39:22.420 --> 00:39:25.670
code a little bit more
understandable.

944
00:39:25.670 --> 00:39:26.410
Let's take a look.

945
00:39:26.410 --> 00:39:30.260
So the main thing that any View
in this app is doing is

946
00:39:30.260 --> 00:39:31.240
it's rendering.

947
00:39:31.240 --> 00:39:33.640
And it's an abstraction over
HTML, but it's not a huge

948
00:39:33.640 --> 00:39:34.200
abstraction.

949
00:39:34.200 --> 00:39:36.920
Every time we render, we produce
a new HTML element

950
00:39:36.920 --> 00:39:38.640
that goes into the app.

951
00:39:38.640 --> 00:39:42.540
And in this case, it's taking
the contents of that article.

952
00:39:42.540 --> 00:39:44.100
It's doing some scrubbing.

953
00:39:44.100 --> 00:39:47.790
And we showed how to build
the DOM elements

954
00:39:47.790 --> 00:39:49.460
compositionally by code.

955
00:39:49.460 --> 00:39:52.300
Sometimes it's convenient
to use a large template.

956
00:39:52.300 --> 00:39:55.560
And Dart makes that easy with
the string interpolation, it's

957
00:39:55.560 --> 00:39:56.270
a nice feature.

958
00:39:56.270 --> 00:39:59.630
You can take a big string, a
multiline string, and you'll

959
00:39:59.630 --> 00:40:01.660
notice these little dollar-sign
operations where

960
00:40:01.660 --> 00:40:06.830
we can just call in to code and
embed data from the code

961
00:40:06.830 --> 00:40:08.210
right into the string.

962
00:40:08.210 --> 00:40:10.810
963
00:40:10.810 --> 00:40:12.140
So the Feed Title is here.

964
00:40:12.140 --> 00:40:17.680
Let's go in and add the
author of the article.

965
00:40:17.680 --> 00:40:21.080
966
00:40:21.080 --> 00:40:25.980
So even though we're inside of
a string here, the editor is

967
00:40:25.980 --> 00:40:28.550
able to understand the context,
see that there's this

968
00:40:28.550 --> 00:40:31.840
article in Scope, and tell
you what the fields are.

969
00:40:31.840 --> 00:40:32.870
It knows the Type of that.

970
00:40:32.870 --> 00:40:35.480
And I can just see, hey, there's
an Author Field here

971
00:40:35.480 --> 00:40:37.490
and go ahead and use it.

972
00:40:37.490 --> 00:40:40.120
And Save.

973
00:40:40.120 --> 00:40:44.720
And let's reload and see if
it did the right thing.

974
00:40:44.720 --> 00:40:45.430
Oh, this is--

975
00:40:45.430 --> 00:40:46.040
Sorry.

976
00:40:46.040 --> 00:40:48.520
I keep going to Chrome.

977
00:40:48.520 --> 00:40:49.440
I haven't compiled yet.

978
00:40:49.440 --> 00:40:51.780
So I need to go to Dartium,
because I haven't actually

979
00:40:51.780 --> 00:40:52.640
recompiled.

980
00:40:52.640 --> 00:40:55.190
So Dartium gives me the nice
experience of just being able

981
00:40:55.190 --> 00:40:57.340
to reload, because it's
this native support.

982
00:40:57.340 --> 00:41:01.620
And I can see right here that
next to the Feed Title I have

983
00:41:01.620 --> 00:41:02.130
the author.

984
00:41:02.130 --> 00:41:03.860
So everything just worked.

985
00:41:03.860 --> 00:41:06.060
I'm done with my first change.

986
00:41:06.060 --> 00:41:10.275
So our experience with this
has been really positive.

987
00:41:10.275 --> 00:41:13.090
988
00:41:13.090 --> 00:41:16.650
The goals that we set out really
seem to be working.

989
00:41:16.650 --> 00:41:19.360
We have a language here that's
much more toolable, easy for

990
00:41:19.360 --> 00:41:20.800
us to jump in and use.

991
00:41:20.800 --> 00:41:24.500
And we feel that we're on the
right path for a whole

992
00:41:24.500 --> 00:41:28.960
platform that makes it easier
to write large applications.

993
00:41:28.960 --> 00:41:31.630
You can take everything we've
shown here and download it

994
00:41:31.630 --> 00:41:33.140
yourself and play with it.

995
00:41:33.140 --> 00:41:36.420
This is an early version
of the Dart platform.

996
00:41:36.420 --> 00:41:39.600
The interesting starting
point is dartlang.org.

997
00:41:39.600 --> 00:41:41.000
There's a lot to read there.

998
00:41:41.000 --> 00:41:44.090
The language specification
is pretty stable.

999
00:41:44.090 --> 00:41:46.110
It's not quite yet at 1.0.

1000
00:41:46.110 --> 00:41:49.275
You can see the API
documentation for Dart:HTML,

1001
00:41:49.275 --> 00:41:51.750
the other core libraries.

1002
00:41:51.750 --> 00:41:55.860
You can download the latest
versions of the Dart Editor,

1003
00:41:55.860 --> 00:41:58.230
Dartium, all our Command
Line Tools.

1004
00:41:58.230 --> 00:42:00.560
And there's a mailing list there
that you can join-- it's

1005
00:42:00.560 --> 00:42:01.410
very active--

1006
00:42:01.410 --> 00:42:04.270
to join the community,
give us feedback.

1007
00:42:04.270 --> 00:42:06.950
A lot of changes have been made
just based on feedback

1008
00:42:06.950 --> 00:42:07.590
from the community.

1009
00:42:07.590 --> 00:42:09.100
It's been great.

1010
00:42:09.100 --> 00:42:11.500
All the code, if you want to
build it yourself, or just

1011
00:42:11.500 --> 00:42:14.380
look at how it's implemented,
it's all there at

1012
00:42:14.380 --> 00:42:15.970
dart.googlecode.com.

1013
00:42:15.970 --> 00:42:19.880
That includes Dartium, the
Dart2JS, Compiler, the Virtual

1014
00:42:19.880 --> 00:42:24.420
Machine, the Editor, all the
libraries, and Swarm, the

1015
00:42:24.420 --> 00:42:25.330
sample app there.

1016
00:42:25.330 --> 00:42:28.190
So you can basically look at
all the code you want, muck

1017
00:42:28.190 --> 00:42:32.340
with it, tell us what you
learn, play with it.

1018
00:42:32.340 --> 00:42:33.840
It's all there.

1019
00:42:33.840 --> 00:42:36.360
You can learn a lot more at
Google I/O. If you didn't make

1020
00:42:36.360 --> 00:42:38.320
it to Lars' and Kasper's
talk, it's recorded.

1021
00:42:38.320 --> 00:42:40.500
So you can find out more about
the Dart language.

1022
00:42:40.500 --> 00:42:42.190
It's a great starting point.

1023
00:42:42.190 --> 00:42:45.660
In this very room, there'll be
another talk in just a few

1024
00:42:45.660 --> 00:42:49.930
minutes on migrating code from
GWT to Dart, where Ray will

1025
00:42:49.930 --> 00:42:51.190
talk about that.

1026
00:42:51.190 --> 00:42:53.450
And you can learn about
both of those.

1027
00:42:53.450 --> 00:42:56.190
And then all afternoon, we
have Dart Office Hours.

1028
00:42:56.190 --> 00:42:59.500
So you can find us, ask us
questions, and just get your

1029
00:42:59.500 --> 00:43:00.810
hands dirty with some
of the stuff.

1030
00:43:00.810 --> 00:43:04.240
If you really want to get your
hands dirty, come to the Code

1031
00:43:04.240 --> 00:43:06.560
Lab tomorrow that Seth and
Jamie will be running.

1032
00:43:06.560 --> 00:43:07.970
A lot of us will be there.

1033
00:43:07.970 --> 00:43:11.840
It's your chance to write
your first Dart app.

1034
00:43:11.840 --> 00:43:13.000
DAN GROVE: Yeah,
so summing up.

1035
00:43:13.000 --> 00:43:15.180
If you only remember three
things coming out of this

1036
00:43:15.180 --> 00:43:17.310
talk, first of all,
remember that the

1037
00:43:17.310 --> 00:43:18.830
web has changed hugely.

1038
00:43:18.830 --> 00:43:21.950
The last five years have really
delivered a whole lot

1039
00:43:21.950 --> 00:43:24.670
of changes in capabilities
and in speed.

1040
00:43:24.670 --> 00:43:26.730
Secondly, in order to take
advantage of this, you've got

1041
00:43:26.730 --> 00:43:28.480
to be able to program
at scale, and Dart

1042
00:43:28.480 --> 00:43:29.850
enables you to do this.

1043
00:43:29.850 --> 00:43:32.750
And finally, over the next year,
Dart will enable modern

1044
00:43:32.750 --> 00:43:35.530
web apps by providing a large
set of libraries to really

1045
00:43:35.530 --> 00:43:38.020
make this a straightforward
procedure.

1046
00:43:38.020 --> 00:43:40.150
Thanks, and if you have
questions, the

1047
00:43:40.150 --> 00:43:41.930
mic is there, I believe.

1048
00:43:41.930 --> 00:43:48.040
[APPLAUSE]

1049
00:43:48.040 --> 00:43:48.660
AUDIENCE: OK.

1050
00:43:48.660 --> 00:43:55.420
I wondered, our search engines
were indexing dot application.

1051
00:43:55.420 --> 00:44:01.550
Do you have a way to build
static versions to

1052
00:44:01.550 --> 00:44:06.175
be crawled by robots?

1053
00:44:06.175 --> 00:44:08.430
DAN GROVE: To allow it to
be crawled by robots.

1054
00:44:08.430 --> 00:44:11.010
We haven't done anything in
particular on this yet, but

1055
00:44:11.010 --> 00:44:12.650
I'm sure we will.

1056
00:44:12.650 --> 00:44:17.070
AUDIENCE: So basically when you
write a dot application,

1057
00:44:17.070 --> 00:44:20.852
it won't appear in
Google Results.

1058
00:44:20.852 --> 00:44:22.760
VIJAY MENON: So we expect
when people deploy Dart

1059
00:44:22.760 --> 00:44:25.440
applications that you'll
be able to--

1060
00:44:25.440 --> 00:44:28.680
And you can do server-side
detection to check whether the

1061
00:44:28.680 --> 00:44:32.870
browser that's hitting your site
has native Dart support

1062
00:44:32.870 --> 00:44:34.890
and serve accordingly
Dart or JavaScript.

1063
00:44:34.890 --> 00:44:37.340
So I haven't thought
very deeply about

1064
00:44:37.340 --> 00:44:38.140
your specific case.

1065
00:44:38.140 --> 00:44:39.950
But that should be a case where,
again, you can take

1066
00:44:39.950 --> 00:44:40.880
advantage of the fact that this

1067
00:44:40.880 --> 00:44:42.460
just runs on all browsers.

1068
00:44:42.460 --> 00:44:44.740
DAN GROVE: Yeah, it should be
no different from running a

1069
00:44:44.740 --> 00:44:45.990
JavaScript application.

1070
00:44:45.990 --> 00:44:49.080
1071
00:44:49.080 --> 00:44:49.970
AUDIENCE: Hey.

1072
00:44:49.970 --> 00:44:53.300
So I realize you're going to
have a talk next about the

1073
00:44:53.300 --> 00:44:55.980
transition from GWT to Dart.

1074
00:44:55.980 --> 00:44:59.290
But I was wondering if you could
just mention briefly

1075
00:44:59.290 --> 00:45:00.820
what the differences
are between the

1076
00:45:00.820 --> 00:45:02.020
goals of the two projects?

1077
00:45:02.020 --> 00:45:04.780
They seem to have a
lot of overlap.

1078
00:45:04.780 --> 00:45:05.270
DAN GROVE: Yeah.

1079
00:45:05.270 --> 00:45:07.690
So I think there's actually--

1080
00:45:07.690 --> 00:45:10.900
So first of all, there's both
the talk today, and then

1081
00:45:10.900 --> 00:45:14.770
there's a talk later this week
about the future of GWT.

1082
00:45:14.770 --> 00:45:18.200
So we have not actually paid a
ton of attention to GWT on the

1083
00:45:18.200 --> 00:45:18.890
Dart project.

1084
00:45:18.890 --> 00:45:20.960
We're really trying to build
a whole new platform.

1085
00:45:20.960 --> 00:45:23.250
And the goals may be similar.

1086
00:45:23.250 --> 00:45:26.120
But we also think that we can
do much better than Java in

1087
00:45:26.120 --> 00:45:28.500
terms of the developer
workflow.

1088
00:45:28.500 --> 00:45:30.460
VIJAY MENON: If you went to Lars
and Kaspar's talk, you

1089
00:45:30.460 --> 00:45:33.390
can see that when they created
the language, it borrowed a

1090
00:45:33.390 --> 00:45:36.510
lot of elements from different
languages, including Java.

1091
00:45:36.510 --> 00:45:40.350
So Dart really tries to hit the
space between JavaScript

1092
00:45:40.350 --> 00:45:43.180
and Java and get a lot of
the best of both worlds.

1093
00:45:43.180 --> 00:45:46.190
You get the checking and
toolability from Java but also

1094
00:45:46.190 --> 00:45:49.250
some of the terseness and
simplicity from JavaScript.

1095
00:45:49.250 --> 00:45:52.550
Ray's going to go into detail
on some side-by-side

1096
00:45:52.550 --> 00:45:55.070
comparisons of how the things
really compare.

1097
00:45:55.070 --> 00:45:57.480
So I highly recommend that if
you're interested in that, you

1098
00:45:57.480 --> 00:46:01.420
stick around for that talk.

1099
00:46:01.420 --> 00:46:05.850
AUDIENCE: I was just curious
how the performance of Dart

1100
00:46:05.850 --> 00:46:09.100
code running in the VM compares
to V8 optimized

1101
00:46:09.100 --> 00:46:10.520
JavaScript.

1102
00:46:10.520 --> 00:46:12.670
DAN GROVE: Where's Lars?

1103
00:46:12.670 --> 00:46:15.730
I think the answer is that
it's not there yet.

1104
00:46:15.730 --> 00:46:19.390
If you looked at the VM today,
it exceeds where Chrome was

1105
00:46:19.390 --> 00:46:21.890
when Chrome launched
by a decent amount.

1106
00:46:21.890 --> 00:46:25.470
But there is still
a long way to go.

1107
00:46:25.470 --> 00:46:27.280
VIJAY MENON: Yeah, I mean
performance is something

1108
00:46:27.280 --> 00:46:30.380
that's being actively
worked on.

1109
00:46:30.380 --> 00:46:33.800
It's a big theme, so definitely
at release point,

1110
00:46:33.800 --> 00:46:36.290
it will get to better than V8.

1111
00:46:36.290 --> 00:46:40.030
If you run natively it should
be pretty much close to

1112
00:46:40.030 --> 00:46:43.110
hand-optimized code
if you compile.

1113
00:46:43.110 --> 00:46:45.890
For us it's nice because it's
already pretty fast.

1114
00:46:45.890 --> 00:46:49.450
And it's getting faster
underneath us every day.

1115
00:46:49.450 --> 00:46:50.530
So that's pretty cool.

1116
00:46:50.530 --> 00:46:52.310
DAN GROVE: Yeah we have the
advantage of working on a

1117
00:46:52.310 --> 00:46:56.810
project that has among the best
VM performance people in

1118
00:46:56.810 --> 00:46:57.790
the world working on it.

1119
00:46:57.790 --> 00:47:00.330
And they're unbelievably driven
to make this faster.

1120
00:47:00.330 --> 00:47:02.940
VIJAY MENON: One great thing of
this being very open too,

1121
00:47:02.940 --> 00:47:05.470
is that if you complain about
performance on a certain thing

1122
00:47:05.470 --> 00:47:08.410
on the mailing list, it tends to
get a lot of attention too.

1123
00:47:08.410 --> 00:47:12.420
So the things we care about,
again, performance wasn't so

1124
00:47:12.420 --> 00:47:13.850
much of an issue when
we did Swarm.

1125
00:47:13.850 --> 00:47:16.700
So we were able to get the
performance we wanted, and we

1126
00:47:16.700 --> 00:47:18.686
were able to--

1127
00:47:18.686 --> 00:47:20.730
AUDIENCE: Is that a milestone
that you have for like--

1128
00:47:20.730 --> 00:47:24.120
I know the Dart release is
coming up in fall 2012.

1129
00:47:24.120 --> 00:47:26.240
Is that something you
have in a miles--

1130
00:47:26.240 --> 00:47:27.830
DAN GROVE: You know, I don't
know that we've published an

1131
00:47:27.830 --> 00:47:29.965
official goal for that,
but I suspect one

1132
00:47:29.965 --> 00:47:31.215
will be coming soon.

1133
00:47:31.215 --> 00:47:34.670
1134
00:47:34.670 --> 00:47:36.370
AUDIENCE: Thank you, guys,
for a great talk.

1135
00:47:36.370 --> 00:47:41.750
The question is, obviously,
people have quite a large code

1136
00:47:41.750 --> 00:47:45.030
base over existing JavaScript.

1137
00:47:45.030 --> 00:47:47.650
Do you consider implementing
any way to call

1138
00:47:47.650 --> 00:47:49.700
JavaScript from Dart?

1139
00:47:49.700 --> 00:47:50.190
DAN GROVE: That's a
great question.

1140
00:47:50.190 --> 00:47:51.370
VIJAY MENON: That's a
fantastic question.

1141
00:47:51.370 --> 00:47:52.850
That's something that we're
actually actively

1142
00:47:52.850 --> 00:47:54.170
looking at right now.

1143
00:47:54.170 --> 00:47:57.310
And we do want to have a good
solution for that in place in

1144
00:47:57.310 --> 00:47:58.040
the next few months.

1145
00:47:58.040 --> 00:48:01.050
DAN GROVE: In fact, that's
something that you're going to

1146
00:48:01.050 --> 00:48:02.520
be working on, I believe.

1147
00:48:02.520 --> 00:48:04.260
VIJAY MENON: I think I
signed up for that.

1148
00:48:04.260 --> 00:48:06.440
So look for something.

1149
00:48:06.440 --> 00:48:08.450
We're looking at a few
different solutions.

1150
00:48:08.450 --> 00:48:11.580
If you keep an eye on the
mailing list, you can actually

1151
00:48:11.580 --> 00:48:13.660
look at the details of the code
reviews of the different

1152
00:48:13.660 --> 00:48:16.710
things that we're playing
around with there.

1153
00:48:16.710 --> 00:48:18.840
We're trying to do it in a way
that you get a good experience

1154
00:48:18.840 --> 00:48:21.020
when you're running Dart
natively, as well as when

1155
00:48:21.020 --> 00:48:22.820
you're compiling Dart
to JavaScript.

1156
00:48:22.820 --> 00:48:25.380
And we're trying to make a very
nice interop layer that

1157
00:48:25.380 --> 00:48:27.560
performs pretty well.

1158
00:48:27.560 --> 00:48:28.310
AUDIENCE: Thank you.

1159
00:48:28.310 --> 00:48:29.560
DAN GROVE: Thanks.

1160
00:48:29.560 --> 00:48:32.810
1161
00:48:32.810 --> 00:48:34.930
AUDIENCE: So my question
is, how does Dart--

1162
00:48:34.930 --> 00:48:37.635
All these presentations that I
see, they all compare to the

1163
00:48:37.635 --> 00:48:40.200
current version of JavaScript,
whereas the next version,

1164
00:48:40.200 --> 00:48:42.735
Harmony, has got a lot of the
same things I'm seeing.

1165
00:48:42.735 --> 00:48:44.140
It's got modules, string

1166
00:48:44.140 --> 00:48:47.940
interpolation, lexical scoping.

1167
00:48:47.940 --> 00:48:49.280
It's got a lot of
things that--

1168
00:48:49.280 --> 00:48:53.680
So I'm wondering, I guess, how
does Dart stack up to the next

1169
00:48:53.680 --> 00:48:54.690
version of JavaScript?

1170
00:48:54.690 --> 00:48:56.740
And are you worried
about adoption?

1171
00:48:56.740 --> 00:48:58.770
Is that your biggest
thing, or--

1172
00:48:58.770 --> 00:49:00.690
DAN GROVE: Well, we care hugely

1173
00:49:00.690 --> 00:49:01.910
about adoption, obviously.

1174
00:49:01.910 --> 00:49:02.760
VIJAY MENON: Yeah.

1175
00:49:02.760 --> 00:49:05.140
But ultimately, this is about
making web apps great.

1176
00:49:05.140 --> 00:49:10.020
And if JavaScript gets
better and better,

1177
00:49:10.020 --> 00:49:11.770
that's a good thing.

1178
00:49:11.770 --> 00:49:14.650
And it is getting better
and better.

1179
00:49:14.650 --> 00:49:16.350
Lars and Kasper can
go into a lot of

1180
00:49:16.350 --> 00:49:19.270
detail there where they've--

1181
00:49:19.270 --> 00:49:20.780
You can't always
just add to the

1182
00:49:20.780 --> 00:49:22.210
language and make it better.

1183
00:49:22.210 --> 00:49:23.620
There are challenges,
particularly at the

1184
00:49:23.620 --> 00:49:27.080
implementation level, and also
holes in the semantics that

1185
00:49:27.080 --> 00:49:28.260
are hard to get around.

1186
00:49:28.260 --> 00:49:30.120
So there is an advantage,
at some point--

1187
00:49:30.120 --> 00:49:31.780
And JavaScript's been around
for a long time.

1188
00:49:31.780 --> 00:49:34.940
There are advantages that we can
get from starting anew and

1189
00:49:34.940 --> 00:49:37.460
taking a lot of the lessons
from JavaScript.

1190
00:49:37.460 --> 00:49:40.830
You might still be able to get
a lot of what you want coding

1191
00:49:40.830 --> 00:49:41.580
in JavaScript.

1192
00:49:41.580 --> 00:49:43.270
I think everyone's experience
will vary.

1193
00:49:43.270 --> 00:49:46.520
So what we would say is to try
out these different things and

1194
00:49:46.520 --> 00:49:47.920
see what works best for you.

1195
00:49:47.920 --> 00:49:49.710
DAN GROVE: Yeah, and I think
Lars and Kasper would tell you

1196
00:49:49.710 --> 00:49:53.360
that, on a fundamental basis,
you can make Dart

1197
00:49:53.360 --> 00:49:56.350
significantly faster
than JavaScript.

1198
00:49:56.350 --> 00:49:59.690
They're probably the best
qualified people in the world

1199
00:49:59.690 --> 00:50:00.540
to make that statement.

1200
00:50:00.540 --> 00:50:01.993
And they're very
clear about it.

1201
00:50:01.993 --> 00:50:02.680
AUDIENCE: Right.

1202
00:50:02.680 --> 00:50:06.630
And as far as adoption, do you
ever see it landing in Firefox

1203
00:50:06.630 --> 00:50:10.040
or other browsers,
the native VM?

1204
00:50:10.040 --> 00:50:12.830
DAN GROVE: That is so far away
that we can't even consider it

1205
00:50:12.830 --> 00:50:14.620
right now, which is why we
have to have a great

1206
00:50:14.620 --> 00:50:15.360
compilation story.

1207
00:50:15.360 --> 00:50:17.630
VIJAY MENON: Yeah, Dart2JS is
really the deployment story,

1208
00:50:17.630 --> 00:50:19.300
even now for Chrome as well.

1209
00:50:19.300 --> 00:50:22.580
And we've got to make that
really, really good.

1210
00:50:22.580 --> 00:50:24.680
And Dart's been designed so
it can compile well to

1211
00:50:24.680 --> 00:50:26.340
JavaScript.

1212
00:50:26.340 --> 00:50:27.040
AUDIENCE: Cool.

1213
00:50:27.040 --> 00:50:29.350
Thanks.

1214
00:50:29.350 --> 00:50:29.690
AUDIENCE: Hi.

1215
00:50:29.690 --> 00:50:31.500
I'm curious about debugging.

1216
00:50:31.500 --> 00:50:34.560
You showed how you set a
breakpoint in the IDE.

1217
00:50:34.560 --> 00:50:36.720
Is this a browser plug-in,
or how does it work?

1218
00:50:36.720 --> 00:50:38.950
And does it mean that you
only can debug in

1219
00:50:38.950 --> 00:50:41.070
Dartium right now?

1220
00:50:41.070 --> 00:50:42.380
I can say a little
bit about that.

1221
00:50:42.380 --> 00:50:47.510
So Chrome has support for
external debuggers.

1222
00:50:47.510 --> 00:50:49.550
And I don't think we had to--

1223
00:50:49.550 --> 00:50:52.380
We had to do the hook-up
for the Dart VM.

1224
00:50:52.380 --> 00:50:55.890
But otherwise, you can do
similar things with V8 and

1225
00:50:55.890 --> 00:50:57.210
external debuggers.

1226
00:50:57.210 --> 00:51:00.690
And there's also the internal
dev tools in Chrome that you

1227
00:51:00.690 --> 00:51:04.940
can use as a debugger as well,
with V8 and JavaScript on

1228
00:51:04.940 --> 00:51:07.110
regular Chrome, and on
Dartium, that as

1229
00:51:07.110 --> 00:51:09.080
well as Dart code.

1230
00:51:09.080 --> 00:51:11.260
So really, just using the
existing plumbing that's there

1231
00:51:11.260 --> 00:51:11.810
in the browser.

1232
00:51:11.810 --> 00:51:13.620
DAN GROVE: Yeah, and the other
approach you can use, of

1233
00:51:13.620 --> 00:51:15.850
course, is debugging the
JavaScript code that's

1234
00:51:15.850 --> 00:51:19.530
produced by the Compiler, which
is a pretty reasonable

1235
00:51:19.530 --> 00:51:19.830
experience.

1236
00:51:19.830 --> 00:51:22.660
VIJAY MENON: There's actually
work going on right now in

1237
00:51:22.660 --> 00:51:23.830
using Source Maps.

1238
00:51:23.830 --> 00:51:25.480
Chrome has Source Maps.

1239
00:51:25.480 --> 00:51:28.310
So if you're compiling from any
language to JavaScript,

1240
00:51:28.310 --> 00:51:31.600
you can get a better debugging
experience and look at your

1241
00:51:31.600 --> 00:51:34.180
original source and see
how that [INAUDIBLE].

1242
00:51:34.180 --> 00:51:37.030
1243
00:51:37.030 --> 00:51:40.060
AUDIENCE: You probably can't
debug in IE or Firefox?

1244
00:51:40.060 --> 00:51:42.120
DAN GROVE: You would debug the
generated JavaScript code.

1245
00:51:42.120 --> 00:51:43.130
AUDIENCE: All right.

1246
00:51:43.130 --> 00:51:46.580
DAN GROVE: And that's a pretty
decent experience.

1247
00:51:46.580 --> 00:51:49.370
We have a lot of experience
doing that, and it's not bad.

1248
00:51:49.370 --> 00:51:50.970
AUDIENCE: And second question.

1249
00:51:50.970 --> 00:51:53.560
You said the IDE is
built on Eclipse.

1250
00:51:53.560 --> 00:51:56.465
Is it an Eclipse plug-in,
or is it stand-alone?

1251
00:51:56.465 --> 00:51:58.790
VIJAY MENON: It's stand-alone
right now, but

1252
00:51:58.790 --> 00:52:00.130
I think Lars actually--

1253
00:52:00.130 --> 00:52:01.830
DAN GROVE: I think he answered
this in the last one.

1254
00:52:01.830 --> 00:52:02.280
VIJAY MENON: Answered
this question.

1255
00:52:02.280 --> 00:52:04.300
So I'll just repeat what
he said, which is

1256
00:52:04.300 --> 00:52:05.330
that it will come.

1257
00:52:05.330 --> 00:52:06.690
There will be an Eclipse
plug-in.

1258
00:52:06.690 --> 00:52:07.260
AUDIENCE: All right.

1259
00:52:07.260 --> 00:52:08.198
Thank you.

1260
00:52:08.198 --> 00:52:09.448
VIJAY MENON: Yep.

1261
00:52:09.448 --> 00:52:11.410
1262
00:52:11.410 --> 00:52:14.420
AUDIENCE: I was curious about
unit test support.

1263
00:52:14.420 --> 00:52:15.860
DAN GROVE: Yeah.

1264
00:52:15.860 --> 00:52:17.920
VIJAY MENON: Yeah, we care
a lot about unit test.

1265
00:52:17.920 --> 00:52:20.960
There is a unit test library
that's been in Dart for a

1266
00:52:20.960 --> 00:52:21.900
long, long time.

1267
00:52:21.900 --> 00:52:23.690
And we use it pretty heavily.

1268
00:52:23.690 --> 00:52:26.600
DAN GROVE: Yeah, and there's--

1269
00:52:26.600 --> 00:52:28.060
We're always adding new
testing support.

1270
00:52:28.060 --> 00:52:30.680
So there's a new mocking
library that's going in

1271
00:52:30.680 --> 00:52:31.930
nowadays, for instance.

1272
00:52:31.930 --> 00:52:36.020
1273
00:52:36.020 --> 00:52:36.300
AUDIENCE: Hi.

1274
00:52:36.300 --> 00:52:40.490
I wonder about the commitment
that Google has to Dart.

1275
00:52:40.490 --> 00:52:44.210
Is it just a playground where
you evaluate what's possible

1276
00:52:44.210 --> 00:52:45.380
and what's nice?

1277
00:52:45.380 --> 00:52:51.300
Or is Google actually putting
critical applications from

1278
00:52:51.300 --> 00:52:54.420
Google [INAUDIBLE]?

1279
00:52:54.420 --> 00:52:57.040
DAN GROVE: Dart has started
being used inside Google to

1280
00:52:57.040 --> 00:53:00.920
build critical applications
at this point.

1281
00:53:00.920 --> 00:53:01.760
I would tell you, in terms of

1282
00:53:01.760 --> 00:53:03.840
commitment, I'm pretty committed.

1283
00:53:03.840 --> 00:53:04.300
VIJAY MENON: Yeah.

1284
00:53:04.300 --> 00:53:07.340
DAN GROVE: We have a very large
team, and we're spending

1285
00:53:07.340 --> 00:53:09.860
a huge number of resources
to make Dart successful.

1286
00:53:09.860 --> 00:53:11.760
VIJAY MENON: And we're working
pretty closely with those

1287
00:53:11.760 --> 00:53:13.460
teams to make it a success.

1288
00:53:13.460 --> 00:53:14.410
DAN GROVE: Yeah.

1289
00:53:14.410 --> 00:53:17.242
AUDIENCE: OK.

1290
00:53:17.242 --> 00:53:21.120
AUDIENCE: Do you have time for
one more fast question?

1291
00:53:21.120 --> 00:53:24.970
Is there any plans like to
support or maybe solely be

1292
00:53:24.970 --> 00:53:25.830
supported--

1293
00:53:25.830 --> 00:53:31.390
Can I run my Dart apps like
stand-alone on any V8

1294
00:53:31.390 --> 00:53:35.200
implementation outside of the
browser, just throwing away

1295
00:53:35.200 --> 00:53:38.490
the HTML part with
DOM and stuff.

1296
00:53:38.490 --> 00:53:39.420
VIJAY MENON: Absolutely.

1297
00:53:39.420 --> 00:53:41.750
AUDIENCE: Yeah like,
I mean, basically,

1298
00:53:41.750 --> 00:53:43.860
will it run on nojs?

1299
00:53:43.860 --> 00:53:46.395
Like if I just compile
and run it?

1300
00:53:46.395 --> 00:53:49.570
VIJAY MENON: So nojs has been
a big source of inspiration.

1301
00:53:49.570 --> 00:53:53.150
And I think as Kasper mentioned
in the last talk,

1302
00:53:53.150 --> 00:53:56.680
the Compiler is self-hosting
as well, right?

1303
00:53:56.680 --> 00:54:01.920
And it's a standalone app
written in Dart that reads

1304
00:54:01.920 --> 00:54:04.810
from the file system using
server-side APIs that we don't

1305
00:54:04.810 --> 00:54:06.360
make available in the browser.

1306
00:54:06.360 --> 00:54:08.760
That is part of the long-term
version of Dart, to actually

1307
00:54:08.760 --> 00:54:10.380
have code that you can share.

1308
00:54:10.380 --> 00:54:14.410
AUDIENCE: Yeah, but basically
the standard API should work,

1309
00:54:14.410 --> 00:54:14.890
[INAUDIBLE].

1310
00:54:14.890 --> 00:54:16.840
VIJAY MENON: Yeah, the core
libraries will work

1311
00:54:16.840 --> 00:54:17.570
everywhere.

1312
00:54:17.570 --> 00:54:18.460
We want to make that--

1313
00:54:18.460 --> 00:54:22.120
We want to make it as easy as
possible to take code from the

1314
00:54:22.120 --> 00:54:25.050
server and put it in the
client, and vice versa.

1315
00:54:25.050 --> 00:54:28.040
AUDIENCE: Thank you, guys.

1316
00:54:28.040 --> 00:54:28.620
AUDIENCE: Quick question.

1317
00:54:28.620 --> 00:54:34.350
In one of your demos you did a
query of Canvas elements, put

1318
00:54:34.350 --> 00:54:38.380
them into a non-generified
list, and then iterated

1319
00:54:38.380 --> 00:54:39.740
through those and was able to

1320
00:54:39.740 --> 00:54:43.650
context-assist out the 2D context.

1321
00:54:43.650 --> 00:54:44.170
VIJAY MENON: Yeah.

1322
00:54:44.170 --> 00:54:45.140
AUDIENCE: How did you do that?

1323
00:54:45.140 --> 00:54:46.690
VIJAY MENON: That's
really cool.

1324
00:54:46.690 --> 00:54:48.770
Actually, I only discovered
that this week.

1325
00:54:48.770 --> 00:54:51.530
Like I said, the great thing
about having this active team

1326
00:54:51.530 --> 00:54:54.050
is that stuff just improves
under the hood.

1327
00:54:54.050 --> 00:54:56.455
And that was a new feature that
just started working, I

1328
00:54:56.455 --> 00:54:57.590
think, in the last week.

1329
00:54:57.590 --> 00:55:00.830
So the Dart Editor is
smart enough to do a

1330
00:55:00.830 --> 00:55:01.675
class hierarchy analysis.

1331
00:55:01.675 --> 00:55:04.870
It essentially knows the base
type of what you've got.

1332
00:55:04.870 --> 00:55:09.050
And it's able to look at the
sub-types and give you a list

1333
00:55:09.050 --> 00:55:12.430
of all the possibilities that
you could want to do.

1334
00:55:12.430 --> 00:55:16.340
Now if I had put list bracket
Canvas element, I would have

1335
00:55:16.340 --> 00:55:19.530
gotten a shorter list of
completion, potentially, when

1336
00:55:19.530 --> 00:55:20.340
I pulled stuff out.

1337
00:55:20.340 --> 00:55:22.070
So it can still be sort
of advantageous.

1338
00:55:22.070 --> 00:55:23.950
And we're still trying to figure
out what the right

1339
00:55:23.950 --> 00:55:25.950
balance of that is.

1340
00:55:25.950 --> 00:55:29.070
Being able to put that type
information is useful, because

1341
00:55:29.070 --> 00:55:30.590
we do-- and I didn't show
an example of this.

1342
00:55:30.590 --> 00:55:34.010
But you do have the opportunity
to validate that

1343
00:55:34.010 --> 00:55:36.510
at run time and get some
early error checking.

1344
00:55:36.510 --> 00:55:38.600
You can kind of think of it
as assertions in the code.

1345
00:55:38.600 --> 00:55:42.280
But yeah, the tooling is able to
actually reason a lot about

1346
00:55:42.280 --> 00:55:46.520
the code because it knows
the structure.

1347
00:55:46.520 --> 00:55:47.550
AUDIENCE: OK.

1348
00:55:47.550 --> 00:55:50.830
So it grabbed all of the
attributes of anything that

1349
00:55:50.830 --> 00:55:52.400
extended, element or whatever.

1350
00:55:52.400 --> 00:55:52.690
And--

1351
00:55:52.690 --> 00:55:54.230
VIJAY MENON: Yeah, so if it
knows that the base type is

1352
00:55:54.230 --> 00:55:57.551
element, it's able
to show you--

1353
00:55:57.551 --> 00:56:00.390
I don't know if this showed up
this time, but if I start

1354
00:56:00.390 --> 00:56:02.970
typing "context," I can see the
context field that's on

1355
00:56:02.970 --> 00:56:05.580
the audio element as well as the
context 2D that's on the

1356
00:56:05.580 --> 00:56:06.620
Canvas element.

1357
00:56:06.620 --> 00:56:10.440
And if I put the more specific
type in there, I would see a

1358
00:56:10.440 --> 00:56:12.150
more filtered list.

1359
00:56:12.150 --> 00:56:14.990
AUDIENCE: And I assume if you
were to put an attribute that

1360
00:56:14.990 --> 00:56:16.240
didn't exist, you'd
get some type of

1361
00:56:16.240 --> 00:56:18.240
runtime error or something?

1362
00:56:18.240 --> 00:56:19.610
VIJAY MENON: If you put
an attribute that

1363
00:56:19.610 --> 00:56:22.150
doesn't exist, the--

1364
00:56:22.150 --> 00:56:23.520
DAN GROVE: Yeah, you'll actually
get a runtime--

1365
00:56:23.520 --> 00:56:24.195
It's a run--

1366
00:56:24.195 --> 00:56:26.485
VIJAY MENON: First of all, if it
can tell it statically, it

1367
00:56:26.485 --> 00:56:28.760
will tell you a warning
right there.

1368
00:56:28.760 --> 00:56:31.020
DAN GROVE: But it'll still
let you compile it.

1369
00:56:31.020 --> 00:56:31.910
VIJAY MENON: It would still
let you compile it.

1370
00:56:31.910 --> 00:56:35.660
But the more common case is that
you actually try to get

1371
00:56:35.660 --> 00:56:39.095
the context 2D, but you have an
audio element or a div or

1372
00:56:39.095 --> 00:56:40.020
something like that, right.

1373
00:56:40.020 --> 00:56:41.860
And there, you will
fail at runtime.

1374
00:56:41.860 --> 00:56:43.075
And you will get an error,
an exception.

1375
00:56:43.075 --> 00:56:45.390
And if you're running in the
debugger, it will stop right

1376
00:56:45.390 --> 00:56:49.320
there at the point at which
it made that call.

1377
00:56:49.320 --> 00:56:49.390
AUDIENCE: OK.

1378
00:56:49.390 --> 00:56:49.890
Cool.

1379
00:56:49.890 --> 00:56:51.140
Thanks.

1380
00:56:51.140 --> 00:56:53.600
1381
00:56:53.600 --> 00:56:56.590
AUDIENCE: When will I be able to
deploy my server-side Dart

1382
00:56:56.590 --> 00:56:59.330
code to Google App Engine?

1383
00:56:59.330 --> 00:57:00.990
DAN GROVE: I don't know.

1384
00:57:00.990 --> 00:57:04.680
We haven't made any announcement
about that yet.

1385
00:57:04.680 --> 00:57:05.420
VIJAY MENON: Good question,
though.

1386
00:57:05.420 --> 00:57:07.590
DAN GROVE: It's a
good question.

1387
00:57:07.590 --> 00:57:09.000
OK, so I guess that's it.

1388
00:57:09.000 --> 00:57:09.510
VIJAY MENON: Thanks
for coming.

1389
00:57:09.510 --> 00:57:10.760
DAN GROVE: Thanks.

1390
00:57:10.760 --> 00:57:15.033
WEBVTT

1
00:00:00.000 --> 00:00:01.280

2
00:00:01.280 --> 00:00:01.520
LARS BAK: Hello.

3
00:00:01.520 --> 00:00:03.225
Welcome, everybody.

4
00:00:03.225 --> 00:00:03.610
Oh.

5
00:00:03.610 --> 00:00:04.880
They fixed the sound.

6
00:00:04.880 --> 00:00:05.820
Great.

7
00:00:05.820 --> 00:00:08.380
So welcome to the Dart,
a modern web language

8
00:00:08.380 --> 00:00:09.410
presentation.

9
00:00:09.410 --> 00:00:11.530
This is the first ever
presentation about

10
00:00:11.530 --> 00:00:13.310
Dart at Google IO.

11
00:00:13.310 --> 00:00:15.260
And I'm here.

12
00:00:15.260 --> 00:00:18.680
I'm Lars Bak with Kaspar Lund,
coming all the way from

13
00:00:18.680 --> 00:00:20.200
Denmark to present Dart.

14
00:00:20.200 --> 00:00:23.300
15
00:00:23.300 --> 00:00:26.050
I can just say right away, we
will not be doing any base

16
00:00:26.050 --> 00:00:29.270
jumping nor stage diving.

17
00:00:29.270 --> 00:00:30.975
This will be fairly boring
in that respect.

18
00:00:30.975 --> 00:00:33.480
19
00:00:33.480 --> 00:00:36.260
What I can tell you about is
about this new programming

20
00:00:36.260 --> 00:00:38.780
language we have been working
on for a year.

21
00:00:38.780 --> 00:00:41.550
And this presentation will
include a few things.

22
00:00:41.550 --> 00:00:45.190
We'll talk about the
motivation for it.

23
00:00:45.190 --> 00:00:49.990
And part of the motivation
is our work on V8.

24
00:00:49.990 --> 00:00:53.790
Kasper and I have been working
on V8 for many years, I guess.

25
00:00:53.790 --> 00:00:54.810
Four or so?

26
00:00:54.810 --> 00:00:55.630
KASPER LUND: Four years, yeah.

27
00:00:55.630 --> 00:00:56.260
LARS BAK: Four years.

28
00:00:56.260 --> 00:01:00.050
And some of the experience
with JavaScript

29
00:01:00.050 --> 00:01:02.820
has led us to Dart.

30
00:01:02.820 --> 00:01:04.550
We'll be talking about
the basic language.

31
00:01:04.550 --> 00:01:08.000
We'll be talking about some of
the components we have in the

32
00:01:08.000 --> 00:01:08.780
Dart project.

33
00:01:08.780 --> 00:01:11.900
And then we'll talk about the
bright future we hopefully

34
00:01:11.900 --> 00:01:12.930
have with Dart.

35
00:01:12.930 --> 00:01:14.555
So let's get started.

36
00:01:14.555 --> 00:01:19.100
We have a lot of interesting
stuff to talk about.

37
00:01:19.100 --> 00:01:22.950
So our background is in
implementing virtual machines.

38
00:01:22.950 --> 00:01:28.030
And as you probably can see,
I'm the oldest one.

39
00:01:28.030 --> 00:01:29.400
He's the younger version.

40
00:01:29.400 --> 00:01:33.000
I've been doing VMs for 26
years, and Kasper's been doing

41
00:01:33.000 --> 00:01:34.360
it for the last 12.

42
00:01:34.360 --> 00:01:36.830
We've worked together
on many projects.

43
00:01:36.830 --> 00:01:40.780
We've been doing Java,
virtual machines.

44
00:01:40.780 --> 00:01:43.140
Also JavaScript engines,
like V8.

45
00:01:43.140 --> 00:01:45.650
And that's been pretty cool.

46
00:01:45.650 --> 00:01:47.980
So this is our first project
ever where we've been

47
00:01:47.980 --> 00:01:50.160
designing a programming
language.

48
00:01:50.160 --> 00:01:53.530
KASPER LUND: Before I joined
Lars on this mission to try to

49
00:01:53.530 --> 00:01:57.720
improve the performance of
virtual machines for various

50
00:01:57.720 --> 00:01:58.230
languages--

51
00:01:58.230 --> 00:02:01.685
Lars was working on more exotic
languages, too, like

52
00:02:01.685 --> 00:02:05.000
the Beta programming language,
sort of a Scandinavian

53
00:02:05.000 --> 00:02:05.960
object-oriented language.

54
00:02:05.960 --> 00:02:09.169
So there's a lot of experience
on the stage here.

55
00:02:09.169 --> 00:02:12.480
Nearly 40 years combined.

56
00:02:12.480 --> 00:02:16.240
So we certainly know a thing or
two about virtual machines,

57
00:02:16.240 --> 00:02:18.260
so hopefully we can convince
you that we know a thing or

58
00:02:18.260 --> 00:02:21.030
two about languages as well.

59
00:02:21.030 --> 00:02:23.300
LARS BAK: So first of all, there
will be a little bit of

60
00:02:23.300 --> 00:02:25.680
a salute to the web.

61
00:02:25.680 --> 00:02:28.580
We think the web is fantastic.

62
00:02:28.580 --> 00:02:29.580
The web is everywhere today.

63
00:02:29.580 --> 00:02:32.000
You have it on your
mobile phone, your

64
00:02:32.000 --> 00:02:33.670
pads and your desktop.

65
00:02:33.670 --> 00:02:36.240
So when you do an application
it can actually cover most

66
00:02:36.240 --> 00:02:38.300
devices today.

67
00:02:38.300 --> 00:02:40.260
It's also very easy to
use as a developer.

68
00:02:40.260 --> 00:02:43.140
You can just pop into your
favorite text editor, type in

69
00:02:43.140 --> 00:02:46.760
a few lines, and then you can
start it up in your browser.

70
00:02:46.760 --> 00:02:49.190
There's no tool chain
involved in getting

71
00:02:49.190 --> 00:02:51.770
the program up running.

72
00:02:51.770 --> 00:02:54.650
And one thing I really like
about the web, there's no

73
00:02:54.650 --> 00:02:56.570
required installation
of the app.

74
00:02:56.570 --> 00:02:59.660
Whenever you start Gmail, you
get the newest version.

75
00:02:59.660 --> 00:03:02.820
So you are not bothered
by these updates.

76
00:03:02.820 --> 00:03:05.380
I assume you all have
mobile phones?

77
00:03:05.380 --> 00:03:09.390
Have you tried to get bothered
by an update notification?

78
00:03:09.390 --> 00:03:11.320
I guess.

79
00:03:11.320 --> 00:03:13.860
For me, at least, that's one
of the benefits of the web.

80
00:03:13.860 --> 00:03:16.710
That you don't have to install
an application.

81
00:03:16.710 --> 00:03:20.330
82
00:03:20.330 --> 00:03:23.190
Furthermore it's also a very
incremental experience, to

83
00:03:23.190 --> 00:03:24.560
develop for the web.

84
00:03:24.560 --> 00:03:27.960
You can change one line in the
program and use a refresh.

85
00:03:27.960 --> 00:03:30.850
So within a second, you can
have your application up

86
00:03:30.850 --> 00:03:31.220
running again.

87
00:03:31.220 --> 00:03:33.540
And that's very appealing
when you do prototype

88
00:03:33.540 --> 00:03:35.730
develop and so on.

89
00:03:35.730 --> 00:03:40.500
And one thing that's even
better, the browser industry

90
00:03:40.500 --> 00:03:42.760
is right now fairly
competitive.

91
00:03:42.760 --> 00:03:45.380
All the browser vendors, they're
competing on speed and

92
00:03:45.380 --> 00:03:46.600
functionality.

93
00:03:46.600 --> 00:03:49.180
And most implementations are
open source, so it's a

94
00:03:49.180 --> 00:03:50.430
friendly competition.

95
00:03:50.430 --> 00:03:54.910
96
00:03:54.910 --> 00:03:56.980
Here's my best attempt
to make a wheel.

97
00:03:56.980 --> 00:04:00.250
It turned out to
be three-sided.

98
00:04:00.250 --> 00:04:03.800
But I'm trying to explain
the ecosystem of browser

99
00:04:03.800 --> 00:04:06.140
development.

100
00:04:06.140 --> 00:04:10.010
When you add more performance
into a browser, you will sort

101
00:04:10.010 --> 00:04:12.750
of enable application developers
to innovate.

102
00:04:12.750 --> 00:04:15.170
They can add more functionality
on the client

103
00:04:15.170 --> 00:04:19.120
side, and that again will
require new browser features.

104
00:04:19.120 --> 00:04:20.959
And so on and so forth.

105
00:04:20.959 --> 00:04:24.140
And this is great, because
whenever you take a turn with

106
00:04:24.140 --> 00:04:27.780
this wheel, the browser will be
a better place to develop

107
00:04:27.780 --> 00:04:29.995
applications and also
use applications.

108
00:04:29.995 --> 00:04:33.570
109
00:04:33.570 --> 00:04:36.650
Here's a JavaScript performance
improvement chart.

110
00:04:36.650 --> 00:04:39.650
It'll show you the speedup
of JavaScript

111
00:04:39.650 --> 00:04:42.210
over the last 12 years.

112
00:04:42.210 --> 00:04:45.360
And as you can see, there
was a dry spell

113
00:04:45.360 --> 00:04:47.720
of a number of years.

114
00:04:47.720 --> 00:04:51.130
And then we introduced in
2008, Chrome, the beta

115
00:04:51.130 --> 00:04:55.360
version, where V8 was
part of that.

116
00:04:55.360 --> 00:05:00.530
And you can see, since 2008 the
performance of JavaScript

117
00:05:00.530 --> 00:05:03.150
has just improved
tremendously.

118
00:05:03.150 --> 00:05:08.250
In fact, JavaScript is now 100
times faster on the same

119
00:05:08.250 --> 00:05:12.140
hardware, compared to a browser
five years ago.

120
00:05:12.140 --> 00:05:14.804
That's pretty amazing,
isn't it?

121
00:05:14.804 --> 00:05:16.180
KASPER LUND: That's
a lot, yeah.

122
00:05:16.180 --> 00:05:19.310
LARS BAK: Even on mobile
devices, like an Android

123
00:05:19.310 --> 00:05:23.240
device, you can see that the
performance of JavaScript is

124
00:05:23.240 --> 00:05:26.370
comparable to a desktop
machine, when we

125
00:05:26.370 --> 00:05:29.440
introduced V8 in 2008.

126
00:05:29.440 --> 00:05:30.470
So this is pretty amazing.

127
00:05:30.470 --> 00:05:35.300
And it really allows you guys to
do better apps on the web.

128
00:05:35.300 --> 00:05:36.840
KASPER LUND: We've already seen
a few things that have

129
00:05:36.840 --> 00:05:41.370
come along that take advantage
of this new power.

130
00:05:41.370 --> 00:05:44.570
So the point with the previous
slide, where performance

131
00:05:44.570 --> 00:05:46.750
improvements of the core
platform really help you

132
00:05:46.750 --> 00:05:50.110
innovate, can be seen in one
of the latest versions of

133
00:05:50.110 --> 00:05:52.390
Google Maps for instance,
where you can enable

134
00:05:52.390 --> 00:05:55.420
client-side rendering of
things-- things that you had

135
00:05:55.420 --> 00:05:57.130
to do on the server side before,
it's now possible to

136
00:05:57.130 --> 00:05:58.510
do on the client instead.

137
00:05:58.510 --> 00:06:00.070
Which is pretty cool.

138
00:06:00.070 --> 00:06:02.720
So we certainly see that this
is already now helping a lot

139
00:06:02.720 --> 00:06:06.710
on what you can do and
achieve with the web.

140
00:06:06.710 --> 00:06:10.320
LARS BAK: So during this period
the web applications

141
00:06:10.320 --> 00:06:13.000
have become more and
more complex.

142
00:06:13.000 --> 00:06:18.930
And have posed some challenges
for the web.

143
00:06:18.930 --> 00:06:21.850
What we really want, we want
to have better programmer

144
00:06:21.850 --> 00:06:23.330
productivity.

145
00:06:23.330 --> 00:06:28.110
And we also want application
scalability, so that as you

146
00:06:28.110 --> 00:06:30.670
get bigger and bigger
applications the browser can

147
00:06:30.670 --> 00:06:33.080
cope with it as you
execute it.

148
00:06:33.080 --> 00:06:35.510
And then of course you need
raw execution speed.

149
00:06:35.510 --> 00:06:39.300
We've fixed some of that with
V8, but we are not hitting the

150
00:06:39.300 --> 00:06:41.440
glass ceiling yet.

151
00:06:41.440 --> 00:06:44.080
One thing that's a problem
today, at least from my point

152
00:06:44.080 --> 00:06:47.060
of view, is that startup
performance is not where we

153
00:06:47.060 --> 00:06:48.280
want it to be.

154
00:06:48.280 --> 00:06:51.560
When you start up a big web
app, it's fairly slow.

155
00:06:51.560 --> 00:06:55.690
For instance, if you take Gmail,
you have to read in a

156
00:06:55.690 --> 00:06:58.380
lot of source code before you
can start the application.

157
00:06:58.380 --> 00:07:01.410
And that sort of delays
the startup with

158
00:07:01.410 --> 00:07:04.530
half to a full second.

159
00:07:04.530 --> 00:07:08.520
So the final item on this slide
here is that if we don't

160
00:07:08.520 --> 00:07:13.540
innovate, the web will lose out
to mobile apps, where they

161
00:07:13.540 --> 00:07:16.640
can install more native
types of applications.

162
00:07:16.640 --> 00:07:22.130
163
00:07:22.130 --> 00:07:26.000
Fortunately, we have
a solution for you.

164
00:07:26.000 --> 00:07:28.570
We have the Dart platform.

165
00:07:28.570 --> 00:07:32.550
And this is a suite of
technologies that will

166
00:07:32.550 --> 00:07:35.550
hopefully solve so some
of these issues with

167
00:07:35.550 --> 00:07:36.930
the existing platform.

168
00:07:36.930 --> 00:07:39.180
Our high-level goals
are fairly simple.

169
00:07:39.180 --> 00:07:41.740
We want to make a simple,
productive programming

170
00:07:41.740 --> 00:07:45.710
alignment and programming
language that supports for

171
00:07:45.710 --> 00:07:48.090
programming in the large.

172
00:07:48.090 --> 00:07:51.620
And we also want to have
predictable high performance.

173
00:07:51.620 --> 00:07:54.100
And that means that when you
write your code, you can

174
00:07:54.100 --> 00:07:56.020
expect some sort
of performance.

175
00:07:56.020 --> 00:07:58.170
Right now it's complicated
with JavaScript.

176
00:07:58.170 --> 00:08:01.350
It often depends on what the
browser optimized, how good

177
00:08:01.350 --> 00:08:04.180
performance you get out of it.

178
00:08:04.180 --> 00:08:07.120
We want to have ultra-fast
startup.

179
00:08:07.120 --> 00:08:09.750
Things that take more than
100 milliseconds are just

180
00:08:09.750 --> 00:08:11.740
unacceptable.

181
00:08:11.740 --> 00:08:15.280
And then of course, we are
not out to break the web.

182
00:08:15.280 --> 00:08:19.250
We really want to have
compatibility

183
00:08:19.250 --> 00:08:20.540
with all modern browsers.

184
00:08:20.540 --> 00:08:22.870
And we'll show you how we've
done that in Dart, by

185
00:08:22.870 --> 00:08:25.520
providing a translator from
Dart to JavaScript.

186
00:08:25.520 --> 00:08:28.790
187
00:08:28.790 --> 00:08:30.800
So.

188
00:08:30.800 --> 00:08:32.470
KASPER LUND: Let's talk
about JavaScript.

189
00:08:32.470 --> 00:08:33.530
LARS BAK: Let's do that.

190
00:08:33.530 --> 00:08:35.700
KASPER LUND: So, I don't know
how many people in here are

191
00:08:35.700 --> 00:08:36.950
familiar with JavaScript.

192
00:08:36.950 --> 00:08:39.320
193
00:08:39.320 --> 00:08:40.289
There are some that know it.

194
00:08:40.289 --> 00:08:40.610
OK.

195
00:08:40.610 --> 00:08:42.270
That's good.

196
00:08:42.270 --> 00:08:43.750
How many people here
actually work with

197
00:08:43.750 --> 00:08:46.670
JavaScript every day?

198
00:08:46.670 --> 00:08:47.470
Good crowd.

199
00:08:47.470 --> 00:08:47.960
I like that.

200
00:08:47.960 --> 00:08:51.690
So hopefully you're aware of
some fundamental issues with

201
00:08:51.690 --> 00:08:52.200
JavaScript.

202
00:08:52.200 --> 00:08:55.070
I'm going to run through a few
of them, just to give you a

203
00:08:55.070 --> 00:08:58.490
feel for the kind of issues
we're trying to tackle.

204
00:08:58.490 --> 00:09:02.310
So one big issue we see with
JavaScript is it's very hard

205
00:09:02.310 --> 00:09:05.030
to reason about where the
problem is actually defined.

206
00:09:05.030 --> 00:09:09.440
There is almost no declarative
syntax, and it's very hard, if

207
00:09:09.440 --> 00:09:12.820
not impossible sometimes, to
find dependencies between

208
00:09:12.820 --> 00:09:16.160
different components in a
language like JavaScript.

209
00:09:16.160 --> 00:09:18.470
It's not uncommon and not
unheard of that in JavaScript

210
00:09:18.470 --> 00:09:21.430
you do monkey patching of core
functionality to add your

211
00:09:21.430 --> 00:09:24.810
message to the object
[? or ?] prototype.

212
00:09:24.810 --> 00:09:26.930
And that makes it even harder to
reason about what's defined

213
00:09:26.930 --> 00:09:28.290
where, and who uses what.

214
00:09:28.290 --> 00:09:30.600
And understanding the program
structure is really, really

215
00:09:30.600 --> 00:09:33.270
important if you want to be
efficient as a programmer.

216
00:09:33.270 --> 00:09:36.090
You need to be able to do code
maintenance and refactoring,

217
00:09:36.090 --> 00:09:38.710
and that really requires you to
have a full and very good

218
00:09:38.710 --> 00:09:40.750
understanding of the
program structure.

219
00:09:40.750 --> 00:09:43.570
You also need that understanding
of the program

220
00:09:43.570 --> 00:09:46.000
structure if you want to write
a good tool that can analyze

221
00:09:46.000 --> 00:09:48.720
your code, and work with it, and
allow you to debug it and

222
00:09:48.720 --> 00:09:51.020
maybe navigate the code
in a clever way.

223
00:09:51.020 --> 00:09:53.000
So it's actually really
hard in JavaScript.

224
00:09:53.000 --> 00:09:54.760
Let me give you a
small example of

225
00:09:54.760 --> 00:09:55.850
what I mean with that.

226
00:09:55.850 --> 00:09:59.690
So here's a very, very simple
JavaScript function, meant as

227
00:09:59.690 --> 00:10:02.070
a constructor for points.

228
00:10:02.070 --> 00:10:04.870
So the fields of this point
class, that I'm trying to

229
00:10:04.870 --> 00:10:07.540
simulate in JavaScript, are
not actually declared

230
00:10:07.540 --> 00:10:10.930
anywhere, except that they are
implicitly defined by the

231
00:10:10.930 --> 00:10:13.770
statements that I put in the
constructor that assign x and

232
00:10:13.770 --> 00:10:16.750
y to this.x and this.y.

233
00:10:16.750 --> 00:10:18.960
This seems simple enough,
and pretty nice.

234
00:10:18.960 --> 00:10:21.290
And you could probably write a
tool that works with this kind

235
00:10:21.290 --> 00:10:22.250
of information.

236
00:10:22.250 --> 00:10:24.980
But in reality it's often more
complicated than this.

237
00:10:24.980 --> 00:10:28.370
So in JavaScript we often see
code like this, for instance,

238
00:10:28.370 --> 00:10:32.210
where you really want to make
these properties non-writable,

239
00:10:32.210 --> 00:10:33.400
like read-only.

240
00:10:33.400 --> 00:10:37.700
And suddenly you have to go
through actual control flow in

241
00:10:37.700 --> 00:10:41.230
your constructors, to figure
out what kind of fields you

242
00:10:41.230 --> 00:10:43.260
end up having on all
your points.

243
00:10:43.260 --> 00:10:45.720
Of course, this is a trivial
example, so a very good tool

244
00:10:45.720 --> 00:10:47.800
could probably analyze this
code and understand what

245
00:10:47.800 --> 00:10:48.540
you're doing.

246
00:10:48.540 --> 00:10:51.080
But for real applications,
this really quickly gets

247
00:10:51.080 --> 00:10:53.910
really, really hard.

248
00:10:53.910 --> 00:10:56.080
If you look at the tools out
there today for working with

249
00:10:56.080 --> 00:10:58.790
JavaScript code, it is pretty
clear that it's not an easy

250
00:10:58.790 --> 00:10:59.680
problem to solve.

251
00:10:59.680 --> 00:11:01.040
I mean, there are good
tools coming

252
00:11:01.040 --> 00:11:02.120
out, and it's improving.

253
00:11:02.120 --> 00:11:05.150
But it's really hard.

254
00:11:05.150 --> 00:11:09.050
Another very fundamental issue
with JavaScript is this keep

255
00:11:09.050 --> 00:11:10.410
on trucking mentality.

256
00:11:10.410 --> 00:11:13.420
So JavaScript has this idea
that it's a good thing to

257
00:11:13.420 --> 00:11:16.930
tolerate mistakes in the
program, and it's OK to

258
00:11:16.930 --> 00:11:21.210
operate on unexpected types, and
it's OK if that actually

259
00:11:21.210 --> 00:11:24.370
just leads to unusable or
unexpected results.

260
00:11:24.370 --> 00:11:27.130
So at the point in your code
where you introduce an error,

261
00:11:27.130 --> 00:11:30.030
you're very unlikely
to get that error.

262
00:11:30.030 --> 00:11:33.500
And it's much more likely that
the value you get out of that

263
00:11:33.500 --> 00:11:36.120
mistake you put in will just
flow through your program and

264
00:11:36.120 --> 00:11:38.680
end up causing a problem
later on.

265
00:11:38.680 --> 00:11:42.110
That just makes it very, very
hard to find your problem.

266
00:11:42.110 --> 00:11:44.660
Almost anything goes.

267
00:11:44.660 --> 00:11:46.900
For the program productivity,
it's much better to throw

268
00:11:46.900 --> 00:11:48.680
errors more eagerly.

269
00:11:48.680 --> 00:11:51.980
So it makes it much easier to
locate the source of an error,

270
00:11:51.980 --> 00:11:57.230
and it gives you many of the
errors when you're testing

271
00:11:57.230 --> 00:12:00.660
your code, not at run time
at the end user's side.

272
00:12:00.660 --> 00:12:02.450
So it gives you more
confidence in the

273
00:12:02.450 --> 00:12:03.280
deployed apps, too.

274
00:12:03.280 --> 00:12:06.470
It's really a good thing
for writing large scale

275
00:12:06.470 --> 00:12:08.930
applications and being able to
trust that they actually work

276
00:12:08.930 --> 00:12:10.890
as intended.

277
00:12:10.890 --> 00:12:12.470
Let me give you a few
examples of that.

278
00:12:12.470 --> 00:12:15.790
So in JavaScript,
constructors for

279
00:12:15.790 --> 00:12:18.060
objects are just functions.

280
00:12:18.060 --> 00:12:20.080
That seems pretty
nice and simple.

281
00:12:20.080 --> 00:12:23.910
I can use the function
as a constructor.

282
00:12:23.910 --> 00:12:24.740
It just sort of works.

283
00:12:24.740 --> 00:12:29.370
So if we build on the point
example from before, we can

284
00:12:29.370 --> 00:12:32.790
clearly allocate a point by
using that as a constructor.

285
00:12:32.790 --> 00:12:34.620
But what happens if we actually
forget to write new

286
00:12:34.620 --> 00:12:37.610
in front of that constructor
application?

287
00:12:37.610 --> 00:12:38.990
Well, it turns out it works.

288
00:12:38.990 --> 00:12:40.170
It doesn't give you an error.

289
00:12:40.170 --> 00:12:41.620
It's fine.

290
00:12:41.620 --> 00:12:45.570
It does give you the point
undefined back., and

291
00:12:45.570 --> 00:12:48.490
additionally it gives you two
extra global variables, x and

292
00:12:48.490 --> 00:12:50.360
y, that have the
value 2 and 3.

293
00:12:50.360 --> 00:12:54.020
So you don't get a point, but
you get extra state and the

294
00:12:54.020 --> 00:12:55.370
global object.

295
00:12:55.370 --> 00:12:59.260
That seems unintended, kind of
weird, and just is a real

296
00:12:59.260 --> 00:12:59.850
source of errors.

297
00:12:59.850 --> 00:13:02.360
We see this every day.

298
00:13:02.360 --> 00:13:05.110
During the development of V8
we've been through quite a lot

299
00:13:05.110 --> 00:13:07.960
of JavaScript code written by
many, many people, and these

300
00:13:07.960 --> 00:13:11.850
sort of subtle bugs
always pop up.

301
00:13:11.850 --> 00:13:13.100
LARS BAK: And one more thing.

302
00:13:13.100 --> 00:13:17.040
The interesting part is that
undefined [? integers, ?]

303
00:13:17.040 --> 00:13:18.740
you can see here, you
can't even rely on.

304
00:13:18.740 --> 00:13:19.800
Because it's mutable.

305
00:13:19.800 --> 00:13:21.510
You can change that property.

306
00:13:21.510 --> 00:13:23.690
So most people that would write
correct code, in this

307
00:13:23.690 --> 00:13:26.750
case, will instead of undefined
use [? write ?]

308
00:13:26.750 --> 00:13:28.430
zero.

309
00:13:28.430 --> 00:13:30.496
That makes sense
to you, right?

310
00:13:30.496 --> 00:13:32.010
KASPER LUND: Yeah, it does.

311
00:13:32.010 --> 00:13:32.990
I don't know how many
people that make

312
00:13:32.990 --> 00:13:34.440
sense to, but anyway.

313
00:13:34.440 --> 00:13:36.330
Let's take another example.

314
00:13:36.330 --> 00:13:39.430
This is probably the most common
source of issues in

315
00:13:39.430 --> 00:13:41.190
JavaScript.

316
00:13:41.190 --> 00:13:43.960
If you have a typo in your
code, that gives you real

317
00:13:43.960 --> 00:13:45.460
problems and it's
hard to find.

318
00:13:45.460 --> 00:13:47.750
So I put some code up here
that uses an XML

319
00:13:47.750 --> 00:13:49.190
HTTP request object.

320
00:13:49.190 --> 00:13:53.120
And the intent is, of course,
to install a callback that

321
00:13:53.120 --> 00:13:56.740
will get invoked whenever the
ready state changes, and if we

322
00:13:56.740 --> 00:13:59.900
reach the done state,
which is state 4,

323
00:13:59.900 --> 00:14:01.390
will log in to console.

324
00:14:01.390 --> 00:14:02.410
Very simple.

325
00:14:02.410 --> 00:14:04.520
Unfortunately this
does not work.

326
00:14:04.520 --> 00:14:07.760
The console will never have
anything here, even if the

327
00:14:07.760 --> 00:14:09.580
ready state does change to 4.

328
00:14:09.580 --> 00:14:14.670
Because ready state is spelled
with a capital S. So

329
00:14:14.670 --> 00:14:16.420
JavaScript allows this,
and it's just fine.

330
00:14:16.420 --> 00:14:18.490
It just gives you undefined
every single time you try to

331
00:14:18.490 --> 00:14:21.120
read the ready state with a
lowercase S. And undefined is

332
00:14:21.120 --> 00:14:22.880
not equal to 4.

333
00:14:22.880 --> 00:14:25.820
Maybe it should be,
I don't know.

334
00:14:25.820 --> 00:14:28.060
Anyway, it's this kind of thing
that makes you less

335
00:14:28.060 --> 00:14:29.090
productive as a programmer.

336
00:14:29.090 --> 00:14:32.870
And it kind of sucks.

337
00:14:32.870 --> 00:14:35.530
If we're sort of continuing on
that trend, we can also take a

338
00:14:35.530 --> 00:14:37.410
look at implicit conversions.

339
00:14:37.410 --> 00:14:40.100
There have been some pretty
funny videos circulating the

340
00:14:40.100 --> 00:14:42.650
web with more examples like
this, but this is a very

341
00:14:42.650 --> 00:14:43.630
simple one.

342
00:14:43.630 --> 00:14:45.450
So here we have a string.

343
00:14:45.450 --> 00:14:48.040
Strings in JavaScript
are values.

344
00:14:48.040 --> 00:14:49.910
They're immutable, you
cannot change them.

345
00:14:49.910 --> 00:14:52.390
If you try, do like string
dot hash equals

346
00:14:52.390 --> 00:14:54.220
something, it's accepted.

347
00:14:54.220 --> 00:14:56.790
What actually happens here is
that you actually implicitly

348
00:14:56.790 --> 00:15:01.030
convert string to a string
object that wraps that string.

349
00:15:01.030 --> 00:15:02.990
And you can access properties
on that, you can even set

350
00:15:02.990 --> 00:15:04.420
properties on that.

351
00:15:04.420 --> 00:15:06.260
The only problem is you actually
throw that temporary

352
00:15:06.260 --> 00:15:09.540
object away just after having
done it, so it has no effect.

353
00:15:09.540 --> 00:15:12.230
So when you try to assert that
string dot hash is something

354
00:15:12.230 --> 00:15:14.410
reasonable afterwards,
it's undefined.

355
00:15:14.410 --> 00:15:17.230
And again, I probably should
have put void 0 here.

356
00:15:17.230 --> 00:15:20.840
Because you get a different
object wrapped around the

357
00:15:20.840 --> 00:15:23.810
string value to grab
hold of the hash.

358
00:15:23.810 --> 00:15:25.600
This is surprising
to many people.

359
00:15:25.600 --> 00:15:28.230
And often you use this kind of
trick to try to add some

360
00:15:28.230 --> 00:15:29.580
caching to your code.

361
00:15:29.580 --> 00:15:31.330
And it seems to work just fine,
except that you never

362
00:15:31.330 --> 00:15:33.200
get any caching out of it.

363
00:15:33.200 --> 00:15:36.080
It's a performance problem, and
it's just annoying to have

364
00:15:36.080 --> 00:15:37.330
to deal with.

365
00:15:37.330 --> 00:15:39.770
366
00:15:39.770 --> 00:15:41.070
I think I can top
the last slide.

367
00:15:41.070 --> 00:15:42.860
How about this one?

368
00:15:42.860 --> 00:15:45.750
I don't know if anyone here can
tell me why 2.0 should be

369
00:15:45.750 --> 00:15:48.940
equal to the string two, that
is equal to a Boolean object

370
00:15:48.940 --> 00:15:51.280
that wraps the true value,
that is equal

371
00:15:51.280 --> 00:15:52.480
to the string one.

372
00:15:52.480 --> 00:15:54.920
But it is.

373
00:15:54.920 --> 00:15:56.880
There are so many implicit
conversions going on here that

374
00:15:56.880 --> 00:15:58.750
it makes my head explode.

375
00:15:58.750 --> 00:16:02.390
And having to implement this
in V8, it was a lot of fun.

376
00:16:02.390 --> 00:16:04.960
But sometimes you have to doubt
whether or not the value

377
00:16:04.960 --> 00:16:06.300
you get out of these implicit
conversions

378
00:16:06.300 --> 00:16:07.760
is worth the trouble.

379
00:16:07.760 --> 00:16:09.250
LARS BAK: Actually if you take
the [INAUDIBLE] script

380
00:16:09.250 --> 00:16:11.520
standard and go through
specification, you'll figure

381
00:16:11.520 --> 00:16:14.850
out that you need at least six
implicit conversions of

382
00:16:14.850 --> 00:16:18.330
objects before you can evaluate
this expression.

383
00:16:18.330 --> 00:16:20.060
KASPER LUND: Yeah, and they go
in different directions.

384
00:16:20.060 --> 00:16:22.040
Like sometimes you convert to
numbers implicitly, sometimes

385
00:16:22.040 --> 00:16:25.790
to strings, sometimes from
objects to primitive values.

386
00:16:25.790 --> 00:16:28.960
It's pretty messy.

387
00:16:28.960 --> 00:16:31.400
Another big issue that we see,
and this is of course also

388
00:16:31.400 --> 00:16:35.240
coming from the low level, from
the VM side up, is that

389
00:16:35.240 --> 00:16:37.820
JavaScript has really
unpredictable performance.

390
00:16:37.820 --> 00:16:40.490
There's sort of an advice
floating around that you

391
00:16:40.490 --> 00:16:42.300
should just try to use the
efficient subset of

392
00:16:42.300 --> 00:16:43.310
JavaScript.

393
00:16:43.310 --> 00:16:46.370
Because VMs over the last few
years have been optimized for

394
00:16:46.370 --> 00:16:47.630
certain patterns.

395
00:16:47.630 --> 00:16:49.120
And if you want to benefit
from the performance

396
00:16:49.120 --> 00:16:53.270
improvements, and you probably
do want to do that, you have

397
00:16:53.270 --> 00:16:57.040
to hit that sweet spot, and have
all your code fit in that

398
00:16:57.040 --> 00:16:58.770
efficient subset.

399
00:16:58.770 --> 00:17:00.980
The problem is that it's
actually kind of hard to find

400
00:17:00.980 --> 00:17:01.580
that subset.

401
00:17:01.580 --> 00:17:03.790
Nobody can tell you what
that subset is.

402
00:17:03.790 --> 00:17:05.589
It depends on the browser,
it depends on the

403
00:17:05.589 --> 00:17:06.920
version of the browser.

404
00:17:06.920 --> 00:17:09.190
And it's not just about using
the right syntactic

405
00:17:09.190 --> 00:17:10.170
constructs.

406
00:17:10.170 --> 00:17:13.579
It can be about not fetching
local variables from the

407
00:17:13.579 --> 00:17:14.410
context chain.

408
00:17:14.410 --> 00:17:16.300
It can be about many
different things.

409
00:17:16.300 --> 00:17:18.770
If you see a site like
jsperf.com, where people try

410
00:17:18.770 --> 00:17:21.859
to upload these mini-snippets
of code to figure out what

411
00:17:21.859 --> 00:17:24.579
works well in certain browsers,
this is an act of

412
00:17:24.579 --> 00:17:25.359
desperation.

413
00:17:25.359 --> 00:17:27.579
People are trying to figure
out what works well.

414
00:17:27.579 --> 00:17:28.740
They just don't know.

415
00:17:28.740 --> 00:17:30.890
So the only way to write a
really high-performance

416
00:17:30.890 --> 00:17:33.680
JavaScript application is
to profile all the time.

417
00:17:33.680 --> 00:17:36.230
That takes time, again limiting
your productivity.

418
00:17:36.230 --> 00:17:38.780
So you can do amazing things
with JavaScript.

419
00:17:38.780 --> 00:17:41.980
It's just kind of tricky
and time consuming.

420
00:17:41.980 --> 00:17:45.620
And JavaScript performance
is pretty unpredictable.

421
00:17:45.620 --> 00:17:47.920
Sometimes it's really great, and
sometimes you get like a

422
00:17:47.920 --> 00:17:53.400
factor of 20 slower code, just
by using some slightly less

423
00:17:53.400 --> 00:17:55.640
common version of something.

424
00:17:55.640 --> 00:17:56.890
That's not a good place to be.

425
00:17:56.890 --> 00:17:59.990
426
00:17:59.990 --> 00:18:00.300
LARS BAK: All right.

427
00:18:00.300 --> 00:18:03.740
So this is the summary for
the JavaScript portion.

428
00:18:03.740 --> 00:18:09.290
And as Kasper stated, programs
are hard to understand when

429
00:18:09.290 --> 00:18:10.950
you look at the source code.

430
00:18:10.950 --> 00:18:15.170
And it's also hard to reason
about if you're a tool.

431
00:18:15.170 --> 00:18:17.930
One thing that's really bad in
JavaScript is you can monkey

432
00:18:17.930 --> 00:18:19.280
patch the basic objects.

433
00:18:19.280 --> 00:18:22.290
That means that if you have two
different components that

434
00:18:22.290 --> 00:18:26.220
rely on the same library,
you get into problems.

435
00:18:26.220 --> 00:18:29.370
Because if one component patches
the library in a way

436
00:18:29.370 --> 00:18:31.550
the other component cannot
handle, then

437
00:18:31.550 --> 00:18:32.720
your program breaks.

438
00:18:32.720 --> 00:18:36.380
So compatibility is
out the window.

439
00:18:36.380 --> 00:18:39.670
Keep on trucking mentality is
just surprising to most.

440
00:18:39.670 --> 00:18:41.930
And we have gotten programs
in to analyze

441
00:18:41.930 --> 00:18:43.920
where this is an error.

442
00:18:43.920 --> 00:18:46.730
So programmers actually sent
their programs out, in

443
00:18:46.730 --> 00:18:51.480
production, with these keep on
trucking errors in them.

444
00:18:51.480 --> 00:18:52.300
And then of course there's

445
00:18:52.300 --> 00:18:55.850
unpredictability about the code.

446
00:18:55.850 --> 00:18:58.060
You should try to take your
favorite fast-running

447
00:18:58.060 --> 00:19:03.520
JavaScript code and put delete
property in a crucial place,

448
00:19:03.520 --> 00:19:04.500
and then the performance
[? quota ?]

449
00:19:04.500 --> 00:19:06.950
will go down the toilet.

450
00:19:06.950 --> 00:19:10.010
So this was the motivational
part.

451
00:19:10.010 --> 00:19:12.620
And hopefully you can see
innovation is needed, if you

452
00:19:12.620 --> 00:19:15.420
want to move the platform
forward so it's more

453
00:19:15.420 --> 00:19:16.670
productive for programmers.

454
00:19:16.670 --> 00:19:19.380
455
00:19:19.380 --> 00:19:23.210
So let's talk about that.

456
00:19:23.210 --> 00:19:26.166
And you'll get that
in one slide.

457
00:19:26.166 --> 00:19:26.875
It's here.

458
00:19:26.875 --> 00:19:28.110
KASPER LUND: Here it is.

459
00:19:28.110 --> 00:19:30.600
LARS BAK: So since we're VM
developers, we don't really

460
00:19:30.600 --> 00:19:32.040
know how to design languages.

461
00:19:32.040 --> 00:19:35.560
So we thought a good idea would
be to take different

462
00:19:35.560 --> 00:19:38.020
languages, and take the best
aspects of them, and

463
00:19:38.020 --> 00:19:39.390
put them into one.

464
00:19:39.390 --> 00:19:43.610
So Dart is basically sort of a
combination of the syntax from

465
00:19:43.610 --> 00:19:47.590
JavaScript, the [? optional ?]
types in Strongtalk, the

466
00:19:47.590 --> 00:19:54.020
object model in Smalltalk, some
concepts from C#, and

467
00:19:54.020 --> 00:19:57.250
then an isolate model that's
inspired by Erlang.

468
00:19:57.250 --> 00:20:00.160
So that is very simple.

469
00:20:00.160 --> 00:20:05.740
And to specify what it is,
is an unsurprising simple

470
00:20:05.740 --> 00:20:06.240
[INAUDIBLE]

471
00:20:06.240 --> 00:20:06.800
language.

472
00:20:06.800 --> 00:20:11.130
With simple inheritance-- we
have classes, and we have

473
00:20:11.130 --> 00:20:13.640
interfaces, and we have
a familiar syntax.

474
00:20:13.640 --> 00:20:18.520
So if you know how to program in
C# or Java or JavaScript, I

475
00:20:18.520 --> 00:20:21.850
would expect that you can get
productive within a few hours.

476
00:20:21.850 --> 00:20:23.540
KASPER LUND: One thing that's
worth mentioning here is that

477
00:20:23.540 --> 00:20:26.120
at some point we found that
if you want to develop a

478
00:20:26.120 --> 00:20:29.830
language, design it to make it
appealing to people, it has to

479
00:20:29.830 --> 00:20:31.620
have curly braces.

480
00:20:31.620 --> 00:20:34.910
It is not possible to come up
with a mainstream programming

481
00:20:34.910 --> 00:20:37.260
language that gets any
kind of acceptance

482
00:20:37.260 --> 00:20:38.350
without curly braces.

483
00:20:38.350 --> 00:20:41.440
So we have tons of
curly braces.

484
00:20:41.440 --> 00:20:42.670
You're welcome.

485
00:20:42.670 --> 00:20:48.560
[APPLAUSE]

486
00:20:48.560 --> 00:20:49.810
LARS BAK: It's sad, but true.

487
00:20:49.810 --> 00:20:55.250
488
00:20:55.250 --> 00:20:58.040
So let me just go on.

489
00:20:58.040 --> 00:21:01.780
So here is the point
example in Dart.

490
00:21:01.780 --> 00:21:04.930
This is the first Dart
example of this talk.

491
00:21:04.930 --> 00:21:07.390
And there's a class
named point.

492
00:21:07.390 --> 00:21:09.880
It has two fields, x and y.

493
00:21:09.880 --> 00:21:12.310
And there's a constructor.

494
00:21:12.310 --> 00:21:15.450
And parameters for the
constructor are this.x and

495
00:21:15.450 --> 00:21:18.500
this.y means when you call the
constructor it will assign the

496
00:21:18.500 --> 00:21:20.720
parameters to the two fields.

497
00:21:20.720 --> 00:21:23.520
So there's no body of the
constructor in this case.

498
00:21:23.520 --> 00:21:28.250
It also has an operator plus
that takes us another point,

499
00:21:28.250 --> 00:21:32.640
and then it returns a new point
that's actually the

500
00:21:32.640 --> 00:21:34.430
addition of the two points, the

501
00:21:34.430 --> 00:21:36.860
receiver and the parameter.

502
00:21:36.860 --> 00:21:40.860
Here you can see the shorthand
notation for a function, where

503
00:21:40.860 --> 00:21:42.340
you see the arrow.

504
00:21:42.340 --> 00:21:45.810
Syntax just means that there's
one expression to the right,

505
00:21:45.810 --> 00:21:50.270
and the function will return the
result of that expression.

506
00:21:50.270 --> 00:21:54.650
There's also a to string method,
and it returns a

507
00:21:54.650 --> 00:21:59.450
string so you can see what
coordinates the point has.

508
00:21:59.450 --> 00:22:01.450
Here we're using string
interpolation, it's fairly

509
00:22:01.450 --> 00:22:03.280
obvious what's going on.

510
00:22:03.280 --> 00:22:06.420
And then we have a top level
main that creates a new point.

511
00:22:06.420 --> 00:22:10.690
And then it has an expression
where we add one point to

512
00:22:10.690 --> 00:22:14.220
another point, which
is new point 4, 5.

513
00:22:14.220 --> 00:22:17.382
One thing I should point out,
you cannot call the

514
00:22:17.382 --> 00:22:20.030
constructor without new.

515
00:22:20.030 --> 00:22:21.260
That's a good thing.

516
00:22:21.260 --> 00:22:22.790
KASPER LUND: Hopefully this
syntax does not look

517
00:22:22.790 --> 00:22:23.840
too scary to people.

518
00:22:23.840 --> 00:22:26.450
I mean, the feedback we've
gotten so far is that this

519
00:22:26.450 --> 00:22:29.280
kind of code is actually fairly
easy for people to just

520
00:22:29.280 --> 00:22:30.840
read on the slide
and understand.

521
00:22:30.840 --> 00:22:32.616
That's exactly what
we're going for.

522
00:22:32.616 --> 00:22:36.990
523
00:22:36.990 --> 00:22:40.350
LARS BAK: When we designed the
language, we looked at various

524
00:22:40.350 --> 00:22:43.340
attempts to make scalable
programs.

525
00:22:43.340 --> 00:22:47.860
And there needs to be a way
where the programmer can

526
00:22:47.860 --> 00:22:51.530
specify the intent
of a library.

527
00:22:51.530 --> 00:22:53.720
And one way of doing that
is by specifying type

528
00:22:53.720 --> 00:22:55.130
annotations.

529
00:22:55.130 --> 00:22:56.700
And we have that in Dart.

530
00:22:56.700 --> 00:22:57.480
They're optional, though.

531
00:22:57.480 --> 00:23:00.370
So you can write without
types if you want to.

532
00:23:00.370 --> 00:23:03.530
And as your program matures and
you get more structure on

533
00:23:03.530 --> 00:23:07.070
it, you can add the types
any time you want.

534
00:23:07.070 --> 00:23:10.485
But they act as checkable
documentation for the code and

535
00:23:10.485 --> 00:23:11.280
the interfaces.

536
00:23:11.280 --> 00:23:14.750
So you can decide only to put in
types in the interface, but

537
00:23:14.750 --> 00:23:18.730
you can also decide to really
put in static types everywhere

538
00:23:18.730 --> 00:23:20.080
in your program.

539
00:23:20.080 --> 00:23:23.660
And people that are familiar
with the Java or C#, they have

540
00:23:23.660 --> 00:23:24.910
a tendency to do that.

541
00:23:24.910 --> 00:23:27.420
542
00:23:27.420 --> 00:23:29.430
We also have generics.

543
00:23:29.430 --> 00:23:31.800
And that makes really useful, so
you can specify you have a

544
00:23:31.800 --> 00:23:36.080
list of apples or a
set of oranges.

545
00:23:36.080 --> 00:23:39.210
States intent.

546
00:23:39.210 --> 00:23:41.650
The type system is a little
bit special in that it is

547
00:23:41.650 --> 00:23:47.810
considered unsound, because we
allow downcasts when steadily

548
00:23:47.810 --> 00:23:48.920
checking a Dart program.

549
00:23:48.920 --> 00:23:50.970
However, these abilities
are run time.

550
00:23:50.970 --> 00:23:54.060
So if you violate the assignment
rules, you'll get a

551
00:23:54.060 --> 00:23:55.240
runtime error.

552
00:23:55.240 --> 00:23:56.960
But it makes it very,
very flexible.

553
00:23:56.960 --> 00:23:59.540
And I'll show you that on the
next slide, hopefully.

554
00:23:59.540 --> 00:24:02.360
555
00:24:02.360 --> 00:24:04.570
Or the next slide.

556
00:24:04.570 --> 00:24:07.680
This one here is the point
example again, where we have

557
00:24:07.680 --> 00:24:09.780
added the types.

558
00:24:09.780 --> 00:24:14.980
So you can see that the fields
are now annotated with num,

559
00:24:14.980 --> 00:24:17.470
which is a number in Dart.

560
00:24:17.470 --> 00:24:22.390
And also the return type of the
operator plus will be a

561
00:24:22.390 --> 00:24:26.360
point, and the parameter to
that is also a point.

562
00:24:26.360 --> 00:24:28.800
So you can see, if you contrast
it to the first

563
00:24:28.800 --> 00:24:31.920
example, as little changes
you have to make in

564
00:24:31.920 --> 00:24:34.360
order to type it.

565
00:24:34.360 --> 00:24:38.370
And this hopefully here also
is very easy to read.

566
00:24:38.370 --> 00:24:41.230
KASPER LUND: We see people start
out without writing a

567
00:24:41.230 --> 00:24:42.230
lot of type notations.

568
00:24:42.230 --> 00:24:44.860
While they're prototyping, just
wanted to get some things

569
00:24:44.860 --> 00:24:47.160
done, they will write in a style
where they have less

570
00:24:47.160 --> 00:24:47.880
type notations.

571
00:24:47.880 --> 00:24:50.170
And once they want to coordinate
their work with

572
00:24:50.170 --> 00:24:54.450
coworkers, or maybe send it out
for a code review, they

573
00:24:54.450 --> 00:24:56.930
will add more types to try to
document what they felt like

574
00:24:56.930 --> 00:25:00.660
doing, an what the different
constructs were meant to do.

575
00:25:00.660 --> 00:25:05.330
Usually we end up having types
in interfaces and return types

576
00:25:05.330 --> 00:25:07.520
and parameters, and
less types in the

577
00:25:07.520 --> 00:25:08.820
implementations of methods.

578
00:25:08.820 --> 00:25:12.550
But it's a matter of taste,
and you can choose,

579
00:25:12.550 --> 00:25:13.800
essentially, what you like.

580
00:25:13.800 --> 00:25:17.940
581
00:25:17.940 --> 00:25:21.350
LARS BAK: So to some of you
that are used to generics,

582
00:25:21.350 --> 00:25:24.630
from Java or C#, this might
sound surprising.

583
00:25:24.630 --> 00:25:26.980
But we have covariant
generic types.

584
00:25:26.980 --> 00:25:35.370
And it basically means that if
apple is a fruit, then a list

585
00:25:35.370 --> 00:25:38.130
of apples is clearly
a list of fruits.

586
00:25:38.130 --> 00:25:42.290
In this example we have
the main function.

587
00:25:42.290 --> 00:25:47.070
It calls a pick apples
from a tree, and it

588
00:25:47.070 --> 00:25:49.220
returns a list of apples.

589
00:25:49.220 --> 00:25:52.190
And then you call the print
fruits method--

590
00:25:52.190 --> 00:25:53.060
hello--

591
00:25:53.060 --> 00:25:55.080
and that takes a
list of fruits.

592
00:25:55.080 --> 00:25:56.250
And it seems to work.

593
00:25:56.250 --> 00:25:57.770
And that's how it should work.

594
00:25:57.770 --> 00:26:01.420
But if you take Java or
C#, that will fail.

595
00:26:01.420 --> 00:26:05.470
Because if you take these two
generic types in these

596
00:26:05.470 --> 00:26:07.330
languages, they are unrelated.

597
00:26:07.330 --> 00:26:11.710
And the type system cannot
cope with it.

598
00:26:11.710 --> 00:26:14.100
It works like you
want it to work.

599
00:26:14.100 --> 00:26:16.370
KASPER LUND: That's exactly
what I wanted to say.

600
00:26:16.370 --> 00:26:19.220
This fits with your intuition
in most cases.

601
00:26:19.220 --> 00:26:22.690
And of course there are some
theoretical reasons why other

602
00:26:22.690 --> 00:26:24.410
languages have not
done this before.

603
00:26:24.410 --> 00:26:27.500
But this actually works pretty
well in practice.

604
00:26:27.500 --> 00:26:28.850
So it does give you some
runtime checks

605
00:26:28.850 --> 00:26:29.430
every now and then.

606
00:26:29.430 --> 00:26:31.370
But it works really
well in practice.

607
00:26:31.370 --> 00:26:37.020
And it makes the types
not get in your way

608
00:26:37.020 --> 00:26:38.290
LARS BAK: All right.

609
00:26:38.290 --> 00:26:40.380
So let's go for a small demo.

610
00:26:40.380 --> 00:26:47.160
611
00:26:47.160 --> 00:26:49.360
KASPER LUND: Let me show you
just a tiny bit of Dart code,

612
00:26:49.360 --> 00:26:50.530
and how it works in practice.

613
00:26:50.530 --> 00:26:55.260
And I want to try to illustrate
how these types can

614
00:26:55.260 --> 00:26:58.820
be checked at runtime to give
you very recognizable and very

615
00:26:58.820 --> 00:27:02.280
strong error signals, that allow
you to fix issues in

616
00:27:02.280 --> 00:27:03.520
your code much more quickly.

617
00:27:03.520 --> 00:27:06.410
So here's an instance of the
Dart editor running.

618
00:27:06.410 --> 00:27:08.580
I'm not going to go into a lot
of detail about the editor.

619
00:27:08.580 --> 00:27:13.340
You should come to the next talk
at 2:45 in Room Three.

620
00:27:13.340 --> 00:27:15.600
You'll get much more insights
into what the editor can do

621
00:27:15.600 --> 00:27:16.540
and how it works.

622
00:27:16.540 --> 00:27:18.950
This will just be
a small teaser.

623
00:27:18.950 --> 00:27:21.160
So here I have a
sunflower demo.

624
00:27:21.160 --> 00:27:25.000
I can show you that running in
our custom build of Chrome,

625
00:27:25.000 --> 00:27:26.750
that has the Dart VM enabled.

626
00:27:26.750 --> 00:27:30.120
And it's a fairly simple,
small thing.

627
00:27:30.120 --> 00:27:32.370
It just allows me to have a
slider and adjust the size of

628
00:27:32.370 --> 00:27:34.230
this sunflower thing.

629
00:27:34.230 --> 00:27:37.050
If I go back to the editor and
I deliberately introduce a

630
00:27:37.050 --> 00:27:38.810
small issue in the code--

631
00:27:38.810 --> 00:27:40.580
let me scroll down here,
find the main thing.

632
00:27:40.580 --> 00:27:44.690
Something like messing up and
providing a rubbish argument

633
00:27:44.690 --> 00:27:45.620
to draw frame.

634
00:27:45.620 --> 00:27:47.520
Instead of providing the
context, I'll give it the

635
00:27:47.520 --> 00:27:48.810
canvas instead.

636
00:27:48.810 --> 00:27:49.950
I'll say that.

637
00:27:49.950 --> 00:27:53.630
And because the VM is enabled
in this Dart [INAUDIBLE], I

638
00:27:53.630 --> 00:27:55.730
can just go and refresh the
browser, and it gets the

639
00:27:55.730 --> 00:27:56.320
latest source code.

640
00:27:56.320 --> 00:27:59.190
No compilation necessary.

641
00:27:59.190 --> 00:28:01.920
What actually happens is I go
back into the editor, because

642
00:28:01.920 --> 00:28:03.470
this actually gives
me an exception.

643
00:28:03.470 --> 00:28:06.650
Because I'm supposed to be
passing a canvas rendering

644
00:28:06.650 --> 00:28:07.500
context 2D.

645
00:28:07.500 --> 00:28:09.750
That's a nice, short name.

646
00:28:09.750 --> 00:28:12.100
It wants the context, and I'm
giving it a canvas instead.

647
00:28:12.100 --> 00:28:15.610
So I get a very recognizable
error, right here when I have

648
00:28:15.610 --> 00:28:16.360
the mistake.

649
00:28:16.360 --> 00:28:18.560
It doesn't try to keep
on trucking.

650
00:28:18.560 --> 00:28:21.310
And it really helps me, as a
developer, to figure out what

651
00:28:21.310 --> 00:28:22.600
I messed up.

652
00:28:22.600 --> 00:28:25.630
So this was a very small teaser,
just to show you that

653
00:28:25.630 --> 00:28:28.520
the checking of these types at
runtime can really help you

654
00:28:28.520 --> 00:28:33.210
just find those issues
really quickly.

655
00:28:33.210 --> 00:28:35.440
LARS BAK: And this is a good
example, where there's a

656
00:28:35.440 --> 00:28:38.890
mixture between untyped
code and typed code.

657
00:28:38.890 --> 00:28:42.020
And even though you have a
mixture, the typing in the

658
00:28:42.020 --> 00:28:44.990
type part will help you validate
that you used the

659
00:28:44.990 --> 00:28:46.460
code the right way.

660
00:28:46.460 --> 00:28:49.120
KASPER LUND: So the canvas
that I provided as the

661
00:28:49.120 --> 00:28:51.340
argument was untyped.

662
00:28:51.340 --> 00:28:53.130
That's OK to pass to something
that expects a type, but we

663
00:28:53.130 --> 00:28:55.640
will check it.

664
00:28:55.640 --> 00:28:57.060
Let's go back to the
presentation, here.

665
00:28:57.060 --> 00:29:00.000
666
00:29:00.000 --> 00:29:01.640
LARS BAK: All right.

667
00:29:01.640 --> 00:29:05.770
Since this is a full language,
we decided to select a small

668
00:29:05.770 --> 00:29:09.190
portfolio of cool language
features I hope you like.

669
00:29:09.190 --> 00:29:12.620
So let's go through
them quickly.

670
00:29:12.620 --> 00:29:15.980
So we have name constructors.

671
00:29:15.980 --> 00:29:19.540
And it means that you can have
more than one constructor in

672
00:29:19.540 --> 00:29:20.820
the same class.

673
00:29:20.820 --> 00:29:23.520
In this case here we
have added a name

674
00:29:23.520 --> 00:29:24.530
constructor to point.

675
00:29:24.530 --> 00:29:26.150
It's called polar.

676
00:29:26.150 --> 00:29:29.310
So if you have polar
coordinates, you can pass that

677
00:29:29.310 --> 00:29:32.070
in and also create a point.

678
00:29:32.070 --> 00:29:35.860
The main reason for doing that
is we don't have type

679
00:29:35.860 --> 00:29:38.710
overloading in Dart.

680
00:29:38.710 --> 00:29:42.380
And this will give you
flexibility compared to other

681
00:29:42.380 --> 00:29:46.820
languages, where you often
have to do several steady

682
00:29:46.820 --> 00:29:49.810
factory methods to get
to the same result.

683
00:29:49.810 --> 00:29:52.540
So, cool feature.

684
00:29:52.540 --> 00:29:54.200
Next.

685
00:29:54.200 --> 00:29:55.510
We have interfaces.

686
00:29:55.510 --> 00:29:58.240
But what we have also added
something called default

687
00:29:58.240 --> 00:30:00.560
implementations to interfaces.

688
00:30:00.560 --> 00:30:05.370
And it's mainly designed so that
novice users do not have

689
00:30:05.370 --> 00:30:09.180
to know all the implementation
types in the system.

690
00:30:09.180 --> 00:30:12.610
So all they have to know is
the simple interfaces.

691
00:30:12.610 --> 00:30:16.250
And you can say new to a list,
which is an interface, and the

692
00:30:16.250 --> 00:30:18.760
only thing that will happened
is it will just delegate the

693
00:30:18.760 --> 00:30:22.160
constructor call to the default
implementation.

694
00:30:22.160 --> 00:30:24.890
And in this case it's the
list [? factoring. ?]

695
00:30:24.890 --> 00:30:27.810
So we created two lists
for you here.

696
00:30:27.810 --> 00:30:30.890
In main, the first one,
is just a list

697
00:30:30.890 --> 00:30:33.050
without a generic parameter.

698
00:30:33.050 --> 00:30:37.360
And in that list you can add
any update you have.

699
00:30:37.360 --> 00:30:39.910
The second one is a
list of points.

700
00:30:39.910 --> 00:30:44.170
You can pass the optional
parameter linked to it.

701
00:30:44.170 --> 00:30:49.000
So we'll get a list of 12
elements, and you can only add

702
00:30:49.000 --> 00:30:51.430
points to it.

703
00:30:51.430 --> 00:30:53.980
KASPER LUND: So if you look at
the list constructor up in the

704
00:30:53.980 --> 00:30:57.140
interface, that square bracket
notation means that that

705
00:30:57.140 --> 00:30:58.460
parameter is optional.

706
00:30:58.460 --> 00:30:59.845
It can be provided by
the caller, and

707
00:30:59.845 --> 00:31:03.000
it can not be provided.

708
00:31:03.000 --> 00:31:05.873
The default implementation gets
to decide what to do it

709
00:31:05.873 --> 00:31:07.990
it's not provided, and in this
case it just initializes the

710
00:31:07.990 --> 00:31:10.150
list with zero elements and
you get to add your stuff

711
00:31:10.150 --> 00:31:11.750
afterwards.

712
00:31:11.750 --> 00:31:15.010
But it's a nice thing that you
can specify in the interface,

713
00:31:15.010 --> 00:31:17.050
that the intent is that you can
provide this if you want

714
00:31:17.050 --> 00:31:19.980
to, or you may not want to do
that and you get the default

715
00:31:19.980 --> 00:31:21.440
behavior instead.

716
00:31:21.440 --> 00:31:23.470
So that's another language
feature on the same slide.

717
00:31:23.470 --> 00:31:26.260
Like two in one.

718
00:31:26.260 --> 00:31:28.040
LARS BAK: Next one is
cascaded calls.

719
00:31:28.040 --> 00:31:31.180
How many of you have
used Smalltalk?

720
00:31:31.180 --> 00:31:32.860
KASPER LUND: Wow.

721
00:31:32.860 --> 00:31:36.070
LARS BAK: Out of the five,
how many like cascaded

722
00:31:36.070 --> 00:31:37.660
[? sends? ?]

723
00:31:37.660 --> 00:31:38.290
Nobody?

724
00:31:38.290 --> 00:31:42.020
Anyways, we have added
cascaded [? sends. ?]

725
00:31:42.020 --> 00:31:43.800
I'm a true believer in them.

726
00:31:43.800 --> 00:31:48.640
So it basically means we have a
construct that allows you to

727
00:31:48.640 --> 00:31:51.640
do multiple calls on
the same object.

728
00:31:51.640 --> 00:31:55.380
Here's an example where you
want to draw a circle.

729
00:31:55.380 --> 00:31:57.800
You get the canvas, the
x- and y-coordinates,

730
00:31:57.800 --> 00:31:59.380
and the size in.

731
00:31:59.380 --> 00:32:04.800
And you first compute the
context from the canvas, and

732
00:32:04.800 --> 00:32:08.650
then you want to do a
number of calls on

733
00:32:08.650 --> 00:32:10.120
that object, the context.

734
00:32:10.120 --> 00:32:12.430
And this is how it's
done in Dart.

735
00:32:12.430 --> 00:32:15.740
You use the dot dot notation,
and it means that you first

736
00:32:15.740 --> 00:32:19.290
call beginPath on the context,
then arc, then fill, then

737
00:32:19.290 --> 00:32:21.710
closePath, and then stroke.

738
00:32:21.710 --> 00:32:24.890
It's just a simple way to avoid
introducing yet another

739
00:32:24.890 --> 00:32:26.140
local variable.

740
00:32:26.140 --> 00:32:28.190
741
00:32:28.190 --> 00:32:30.510
KASPER LUND: It also gives us
great typing information.

742
00:32:30.510 --> 00:32:34.680
So if you have a canvas out of
context and that is typed in

743
00:32:34.680 --> 00:32:38.290
the definition of the canvas,
the system will know and be

744
00:32:38.290 --> 00:32:41.060
able to give you code completion
suggestions when

745
00:32:41.060 --> 00:32:43.500
you're doing these
cascaded things.

746
00:32:43.500 --> 00:32:48.320
So it helps, at least if the
alternative was to do a bar

747
00:32:48.320 --> 00:32:50.020
declaration, and have
to go through all

748
00:32:50.020 --> 00:32:50.290
the things with that.

749
00:32:50.290 --> 00:32:52.380
So this is shorter, and
nicer in many ways.

750
00:32:52.380 --> 00:32:56.350
751
00:32:56.350 --> 00:32:59.110
LARS BAK: Here's
another thing.

752
00:32:59.110 --> 00:33:02.030
This illustrates how we do
proper capturing of loop

753
00:33:02.030 --> 00:33:03.280
variables in Dart.

754
00:33:03.280 --> 00:33:05.760
755
00:33:05.760 --> 00:33:07.760
Here's a function called main.

756
00:33:07.760 --> 00:33:10.690
It has a list called closures.

757
00:33:10.690 --> 00:33:16.330
And we have a for loop from zero
to eight, where we add a

758
00:33:16.330 --> 00:33:19.840
closure each time you
execute the loop.

759
00:33:19.840 --> 00:33:25.030
And in this case here, it's just
a function that returns

760
00:33:25.030 --> 00:33:27.270
the [? count of variable ?] i.

761
00:33:27.270 --> 00:33:30.680
In most languages what happens
if you execute this code as

762
00:33:30.680 --> 00:33:31.680
specified--

763
00:33:31.680 --> 00:33:34.420
by the way, at the end here
we go through the list of

764
00:33:34.420 --> 00:33:36.600
closures, and then evaluate
the closure

765
00:33:36.600 --> 00:33:38.700
and print the result.

766
00:33:38.700 --> 00:33:42.520
If you do that in C# or in
JavaScript, you'll get a

767
00:33:42.520 --> 00:33:45.630
number of eights out, because
all the closures were referred

768
00:33:45.630 --> 00:33:48.680
to the same loop variable.

769
00:33:48.680 --> 00:33:50.320
In Dart it's different.

770
00:33:50.320 --> 00:33:54.030
In Dart, you'll introduce a new
loop variable each time

771
00:33:54.030 --> 00:33:55.680
you enter the loop.

772
00:33:55.680 --> 00:34:02.360
So in Dart, you'll see the
results 1, 2, 3, 4, 5, 6, 7.

773
00:34:02.360 --> 00:34:05.320
And this is a common mistake
when you use closures for

774
00:34:05.320 --> 00:34:06.910
programming.

775
00:34:06.910 --> 00:34:08.719
KASPER LUND: We have a number
of examples from JavaScript,

776
00:34:08.719 --> 00:34:12.300
again, where we see people
using asynchronous API.

777
00:34:12.300 --> 00:34:14.800
And they have to be very careful
to capture the right

778
00:34:14.800 --> 00:34:16.810
variables and the
right values.

779
00:34:16.810 --> 00:34:19.000
So there's a lot of small
mistakes in that, and you see

780
00:34:19.000 --> 00:34:21.130
a lot of weird things
going on with that.

781
00:34:21.130 --> 00:34:23.690
So we decided to try to fix
that, and make it simpler for

782
00:34:23.690 --> 00:34:25.010
programmers to reason
about this.

783
00:34:25.010 --> 00:34:29.239
784
00:34:29.239 --> 00:34:33.820
LARS BAK: So to us Dart is
beautiful, even though we took

785
00:34:33.820 --> 00:34:35.810
most of the components
and curly

786
00:34:35.810 --> 00:34:37.060
braces from other languages.

787
00:34:37.060 --> 00:34:39.449
788
00:34:39.449 --> 00:34:42.040
It's declarative, so we think
it's easy to read.

789
00:34:42.040 --> 00:34:44.260
And it's certainly toolable.

790
00:34:44.260 --> 00:34:47.699
We don't do any implicit
conversion, so the semantics

791
00:34:47.699 --> 00:34:49.830
is fairly straightforward.

792
00:34:49.830 --> 00:34:53.239
And the libraries are actually
read-only, so we can have

793
00:34:53.239 --> 00:34:58.470
composable component and it
works, and you can rely on it.

794
00:34:58.470 --> 00:35:05.280
And again, if you're used to
Java, C# or JavaScript, other

795
00:35:05.280 --> 00:35:07.620
languages with curly braces,
this should be easy.

796
00:35:07.620 --> 00:35:11.360
797
00:35:11.360 --> 00:35:15.210
KASPER LUND: So the Dart
language is, of course, a big

798
00:35:15.210 --> 00:35:16.540
part of this project.

799
00:35:16.540 --> 00:35:17.760
But there is more to it.

800
00:35:17.760 --> 00:35:20.790
So let me give you a brief
tour of what we're doing.

801
00:35:20.790 --> 00:35:23.690
Language is only part
of the story.

802
00:35:23.690 --> 00:35:27.200
If you want to have a great web
development platform, that

803
00:35:27.200 --> 00:35:30.250
entire platform has to be
well-tuned for helping you

804
00:35:30.250 --> 00:35:32.200
guys to deliver fantastic
apps.

805
00:35:32.200 --> 00:35:35.600
So developers need a great new
language, and we've tried to

806
00:35:35.600 --> 00:35:37.560
argue why Dart is that
new language.

807
00:35:37.560 --> 00:35:41.720
But you also need really fast
execution, and really fast

808
00:35:41.720 --> 00:35:42.670
startup applications.

809
00:35:42.670 --> 00:35:45.800
And you need very good tools for
developing your apps and

810
00:35:45.800 --> 00:35:48.420
for analyzing your apps.

811
00:35:48.420 --> 00:35:50.830
It's also very important that
you get very good integration

812
00:35:50.830 --> 00:35:53.450
with the DOM.

813
00:35:53.450 --> 00:35:55.830
As developers you need
all of this.

814
00:35:55.830 --> 00:35:59.170
So the Dart project is not just
about the language, it's

815
00:35:59.170 --> 00:36:04.820
also about innovating on the
tool side, and it's also about

816
00:36:04.820 --> 00:36:07.460
giving you access to much
better and much more

817
00:36:07.460 --> 00:36:08.710
predictable performance.

818
00:36:08.710 --> 00:36:12.830
819
00:36:12.830 --> 00:36:16.260
LARS BAK: Because we have
decided to make Dart run on

820
00:36:16.260 --> 00:36:18.860
existing platforms, we have
a little bit complicated

821
00:36:18.860 --> 00:36:20.260
deployment story for Dart.

822
00:36:20.260 --> 00:36:22.210
And I'll try to go
through it here.

823
00:36:22.210 --> 00:36:24.290
So the green stuff at
the top is your

824
00:36:24.290 --> 00:36:27.370
application, plus libraries.

825
00:36:27.370 --> 00:36:28.700
And you have a few
choices here.

826
00:36:28.700 --> 00:36:31.690
You can run it directly on that
Dartium build, which you

827
00:36:31.690 --> 00:36:35.590
saw Kasper demo before, and
it will run right away.

828
00:36:35.590 --> 00:36:37.680
But you can also process
the application

829
00:36:37.680 --> 00:36:39.380
library through tools.

830
00:36:39.380 --> 00:36:42.930
One tool is the Dart to JS
compiler, which will translate

831
00:36:42.930 --> 00:36:46.560
Dart into one single
JavaScript file.

832
00:36:46.560 --> 00:36:49.720
And then you can run it
in any modern browser.

833
00:36:49.720 --> 00:36:51.970
This is the part where you
should be happy we're not

834
00:36:51.970 --> 00:36:55.530
trying to break the web.

835
00:36:55.530 --> 00:36:59.260
Another tool we have is we can
convert an application, plus

836
00:36:59.260 --> 00:37:02.060
libraries, into a snapshot.

837
00:37:02.060 --> 00:37:05.560
And a snapshot is a serialized
form of the data structure

838
00:37:05.560 --> 00:37:08.590
that makes applications
start up much faster.

839
00:37:08.590 --> 00:37:10.740
I'll get back to that
in two slides.

840
00:37:10.740 --> 00:37:13.869
841
00:37:13.869 --> 00:37:16.280
KASPER LUND: This is actually
a really important point, I

842
00:37:16.280 --> 00:37:17.200
think I want to make it again.

843
00:37:17.200 --> 00:37:18.810
Lars already said it.

844
00:37:18.810 --> 00:37:21.300
Dart is compatible with
all modern browsers.

845
00:37:21.300 --> 00:37:26.300
So this is just a small cut-out
of the Buildbot we

846
00:37:26.300 --> 00:37:29.590
have running on
buildbot.dartlang.org.

847
00:37:29.590 --> 00:37:33.500
And it shows us testing Dart
across Firefox, Chrome,

848
00:37:33.500 --> 00:37:36.970
Safari, IE and Opera.

849
00:37:36.970 --> 00:37:38.900
This is actually just an
indication that we take this

850
00:37:38.900 --> 00:37:41.050
compatibility issue
very seriously.

851
00:37:41.050 --> 00:37:44.270
It's very dear to our hearts
to have Dart running really

852
00:37:44.270 --> 00:37:46.490
well across all modern
browsers.

853
00:37:46.490 --> 00:37:50.270
All the browsers here do not
have Dart VMs built in, so

854
00:37:50.270 --> 00:37:53.140
here we're using the Dart to
JavaScript translation.

855
00:37:53.140 --> 00:37:55.330
And we make that work across
all these browsers.

856
00:37:55.330 --> 00:37:58.943
And we continue to do that and
keep that part running.

857
00:37:58.943 --> 00:38:02.190
858
00:38:02.190 --> 00:38:04.460
Let me just spend a few moments
on telling you about

859
00:38:04.460 --> 00:38:06.090
the translation process.

860
00:38:06.090 --> 00:38:08.460
We do have a compiler that
translates Dart to JavaScript.

861
00:38:08.460 --> 00:38:11.430
It's written in Dart itself.

862
00:38:11.430 --> 00:38:15.930
That gives us a nice excuse
for using Dart

863
00:38:15.930 --> 00:38:17.330
as a language ourselves.

864
00:38:17.330 --> 00:38:19.680
And it also means that
we can compile Dart--

865
00:38:19.680 --> 00:38:21.290
through Dart to JS compiler--

866
00:38:21.290 --> 00:38:24.380
with itself, and get a compiler
out that actually can

867
00:38:24.380 --> 00:38:26.910
compile Dart to JavaScript,
that runs

868
00:38:26.910 --> 00:38:28.280
in any modern browser.

869
00:38:28.280 --> 00:38:31.470
That's maybe kind of freaky,
but it works really well.

870
00:38:31.470 --> 00:38:34.030
You can have a JavaScript
implementation of a Dart to

871
00:38:34.030 --> 00:38:37.430
JavaScript compiler by just
compiling it with itself.

872
00:38:37.430 --> 00:38:38.090
I like that stuff.

873
00:38:38.090 --> 00:38:40.520
LARS BAK: Maybe it'll go
to [? reflector ?] now.

874
00:38:40.520 --> 00:38:42.520
KASPER LUND: So let's get
back to something more

875
00:38:42.520 --> 00:38:43.030
down-to-earth.

876
00:38:43.030 --> 00:38:45.690
Here's a, I think
at this point,

877
00:38:45.690 --> 00:38:47.120
very well-known example.

878
00:38:47.120 --> 00:38:50.240
The point, with two fields,
x and y, and a

879
00:38:50.240 --> 00:38:51.550
constructor and a to string.

880
00:38:51.550 --> 00:38:53.910
And it translates to something
like this on the JavaScript.

881
00:38:53.910 --> 00:38:56.100
That's the right hand side.

882
00:38:56.100 --> 00:39:00.810
We create a structure, give it
an endpoint, and we fill in an

883
00:39:00.810 --> 00:39:03.360
explicit superclass, object in
this case, and put in a couple

884
00:39:03.360 --> 00:39:04.940
fields, x and y.

885
00:39:04.940 --> 00:39:07.740
And then we have a small piece
of code that actually

886
00:39:07.740 --> 00:39:11.000
translates this to JavaScript
instructor at runtime, and

887
00:39:11.000 --> 00:39:13.330
puts in the getters and setters
for these fields, and

888
00:39:13.330 --> 00:39:14.760
it makes it nice to work with.

889
00:39:14.760 --> 00:39:16.740
But the rest of the definition
of point is

890
00:39:16.740 --> 00:39:18.190
actually just the methods.

891
00:39:18.190 --> 00:39:21.570
So here you see the to string
method is being translated to

892
00:39:21.570 --> 00:39:24.670
a JavaScript to string method,
with a dollar zero at the end.

893
00:39:24.670 --> 00:39:25.940
That just means that
that function

894
00:39:25.940 --> 00:39:27.590
expects zero arguments.

895
00:39:27.590 --> 00:39:30.380
It's important for us to make
sure that these functions that

896
00:39:30.380 --> 00:39:32.710
you call get the expected number
of arguments, so you

897
00:39:32.710 --> 00:39:35.820
don't have this classical issue
in JavaScript where you

898
00:39:35.820 --> 00:39:38.110
forget to provide a parameter,
and it just kind of

899
00:39:38.110 --> 00:39:39.380
works in a weird way.

900
00:39:39.380 --> 00:39:41.670
The to string method on the
right is a bit more verbose

901
00:39:41.670 --> 00:39:43.040
than the one on the left.

902
00:39:43.040 --> 00:39:45.500
And that's because of the string
interpolation feature,

903
00:39:45.500 --> 00:39:50.670
where we will make it very, very
easy to convert strings,

904
00:39:50.670 --> 00:39:55.370
and bits and pieces of
expressions and code, to join

905
00:39:55.370 --> 00:39:56.200
them as strings.

906
00:39:56.200 --> 00:39:59.300
And you see here it's translated
into a couple of

907
00:39:59.300 --> 00:40:01.100
string concatenation
operations.

908
00:40:01.100 --> 00:40:04.170
So we'll do this for you, and
this code runs across all

909
00:40:04.170 --> 00:40:06.838
modern browsers.

910
00:40:06.838 --> 00:40:10.540
LARS BAK: We have to speed
up a little bit, I think.

911
00:40:10.540 --> 00:40:11.570
Anyways.

912
00:40:11.570 --> 00:40:14.730
One cool thing about Dart is
that because it is declarative

913
00:40:14.730 --> 00:40:17.140
we can do something called
tree shaking.

914
00:40:17.140 --> 00:40:19.810
And tree shaking is this
pre-deployment step that

915
00:40:19.810 --> 00:40:23.200
allows you to reduce the
size of the executable.

916
00:40:23.200 --> 00:40:25.290
And what it basically means
is that you take the main

917
00:40:25.290 --> 00:40:28.820
function and you start
shaking it.

918
00:40:28.820 --> 00:40:32.110
Everything that you're not using
will fall off the tree,

919
00:40:32.110 --> 00:40:34.490
and when you're done you can
wrap it up, and that's your

920
00:40:34.490 --> 00:40:36.080
application.

921
00:40:36.080 --> 00:40:41.010
So unused classes and unused
methods will be eliminated.

922
00:40:41.010 --> 00:40:45.920
And the application is just
penalized for what it's using,

923
00:40:45.920 --> 00:40:49.480
compared to what's being
included in libraries.

924
00:40:49.480 --> 00:40:53.145
And this is great because it
helps the download time of the

925
00:40:53.145 --> 00:40:56.280
application, and also helps
the startup time.

926
00:40:56.280 --> 00:40:57.710
KASPER LUND: It also means that
you can depend on a big

927
00:40:57.710 --> 00:41:00.670
library, and you only pay for
the small pieces of it you

928
00:41:00.670 --> 00:41:01.810
actually use.

929
00:41:01.810 --> 00:41:03.140
LARS BAK: You cannot do
that in JavaScript.

930
00:41:03.140 --> 00:41:03.880
Why?

931
00:41:03.880 --> 00:41:05.510
Well, because there's a val.

932
00:41:05.510 --> 00:41:07.400
Val is a thing that
takes a string and

933
00:41:07.400 --> 00:41:09.310
converts it into code.

934
00:41:09.310 --> 00:41:12.150
So you cannot analyze
it statically.

935
00:41:12.150 --> 00:41:15.670
The second one is, it also has
the with statement that

936
00:41:15.670 --> 00:41:16.800
introduces [? voodoo, ?]

937
00:41:16.800 --> 00:41:17.585
scoping.

938
00:41:17.585 --> 00:41:19.570
You basically have no chance of
figuring out what's being

939
00:41:19.570 --> 00:41:22.470
accessed in the outer scope.

940
00:41:22.470 --> 00:41:26.100
So that's much easier in Dart,
and that is what clear

941
00:41:26.100 --> 00:41:29.010
semantics will give you.

942
00:41:29.010 --> 00:41:32.800
Tree shaking is already used by
dart2js today, and clearly

943
00:41:32.800 --> 00:41:37.930
reduces the size of the app,
and also improves startup.

944
00:41:37.930 --> 00:41:40.440
We are in the process of also
working on a tool that takes

945
00:41:40.440 --> 00:41:44.230
Dart code, tree shakes it,
and emits Dart code.

946
00:41:44.230 --> 00:41:47.790
So the Dart code itself will
be easier to start up.

947
00:41:47.790 --> 00:41:49.970
And that will be based on the
same infrastructure as the

948
00:41:49.970 --> 00:41:51.520
Dart to JS compiler.

949
00:41:51.520 --> 00:41:54.170
KASPER LUND: Shaken,
not stirred.

950
00:41:54.170 --> 00:41:54.890
That's the motto.

951
00:41:54.890 --> 00:41:56.140
LARS BAK: Yes, James.

952
00:41:56.140 --> 00:41:58.350
953
00:41:58.350 --> 00:42:02.380
Another thing that should be
really cool and is already

954
00:42:02.380 --> 00:42:05.990
implemented in the Dart VM
is the Dart snapshots.

955
00:42:05.990 --> 00:42:11.120
And it's a binary form of the
entire Dart application.

956
00:42:11.120 --> 00:42:14.610
And our measurements so far
means that you get a 10x

957
00:42:14.610 --> 00:42:17.840
speedup compared to sourcing
in the application before

958
00:42:17.840 --> 00:42:19.400
starting up.

959
00:42:19.400 --> 00:42:21.670
And that's fantastic, because
that means that instead of

960
00:42:21.670 --> 00:42:25.520
having a one second startup,
you get down below 100

961
00:42:25.520 --> 00:42:28.810
milliseconds to start
up the application.

962
00:42:28.810 --> 00:42:30.070
And it's very simple.

963
00:42:30.070 --> 00:42:33.810
If you do the VM the right way,
you can just load the

964
00:42:33.810 --> 00:42:38.270
application into the heap, and
then you serialize the heap

965
00:42:38.270 --> 00:42:40.410
into a binary format.

966
00:42:40.410 --> 00:42:41.430
Very simple.

967
00:42:41.430 --> 00:42:43.330
And it's really, really
efficient when

968
00:42:43.330 --> 00:42:44.670
you start up again.

969
00:42:44.670 --> 00:42:47.320
What benefits you is you don't
have to do scanning and

970
00:42:47.320 --> 00:42:50.440
parsing of the source code.

971
00:42:50.440 --> 00:42:53.160
And also, on mobile devices,
you don't have to spend as

972
00:42:53.160 --> 00:42:58.070
much CPU resources in loading
in the application, because

973
00:42:58.070 --> 00:43:03.220
it's just a matter of
deserializing the heap.

974
00:43:03.220 --> 00:43:03.580
All right.

975
00:43:03.580 --> 00:43:05.920
KASPER LUND: It's important to
notice that this binary form

976
00:43:05.920 --> 00:43:07.370
is completely
platform-independent.

977
00:43:07.370 --> 00:43:09.573
It's the same thing you would
ship to a mobile device, that

978
00:43:09.573 --> 00:43:11.100
you would ship to the desktop.

979
00:43:11.100 --> 00:43:14.120
Even if it's like a 64-bit and
a 32-bit machine involved,

980
00:43:14.120 --> 00:43:15.020
it's the same format.

981
00:43:15.020 --> 00:43:17.620
So it's not about doing
a per-target

982
00:43:17.620 --> 00:43:18.680
compilation of any sort.

983
00:43:18.680 --> 00:43:21.560
This is just a binary form of
the source code, essentially.

984
00:43:21.560 --> 00:43:24.030
LARS BAK: It doesn't contain
any generic code.

985
00:43:24.030 --> 00:43:30.150
And it can handle going from a
32-bit machine to a 64-bit

986
00:43:30.150 --> 00:43:33.690
machine, if you want
to do that.

987
00:43:33.690 --> 00:43:34.660
All right.

988
00:43:34.660 --> 00:43:36.450
Now.

989
00:43:36.450 --> 00:43:37.700
Let's talk about the future.

990
00:43:37.700 --> 00:43:44.270
991
00:43:44.270 --> 00:43:46.460
One important part of this
project is to design a new

992
00:43:46.460 --> 00:43:47.570
programming language.

993
00:43:47.570 --> 00:43:51.900
And we are pretty much done
with that design process.

994
00:43:51.900 --> 00:43:55.620
We have a form of specification
made.

995
00:43:55.620 --> 00:43:58.910
You can download it and read it
if you want to, with a few

996
00:43:58.910 --> 00:44:00.000
exceptions.

997
00:44:00.000 --> 00:44:02.990
We have a few things
we will put in.

998
00:44:02.990 --> 00:44:07.170
One is we will probably
eliminate interfaces, because

999
00:44:07.170 --> 00:44:09.180
we also have abstract classes,
and they work

1000
00:44:09.180 --> 00:44:10.810
exactly the same way.

1001
00:44:10.810 --> 00:44:14.260
So these have just simplified
the language.

1002
00:44:14.260 --> 00:44:17.610
We'll also introduce mixins,
which allow you to do

1003
00:44:17.610 --> 00:44:22.150
co-sharing across inheritance
hierarchies.

1004
00:44:22.150 --> 00:44:26.120
That'll come in after
version one of Dart.

1005
00:44:26.120 --> 00:44:29.070
And then of course we'll have
some support for annotations,

1006
00:44:29.070 --> 00:44:33.430
because most IDEs say they
want annotations.

1007
00:44:33.430 --> 00:44:36.850
Java programmers want
annotations.

1008
00:44:36.850 --> 00:44:38.120
So that's how it is.

1009
00:44:38.120 --> 00:44:38.760
But anyway.

1010
00:44:38.760 --> 00:44:40.050
You should look at the
specification.

1011
00:44:40.050 --> 00:44:42.070
It's pretty much done, and
I hope you like it.

1012
00:44:42.070 --> 00:44:45.140
Otherwise send us comments.

1013
00:44:45.140 --> 00:44:48.520
So this is our timeline
we have on the

1014
00:44:48.520 --> 00:44:50.880
whiteboard in Denmark.

1015
00:44:50.880 --> 00:44:53.510
KASPER LUND: As you can tell,
up to 2009 we were busy

1016
00:44:53.510 --> 00:44:55.920
hacking on JavaScript,
making that faster.

1017
00:44:55.920 --> 00:44:59.330
And at some point Lars and I
decided to try to do something

1018
00:44:59.330 --> 00:45:00.440
a bit simpler than that.

1019
00:45:00.440 --> 00:45:02.780
We called that Spot, and
that was in 2010.

1020
00:45:02.780 --> 00:45:07.160
And we spent three months on
hacking up this new virtual

1021
00:45:07.160 --> 00:45:08.630
machine, a new programming
language, and

1022
00:45:08.630 --> 00:45:09.870
a new set of libraries.

1023
00:45:09.870 --> 00:45:11.640
And that was a lot of fun.

1024
00:45:11.640 --> 00:45:14.460
At some point it was so
promising that we decided to

1025
00:45:14.460 --> 00:45:19.150
turn it into a real project, and
it got re-branded to Dart.

1026
00:45:19.150 --> 00:45:21.160
And that's where we're at now.

1027
00:45:21.160 --> 00:45:26.480
So in 2011 we introduced Dart
as a technology preview, and

1028
00:45:26.480 --> 00:45:28.150
we've been getting a
lot of very good

1029
00:45:28.150 --> 00:45:30.500
feedback from that process.

1030
00:45:30.500 --> 00:45:34.940
So this here is all about making
Dart robust and really,

1031
00:45:34.940 --> 00:45:36.180
really fast.

1032
00:45:36.180 --> 00:45:39.090
And next year?

1033
00:45:39.090 --> 00:45:41.250
LARS BAK: Success.

1034
00:45:41.250 --> 00:45:42.500
KASPER LUND: That will do.

1035
00:45:42.500 --> 00:45:45.970
1036
00:45:45.970 --> 00:45:50.000
LARS BAK: So what we're working
on hard today is to

1037
00:45:50.000 --> 00:45:52.970
make sure that you have a
developer release in your

1038
00:45:52.970 --> 00:45:56.410
hands later this year, so you
can start relying on the

1039
00:45:56.410 --> 00:45:59.290
libraries, the performance
of Dart, and building

1040
00:45:59.290 --> 00:46:02.280
applications on top of it.

1041
00:46:02.280 --> 00:46:04.910
The release will include
the language--

1042
00:46:04.910 --> 00:46:08.020
fixed, hopefully, for
the first version--

1043
00:46:08.020 --> 00:46:10.790
libraries for the web and server
development, so you can

1044
00:46:10.790 --> 00:46:14.500
also write Dart applications
on the server side.

1045
00:46:14.500 --> 00:46:16.320
We have a programming
environment.

1046
00:46:16.320 --> 00:46:20.680
So some of it is based
on Eclipse.

1047
00:46:20.680 --> 00:46:24.100
And we also have a standalone
virtual machine, that's also

1048
00:46:24.100 --> 00:46:26.690
been integrated into
the Chromium build.

1049
00:46:26.690 --> 00:46:30.180
And that was the Dartium browser
you saw in the demo.

1050
00:46:30.180 --> 00:46:33.250
And then we have this translator
to JavaScript that

1051
00:46:33.250 --> 00:46:37.950
allows us to be compatible
with most browsers.

1052
00:46:37.950 --> 00:46:39.200
So this is exciting.

1053
00:46:39.200 --> 00:46:41.740
1054
00:46:41.740 --> 00:46:45.590
KASPER LUND: So in addition to
all that, Dart is already now,

1055
00:46:45.590 --> 00:46:48.130
and will remain, a fully open
source product here.

1056
00:46:48.130 --> 00:46:52.150
Dart is available under a very
permissive BSD license.

1057
00:46:52.150 --> 00:46:53.940
So if you want to take it,
run with it, use it for

1058
00:46:53.940 --> 00:46:56.160
something, have fun.

1059
00:46:56.160 --> 00:46:58.630
The entire idea is to try to
foster innovation in this

1060
00:46:58.630 --> 00:47:01.210
space, so it makes a lot of
sense for us to just put all

1061
00:47:01.210 --> 00:47:04.830
the bits and pieces out there,
and have a community based

1062
00:47:04.830 --> 00:47:05.890
around that.

1063
00:47:05.890 --> 00:47:07.430
It's developed in the open.

1064
00:47:07.430 --> 00:47:09.900
All our code reviews are on
public mailing lists, and all

1065
00:47:09.900 --> 00:47:12.120
the build bots are for
everybody to see.

1066
00:47:12.120 --> 00:47:16.310
It makes it much easier for us
to interact with members of

1067
00:47:16.310 --> 00:47:19.790
the community that have good
ideas or good feedback.

1068
00:47:19.790 --> 00:47:23.120
Already now we have a fairly
active community, and we're

1069
00:47:23.120 --> 00:47:26.600
getting a lot of very helpful
and very good feedback on new

1070
00:47:26.600 --> 00:47:28.880
ideas that we circulate
on the mailing list.

1071
00:47:28.880 --> 00:47:32.360
So if you're interested in
joining in, or at least trying

1072
00:47:32.360 --> 00:47:34.910
it out, you should go to some
of the online resources we

1073
00:47:34.910 --> 00:47:35.910
have available.

1074
00:47:35.910 --> 00:47:38.410
The primary site is
dartlang.org.

1075
00:47:38.410 --> 00:47:41.630
And there you'll find a lot of
information about how to

1076
00:47:41.630 --> 00:47:44.680
download the SDK and the
editor, and try it out.

1077
00:47:44.680 --> 00:47:49.440
So please try it out, continue
to give us good feedback.

1078
00:47:49.440 --> 00:47:51.880
LARS BAK: And one interesting
note is that since we released

1079
00:47:51.880 --> 00:47:57.930
it as a preview last fall,
we have had a few

1080
00:47:57.930 --> 00:47:59.710
changes to that platform.

1081
00:47:59.710 --> 00:48:02.760
There's now 9,000 revisions
since last fall.

1082
00:48:02.760 --> 00:48:04.870
So you can imagine that there's
a lot of change lists

1083
00:48:04.870 --> 00:48:06.260
coming out every day.

1084
00:48:06.260 --> 00:48:09.460
And we're really serious about
making this fast and

1085
00:48:09.460 --> 00:48:10.810
consistent.

1086
00:48:10.810 --> 00:48:12.895
KASPER LUND: It's fun to work
on a project like that, that

1087
00:48:12.895 --> 00:48:13.900
moves really quickly.

1088
00:48:13.900 --> 00:48:16.830
And it's fun to see people
that use it being excited

1089
00:48:16.830 --> 00:48:20.000
about the new changes, and
adapting their existing code

1090
00:48:20.000 --> 00:48:22.430
bases to new, interesting
things that

1091
00:48:22.430 --> 00:48:23.190
pop up in the language.

1092
00:48:23.190 --> 00:48:24.440
So it's been a fun process.

1093
00:48:24.440 --> 00:48:27.600
1094
00:48:27.600 --> 00:48:30.380
So there's even more about
Dart at this Google IO.

1095
00:48:30.380 --> 00:48:35.100
So this was a very sort of high
level presentation about

1096
00:48:35.100 --> 00:48:36.980
Dart, and the motivation
behind it.

1097
00:48:36.980 --> 00:48:40.390
If you're interested in more
details, I suggest you go to

1098
00:48:40.390 --> 00:48:44.710
the next talk, at 2:45 in Room
3, which is about building web

1099
00:48:44.710 --> 00:48:45.590
apps in Dart.

1100
00:48:45.590 --> 00:48:48.480
And you'll get more hands-on
experience with what it is to

1101
00:48:48.480 --> 00:48:50.980
build something new and
exciting in Dart.

1102
00:48:50.980 --> 00:48:53.070
There's also a talk about
migrating code that's written

1103
00:48:53.070 --> 00:48:56.970
in GWT to Dart in the
same room, Room 3.

1104
00:48:56.970 --> 00:48:59.200
And during the entire afternoon
here, from now,

1105
00:48:59.200 --> 00:49:02.780
essentially, to fairly late, we
have Dart office hours on

1106
00:49:02.780 --> 00:49:03.650
the Chrome demo floor.

1107
00:49:03.650 --> 00:49:06.660
So if you want to come chat with
us there, feel free to

1108
00:49:06.660 --> 00:49:08.840
drop by, and if you have
questions we'll be very happy

1109
00:49:08.840 --> 00:49:10.910
to try to answer them.

1110
00:49:10.910 --> 00:49:15.360
Tomorrow, if you're really
Darty, you should go to our

1111
00:49:15.360 --> 00:49:18.190
Bullseye, Your First Dart App
code lab, where you'll get a

1112
00:49:18.190 --> 00:49:21.680
chance to do some hands-on work
with the environment and

1113
00:49:21.680 --> 00:49:22.930
the product.

1114
00:49:22.930 --> 00:49:25.770
1115
00:49:25.770 --> 00:49:27.310
LARS BAK: And we are pretty
much at the end now.

1116
00:49:27.310 --> 00:49:29.280
So this is a summary slide.

1117
00:49:29.280 --> 00:49:32.580
I hope we managed to convince
you that Dart is a simple and

1118
00:49:32.580 --> 00:49:34.500
unsurprising object-oriented
language that

1119
00:49:34.500 --> 00:49:37.040
should be easy to use.

1120
00:49:37.040 --> 00:49:43.060
And it allows you to write
structured code, and also

1121
00:49:43.060 --> 00:49:46.830
develop tools that can analyze
these programs.

1122
00:49:46.830 --> 00:49:48.760
And it works on modern
browsers.

1123
00:49:48.760 --> 00:49:51.810
So we've had a lot of experience
in implementing

1124
00:49:51.810 --> 00:49:54.560
virtual machines for various
object-oriented languages.

1125
00:49:54.560 --> 00:49:59.810
This is the first time we are
doing a new language, and it's

1126
00:49:59.810 --> 00:50:00.490
a challenge.

1127
00:50:00.490 --> 00:50:01.610
But it's fun.

1128
00:50:01.610 --> 00:50:03.110
So thank you for listening.

1129
00:50:03.110 --> 00:50:06.400
And if you have any questions,
please line up in front of the

1130
00:50:06.400 --> 00:50:10.102
mics so we can capture
what you're asking.

1131
00:50:10.102 --> 00:50:13.320
KASPER LUND: Yeah, the final
thing here is to just make a

1132
00:50:13.320 --> 00:50:16.670
mental note of the fact that
it's fairly easy to build a

1133
00:50:16.670 --> 00:50:19.630
really high-performance, fast
virtual machine, at least

1134
00:50:19.630 --> 00:50:20.840
compared to building
a new language.

1135
00:50:20.840 --> 00:50:23.401
So we're having a lot of fun.

1136
00:50:23.401 --> 00:50:46.560
[APPLAUSE]

1137
00:50:46.560 --> 00:50:47.930
KASPER LUND: Go ahead.

1138
00:50:47.930 --> 00:50:48.630
AUDIENCE: Hello?

1139
00:50:48.630 --> 00:50:49.970
KASPER LUND: Yes, it's on.

1140
00:50:49.970 --> 00:50:51.660
AUDIENCE: Is it the
same JavaScript--

1141
00:50:51.660 --> 00:50:54.840
it's cross-browser, or do you
have different versions for

1142
00:50:54.840 --> 00:50:55.920
different browsers?

1143
00:50:55.920 --> 00:50:57.880
KASPER LUND: So we generate
one version of

1144
00:50:57.880 --> 00:50:59.536
the JavaScript code.

1145
00:50:59.536 --> 00:51:01.460
And there are some parts
in there that are

1146
00:51:01.460 --> 00:51:04.010
browser-specific, but right
now we just compile one

1147
00:51:04.010 --> 00:51:07.780
version that deals with all the
differences in one file.

1148
00:51:07.780 --> 00:51:10.910
So one output, one JavaScript
file that works across all the

1149
00:51:10.910 --> 00:51:12.550
modern browsers.

1150
00:51:12.550 --> 00:51:13.800
AUDIENCE: One other question.

1151
00:51:13.800 --> 00:51:17.280
1152
00:51:17.280 --> 00:51:21.310
You've shown us the language,
but the APIs that you use to

1153
00:51:21.310 --> 00:51:25.910
access the DOM and the other
elements of the browser, are

1154
00:51:25.910 --> 00:51:29.220
those familiar?

1155
00:51:29.220 --> 00:51:31.880
LARS BAK: They are the same.

1156
00:51:31.880 --> 00:51:34.550
We're using the same DOM
interface as JavaScript,

1157
00:51:34.550 --> 00:51:38.190
except a few changes to make
it more consistent.

1158
00:51:38.190 --> 00:51:40.840
And we call it the Dart
HTML library.

1159
00:51:40.840 --> 00:51:43.770
So it's also available when
you download Dart.

1160
00:51:43.770 --> 00:51:46.290
If you go to the next talk about
Dart, you'll see how

1161
00:51:46.290 --> 00:51:49.250
that's being used for building
web applications.

1162
00:51:49.250 --> 00:51:52.170
But this talk was mostly about
the language, and not how to

1163
00:51:52.170 --> 00:51:54.270
hook it up to the web.

1164
00:51:54.270 --> 00:51:57.786
LARS BAK: If you drop by the
Chrome demo floor, I'm sure

1165
00:51:57.786 --> 00:51:59.340
someone can show you what
it is and how it

1166
00:51:59.340 --> 00:52:03.880
looks at the API level.

1167
00:52:03.880 --> 00:52:05.590
AUDIENCE: I had a question, I
guess more about the Dart

1168
00:52:05.590 --> 00:52:07.070
editor, but.

1169
00:52:07.070 --> 00:52:09.430
I've played with it a little
bit, and I was wondering if

1170
00:52:09.430 --> 00:52:12.610
there's plans to make an
official Eclipse plugin, so

1171
00:52:12.610 --> 00:52:14.560
that we can get all the version
control, and other

1172
00:52:14.560 --> 00:52:17.460
features of the Eclipse
platform.

1173
00:52:17.460 --> 00:52:20.970
LARS BAK: There's been a lot of
requests to get a plugin.

1174
00:52:20.970 --> 00:52:23.850
And behind the scenes it's
sort of the same.

1175
00:52:23.850 --> 00:52:26.030
So we will wrap it
up at some point.

1176
00:52:26.030 --> 00:52:28.910
I cannot give you a date when it
is there, but it will come.

1177
00:52:28.910 --> 00:52:32.920
1178
00:52:32.920 --> 00:52:34.390
KASPER LUND: Take one more here,
and then we'll switch to

1179
00:52:34.390 --> 00:52:36.070
that side for a while.

1180
00:52:36.070 --> 00:52:36.345
AUDIENCE: Yeah.

1181
00:52:36.345 --> 00:52:36.620
Sorry.

1182
00:52:36.620 --> 00:52:39.970
So what sort of integration,
or is there any integration

1183
00:52:39.970 --> 00:52:44.110
with Google Closure compiler
for JavaScript?

1184
00:52:44.110 --> 00:52:46.780
Like, do you guys pump out
minified, optimized

1185
00:52:46.780 --> 00:52:47.330
JavaScript?

1186
00:52:47.330 --> 00:52:49.740
Or is it just unminified and
then you pump it through

1187
00:52:49.740 --> 00:52:50.990
Closure afterwards?

1188
00:52:50.990 --> 00:52:53.340
KASPER LUND: So right now what
we're doing is we're

1189
00:52:53.340 --> 00:52:57.370
generating unminified but
optimized output.

1190
00:52:57.370 --> 00:52:59.680
And we're pushing hard on making
those optimizations

1191
00:52:59.680 --> 00:53:00.180
even better.

1192
00:53:00.180 --> 00:53:02.670
And we are working on
minification as well.

1193
00:53:02.670 --> 00:53:05.020
So we don't have any immediate
plans of using the Closure

1194
00:53:05.020 --> 00:53:07.320
compiler for doing this, because
sometimes we actually

1195
00:53:07.320 --> 00:53:11.240
use a lot of information, when
you go from our input to

1196
00:53:11.240 --> 00:53:14.270
JavaScript with type annotations
in common.

1197
00:53:14.270 --> 00:53:16.910
So we want to try to avoid
losing that kind of

1198
00:53:16.910 --> 00:53:19.100
information, and essentially
do the minification and

1199
00:53:19.100 --> 00:53:21.750
optimizations ourselves, based
on the fact that we understand

1200
00:53:21.750 --> 00:53:25.090
the Dart semantics even better
than the Closure compiler can.

1201
00:53:25.090 --> 00:53:27.660
LARS BAK: Minification is
actually very simple when you

1202
00:53:27.660 --> 00:53:31.280
have all the information
from the compiler.

1203
00:53:31.280 --> 00:53:36.220
So it's much easier to do it
ourselves than go through the

1204
00:53:36.220 --> 00:53:38.090
Closure compiler for
minification.

1205
00:53:38.090 --> 00:53:40.980
KASPER LUND: We also have a need
for minifying Dart code,

1206
00:53:40.980 --> 00:53:42.780
to make the download of
Dart code smaller.

1207
00:53:42.780 --> 00:53:45.110
So we will produce something
like a Dart-to-Dart

1208
00:53:45.110 --> 00:53:47.380
translator, that minifies
and optimizes.

1209
00:53:47.380 --> 00:53:47.840
AUDIENCE: Cool.

1210
00:53:47.840 --> 00:53:49.700
And just one other quick
question, is there any ability

1211
00:53:49.700 --> 00:53:54.640
to at runtime to load in
additional code, if you're

1212
00:53:54.640 --> 00:53:55.410
using binaries?

1213
00:53:55.410 --> 00:53:58.120
Or is it all done at
compile time only?

1214
00:53:58.120 --> 00:54:00.480
KASPER LUND: Actually we use
this concept that we actually

1215
00:54:00.480 --> 00:54:02.210
didn't introduce much here.

1216
00:54:02.210 --> 00:54:03.120
It's isolates.

1217
00:54:03.120 --> 00:54:06.790
And that's one way of creating
a completely new world that

1218
00:54:06.790 --> 00:54:09.800
you can populate with new,
dynamically loaded code.

1219
00:54:09.800 --> 00:54:11.820
And it's still a work in
progress, it's something that

1220
00:54:11.820 --> 00:54:13.430
we will be pushing more on.

1221
00:54:13.430 --> 00:54:15.430
LARS BAK: There's also
another way of

1222
00:54:15.430 --> 00:54:16.880
dynamically loading code.

1223
00:54:16.880 --> 00:54:21.220
We have a way of lazy loading
an entire library.

1224
00:54:21.220 --> 00:54:23.686
So when you say import to a
library, we'll say it should

1225
00:54:23.686 --> 00:54:25.600
be lazy loaded.

1226
00:54:25.600 --> 00:54:28.310
And you just have to activate
the loading.

1227
00:54:28.310 --> 00:54:29.680
And you cannot use the
[? interpoints ?]

1228
00:54:29.680 --> 00:54:31.440
that the library before it has
been completely loaded.

1229
00:54:31.440 --> 00:54:33.786
If you try to use it, it
throws an exception.

1230
00:54:33.786 --> 00:54:36.736
1231
00:54:36.736 --> 00:54:37.680
AUDIENCE: I just have
a question.

1232
00:54:37.680 --> 00:54:40.620
What is the recipe for
server [INAUDIBLE]?

1233
00:54:40.620 --> 00:54:45.321
So Dart is on the client side
sort of language, but how do

1234
00:54:45.321 --> 00:54:49.570
you envision the communication
between server and client

1235
00:54:49.570 --> 00:54:50.970
serialization?

1236
00:54:50.970 --> 00:54:53.210
[INAUDIBLE]

1237
00:54:53.210 --> 00:54:55.080
LARS BAK: So certainly
we support JSON.

1238
00:54:55.080 --> 00:54:59.060
So you can use the JSON format
to move stuff back and forth.

1239
00:54:59.060 --> 00:55:02.270
The language is not a client
language, it's

1240
00:55:02.270 --> 00:55:03.640
also a server language.

1241
00:55:03.640 --> 00:55:05.520
And we have a standard
loan VM you can run

1242
00:55:05.520 --> 00:55:06.880
on the server side.

1243
00:55:06.880 --> 00:55:10.590
And it has an I/O library
that supports--

1244
00:55:10.590 --> 00:55:11.420
[INAUDIBLE]

1245
00:55:11.420 --> 00:55:16.180
asynchronous way of doing I/O.
So you can write server code

1246
00:55:16.180 --> 00:55:19.700
in Dart, if you want to.

1247
00:55:19.700 --> 00:55:22.580
KASPER LUND: There's some work
going on with using something

1248
00:55:22.580 --> 00:55:23.650
like [? protobufs ?]

1249
00:55:23.650 --> 00:55:26.720
to communicate between
client and server.

1250
00:55:26.720 --> 00:55:28.940
There's a lot of community
interest in this area, too.

1251
00:55:28.940 --> 00:55:31.990
So it is very important to
stress that Dart runs just

1252
00:55:31.990 --> 00:55:33.080
fine on the server.

1253
00:55:33.080 --> 00:55:35.630
So you can write your code, the
client code and the server

1254
00:55:35.630 --> 00:55:38.820
code, in the same language, and
have that interoperate in

1255
00:55:38.820 --> 00:55:40.070
a nice way.

1256
00:55:40.070 --> 00:55:44.460
1257
00:55:44.460 --> 00:55:47.260
AUDIENCE: Does Dart support
compile time [INAUDIBLE], so

1258
00:55:47.260 --> 00:55:51.780
that I will be able to calculate
optimal parameters

1259
00:55:51.780 --> 00:55:55.250
before generating the code?

1260
00:55:55.250 --> 00:55:59.790
A good example of the use of
that is being articulated in

1261
00:55:59.790 --> 00:56:01.940
[INAUDIBLE]

1262
00:56:01.940 --> 00:56:05.930
and all the [INAUDIBLE]
programming language.

1263
00:56:05.930 --> 00:56:07.550
KASPER LUND: We have some
support for that.

1264
00:56:07.550 --> 00:56:10.480
It's not completely general, but
it's very simple, and it

1265
00:56:10.480 --> 00:56:11.170
works well.

1266
00:56:11.170 --> 00:56:15.650
That's in the form of what we
call compile time expressions.

1267
00:56:15.650 --> 00:56:17.330
There's a subset of the
language, essentially, that

1268
00:56:17.330 --> 00:56:21.530
you can use for building compile
time expressions.

1269
00:56:21.530 --> 00:56:25.090
And that includes user-defined
data structures, we call them

1270
00:56:25.090 --> 00:56:28.760
const objects, that are actually
built at compile time

1271
00:56:28.760 --> 00:56:29.770
rather than at runtime.

1272
00:56:29.770 --> 00:56:31.620
So there's some support
in the language there.

1273
00:56:31.620 --> 00:56:34.020
You should drop by the
demo floor, and I can

1274
00:56:34.020 --> 00:56:35.640
show you how it works.

1275
00:56:35.640 --> 00:56:38.360
LARS BAK: So for instance, in
the point example, if you make

1276
00:56:38.360 --> 00:56:41.240
the fields final, you
can make a const

1277
00:56:41.240 --> 00:56:43.220
constructor for the point.

1278
00:56:43.220 --> 00:56:46.260
So you make instances of point
as compile time expressions,

1279
00:56:46.260 --> 00:56:49.700
that are compiled
at compile time.

1280
00:56:49.700 --> 00:56:50.950
AUDIENCE: [INAUDIBLE]

1281
00:56:50.950 --> 00:56:55.120
1282
00:56:55.120 --> 00:57:02.320
AUDIENCE: What did you mean
by success for 2013?

1283
00:57:02.320 --> 00:57:06.350
LARS BAK: That we still have
a job working on Dart.

1284
00:57:06.350 --> 00:57:07.600
No.

1285
00:57:07.600 --> 00:57:10.540
1286
00:57:10.540 --> 00:57:13.080
That was a joke.

1287
00:57:13.080 --> 00:57:19.790
Success means that in 2013 we
have a stable system that's

1288
00:57:19.790 --> 00:57:25.550
out in Chrome, and we have many
real projects outside

1289
00:57:25.550 --> 00:57:29.930
Google, also working on
Dart and using Dart

1290
00:57:29.930 --> 00:57:31.010
for deploying code.

1291
00:57:31.010 --> 00:57:33.160
This is the ultimate goal.

1292
00:57:33.160 --> 00:57:37.040
The premise here is to make sure
programmers will get a

1293
00:57:37.040 --> 00:57:40.700
much better platform for
writing applications.

1294
00:57:40.700 --> 00:57:43.030
And if you cannot demonstrate
that,

1295
00:57:43.030 --> 00:57:44.770
that's certainly a failure.

1296
00:57:44.770 --> 00:57:47.650
AUDIENCE: So do you expect
any [INAUDIBLE]

1297
00:57:47.650 --> 00:57:56.250
is going to [INAUDIBLE], since
it's already compatible over

1298
00:57:56.250 --> 00:57:58.990
most of of the JavaScript
stuff, that's OK?

1299
00:57:58.990 --> 00:58:02.450
LARS BAK: So your question is,
will the other browser vendors

1300
00:58:02.450 --> 00:58:06.040
take the Dart VM and integrate
it into their browsers?

1301
00:58:06.040 --> 00:58:08.430
Well, I cannot answer that,
since I'm not controlling what

1302
00:58:08.430 --> 00:58:09.390
they're doing.

1303
00:58:09.390 --> 00:58:12.320
But what I can do is, I can
make sure that Dart is an

1304
00:58:12.320 --> 00:58:13.310
appealing offer.

1305
00:58:13.310 --> 00:58:16.850
So it's out there,
it's open source.

1306
00:58:16.850 --> 00:58:20.120
And if we can demonstrate Dart
applications when running with

1307
00:58:20.120 --> 00:58:22.880
a native VM has instant
startup, and better

1308
00:58:22.880 --> 00:58:28.390
performance than a similar
JavaScript program, it seems

1309
00:58:28.390 --> 00:58:32.410
very appealing to me, if I was
sitting in the other camp and

1310
00:58:32.410 --> 00:58:34.480
then integrated.

1311
00:58:34.480 --> 00:58:38.270
And we hope that will
happen of course.

1312
00:58:38.270 --> 00:58:40.230
AUDIENCE: I'm curious if all of
the Dart language features

1313
00:58:40.230 --> 00:58:41.320
compile to JavaScript?

1314
00:58:41.320 --> 00:58:44.590
And I'm specifically curious
about covariant generics.

1315
00:58:44.590 --> 00:58:46.270
KASPER LUND: So, yeah.

1316
00:58:46.270 --> 00:58:48.770
So covariant generics are
reasonably easy to compile to

1317
00:58:48.770 --> 00:58:49.180
JavaScript.

1318
00:58:49.180 --> 00:58:51.230
There's nothing in JavaScript
that hinders that.

1319
00:58:51.230 --> 00:58:55.710
There's one area where it's
problematic to have the full

1320
00:58:55.710 --> 00:58:58.790
Dart language implemented when
translated to JavaScript, and

1321
00:58:58.790 --> 00:59:00.070
that's numerics.

1322
00:59:00.070 --> 00:59:02.790
JavaScript does not have any
efficient way of having

1323
00:59:02.790 --> 00:59:05.010
arbitrary sized integers,
for instance.

1324
00:59:05.010 --> 00:59:07.450
Everything is, when it comes
to numbers, a double in

1325
00:59:07.450 --> 00:59:08.250
JavaScript.

1326
00:59:08.250 --> 00:59:11.790
So there are some restrictions
on how numbers work in Dart

1327
00:59:11.790 --> 00:59:14.030
when compiled to JavaScript,
compared to what you get on

1328
00:59:14.030 --> 00:59:15.260
the native VM.

1329
00:59:15.260 --> 00:59:16.520
It's a hard problem to solve.

1330
00:59:16.520 --> 00:59:18.990
We're looking at ways
of doing that.

1331
00:59:18.990 --> 00:59:21.460
But for now that's the one
area where there's a real

1332
00:59:21.460 --> 00:59:23.150
difference between
the two setups.

1333
00:59:23.150 --> 00:59:26.300
LARS BAK: We have discussed
caving in, and just having

1334
00:59:26.300 --> 00:59:28.720
numbers like in JavaScript.

1335
00:59:28.720 --> 00:59:30.610
But boy, we really like
integers, and the

1336
00:59:30.610 --> 00:59:32.140
semantics of integers.

1337
00:59:32.140 --> 00:59:34.700
And mixing them all up,
I think, is a mistake.

1338
00:59:34.700 --> 00:59:37.810
So that's the reason why,
precisely in this area, that's

1339
00:59:37.810 --> 00:59:39.610
a little bit of discrepancy
between the native

1340
00:59:39.610 --> 00:59:47.130
implementation and the
JavaScript-generated code.

1341
00:59:47.130 --> 00:59:48.535
Yes?

1342
00:59:48.535 --> 00:59:51.270
AUDIENCE: Is Google going
to promote Dart over

1343
00:59:51.270 --> 00:59:52.520
GWT down the road?

1344
00:59:52.520 --> 00:59:55.660
1345
00:59:55.660 --> 00:59:59.640
LARS BAK: GWT already has a
lot of customers, and it's

1346
00:59:59.640 --> 01:00:01.550
still supported.

1347
01:00:01.550 --> 01:00:04.720
We think, since we have done the
Dart part and have nothing

1348
01:00:04.720 --> 01:00:08.310
to do with the GWT part, that
this is a better fit for the

1349
01:00:08.310 --> 01:00:09.600
web platform.

1350
01:00:09.600 --> 01:00:14.390
And during the presentation
we were talking about this

1351
01:00:14.390 --> 01:00:17.790
importance of immediacy when
doing programming.

1352
01:00:17.790 --> 01:00:19.740
The fact that you can change the
file and get it up running

1353
01:00:19.740 --> 01:00:23.770
right away, where there's no
tool chain in between you and

1354
01:00:23.770 --> 01:00:25.520
debugging the program--

1355
01:00:25.520 --> 01:00:29.460
this is something that's hard to
do in GWT, where it's much,

1356
01:00:29.460 --> 01:00:32.690
much easier to do in Dart.

1357
01:00:32.690 --> 01:00:35.260
At the same time, in Dart
you can avoid the types.

1358
01:00:35.260 --> 01:00:38.480
So if you prototype, you can do
crazy stuff and don't think

1359
01:00:38.480 --> 01:00:40.640
about the types, it'll
still work.

1360
01:00:40.640 --> 01:00:45.190
And I think that really will
help you accelerate your

1361
01:00:45.190 --> 01:00:47.890
prototyping of your
application.

1362
01:00:47.890 --> 01:00:51.340
AUDIENCE: Also I was just
curious about, for a project

1363
01:00:51.340 --> 01:00:57.630
of similar size, how does Dart
stack up against GWT in terms

1364
01:00:57.630 --> 01:01:00.010
of code generation,
[INAUDIBLE]

1365
01:01:00.010 --> 01:01:01.540
JavaScript code?

1366
01:01:01.540 --> 01:01:05.300
Is it smaller in size,
or larger in size?

1367
01:01:05.300 --> 01:01:09.120
1368
01:01:09.120 --> 01:01:11.690
LARS BAK: I don't have
comparable numbers right now.

1369
01:01:11.690 --> 01:01:15.870
What I can tell you is that the
generated JavaScript code

1370
01:01:15.870 --> 01:01:17.310
from Dart is fairly
minimal now.

1371
01:01:17.310 --> 01:01:20.320
You should try it out.

1372
01:01:20.320 --> 01:01:23.150
And we expected to be
much smaller than

1373
01:01:23.150 --> 01:01:24.280
what GWT can generate.

1374
01:01:24.280 --> 01:01:28.430
I think the GWT system is also
doing a lot of tree shaking

1375
01:01:28.430 --> 01:01:32.130
before they generate
JavaScript code.

1376
01:01:32.130 --> 01:01:36.310
But they have a lot of legacy
stuff related to the Java

1377
01:01:36.310 --> 01:01:37.390
libraries they're using.

1378
01:01:37.390 --> 01:01:39.550
But I don't have numbers
right now.

1379
01:01:39.550 --> 01:01:42.820
So go home and measure it.

1380
01:01:42.820 --> 01:01:43.340
Yes.

1381
01:01:43.340 --> 01:01:45.660
KASPER LUND: This will be the
last question, by the way.

1382
01:01:45.660 --> 01:01:47.120
AUDIENCE: Two questions.

1383
01:01:47.120 --> 01:01:50.550
So first, the syntax
for importing a

1384
01:01:50.550 --> 01:01:53.160
module is pound import.

1385
01:01:53.160 --> 01:01:56.730
Do you have some sort of
preprocessor that you can use,

1386
01:01:56.730 --> 01:01:59.075
with if defs and stuff?

1387
01:01:59.075 --> 01:01:59.950
KASPER LUND: No.

1388
01:01:59.950 --> 01:02:02.400
But it is true that right now,
the way to write an import is

1389
01:02:02.400 --> 01:02:04.010
using a pound import.

1390
01:02:04.010 --> 01:02:06.700
It is to try to make it stick
out, and it certainly does.

1391
01:02:06.700 --> 01:02:09.650
And we are thinking about making
it look more like an

1392
01:02:09.650 --> 01:02:11.070
integrated part of the
language, rather than

1393
01:02:11.070 --> 01:02:12.410
preprocessing.

1394
01:02:12.410 --> 01:02:16.220
But it was designed to make
it stick out, and it does.

1395
01:02:16.220 --> 01:02:20.930
AUDIENCE: Secondly, for
isolates, are they implemented

1396
01:02:20.930 --> 01:02:22.340
as threads?

1397
01:02:22.340 --> 01:02:25.230
Or is it somehow a thin--

1398
01:02:25.230 --> 01:02:27.450
KASPER LUND: Thread.

1399
01:02:27.450 --> 01:02:29.600
LARS BAK: Since we translate
to JavaScript and it has to

1400
01:02:29.600 --> 01:02:32.630
run on top of a single
JavaScript engine, we have to

1401
01:02:32.630 --> 01:02:33.760
multiplex between them.

1402
01:02:33.760 --> 01:02:35.916
But you can run isolates.

1403
01:02:35.916 --> 01:02:38.100
AUDIENCE: But in the
Dart VM itself?

1404
01:02:38.100 --> 01:02:40.010
LARS BAK: Yes, they're running
completely independent, so

1405
01:02:40.010 --> 01:02:42.890
that you can have isolates
running in parallel.

1406
01:02:42.890 --> 01:02:44.490
AUDIENCE: So they are
actual threads?

1407
01:02:44.490 --> 01:02:46.110
KASPER LUND: They don't have
to be [? native ?]

1408
01:02:46.110 --> 01:02:46.350
threads.

1409
01:02:46.350 --> 01:02:47.890
There is a thread pull
implementation that we're

1410
01:02:47.890 --> 01:02:51.620
working on, where essentially
you'll get as many threads

1411
01:02:51.620 --> 01:02:52.880
running as you need to--

1412
01:02:52.880 --> 01:02:55.600
as the amount of parallels
you have in your program.

1413
01:02:55.600 --> 01:02:58.350
So it's not tied to one thread,
and it's more like a

1414
01:02:58.350 --> 01:03:00.800
thin threading model.

1415
01:03:00.800 --> 01:03:03.340
LARS BAK: So for instance, if
the isolate is not active it

1416
01:03:03.340 --> 01:03:06.370
doesn't have to have a native
thread bound to it.

1417
01:03:06.370 --> 01:03:10.560
AUDIENCE: Does it have a
pre-allocated execution stack?

1418
01:03:10.560 --> 01:03:12.950
Fixed size stack?

1419
01:03:12.950 --> 01:03:14.800
KASPER LUND: No, so, everything
is asynchronous.

1420
01:03:14.800 --> 01:03:15.660
There's no blocking.

1421
01:03:15.660 --> 01:03:17.490
So you actually don't
need to do that.

1422
01:03:17.490 --> 01:03:20.880
You just have to return from
your isolate at that point.

1423
01:03:20.880 --> 01:03:23.470
It is an asynchronous model,
so there are no execution

1424
01:03:23.470 --> 01:03:25.100
stacks stuck on native
threads or anything.

1425
01:03:25.100 --> 01:03:26.600
So it's very simple that way.

1426
01:03:26.600 --> 01:03:29.700
LARS BAK: So we are using the
native execution stack when

1427
01:03:29.700 --> 01:03:31.430
executing an isolate.

1428
01:03:31.430 --> 01:03:32.480
KASPER LUND: Thanks
for staying for

1429
01:03:32.480 --> 01:03:34.200
the Q&amp;A. We're done.

1430
01:03:34.200 --> 01:03:35.450
LARS BAK: Thank you.

1431
01:03:35.450 --> 01:03:38.982
WEBVTT

1
00:00:00.310 --> 00:00:02.300
&gt;&gt;Alex Danilo: Hello, everybody. And welcome
here tonight. You have waited for the keynote

2
00:00:02.300 --> 00:00:02.719
act, I see. We're the last act of the day,
best of the day, of course.

3
00:00:02.719 --> 00:00:02.969
So I guess you're all wondering why Adobe
is here.

4
00:00:02.719 --> 00:00:06.540
The answer to that is they're a very valued
contributor to the WebKit project, and WebKit

5
00:00:06.540 --> 00:00:11.140
project is of course the core of Google Chrome
and a lot of other nice browsers out there.

6
00:00:11.140 --> 00:00:15.290
And of course, we like to share because of
course the Web is about sharing. And what

7
00:00:15.290 --> 00:00:20.619
I mean is I don't mean social media. I mean
they're a bunch of mad scientists -- actually,

8
00:00:20.619 --> 00:00:25.810
visionary physicists back in the early '90's
-- and they decided they wanted to share physics

9
00:00:25.810 --> 00:00:30.769
stuff, like scientific papers, so they built
the first Web browser and Web server. And

10
00:00:30.769 --> 00:00:34.000
then a few years later Marc Andreesen came
along and said, Well, images would be cool

11
00:00:34.000 --> 00:00:38.270
and he added images to the browser. And then
over the years, as you've seen, the evolution

12
00:00:38.270 --> 00:00:43.870
of the Web has just gotten better and better
and we have all these amazing features today.

13
00:00:43.870 --> 00:00:48.160
So basically the Web is open and so Adobe
and Google we all work on Web technology,

14
00:00:48.160 --> 00:00:55.160
we work with a lot of other companies as well.
So enough about that. Who are we? My name

15
00:00:55.700 --> 00:01:00.320
is Alex Danilo, and I'm a developer advocate
on Chrome.

16
00:01:00.320 --> 00:01:03.760
And with me I have Christian Cantrell, who
is a product manager, a developer himself,

17
00:01:03.760 --> 00:01:07.119
so he knows a lot of the stuff that you guys
do.

18
00:01:07.119 --> 00:01:11.549
And we also have Vincent Hardy, who is a principal
scientist. And Vincent and I have worked on

19
00:01:11.549 --> 00:01:17.100
CSS and SVG for a number of years now.
So the Web is evolving and that's a really

20
00:01:17.100 --> 00:01:21.319
good thing because we don't really want the
browser from the early '90's, do we?

21
00:01:21.319 --> 00:01:26.469
And the thing is what we're seeing now is
along the timeline of Web browser evolution

22
00:01:26.469 --> 00:01:31.789
all these new features have been coming in
and coming in and the feature set is accelerating.

23
00:01:31.789 --> 00:01:36.020
New features are not just accelerating, but
there an accelerating acceleration.

24
00:01:36.020 --> 00:01:41.299
So the thing is what do you do as a developer?
It's like we want to help you. And that's

25
00:01:41.299 --> 00:01:47.049
why we built Chrome. Chrome is built for simplicity,
security and speed. And what's going to give

26
00:01:47.049 --> 00:01:50.799
you simplicity is tools. It better tools to
make your job easier and that will give you

27
00:01:50.799 --> 00:01:56.389
more time because it will make your development
job faster, so we give you simplicity and

28
00:01:56.389 --> 00:01:58.389
speed, and that's what we're going to show
you today.

29
00:01:58.389 --> 00:02:03.920
Now, what are you supposed to do as a Web
developer? Come to Google I/O. And the second

30
00:02:03.920 --> 00:02:08.450
thing is go watch all the YouTube stuff, go
watch it afterwards, enjoy it, get all the

31
00:02:08.450 --> 00:02:12.810
demo material, experiment with it.
And one thing I would really like everyone

32
00:02:12.810 --> 00:02:16.480
in this room and everyone watching to do is
to talk to us.

33
00:02:16.480 --> 00:02:22.260
The Web is about people, it's open, we share,
and we listen to you. So if you as a Web developer

34
00:02:22.260 --> 00:02:27.120
sit around and you go like, "Oh, I wish CSS
did that," come and tell us, we'll try and

35
00:02:27.120 --> 00:02:30.739
push it through the standards bodies, we'll
get the other browser makers to do it and

36
00:02:30.739 --> 00:02:34.030
we'll do it together.
So anyway, this is the kind of thing we're

37
00:02:34.030 --> 00:02:39.010
trying to promote today, more creative options.
The old days used to muck up a wire frame,

38
00:02:39.010 --> 00:02:43.829
give it to the Web developer who writes JavaScript
and something pops out the other side.

39
00:02:43.829 --> 00:02:49.629
And we want to change that workflow. We want
to, like, bring on the declarative Renaissance.

40
00:02:49.629 --> 00:02:53.540
So we're putting features in the browser that
are declarative. They're not JavaScript. And

41
00:02:53.540 --> 00:02:57.709
we're providing tools so the designers can
come along and go, Well, I can build that

42
00:02:57.709 --> 00:03:01.590
page myself. I don't need to give it to a
JavaScript programmer.

43
00:03:01.590 --> 00:03:07.120
And so Adobe, of course, had a rich history
in topography and fonts and graphics, so the

44
00:03:07.120 --> 00:03:12.530
stuff we'll see today is a whole lot of new
CSS features, from magazine style layouts,

45
00:03:12.530 --> 00:03:17.969
some cinematic effects and amazing graphic
type stuff, and of course we bring this all

46
00:03:17.969 --> 00:03:21.030
to you in Chrome.
And if you're sitting there going, "Oh my

47
00:03:21.030 --> 00:03:25.640
God, my users use IE, a really old version,
what do we do about that," well, we give you

48
00:03:25.640 --> 00:03:30.159
Chrome Frame as well so you can have Chrome
and Chrome Frame and they provide the platform

49
00:03:30.159 --> 00:03:33.299
on which you can make these incredible new
apps.

50
00:03:33.299 --> 00:03:37.269
The other thing is we bring tools, we have
Chrome Developer Tools, and of course Adobe

51
00:03:37.269 --> 00:03:40.290
we're about to show you some new tools they
have been working on.

52
00:03:40.290 --> 00:03:44.549
And of course with their tools and our tools
it creates a synergy that makes your workflow

53
00:03:44.549 --> 00:03:49.250
so much easier and smoother.
And of course, the one thing that I'll emphasize

54
00:03:49.250 --> 00:03:54.359
yet one more time is that the Web is open,
the Web is everybody's, and we both participate

55
00:03:54.359 --> 00:03:59.659
in the W3C and a number of other standards
organizations. In fact, there are over 370

56
00:03:59.659 --> 00:04:04.459
companies who are participating in the W3C
and they steer the direction of the Web. So

57
00:04:04.459 --> 00:04:08.159
if you want a new feature, come to us, we'll
do it for you, okay?

58
00:04:08.159 --> 00:04:12.510
So on that note I'll pass it over to Christian
and he shall tell you all about these features.

59
00:04:12.510 --> 00:04:16.940
&gt;&gt;Christian Cantrell: Thank you, Alex.
So I think probably the best way to understand

60
00:04:16.940 --> 00:04:22.830
the perspective of Adobe when it comes to
helping to move the Web forward is to look

61
00:04:22.830 --> 00:04:29.830
at the Web platform team's official "Le Motto,"
which is a better Web and awesome tools.

62
00:04:30.919 --> 00:04:37.310
So I'm going to be talking about three things
that are going to help us achieve that goal,

63
00:04:37.310 --> 00:04:42.490
the first of which is text.
So the Web is already a very powerful platform

64
00:04:42.490 --> 00:04:47.680
for text, so Adobe wanted to build on that
because we really wanted to bring magazine-like

65
00:04:47.680 --> 00:04:53.169
layout to the Web. And we want to do that
-- we're doing that in primarily two ways

66
00:04:53.169 --> 00:05:00.020
with two specifications and two implementations
as well, CSS Regions and CSS Exclusions.

67
00:05:00.020 --> 00:05:07.020
The example you see here is using CSS Exclusions
to have some text flow along the edge of this

68
00:05:07.430 --> 00:05:11.470
mountain.
Here's another example where you see text

69
00:05:11.470 --> 00:05:16.470
flowing between different regions, in this
case to make columns, also flowing along these

70
00:05:16.470 --> 00:05:20.650
images here. So this is combining CSS Regions
and CSS Exclusions.

71
00:05:20.650 --> 00:05:24.770
Now, this is the kind of thing that you're
probably accustomed to seeing, we're all accustomed

72
00:05:24.770 --> 00:05:29.319
to seeing really in print and magazines or
something like that. Usually not something

73
00:05:29.319 --> 00:05:31.759
that you would see on Web. Something like
this the Web would typically have been laid

74
00:05:31.759 --> 00:05:35.270
out in another application, a screen shot
would have been taken or something strange

75
00:05:35.270 --> 00:05:40.690
like that, which obviously we don't want.
We really want true magazine-like layout with

76
00:05:40.690 --> 00:05:44.509
the Web.
So I'm going to start with the CSS Regions,

77
00:05:44.509 --> 00:05:50.099
and this is just sort of a brief overview.
The concept of CSS Regions is actually quite

78
00:05:50.099 --> 00:05:56.080
simple. You have a block of text here, a flow,
you have some elements here which are your

79
00:05:56.080 --> 00:06:01.800
regions, and with a couple of lines of very
simple declarative CSS, that text can start

80
00:06:01.800 --> 00:06:06.840
flowing through those regions. It's that simple.
I'm going to actually start with a couple

81
00:06:06.840 --> 00:06:12.440
of demos to help illustrate the point. In
addition to being a developer at Adobe I'm

82
00:06:12.440 --> 00:06:18.080
also a science fiction writer. And I frequently
write things and release them under a creative

83
00:06:18.080 --> 00:06:22.379
comments license online. And when I release
them they tend to look something like this,

84
00:06:22.379 --> 00:06:28.699
which is to say ugly, right?
So I put a lot of work into the story and

85
00:06:28.699 --> 00:06:32.229
then I release it in a way that I'm not really
that proud of. And the reason is because I

86
00:06:32.229 --> 00:06:35.289
want it to work on as many devices as possible.
I know people like to read on phones, they

87
00:06:35.289 --> 00:06:41.240
like to read on tablets, they like to use
all kinds of different types of browsers and

88
00:06:41.240 --> 00:06:47.150
machines, so I try and make it sort of the
lowest common denominator.

89
00:06:47.150 --> 00:06:50.810
But it honestly doesn't look that good, so
when I started working with CSS Regions I

90
00:06:50.810 --> 00:06:56.940
was really excited about what I could do with
my own work and how I could present it in

91
00:06:56.940 --> 00:07:01.539
a much more interesting fashion. So this is
the same story which I've applied some regions

92
00:07:01.539 --> 00:07:06.770
to. And you can see that I have a page count
up here, which is nice, and you can see that

93
00:07:06.770 --> 00:07:12.259
my text is flowing from region to region here
all automatically. I have some page numbers

94
00:07:12.259 --> 00:07:17.069
down here.
If I were to resize my browser here you can

95
00:07:17.069 --> 00:07:21.840
see the page count in the upper right-hand
corner is changing. As the page count changes,

96
00:07:21.840 --> 00:07:28.030
if I drag it up and decrease the height of
the available space you can see the pages

97
00:07:28.030 --> 00:07:32.780
have automatically adjusted themselves.
So this is a much nicer experience and something

98
00:07:32.780 --> 00:07:37.440
that I can be a little bit more proud of.
I have a couple more prototypes, but I want

99
00:07:37.440 --> 00:07:41.699
to go ahead and skip to the last one, which
is my favorite. I call this the sort of adaptive

100
00:07:41.699 --> 00:07:48.699
or responsive prototype. And this is unique
because it's designed not just to work on

101
00:07:48.990 --> 00:07:53.780
any size screen, it's designed to actually
be optimized for any size screen.

102
00:07:53.780 --> 00:07:58.229
So this is the same story once again, but
it uses -- it has some gestures where you

103
00:07:58.229 --> 00:08:05.229
can turn pages. It uses some heuristics to
determine the optimal width for a column and

104
00:08:05.629 --> 00:08:11.319
the optimal -- the maximum number of columns
it can fit. And you can see if you have much

105
00:08:11.319 --> 00:08:17.289
higher resolution, it will automatically determine
your column width for you and add more columns.

106
00:08:17.289 --> 00:08:23.550
Even the graphic here on the left-hand side
is scales as I change the column width because

107
00:08:23.550 --> 00:08:28.720
it's done with SVG.
So this thing -- this layout is going to work

108
00:08:28.720 --> 00:08:33.810
on a screen as big as a wall or something
as small as just a phone.

109
00:08:33.810 --> 00:08:39.079
So I had a lot of fun working with my own
content with this. And I started thinking

110
00:08:39.079 --> 00:08:43.130
that I really wanted to be able to consume
other content on the Web in a really nice

111
00:08:43.130 --> 00:08:49.410
way as well. And you know, I really wanted
to be able to just sort of reflow content

112
00:08:49.410 --> 00:08:53.120
into sort of a magazine or book-like format
really easily, so I started experimenting

113
00:08:53.120 --> 00:09:00.120
with this Chrome extension that I call Qualify.
And when I click on this extension up here

114
00:09:00.490 --> 00:09:06.540
all the content on the page is just automatically
reflowed using CSS Regions in a way that I

115
00:09:06.540 --> 00:09:12.230
think is much nicer to consume, and it's all
adjustable based on font size and all that.

116
00:09:12.230 --> 00:09:17.870
As an aside, if you guys went to any of these
shadow DOM sessions or Web component sessions,

117
00:09:17.870 --> 00:09:21.700
this is actually using the shadow DOM, so
it's not polluting the DOM at all. So as far

118
00:09:21.700 --> 00:09:25.589
as the DOM is concerned, you know, if there
are scripts running on the DOM or something,

119
00:09:25.589 --> 00:09:29.720
actually nothing has changed here at all.
It's all done behind the scenes on the shadow

120
00:09:29.720 --> 00:09:35.790
DOM. If you have no idea what I'm talking
about, shadow DOM is awesome. Check it out.

121
00:09:35.790 --> 00:09:40.680
Okay. So since we're making contributions
directly to WebKit, any browser that leverages

122
00:09:40.680 --> 00:09:47.250
WebKit is going to receive the benefits of
those contributions. And in this case the

123
00:09:47.250 --> 00:09:50.709
Chrome beta -- actually, I shouldn't say beta
anymore, it's not in beta anymore since like

124
00:09:50.709 --> 00:09:55.899
yesterday, I guess. So Chrome on Android also
has some CSS Regions support, so this is the

125
00:09:55.899 --> 00:10:02.899
screen shot I took from my Galaxy Nexus.
So let's look at some code. The first thing

126
00:10:03.029 --> 00:10:08.940
I want to point out here is just a simple
selector called content. And it has a property

127
00:10:08.940 --> 00:10:15.570
called flow-into here. And this flow-into
property is creating a named flow called article.

128
00:10:15.570 --> 00:10:22.290
And what's notable about this is that my content
is just going to be a big block of semantic

129
00:10:22.290 --> 00:10:28.810
text. So I'm not worried about, you know,
creating divs or some form of element that

130
00:10:28.810 --> 00:10:32.600
are regions and copying and pasting text into
each one. Obviously that would defeat the

131
00:10:32.600 --> 00:10:36.570
whole purpose. That's not really flowing.
You could have done that forever.

132
00:10:36.570 --> 00:10:40.990
So you have this semantic block of text which
is content and it knows nothing about the

133
00:10:40.990 --> 00:10:45.700
way it's going to be laid out.
And then I have this class called region.

134
00:10:45.700 --> 00:10:52.630
And it has a flow-from property here, and
it's referring to this named flow article,

135
00:10:52.630 --> 00:10:57.320
which is defined up here.
So with just that I'm able to get text flowing

136
00:10:57.320 --> 00:11:02.600
between regions.
Now, what about getting paging capabilities

137
00:11:02.600 --> 00:11:06.440
and, you know, the swiping effects and the
columns and the layout and all that?

138
00:11:06.440 --> 00:11:11.050
In order to do that you will have to write
some code. You're going to have to tap into

139
00:11:11.050 --> 00:11:15.610
the CSS object model.
And it's not a lot of code. It actually pretty

140
00:11:15.610 --> 00:11:19.630
straight forward, and I'll just go through
it. We started our layout with a function

141
00:11:19.630 --> 00:11:25.230
called add region here, and I created a new
region. And I'm going to set this attribute,

142
00:11:25.230 --> 00:11:29.470
the class attribute, to region, which we saw
in the previous slide is the named flow.

143
00:11:29.470 --> 00:11:32.970
And this is a really important line of code
right here, this region.addeventlistener.

144
00:11:32.970 --> 00:11:38.120
So we're gonna add this region.addeventlistener
to our region, and we're going to call this

145
00:11:38.120 --> 00:11:41.870
function called on layout update.
Basically what this is saying is if the text

146
00:11:41.870 --> 00:11:46.380
inside that region changes in any way, if
text is added, if text is removed, if the

147
00:11:46.380 --> 00:11:51.600
font size changes, if the element is resized
for any reason, then call this on layout update

148
00:11:51.600 --> 00:11:56.740
function so that I can run some -- you know,
take a look at the page, figure out what happened

149
00:11:56.740 --> 00:12:01.079
and update my layout. And then just add that
region to the -- pin that region to the body

150
00:12:01.079 --> 00:12:05.149
of the document.
So let's look at this on layout update function.

151
00:12:05.149 --> 00:12:10.649
Again, this is called whenever my flow changes
within my regions, so I get a reference to

152
00:12:10.649 --> 00:12:13.829
the region from the event target, nice and
straightforward, and then I start looking

153
00:12:13.829 --> 00:12:19.430
at this region overflow property.
And if the value of that property is overflow,

154
00:12:19.430 --> 00:12:23.889
which is to say if there's more text than
actually fits in that region, then I'm going

155
00:12:23.889 --> 00:12:28.180
to need to add another region. So I sort of
recursively call this add region function,

156
00:12:28.180 --> 00:12:31.690
right?
Otherwise if it fits, then call region layout

157
00:12:31.690 --> 00:12:35.260
complete and you're done, you can do your
layout and stuff.

158
00:12:35.260 --> 00:12:39.500
So what's missing from this is the code that
determines the width of your regions, the

159
00:12:39.500 --> 00:12:44.570
placement of your regions, the left, right,
top, bottom, and all of those kinds of things.

160
00:12:44.570 --> 00:12:48.760
It puts page numbers and the scrolling effects
and all that, but that stuff's actually not

161
00:12:48.760 --> 00:12:50.449
all that bad.
And the very first prototype that I wrote,

162
00:12:50.449 --> 00:12:55.930
I wrote that in, you know, a day. The last
one, you know, I sort of built a few prototypes,

163
00:12:55.930 --> 00:12:58.959
takes a couple of days.
And these are the kinds of things that people

164
00:12:58.959 --> 00:13:02.380
will write, they'll open source. I'll open
source everything I've done here along with

165
00:13:02.380 --> 00:13:07.430
a qualified plug-in so people can see how
it's done. So it's not bad to do all this

166
00:13:07.430 --> 00:13:11.769
stuff yourself, but we know that it has to
be easier. We know that people want to do

167
00:13:11.769 --> 00:13:17.050
it in a declarative way.
And so we've proposed something called CSS

168
00:13:17.050 --> 00:13:20.779
page templates.
And CSS page templates really come from our

169
00:13:20.779 --> 00:13:24.389
experience with tools like InDesign, which
is what you're looking at here. This is a

170
00:13:24.389 --> 00:13:28.910
screen shot of InDesign where I've created
some master pages. One master page has an

171
00:13:28.910 --> 00:13:32.930
image in the upper left-hand corner, another
master page has an image in the center here

172
00:13:32.930 --> 00:13:38.199
with two columns of text on either side.
And what I can do is I can just add pages

173
00:13:38.199 --> 00:13:42.079
to my document and just apply these master
pages to those pages and they're automatically

174
00:13:42.079 --> 00:13:45.899
formatted the way I want them. So it's really
nice and easy. We've learned from building

175
00:13:45.899 --> 00:13:49.949
these kinds of tools that, you know, people
want easy ways of doing these kinds of things.

176
00:13:49.949 --> 00:13:53.790
So let's take a look at CSS page templates.
We're going to look at it in two parts. The

177
00:13:53.790 --> 00:13:58.370
first one is the flow. And this is probably
pretty familiar because this is more or less

178
00:13:58.370 --> 00:14:04.410
what we just looked at, except for instead
of creating one named flow, I'm creating two.

179
00:14:04.410 --> 00:14:08.639
So I have a selector called article and a
selector called timeline and I'm creating

180
00:14:08.639 --> 00:14:13.459
two named flows here, the article flow and
the timeline flow.

181
00:14:13.459 --> 00:14:17.779
And then I have this selector here, combine
articles. And it has this interesting property

182
00:14:17.779 --> 00:14:23.190
called overflow style. And I'm saying page
X. So this line of code is basically saying

183
00:14:23.190 --> 00:14:28.110
"Don't call my -- don't call my event handler
and make me have to add regions and lay them

184
00:14:28.110 --> 00:14:34.769
out and all that, just page X, page along
the X axis," in other words, page horizontally.

185
00:14:34.769 --> 00:14:41.459
So the templates themselves, you use this
@ syntax to define them. So we have an outer

186
00:14:41.459 --> 00:14:44.459
definition of a template here and then we
have slots inside of the template.

187
00:14:44.459 --> 00:14:47.709
In this case we have a left template and a
right template. Both of these are getting

188
00:14:47.709 --> 00:14:53.420
their content from this article flow. Then
we have a center slot which is getting its

189
00:14:53.420 --> 00:14:57.540
content from the timeline flow.
So pretty straightforward, simple, declarative

190
00:14:57.540 --> 00:15:01.230
stuff, CSS that everyone is comfortable with,
and the result is something like this.

191
00:15:01.230 --> 00:15:05.839
We have some English text here which is flowing
from left column to the right column, and

192
00:15:05.839 --> 00:15:09.940
then we have this German text which constitutes
a timeline which is flowing along the center

193
00:15:09.940 --> 00:15:15.550
column.
And it's paging along the X axis as we specified,

194
00:15:15.550 --> 00:15:20.139
or in other words paging horizontally. There
are seven pages total.

195
00:15:20.139 --> 00:15:23.660
And all of that was just with a few lines
of declarative CSS.

196
00:15:23.660 --> 00:15:30.220
Now, this is still a proposal; however, we
do have shims or polyfills, JavaScript polyfills

197
00:15:30.220 --> 00:15:34.550
or shims, that you can use to actually see
this stuff in action and actually see it work.

198
00:15:34.550 --> 00:15:39.399
And we'll have a URL on that at the end of
the presentation. It's not enough, though,

199
00:15:39.399 --> 00:15:43.339
just to be able to flow text from region to
region. If you really want true magazine-like

200
00:15:43.339 --> 00:15:48.329
layout you need more powerful tools than that,
or I should say additional tools. And this

201
00:15:48.329 --> 00:15:54.529
is a screen shot of InDesign. This is where
somebody has flowed some text around a clipping

202
00:15:54.529 --> 00:15:59.940
path here. Right? Again, that's something
we're used to seeing in print. We want this

203
00:15:59.940 --> 00:16:04.690
on the Web. This is an example of it happening
on the Web. Again, this is both CSS Regions,

204
00:16:04.690 --> 00:16:08.709
where text is flowing between regions, and
also the exclusions where text is flowing

205
00:16:08.709 --> 00:16:15.709
along the contours of this image.
So where are we with CSS Exclusions right

206
00:16:16.790 --> 00:16:23.360
now? We're really focused on some of the low
level implementations which really involve

207
00:16:23.360 --> 00:16:29.060
the optimization of algorithms that flow text
around polygons and inside of polygons.

208
00:16:29.060 --> 00:16:34.660
I'll actually show you a quick demo here.
This is something that one of our engineers

209
00:16:34.660 --> 00:16:41.290
put together. And you can see that this is
just sort of an example of an algorithm that

210
00:16:41.290 --> 00:16:47.560
determines on the left side how a text should
flow inside of some arbitrary polygon. In

211
00:16:47.560 --> 00:16:53.350
this case it's a star shape. And on the left
it's content flowing around the polygon.

212
00:16:53.350 --> 00:16:59.350
And so this is stuff that has to be really
bulletproof and has to be really performing.

213
00:16:59.350 --> 00:17:03.310
So right now we're really focusing on optimizing
those algorithms. They're going to be contributing

214
00:17:03.310 --> 00:17:06.760
directly to the WebKit, and that's going to
be the foundation on top of which we build

215
00:17:06.760 --> 00:17:10.590
Exclusions.
Okay. So this is a really busy slide. I'm

216
00:17:10.590 --> 00:17:14.050
not going to go over this. This would bore
you guys all to death. It's too late in the

217
00:17:14.050 --> 00:17:20.650
day for that, but I wanted to just point out
one really important element of this timeline.

218
00:17:20.650 --> 00:17:24.330
This is basically the full timeline of everything
from when we first started thinking about

219
00:17:24.330 --> 00:17:27.550
Regions and Exclusions all the way up through
the present.

220
00:17:27.550 --> 00:17:30.530
I really want to focus on this bottom row
here, the blue row.

221
00:17:30.530 --> 00:17:37.530
I was at Google I/O last year and I was working
at the booth and I was demoing CSS Exclusions

222
00:17:38.880 --> 00:17:43.160
and Regions, and people would come up and
take a look at it -- and we had a prototype

223
00:17:43.160 --> 00:17:46.030
back then. It was just a prototype build.
And they'd look at it and they immediately

224
00:17:46.030 --> 00:17:49.940
got it, right? When you see text flowing around
shapes and everything it's awesome.

225
00:17:49.940 --> 00:17:52.770
And so they would say, Wait, what browser
is that? Are you using Firefox? Is that WebKit?

226
00:17:52.770 --> 00:17:55.750
Is that Chrome? Is that Safari? Like what
is that?

227
00:17:55.750 --> 00:18:00.100
And I would say, Well, this is actually our
own prototype browser. This actually doesn't

228
00:18:00.100 --> 00:18:03.760
work anywhere.
And they'd like walk away kind of crest fallen

229
00:18:03.760 --> 00:18:07.800
and be like "Damn, I kind of wanted to do
that."

230
00:18:07.800 --> 00:18:13.920
So a year later, almost exactly a year later,
all of the live demos that I showed you work

231
00:18:13.920 --> 00:18:17.620
in the version of Chrome that all of you have
on your computers right now, which is really

232
00:18:17.620 --> 00:18:22.180
remarkable to me. That's one year's time.
80 percent of CSS Regions has implemented

233
00:18:22.180 --> 00:18:25.410
and is in Chrome and is on your computer right
now.

234
00:18:25.410 --> 00:18:30.840
So we're making really good progress. As far
as other browsers, Mozilla has committed to

235
00:18:30.840 --> 00:18:34.030
Exclusions and Regions in their 2012 road
map.

236
00:18:34.030 --> 00:18:39.440
The preview version of IE 10 supports Regions
and Exclusions. And since the implementation

237
00:18:39.440 --> 00:18:43.710
is being done directly in WebKit, we expect
the next major version of Safari to pick it

238
00:18:43.710 --> 00:18:47.700
up as well.
I'm going to change gears a little bit here

239
00:18:47.700 --> 00:18:51.370
and I'm going to talk about the Web development
workflow, something a little different.

240
00:18:51.370 --> 00:18:53.700
Actually, instead of talking about it, I think
I'll do a little demonstration.

241
00:18:53.700 --> 00:19:00.700
So I'm going to open up my text editor here
and I'm going to open up a little prototype

242
00:19:01.600 --> 00:19:07.460
website that I am going to pretend like I'm
working on. And I'm going to talk about the

243
00:19:07.460 --> 00:19:11.720
Web development workflow, which typically
looks something like this. You start off in

244
00:19:11.720 --> 00:19:16.610
your editor. You make some kind of a change.
Maybe you wonder if this menu belongs at the

245
00:19:16.610 --> 00:19:21.220
top or not. So you remove it, you save it,
you alt tab over to your browser and you hit

246
00:19:21.220 --> 00:19:27.620
command R to reload. You say nah, I really
wanted that. You go back, you undo, you save,

247
00:19:27.620 --> 00:19:31.050
you go back, you reload. And if you're a Web
developer, which I'm assuming that all of

248
00:19:31.050 --> 00:19:35.530
you have at least some Web development experience,
if not many years of experience, you do this

249
00:19:35.530 --> 00:19:40.320
thousands of times a day, right?
It's completely ingrained in muscle memory,

250
00:19:40.320 --> 00:19:43.680
and it's a pretty good workflow, right? There's
no compilation process or anything like that.

251
00:19:43.680 --> 00:19:46.390
It's pretty fast, pretty smooth.
Maybe you use something like live reload,

252
00:19:46.390 --> 00:19:51.650
which makes it even slicker.
Now what happens when you add mobile into

253
00:19:51.650 --> 00:19:55.770
that workflow, as we increasingly are. If
you are building a website now, you are probably

254
00:19:55.770 --> 00:20:00.760
thinking about mobile to some degree. Well,
you still have this workflow that I just described,

255
00:20:00.760 --> 00:20:07.760
but you have this entire additional workflow
that's like -- pulls it down and -- and really

256
00:20:08.260 --> 00:20:12.560
makes it much less efficient, right? So it
looks a little something like this, right?

257
00:20:12.560 --> 00:20:15.810
You go through that process I just described,
you go okay let me check on my device. So

258
00:20:15.810 --> 00:20:19.700
up pick up your device, and it's been a while
so it's locked. So you unlock it. And you

259
00:20:19.700 --> 00:20:23.010
are security conscious, because you are a
at Google conference so you have to enter

260
00:20:23.010 --> 00:20:28.290
your PIN, of course, then you have to navigate
to your browser, then you have to type in

261
00:20:28.290 --> 00:20:32.910
this URL, this long complex URL of your development
machine or whatever it is and you make at

262
00:20:32.910 --> 00:20:37.440
least one or two mistakes, of course. Then
you fix 'em and you check it out. Then when

263
00:20:37.440 --> 00:20:39.700
you are done with that, then you can just
pick it up and hit reload, but you're still

264
00:20:39.700 --> 00:20:43.100
picking it up, unlocking it hitting reload.
Picking up the next device,unlocking, hitting

265
00:20:43.100 --> 00:20:47.290
reload. And on the very last one, you're going
to find a bug, right?

266
00:20:47.290 --> 00:20:49.760
And then you're going to go back to your desktop
and fix it and you're going to start all over

267
00:20:49.760 --> 00:20:53.910
again. So the really cool process that we're
all pretty very much accustomed to becomes

268
00:20:53.910 --> 00:20:59.120
really pretty terrible on mobile devices when
you incorporate mobile devices into this Web

269
00:20:59.120 --> 00:21:03.440
development workflow, but I guess I shouldn't
say terrible. But it's not as efficient, let's

270
00:21:03.440 --> 00:21:07.920
put it that way.
So Adobe looked at that problem and thought

271
00:21:07.920 --> 00:21:13.100
that maybe we could do something about it.
So I'm going to switch over to -- to my browser

272
00:21:13.100 --> 00:21:17.530
here. And assuming that I have an internet
connection, if I'm lucky, I'm going to go

273
00:21:17.530 --> 00:21:22.600
to the Boston Globe. I'm lucky.
And the reason that I'm picking the Boston

274
00:21:22.600 --> 00:21:29.600
Globe here is because this is sort of a famously
responsive website which probably required

275
00:21:29.660 --> 00:21:33.360
thousands and thousands of combined hours
of testing on mobile devices so that people

276
00:21:33.360 --> 00:21:36.410
who built this, very smart people, and they
know the pain.

277
00:21:36.410 --> 00:21:43.410
Now, what I'm going to do is I'm going to
come over here and switch over to the ELMO.

278
00:21:44.020 --> 00:21:48.410
And I'm going to put my devices over here
on the left and I'm going to put my -- my

279
00:21:48.410 --> 00:21:53.600
left anyways -- and I'm going to put my desktop
over here on this screen. And what you are

280
00:21:53.600 --> 00:21:57.170
going to see is that they're all synchronized,
right?

281
00:21:57.170 --> 00:22:03.810
And I'm going to click on an article here,
and they all follow along, right? So that

282
00:22:03.810 --> 00:22:08.790
same Web development workflow that I showed
you earlier, now I can -- I can still do with

283
00:22:08.790 --> 00:22:12.610
all of my devices connected, right?
I can just glance over and see. I don't have

284
00:22:12.610 --> 00:22:16.190
to pick them up, I don't have to change URLs,
I don't have to tap on links and all that

285
00:22:16.190 --> 00:22:19.800
kind of thing. There's no limit to the number
of devices that you can connect to here, by

286
00:22:19.800 --> 00:22:24.660
the way.
Something else I want to point out here is

287
00:22:24.660 --> 00:22:30.350
Adobe shadow, it's not like bundling up this
content and pushing it out to the devices,

288
00:22:30.350 --> 00:22:34.650
right? Rather it's telling the devices to
go make its own request for the content. And

289
00:22:34.650 --> 00:22:37.760
that's an important distinction because that
means that the user agent and the http headers

290
00:22:37.760 --> 00:22:41.260
and all of the information that the server
needs in order to determine the correct content

291
00:22:41.260 --> 00:22:46.720
to send to that particular device is all present.
So you can get, you know, smaller images if

292
00:22:46.720 --> 00:22:50.350
you are on smaller screen or higher resolution
images if you are on one of these nice new

293
00:22:50.350 --> 00:22:57.350
modern screens or whatever it is, right?
So you are seeing the real deal on these devices.

294
00:22:57.680 --> 00:23:03.880
So let's see here ... it's nice to be able
to, you know, just this much is sort of a

295
00:23:03.880 --> 00:23:07.950
big win, but there's even more we can do.
If I click on the little shadow extension

296
00:23:07.950 --> 00:23:14.430
up here in my browser, I can do some remote
inspection of my device here. And so I've

297
00:23:14.430 --> 00:23:21.430
now connected to my iPad and you can see that
as I start to mouse over the content, in my

298
00:23:23.350 --> 00:23:29.930
Web Inspector on my desktop, you can see this
being highlighted on my iPad over there.

299
00:23:29.930 --> 00:23:34.240
So this is, you know, the kind of thing that
we're accustomed to doing, you know, on our

300
00:23:34.240 --> 00:23:40.700
-- when we're doing Web development on our
desktop and now it extends nicely to our devices.

301
00:23:40.700 --> 00:23:44.710
And we can do more than just highlight, we
can also change things so I can, you know,

302
00:23:44.710 --> 00:23:51.710
say something like -- I can change this headline
to be a little more relevant to me, right?

303
00:23:51.780 --> 00:23:56.220
So I just changed the headline over here.
I prefer something like this.

304
00:23:56.220 --> 00:24:03.220
I can execute some JavaScript remotely on
any one of these devices. See I just popped

305
00:24:03.800 --> 00:24:09.280
up an alert here. So I will come over here
and dismiss it. So after I've sufficiently

306
00:24:09.280 --> 00:24:14.030
messed up this page by vandalizing it or whatever,
I can just come over here, pull it down and

307
00:24:14.030 --> 00:24:17.560
refresh it. If you guys have done development
on a lot of different mobile devices, you

308
00:24:17.560 --> 00:24:21.870
will know that clearing the cache is actually
kind of a pain, like getting a fresh copy

309
00:24:21.870 --> 00:24:27.040
of everything on all of these different devices,
and so shadow takes care of that for you by

310
00:24:27.040 --> 00:24:30.260
dumping the cache and making a fresh request.
Or if I want to do it to all of my devices,

311
00:24:30.260 --> 00:24:35.650
I will just come over here and I will tell
them all to refresh, so I will click on that.

312
00:24:35.650 --> 00:24:39.810
I don't know if you saw, but they all just
refreshed, it's very quick.

313
00:24:39.810 --> 00:24:43.300
Also I can take screen shots of all of my
devices here. I'll just click on this icon,

314
00:24:43.300 --> 00:24:50.300
takes a little bit of time, open up the directory
here and you can see that I have -- this is

315
00:24:50.760 --> 00:24:57.030
the screen shot from my iPad, so I can compare
them all, sort of check out pixels next to

316
00:24:57.030 --> 00:24:59.170
each other.
[ Applause ]

317
00:24:59.170 --> 00:25:04.650
&gt;&gt;Christian Cantrell: Oh, thank you.
Awesome.

318
00:25:04.650 --> 00:25:07.040
That is worthy of applause, I agree, thank
you.

319
00:25:07.040 --> 00:25:12.510
This is the Galaxy Nexus here, and also some
text files were created with some meta data

320
00:25:12.510 --> 00:25:17.930
so I can, you know, sort of get a good feel
for how something looked for the specific,

321
00:25:17.930 --> 00:25:23.180
you know, URL and LS version and stuff like
that.

322
00:25:23.180 --> 00:25:28.140
So -- so there's shadow. It's available right
now. You can go to labs.adobe.com, download

323
00:25:28.140 --> 00:25:33.270
it, see if it helps for your workflow. I'm
a big fan myself.

324
00:25:33.270 --> 00:25:38.600
Okay. I'm going to change gears again and
talk a little bit about tooling. So tooling

325
00:25:38.600 --> 00:25:42.270
is something that Adobe is well known for.
We do a lot of tooling, so when we were looking

326
00:25:42.270 --> 00:25:47.960
at ways we can contribute to the Web, tooling
was something that seemed kind of obvious.

327
00:25:47.960 --> 00:25:52.750
But we didn't just want to go create sort
of the same old kinds of tools. We really

328
00:25:52.750 --> 00:25:59.750
wanted to take a fresh approach and see what
kind of innovation we could bring to tooling.

329
00:25:59.790 --> 00:26:05.320
So we decided to experiment with an open source
code editor for the Web written entirely with

330
00:26:05.320 --> 00:26:10.100
Web technologies.
Just to see what would happen.

331
00:26:10.100 --> 00:26:13.850
And what happened was something called brackets.
I'm going to go through a few bullet points

332
00:26:13.850 --> 00:26:18.160
here and then I'll get to the demo, but I
want to provide context here. First of all,

333
00:26:18.160 --> 00:26:21.030
it's open source. When I say it's open source,
I mean it's open source, right?

334
00:26:21.030 --> 00:26:23.910
Like a lot of companies, they used to say
something was open source and we'd all go

335
00:26:23.910 --> 00:26:27.420
oh cool it's open source, and you would look
at the license and be like wait a minute.

336
00:26:27.420 --> 00:26:32.570
Open source is actually kind of a useless
term. So really what license? And we are releasing

337
00:26:32.570 --> 00:26:36.460
under MIT license, and that's a very, very
liberal license.

338
00:26:36.460 --> 00:26:41.480
All of the codes on GitHub, even the backlog
is public. It's on a site called Trello, so

339
00:26:41.480 --> 00:26:46.030
you can actually go see what the team is working
on. So everything is being done in the public.

340
00:26:46.030 --> 00:26:50.340
There's also IRC channels and there's lists
and stuff like that that you can follow.

341
00:26:50.340 --> 00:26:55.150
This is something that we realized kind of
early on, which is kind of cool, this concept

342
00:26:55.150 --> 00:26:59.630
if you can use brackets, you can hack on brackets.
If you need brackets, if you use brackets,

343
00:26:59.630 --> 00:27:03.680
you can change brackets.
This point was really driven home to me when

344
00:27:03.680 --> 00:27:08.280
I was working on my Google I/O slides and
I realized I wanted brackets to be able to

345
00:27:08.280 --> 00:27:13.970
bump up the font size so that the audience
could see the code while I was demoing it,

346
00:27:13.970 --> 00:27:18.000
but it didn't have that feature. It's still
very, very early. I should point out this

347
00:27:18.000 --> 00:27:23.910
is still very early stages of development.
So I emailed the product manager, Adam Leeman.

348
00:27:23.910 --> 00:27:27.870
I said, "Can you guys add this by Google I/O?"
Or I said, "Are you planning on adding this

349
00:27:27.870 --> 00:27:32.170
by Google I/O?"
And he responds, he says, "Here's the link,"

350
00:27:32.170 --> 00:27:37.270
you know, "here's a link to the public -- public
backlog, you can check for yourself, it's

351
00:27:37.270 --> 00:27:41.280
all public, you don't have to ask me."
And actually he didn't say it like that because

352
00:27:41.280 --> 00:27:45.480
he's a nice guy. But I went and I looked and
it wasn't scheduled. I said, "Well, can you

353
00:27:45.480 --> 00:27:47.110
guys get it in?"
He said, "No, but it's open source you can

354
00:27:47.110 --> 00:27:50.220
get in."
I thought, you know, that's true. Like that

355
00:27:50.220 --> 00:27:54.450
-- like, I'm really critical of editors, right?
We all are. Everyone in this room is really

356
00:27:54.450 --> 00:27:56.830
critical about editors.
And for the first time I just had the power

357
00:27:56.830 --> 00:28:01.790
to make it how I wanted it. So I just forked
it, I mean, I'm a good JavaScript programmer,

358
00:28:01.790 --> 00:28:08.370
I forked it, you know, I cloned it, I branched
it, and I built the feature all in JavaScript

359
00:28:08.370 --> 00:28:13.140
and submitted a report request and it got
merged and I added the feature. It was really

360
00:28:13.140 --> 00:28:17.160
empowering to be able to just change things
I didn't like about the editor that I use

361
00:28:17.160 --> 00:28:24.160
every day.
I'm sorry, I forgot to change that back.

362
00:28:24.850 --> 00:28:28.180
Thank you.
So brackets is intended to run outside of

363
00:28:28.180 --> 00:28:30.970
the browser for now. Right?
So we built it with Web technologies, we were

364
00:28:30.970 --> 00:28:35.760
first thinking like wouldn't it be awesome
to take this editor and actually run it inside

365
00:28:35.760 --> 00:28:41.590
of a browser? We thought that might be really
innovative and cool and different. Then we

366
00:28:41.590 --> 00:28:46.300
thought, no, probably not.
We want to focus on a more traditional development

367
00:28:46.300 --> 00:28:48.780
experience right now and keep it outside of
the browser, but we are definitely looking

368
00:28:48.780 --> 00:28:52.570
at embedding it in the browser in the future
and accessing various cloud serves with it.

369
00:28:52.570 --> 00:28:56.040
We are not trying to build an IDE. We are
trying to build a streamlined editor. We are

370
00:28:56.040 --> 00:28:58.730
not trying to compete with Visual Studio,
Eclipse or something like that. We are trying

371
00:28:58.730 --> 00:29:03.270
to build something fast and streamlined. We
want it to be an editor. And so we have a

372
00:29:03.270 --> 00:29:08.830
good extension model. It's an evolving extension
model, which is really designed to help us

373
00:29:08.830 --> 00:29:12.690
keep a lot of the things that maybe everybody
doesn't want out of the core product and so

374
00:29:12.690 --> 00:29:16.070
that people can just bring in what they want.
And the last thing that I want to say is that

375
00:29:16.070 --> 00:29:19.330
the core editor is codemirror, which is a
separate project which is something that we

376
00:29:19.330 --> 00:29:24.670
are also actively contributing to. Okay. So
enough talk. Let's take a look at it.

377
00:29:24.670 --> 00:29:29.750
In fact, you actually have already seen it,
so this is brackets. I was using it earlier.

378
00:29:29.750 --> 00:29:32.810
It's a very simple editor. I mean, I have
my files over here on the left, I have my

379
00:29:32.810 --> 00:29:36.700
code here on the right, and I can hide my
files. You know, I have some menus up here.

380
00:29:36.700 --> 00:29:40.300
These are actually temporary. These menus
are going to become native menus. They are

381
00:29:40.300 --> 00:29:45.880
just in here temporarily. But this is it.
I mean it's a relatively straightforward and

382
00:29:45.880 --> 00:29:52.880
simple experience, simple UI. And the point
of brackets is to really sort of get out of

383
00:29:54.410 --> 00:29:59.100
your way. And it's to sort of break down the
barriers between what it is that you intend

384
00:29:59.100 --> 00:30:05.170
to do and actually doing it.
So if I'm looking at this piece of text right

385
00:30:05.170 --> 00:30:09.120
here and I decide that I want to make some
kind of a change to it, let's say I want to

386
00:30:09.120 --> 00:30:13.760
tweak the line height of this text, then the
first thing that I have to start doing is

387
00:30:13.760 --> 00:30:18.400
dig through a bunch of CSS files, right? And,
you know, I have to look at, you know, I have

388
00:30:18.400 --> 00:30:21.520
to look for selector vision, I have to look
for this ID, I have to look for main content

389
00:30:21.520 --> 00:30:25.080
or maybe article, I have to look for, you
know, maybe a container and I have to try

390
00:30:25.080 --> 00:30:32.080
and find where, you know, which styles are
actually applying to this piece of text. And

391
00:30:32.640 --> 00:30:35.500
if this is a big project, I could have a dozen
CSS files, right?

392
00:30:35.500 --> 00:30:39.640
They could be hundreds of lines long and it
could be a real pain, right?

393
00:30:39.640 --> 00:30:45.320
So as I'm foraging sort of around looking
for these rules, I'm not programming, I'm

394
00:30:45.320 --> 00:30:49.630
not doing what I'm intending to do. It's affecting
my productivity. So instead what I want to

395
00:30:49.630 --> 00:30:54.230
do is I just want my editor to do that for
me. I want to hit command E, I just want to

396
00:30:54.230 --> 00:30:57.330
hit a keystroke and I want to have my editor
do that for me, right? I want to have it bring

397
00:30:57.330 --> 00:31:00.790
up this editor right here. This is an inline
editor, and it's telling me exactly which

398
00:31:00.790 --> 00:31:07.400
rules apply to where my cursor was. If it's
multiple documents, it will show me the different

399
00:31:07.400 --> 00:31:10.600
documents right here on the right and I can
just pick the right one.

400
00:31:10.600 --> 00:31:15.400
And I can go down here and I can make a change,
so maybe I change this to 33 -- now, this

401
00:31:15.400 --> 00:31:20.610
isn't just a few or perspective of my CSS.
This is an actual editor. You can see I just

402
00:31:20.610 --> 00:31:25.350
made a change and now it's this file is marked
as dirty here and here and I can hit save.

403
00:31:25.350 --> 00:31:30.960
So I have saved it. I have actually edited
the document, the CSS, inline, directly in

404
00:31:30.960 --> 00:31:35.400
context, which is really nice.
But it's not enough just to be able to edit

405
00:31:35.400 --> 00:31:39.330
the CSS. We actually need to be able to see
what we're doing and see how it's affecting

406
00:31:39.330 --> 00:31:44.040
our document. So I'm going to go up here and
click on this lightning bolt, move this over

407
00:31:44.040 --> 00:31:49.890
to the side, and look at this, I'm going to
bump up the font size. It's awesome.

408
00:31:49.890 --> 00:31:51.600
[ Laughter ]
[ Applause ]

409
00:31:51.600 --> 00:31:56.730
&gt;&gt;Christian Cantrell: Well, thanks!
Thank you.

410
00:31:56.730 --> 00:31:59.580
And then I'm going to put my browser over
here on the left and I'm going to go back

411
00:31:59.580 --> 00:32:02.410
down to this paragraph that I was talking
about before and I'm going to open up this

412
00:32:02.410 --> 00:32:06.960
editor, and go down to the line height, which
is what I intended to do and I'm going to

413
00:32:06.960 --> 00:32:10.790
start tweaking the line height.
You can see that it's changing there on the

414
00:32:10.790 --> 00:32:15.130
left, right? Let me do something a little
more dramatic, let me really change it. So

415
00:32:15.130 --> 00:32:22.130
while I'm actually changing it, I'm seeing
what I'm doing, right? Which is going to make

416
00:32:22.630 --> 00:32:27.750
my workflow much more efficient. Maybe I want
to change this margin down here a little bit.

417
00:32:27.750 --> 00:32:33.280
So while I'm coding I'm actually seeing in
real-time what's going on here and I can just

418
00:32:33.280 --> 00:32:36.630
save it.
Now, you -- you might be accustomed to doing

419
00:32:36.630 --> 00:32:43.340
this kind of thing in -- in something like
the -- like the WebKit devtools, right? Where

420
00:32:43.340 --> 00:32:46.840
you are able to tweak your CSS, but the problem
with that is that you are not doing that inside

421
00:32:46.840 --> 00:32:49.510
of your editor, so you make all of these changes
and there's no way to capture them back to

422
00:32:49.510 --> 00:32:55.290
your source files.
Let me make this full screen, bring my files

423
00:32:55.290 --> 00:33:00.650
out here and bring up my index page.
Now, this also works with JavaScript, too.

424
00:33:00.650 --> 00:33:07.650
So I can scroll down to, you know, some function,
function call here, and drop my -- drop my

425
00:33:10.380 --> 00:33:13.790
cursor next to a function here. If I don't
remember the method signature, the function

426
00:33:13.790 --> 00:33:18.580
signature, I can just hit command D, it brings
up another editor, I can read the whole function

427
00:33:18.580 --> 00:33:23.130
so I know what's going on. Hopefully it's
documented. In this case it's not. But you

428
00:33:23.130 --> 00:33:28.480
can see how, you know, how brackets is really
designed to get out of your way, to break

429
00:33:28.480 --> 00:33:33.920
down barriers, to let you do what you intend
to do and, you know, get your features implemented

430
00:33:33.920 --> 00:33:39.660
as quickly and smoothly as possible. Brackets
is available now. You can start playing with

431
00:33:39.660 --> 00:33:44.090
it. You guys can start adding features, fixing
bugs, et cetera and we'll have the URL at

432
00:33:44.090 --> 00:33:47.950
the end of the presentation if you want to
learn more. So those are the things that Adobe

433
00:33:47.950 --> 00:33:53.650
has going on around text, around Web development
workflow and some things we have going on

434
00:33:53.650 --> 00:33:59.070
around tooling. We also have a lot more going
on that focuses more on graphics and for that

435
00:33:59.070 --> 00:34:03.060
I'm going to turn it over to Vincent.
[ Applause ]

436
00:34:03.060 --> 00:34:10.060
&gt;&gt;Vincent Hardy: Thanks, Christian. Yes, I'm
going to talk about graphics and cinematic

437
00:34:15.230 --> 00:34:19.780
effects for the Web. One thing that I want
to point out is the tool that we're using

438
00:34:19.780 --> 00:34:22.580
for the presentation is actually, you know,
it's not a keynote or not a PowerPoint or

439
00:34:22.580 --> 00:34:28.659
it's not one of the presentation tools. It's
actually Chromium. Slightly tweaked version

440
00:34:28.659 --> 00:34:32.909
of Chromium, but it's a Web browser running
full screen and the whole presentation is

441
00:34:32.909 --> 00:34:37.210
written with HTML with actually a library
called (indiscernible) but all of the slides

442
00:34:37.210 --> 00:34:44.210
are put together using HTML, so we're doing
this in part because it's possible, of course,

443
00:34:44.480 --> 00:34:49.490
and also in part to test out all of the things
that we're working on and the type of new

444
00:34:49.490 --> 00:34:53.850
effects that we're trying to bring to the
platform or that are already available on

445
00:34:53.850 --> 00:34:57.540
the platform.
So I'm going to start with an example. So

446
00:34:57.540 --> 00:35:02.820
what you're looking at here is actually an
SVG image embedded into an inline HTML document,

447
00:35:02.820 --> 00:35:08.490
that's something that you can do today. It
has a drop shadow, which is an SVG filter

448
00:35:08.490 --> 00:35:15.110
applied to it, it's very subtle, so you might
kind of see it around the edges of the logo.

449
00:35:15.110 --> 00:35:21.740
And it has a gray scale filter applied to
it as well. And when I hover on it, the gray

450
00:35:21.740 --> 00:35:28.740
scale filter gets animated and the -- to restore
the colors and you saw this kind of flag animation

451
00:35:29.000 --> 00:35:36.000
happening on the content. So this is using
all kinds of filter effects, I will talk about

452
00:35:36.260 --> 00:35:41.820
the different kinds of filter effects that
are applied here and how you write this. Another

453
00:35:41.820 --> 00:35:48.820
thing that's more subtle on this is the -- is
the -- is happening in the interaction of

454
00:35:52.650 --> 00:35:58.710
the SVG MH with the background, you can see
there's a slightly textured background and

455
00:35:58.710 --> 00:36:02.140
the image actually blends in the background
in a way that you have not seen before. This

456
00:36:02.140 --> 00:36:07.240
is not opacity. This is actually a blind mode.
And we're combining and having interaction

457
00:36:07.240 --> 00:36:14.240
between the logo and the backdrop. How do
we do this traditionally?

458
00:36:16.700 --> 00:36:23.700
So -- oops.
Okay. All right. So traditionally, this is

459
00:36:26.640 --> 00:36:32.910
done with -- with authoring tools, so we do
this with tools like Photoshop, we do with

460
00:36:32.910 --> 00:36:39.910
tools like Illustrator, or GIMP, we do this
with tools like After Effects. Those tools

461
00:36:40.260 --> 00:36:46.120
combined let you create better graphics, that
let you define complex vector effects or filter

462
00:36:46.120 --> 00:36:52.460
effects or let you play with, you know -- you
know, measures of coordinates in a space to

463
00:36:52.460 --> 00:36:57.290
do effects like flags.
How do you do this on the Web platform, though?

464
00:36:57.290 --> 00:37:03.780
So this is coming to the Web. The way it's
coming is through a number of filter effects.

465
00:37:03.780 --> 00:37:08.030
We have -- we have -- at the bottom in gray
we have the text shadow and box shadow, and

466
00:37:08.030 --> 00:37:13.680
I have a glitch in my rendering here. I apologize
for that, but so text shadow and box shadow

467
00:37:13.680 --> 00:37:19.210
are kind of the ancestors of the modern filter
effects that are coming. They can do simple

468
00:37:19.210 --> 00:37:22.970
things, but they are available, and they can
be powerful.

469
00:37:22.970 --> 00:37:27.800
And we have the new filter property, and that
starts to be implemented in -- in the browser

470
00:37:27.800 --> 00:37:32.270
and starts to being -- using the browser.
If you've seen the keynote this morning, the

471
00:37:32.270 --> 00:37:37.710
Cirque du Soleil demo was using filter effects
and they are now in Chromium and WebKit as

472
00:37:37.710 --> 00:37:44.320
well, they are also in IE for -- for scale
or vector graphics. The way you use filter

473
00:37:44.320 --> 00:37:50.590
effects is in one of three ways. The -- this
is one to start with is probably filter graphs,

474
00:37:50.590 --> 00:37:55.460
those are filter defines as a set of nodes
that you can combine to create the effect

475
00:37:55.460 --> 00:38:00.990
that you would want, very much like you would
do in a tool. The second way is through shorthands,

476
00:38:00.990 --> 00:38:05.980
so filter shorthands are shorthands for filter
graphs. So there are some filter types that

477
00:38:05.980 --> 00:38:10.070
are, you know, very common that you might
want to use. And instead of repeating the

478
00:38:10.070 --> 00:38:14.270
same filter graph over and over again, the
specification provides the shorthands for

479
00:38:14.270 --> 00:38:17.640
those.
And then the third way is custom filters or

480
00:38:17.640 --> 00:38:22.610
shaders, which gives you the full power and
full access to the power of the GPU. It's

481
00:38:22.610 --> 00:38:28.570
a new proposal. It's being standardized right
now and this is what does the GPX like the

482
00:38:28.570 --> 00:38:34.150
waving effect that we saw.
So the first -- the few effects about what's

483
00:38:34.150 --> 00:38:38.620
possible today. This is just playing with
text shadow and combining multiple text shadows

484
00:38:38.620 --> 00:38:45.180
of different colors. You can do a neon-like
effect and when I hover on it, I get a nicer

485
00:38:45.180 --> 00:38:52.180
glow. It's very simple, and it's just combining
CSS animation and the filter property. The

486
00:38:52.520 --> 00:38:59.520
tech shadow property, sorry. Similarly you
can use a box shadow, so the box shadow will

487
00:38:59.620 --> 00:39:06.250
apply, (inaudible) of tech shadow, but to
the box, the CSS box, and we can use it for

488
00:39:06.250 --> 00:39:10.770
example, to track the user's attention on,
you know, where the text entry currently is,

489
00:39:10.770 --> 00:39:17.770
so here I have, you know, laser saber effect
on the text entry, and that helps the user,

490
00:39:19.030 --> 00:39:23.860
that helps the usability, and so it's pretty
pleasant visually. So these are available

491
00:39:23.860 --> 00:39:30.860
today and people start using those on Web
pages. Now, let's turn to the new filter effects

492
00:39:30.880 --> 00:39:36.110
and the ones that are starting to be available
now. The -- the easiest way to use them is

493
00:39:36.110 --> 00:39:40.760
with shorthands, so if you'll look at the
way you would write this in your CSS, you

494
00:39:40.760 --> 00:39:45.210
would just add the filter property, you would
say colon, and then you'll invoke one of the

495
00:39:45.210 --> 00:39:52.210
filter functions, so if we do this on this
original image, and apply, for example, a

496
00:39:52.500 --> 00:39:56.560
gray scale filter, I just have to say, you
know, filter, Colin, gray scale one, and that

497
00:39:56.560 --> 00:40:01.820
applies a full gray scale filter, and one
of the beauties of this is that I can vary

498
00:40:01.820 --> 00:40:06.920
the parameter in the gray scale function and
that can be subjected to CSS animations and

499
00:40:06.920 --> 00:40:13.000
CSS transitions making it extremely trivial
to write, say, hover effect where, you know,

500
00:40:13.000 --> 00:40:18.870
the image will go from gray scale to full
color on hover. There's a bunch of those effects,

501
00:40:18.870 --> 00:40:22.670
not going to go through all of them, but you
can see that visually they provide, you know,

502
00:40:22.670 --> 00:40:29.670
already a pretty nice variety of things you
can do. Now, the -- oops. Having problems

503
00:40:31.600 --> 00:40:38.600
with my navigation. Sorry about this. As I
said earlier, the shorthand filters are actually

504
00:40:43.470 --> 00:40:48.380
shorthands for filter graphs, and filter graphs
come from SVG. They are now being applied

505
00:40:48.380 --> 00:40:54.740
to not just SVG element, but all of HTML,
and I'm going to show you something that traditionally

506
00:40:54.740 --> 00:41:00.000
you would do in Photoshop, remember, you know,
many years ago I used to read those books

507
00:41:00.000 --> 00:41:05.400
called Photoshop Wow! books, and there was
one edition for each version of Photoshop,

508
00:41:05.400 --> 00:41:09.250
and they would explain how to do those, you
know, the combination of filter effects to

509
00:41:09.250 --> 00:41:13.630
do something like a chiseled gold effect,
and the way you would put this on your Web

510
00:41:13.630 --> 00:41:18.640
page is you would do it in Photoshop, you'd
do export this as a PNG or a JPEG and then

511
00:41:18.640 --> 00:41:23.970
insert that into your Web page. Well, now,
you can design your filter, but you don't

512
00:41:23.970 --> 00:41:27.700
have to, you know, export as a PNG, it can
still be text, so here I'm going to filter

513
00:41:27.700 --> 00:41:34.190
a piece of text, which means that my content
remains searchable, et cetera, and accessible,

514
00:41:34.190 --> 00:41:39.050
and I can toggle that, you know, nice gold
chiseled effect. And also since this is all

515
00:41:39.050 --> 00:41:45.240
declarative and it's done in markup, I can
manipulate it -- I can manipulate it dynamically

516
00:41:45.240 --> 00:41:51.880
in JavaScript, so here I've done something,
you know, fairly simple. I hooked up one of

517
00:41:51.880 --> 00:41:56.570
the lighting filters in this filter graph
to the position of the mouse, and as a result,

518
00:41:56.570 --> 00:42:00.460
when I move the mouse, the light seems to
come from a different direction, so that's,

519
00:42:00.460 --> 00:42:05.470
you know, pretty nice flexibility. So, you
know, maybe you're not putting, you know,

520
00:42:05.470 --> 00:42:11.080
chiseled gold on your page that often, but
something that's more common is something

521
00:42:11.080 --> 00:42:16.440
like this, curve shadows. So curve shadow
is something you see on a lot of Web pages

522
00:42:16.440 --> 00:42:23.070
today, and the way it's implemented, right
now in the best case, because there are sometimes

523
00:42:23.070 --> 00:42:28.860
horrible hacks, but the case use before and
after elements boxes that are moved to the

524
00:42:28.860 --> 00:42:35.860
side of the box and they're rotated, and they
have a background box shadow on them, but

525
00:42:37.220 --> 00:42:42.080
this is, you know, a little convoluted, this
is really visual effect and belongs to filters.

526
00:42:42.080 --> 00:42:48.130
That turns out to be fairly simple to write
in -- as a filter graph, and also the nice

527
00:42:48.130 --> 00:42:54.650
thing about it, it's very easy to remain place
for script or CSS, so here I can just manipulate

528
00:42:54.650 --> 00:43:01.050
one of the parameters of one of the nodes
in that filter graph and have varying effects.

529
00:43:01.050 --> 00:43:08.050
So to give you a feel of what this looks like,
here is a little code sample, and the thing

530
00:43:09.740 --> 00:43:12.690
that is important to note here is that I'm
not going to go through all the details of

531
00:43:12.690 --> 00:43:18.100
that filter graph, but things to remember
are you have a filter element, that's the

532
00:43:18.100 --> 00:43:22.680
top element here in the light blue color,
and that's what you would reference from your

533
00:43:22.680 --> 00:43:27.210
filter property, so the filter property will
point to it, and then you have a number of

534
00:43:27.210 --> 00:43:32.180
filter nodes that you can arrange and combine.
They each produce a different effect. And

535
00:43:32.180 --> 00:43:36.350
at the end of the filter you can combine and
arrange those effects and stack them up in

536
00:43:36.350 --> 00:43:40.290
the way you want. So that's very similar again
to what you would do in an authoring tool,

537
00:43:40.290 --> 00:43:46.510
and all those operation and combinations can
be captured in the markup, and the nice thing

538
00:43:46.510 --> 00:43:50.540
again is that since this is markup, this is
part of the DOM, and the DOM is accessible

539
00:43:50.540 --> 00:43:57.540
for scripts, and you can make it all dynamic.
So now let's move to the last type of shaders.

540
00:43:59.780 --> 00:44:06.530
So since the shaders are used for the filter
function again, except that you're using a

541
00:44:06.530 --> 00:44:10.550
new syntax for the value, instead of having
a shorthand or pointing to your filter graph,

542
00:44:10.550 --> 00:44:17.220
we use a custom function. Before we dive into
this, this is what the kind of things it does,

543
00:44:17.220 --> 00:44:21.720
so here you see when I hover, I start applying
a filter -- custom filter effect and the two

544
00:44:21.720 --> 00:44:28.300
things happening are first the rendering is
distorted, it has this nice curvy effect applied

545
00:44:28.300 --> 00:44:33.280
to it, and that's what vertex shaders do,
so this is about distorting geometry and moving

546
00:44:33.280 --> 00:44:38.960
vertices around, and the second thing you
can notice is there's a fairly subtle effect

547
00:44:38.960 --> 00:44:45.960
-- shading effect on the rendering, so the
original element that we're filtering is all

548
00:44:46.910 --> 00:44:50.810
white, and here you can see there're shades
of gray, and that's what (inaudible) shaders

549
00:44:50.810 --> 00:44:56.120
or pixel shaders do for you. The other thing
that you mentioned is, you know, shaders run

550
00:44:56.120 --> 00:45:03.120
on the GPU, so this is, you know, usually
very fast. So the model says the shaders is

551
00:45:03.360 --> 00:45:09.370
that -- the conceptual model, when you use
it, you want to author it or just use it as

552
00:45:09.370 --> 00:45:16.370
a shader, is that think of it as your content
being rendered into an image, and then a mesh

553
00:45:18.220 --> 00:45:24.110
of points or vertices is mapped on to this
offscreen rendering, and what the vertex shader

554
00:45:24.110 --> 00:45:30.460
lets you do is manipulate those -- those mesh
points, or mesh vertices in a 3D space, and

555
00:45:30.460 --> 00:45:34.860
that gives you the ability to do all kinds
of, you know, extremely beautiful distortions

556
00:45:34.860 --> 00:45:40.230
in a 3D space. And that is the end of step
2. That is what the vertex shader produces.

557
00:45:40.230 --> 00:45:45.640
And then the last step is that you can manipulate
pixel values, so once you've distorted the

558
00:45:45.640 --> 00:45:52.480
geometry all you want, you can then apply
the values on the pixel colors, and more precisely

559
00:45:52.480 --> 00:45:59.480
can produce pixel colors that will be combined
with the rendered content. So let's look at

560
00:45:59.540 --> 00:46:05.480
how to use shaders step by step, so again,
very simple, use a custom function, and you

561
00:46:05.480 --> 00:46:11.600
pass parameters to it. If we zoom in to what
the parameters are, the only required parameter

562
00:46:11.600 --> 00:46:17.530
is the vertex shader. This is the only thing
that's required, so if you want to just pass

563
00:46:17.530 --> 00:46:22.820
the vertex shader, that's fine. There's an
optional parameter which is a fragment shader

564
00:46:22.820 --> 00:46:28.200
that will manipulate the pixel values, then
you specify the vertex mesh. The vertex mesh

565
00:46:28.200 --> 00:46:33.370
is the granularity you want for, you know,
how many points you want to be able to manipulate

566
00:46:33.370 --> 00:46:36.980
that will be mapped on top of your rendering.
Depending on the effect, you may want more

567
00:46:36.980 --> 00:46:41.590
or less of them. And then finally, and this
is very powerful, you can pass parameters

568
00:46:41.590 --> 00:46:48.590
to vertex shaders, and those parameters can
then be animated through CSS transitions and

569
00:46:50.110 --> 00:46:57.110
CSS animations, sorry.
All right. So let's look at step by step,

570
00:47:02.920 --> 00:47:09.040
if I use only a vertex shader and the size
of the vertex mesh, here is how it looks,

571
00:47:09.040 --> 00:47:13.990
on the left-hand side is the thing I want
to filter. On top of it I've drawn the vortex

572
00:47:13.990 --> 00:47:19.710
mesh or something that symbolizes the vertex
mesh. This little gray square represents the

573
00:47:19.710 --> 00:47:24.840
vertex mesh, so I've asked for a vertex mesh
that is two rows and two chums, so I have,

574
00:47:24.840 --> 00:47:30.890
you know, nine vertices to manipulate, and
now on the right-hand side you can see that

575
00:47:30.890 --> 00:47:35.490
all of those vertices have been moved -- have
been moved by my vertex shader, and as a result,

576
00:47:35.490 --> 00:47:42.490
I get this distortion that gives the impression
that my element has been folded in two. Now,

577
00:47:43.200 --> 00:47:47.700
what if I wanted to do something a little
more sophisticated and give it a little more

578
00:47:47.700 --> 00:47:52.940
realistic look, like if I wanted the thing
to be darker at the -- you know, where the

579
00:47:52.940 --> 00:47:59.940
fold happens in the center, and just regular
coloring on the edges. Well, that's when I

580
00:48:00.170 --> 00:48:06.310
would use -- start using a fragment shader,
so here I've added this fragment shader, and

581
00:48:06.310 --> 00:48:11.090
what the fragment shader does is that it looks
at the current core unit of the rendering

582
00:48:11.090 --> 00:48:16.840
and will produce a darker value in the center
and a lighter value on the edges, and this

583
00:48:16.840 --> 00:48:23.840
gets combined with the rendering and provides
this very nice shading effect. And I mentioned

584
00:48:25.400 --> 00:48:31.060
earlier that passing parameter was -- was
a useful feature and a powerful feature in

585
00:48:31.060 --> 00:48:37.490
shaders, so here we have the same -- the same
shaders we had in the previous example, the

586
00:48:37.490 --> 00:48:43.200
one fold, and the vertex shader and the fragment
shader, but I'm now passing a parameter that

587
00:48:43.200 --> 00:48:48.750
controls the amount of folding I do, and the
more I fold, the more -- I mean, the bigger

588
00:48:48.750 --> 00:48:55.680
the amount, the bigger the effect, and the
bigger the shading in the center. So since

589
00:48:55.680 --> 00:48:59.490
this can be, you know, manipulated through
scripts, I have hooked up a little slider

590
00:48:59.490 --> 00:49:03.860
here, and if I go to the left, I'll have less
of the effect, and you see what -- how the

591
00:49:03.860 --> 00:49:09.619
code changes, and if I move to the right,
I'll go to the full extent of the -- of the

592
00:49:09.619 --> 00:49:15.410
effect. And there's no limit on which parameters
you pass and the type of parameters, the sophistication

593
00:49:15.410 --> 00:49:22.410
offers a wide variety of parameters, you can
pass, you know, matrices, colors, transforms,

594
00:49:22.410 --> 00:49:27.860
all kinds of things which can then be manipulated
through CSS and scripts as well, so it's pretty

595
00:49:27.860 --> 00:49:32.430
powerful things, and this is a simple example
but I'm hoping people will do real crazy things

596
00:49:32.430 --> 00:49:39.430
with the feature. I want to give a little
taste of what the code looks like. The syntax

597
00:49:42.210 --> 00:49:46.570
and the language that's used for writing those
little programs that will act on vertices

598
00:49:46.570 --> 00:49:52.660
or on pixel values, the language is GLSL,
so it's the same language that is used in

599
00:49:52.660 --> 00:49:57.170
Web GL for when you write shaders for Web
GL. The vertex shader, at the end of the day,

600
00:49:57.170 --> 00:50:03.660
if you look at line 13, that is what a vertex
shader does. The main function of the shader,

601
00:50:03.660 --> 00:50:10.660
which starts on line 7, its whole role is
to compute a GL position, and that's basically

602
00:50:11.690 --> 00:50:16.430
how you want to displace the vertex that's
being processed, and it's called once for

603
00:50:16.430 --> 00:50:23.430
every vertex. So if you want to learn more
about GLSL, you know, there are a lot of poll

604
00:50:24.230 --> 00:50:29.270
documentation on the Web for Web GL, but also
for open GLES, because that is the same exact

605
00:50:29.270 --> 00:50:34.180
language. It's -- you know, it's seal like.
It's a little different. But it's not that

606
00:50:34.180 --> 00:50:41.180
hard, and there's lots of examples to start
from. Fragment shaders or pixel shaders, similarly

607
00:50:41.290 --> 00:50:48.290
it's the same language as for GLSL. There's
a slight difference -- actually not that slight.

608
00:50:48.910 --> 00:50:55.910
There's a difference with regular fragment
shaders using Web GL or open GLES is the output

609
00:50:56.010 --> 00:51:01.970
of the filter is not a GL frag color. If you're
a graphic expert, you're familiar with that

610
00:51:01.970 --> 00:51:07.690
value, which is the typical role of a fragment
shader. In our case, and for security reasons,

611
00:51:07.690 --> 00:51:14.690
what we produce is a pixel value that is then
combined with the rendered output. There has

612
00:51:14.770 --> 00:51:21.770
been a lot of work done on making shaders
secure, and the result of this was that with

613
00:51:22.440 --> 00:51:27.680
this modification we don't give access to
the rendered content to shaders, and as a

614
00:51:27.680 --> 00:51:33.410
result they are safe, and they can still do
all the, you know, the use cases that we've

615
00:51:33.410 --> 00:51:40.410
talked about so far. Now, we don't expect
people to, you know, write as many shaders

616
00:51:40.930 --> 00:51:46.250
as they will use shaders. We expect that,
you know, we'll have, for example, we plan

617
00:51:46.250 --> 00:51:53.250
to provide shaders that people can start experimenting
with. We expect that experts will write nice

618
00:51:53.610 --> 00:51:59.630
shaders with a set of well documented parameters
that a lot of people can use, and one of the

619
00:51:59.630 --> 00:52:03.850
things we've started to think about is, well,
how can we make it easy for people to configure

620
00:52:03.850 --> 00:52:08.160
a shader the way they want and make it look
exactly right?

621
00:52:08.160 --> 00:52:13.260
So this is what the CSS shader studio does,
and I'll show you a few example of that--

622
00:52:13.260 --> 00:52:20.260
of that tool. So here we're in this prototype
tool. It's not a -- it's not an application

623
00:52:21.060 --> 00:52:28.060
or a tool that, you know, we would sell or
anything. It's a demo tool. And on the left

624
00:52:28.150 --> 00:52:34.000
hand side you have a set of shaders. When
you select one, you -- the user interface

625
00:52:34.000 --> 00:52:38.340
provides you the parameters that you can configure
for the shader, so those are -- if you remember

626
00:52:38.340 --> 00:52:42.440
the syntax, the parameters you pass at the
end of the custom function. In the center

627
00:52:42.440 --> 00:52:47.690
you see a prototype like rendering that's
affected by the shader, and at the bottom,

628
00:52:47.690 --> 00:52:51.290
there's a time line that lets you animate
the different values for the shader. So, you

629
00:52:51.290 --> 00:52:58.290
know, before the presentation I prepared one
on the -- this warp shelter we have, and I

630
00:52:58.550 --> 00:53:05.290
set it up so that, you know, at time zero
I've set up the, you know, the warp the way

631
00:53:05.290 --> 00:53:12.290
I wanted with this little UI that lets me
move the vertices visually, and the end of

632
00:53:12.900 --> 00:53:17.740
the animation is restored to its state. Now,
if I run it, you know, I will have kind of

633
00:53:17.740 --> 00:53:21.990
a transition effect that -- I may want to
put on my Web page when I'm shoring up UP's

634
00:53:21.990 --> 00:53:28.990
of information, for example. There's all kinds
of different effects you could do. Scroll

635
00:53:29.540 --> 00:53:36.540
is one of my favorites. If I go back here,
I pre-define it, if I move the roll ratio,

636
00:53:38.190 --> 00:53:45.119
for example, I can do the effect I want, and
again if I run it, it's going to, you know,

637
00:53:45.119 --> 00:53:51.650
show me a preview of this type of effect I
might want. I can also do things like shuffling

638
00:53:51.650 --> 00:53:58.650
tiles for example. Here, where -- when I move,
I can -- I can kind of explode the content

639
00:54:02.740 --> 00:54:08.369
and that's because when I move the vertices
of the -- you know, on the vertex mash, I

640
00:54:08.369 --> 00:54:12.740
have the option of keeping them attached in
which case it's like moving a -- distorting

641
00:54:12.740 --> 00:54:19.740
a piece of rubber, but I have also the option
of having detached tiles or detached, you

642
00:54:20.480 --> 00:54:27.480
know, tiles on the rendering. And if I have
many of them, I can have a nice protocol effect

643
00:54:27.530 --> 00:54:33.260
like we're seeing here. So the idea here is
to make it, you know, a visual experience

644
00:54:33.260 --> 00:54:37.030
for, like you do when you're trying to create
a grayed-in, except it's a little more complicated

645
00:54:37.030 --> 00:54:41.580
in this case, and the tool will provide, you
know, the nice syntax that you can just cut

646
00:54:41.580 --> 00:54:48.580
and paste into your CSS page, your CSS file,
and if you want to do the animation effect

647
00:54:48.750 --> 00:54:55.430
itself, you can just grab it here, we export
the exact syntax that we need to go into the

648
00:54:55.430 --> 00:55:02.430
CSS file again. So hopefully that type of,
you know, visual tool will help. You know,

649
00:55:02.840 --> 00:55:08.170
people start using the feature, and make it
painless, and visually interesting to create

650
00:55:08.170 --> 00:55:13.890
them. So this tool is not yet available, but
we're planning to make it available later

651
00:55:13.890 --> 00:55:20.890
this year so that people can -- can look at
it, and experiment with shaders easily. All

652
00:55:24.010 --> 00:55:31.010
right. So another effect or visual effect
that we're working on is around texturing

653
00:55:32.850 --> 00:55:38.070
and blending. So blending is something that's
very common in graphic packages, like Photoshop

654
00:55:38.070 --> 00:55:45.070
or GIMP. The idea of texturing is to control
how what you draw blends or mixes with where

655
00:55:47.160 --> 00:55:53.080
you draw, so you draw something, and you want
it to interact with the backdrop. So currently

656
00:55:53.080 --> 00:55:58.990
we have opacity, so if I use opacity on the
menu like this, like at my "home, about, products"

657
00:55:58.990 --> 00:56:04.000
menu, I use opacity and I kind of see the
background behind, and that's nice, but it

658
00:56:04.000 --> 00:56:09.850
makes it a little washed out, and it's not
quite what you want. It's not quite what graphic

659
00:56:09.850 --> 00:56:13.940
designers want, because they're used to those
nice blend modes that they have in tools like

660
00:56:13.940 --> 00:56:20.760
Photoshop again. We're working on a new proposal
-- it's actually not that new proposal, it's

661
00:56:20.760 --> 00:56:25.910
a feature that has been in SVG for awhile,
but it's now being brought to the larger CSS

662
00:56:25.910 --> 00:56:32.560
and HTML, and it's CSS compositing and blending,
and it can do things like this, so now what

663
00:56:32.560 --> 00:56:38.980
I've done is I've turned on blend mode, it's
a (inaudible) mode, and the blue that I have

664
00:56:38.980 --> 00:56:43.130
now interacts in a different way with the
background, and just to show that this is

665
00:56:43.130 --> 00:56:47.119
not just images, you know, the way people
do this kind of effect today on the Web is

666
00:56:47.119 --> 00:56:52.820
that design it in Photoshop, they export a
bunch of images and then they put it on the

667
00:56:52.820 --> 00:56:58.930
-- on the page. Here I have the CSS animation
on the color, and you can see that the color

668
00:56:58.930 --> 00:57:05.190
animation happens and produces a new rendering
for the menu item, and that gets blended in

669
00:57:05.190 --> 00:57:12.190
with the background. I didn't have to scrub
a thousand bit maps to do so. Using, you know,

670
00:57:13.730 --> 00:57:18.020
blending and compositing is made with two
properties. It's extremely simple. I have

671
00:57:18.020 --> 00:57:24.550
two small demos. So what you see here in the
backdrop is what we're drawing on top of,

672
00:57:24.550 --> 00:57:29.920
and we're drawing this yellow bar on top of
those three elements. The way you specify

673
00:57:29.920 --> 00:57:33.580
it is very straightforward. You have an alpha
compositing property, and by default it's

674
00:57:33.580 --> 00:57:38.230
source over, so a bit of a technical term;
that just means draw what I draw on top of

675
00:57:38.230 --> 00:57:43.400
the background. And that's -- you know, so
far that's no surprise. But I have a bunch

676
00:57:43.400 --> 00:57:49.130
of options and, you know, I can say I just
want, you know -- sorry. Destination over,

677
00:57:49.130 --> 00:57:56.130
for example, will draw what I'm drawing behind
the backdrop. I can do source in, dust in.

678
00:57:57.660 --> 00:58:01.609
There's a bunch of different effects that
you can use that will combine in different

679
00:58:01.609 --> 00:58:08.609
ways with the background, so that's the first
of two properties. The second one is blend

680
00:58:09.020 --> 00:58:15.609
mode, so again, if I'm trying to combine foreground
and a background in various ways, I just use

681
00:58:15.609 --> 00:58:22.520
a blend mode property, and by default it's
normal, meaning that the colors don't interact.

682
00:58:22.520 --> 00:58:28.510
But I can change it to something like plus,
multiply, you know, color dodge or difference

683
00:58:28.510 --> 00:58:32.630
and have various effects, and those are exactly
the ones that you would find in graphic packages

684
00:58:32.630 --> 00:58:34.359
today.
[ APPLAUSE ]

685
00:58:34.359 --> 00:58:41.359
&gt;&gt;Vincent Hardy: Thank you. So, so far we've
proposed all this and worked with the community,

686
00:58:47.400 --> 00:58:54.359
the working groups in (inaudible) to bring
this to CSS. We're working on possibly contributing

687
00:58:54.359 --> 00:59:00.210
this or proposing this for canvas as well,
and we've done a prototype of this I'll show

688
00:59:00.210 --> 00:59:07.210
quickly. It's in -- this is really blending
edge prototype we've done in FireFox, nicely

689
00:59:07.450 --> 00:59:14.180
build in FireFox, and what you see is basically
the same concept in canvas. At the bottom

690
00:59:14.180 --> 00:59:21.180
of the screen here, we have the -- the code.
I'm drawing two images, and the first one

691
00:59:22.480 --> 00:59:27.790
is the background, which is a visual canvas,
then I change the compositing operation to

692
00:59:27.790 --> 00:59:34.790
be an overlay -- sorry, a multiply mode, blend
mode, and I then draw this kind of colorful

693
00:59:35.220 --> 00:59:40.220
graphics on top of it, and I get this better,
nicer integration with my background, so this

694
00:59:40.220 --> 00:59:45.030
is something that's, you know, again (inaudible)
but we're considering offering this property

695
00:59:45.030 --> 00:59:52.030
for different graphics model than canvas is.
All right, so, the things we talked about

696
00:59:52.590 --> 00:59:59.590
today is that the -- you know, the world of
the Web developers and of creators has been

697
01:00:00.320 --> 01:00:04.150
intersecting, you know, there's been features,
but there's not been that many of them in

698
01:00:04.150 --> 01:00:09.619
the past, and we're trying to increase that
intersection between the two so that there's

699
01:00:09.619 --> 01:00:15.430
a lot more happening on the Web and a lot
more features available to developers, so

700
01:00:15.430 --> 01:00:19.660
this is really the area we're focusing on
now is, you know, trying to make this area

701
01:00:19.660 --> 01:00:26.660
larger and try to provide more tools for this
area, because we believe that if we do this,

702
01:00:27.670 --> 01:00:32.740
we'll have a lot more exclusivity on the platform,
meaning that you can express a lot more in

703
01:00:32.740 --> 01:00:39.740
the markup in your CSS, or your HTML, that
will make everybody more creative, and we

704
01:00:40.270 --> 01:00:46.960
think there's an opportunity for a new generation
of tools and new, you know, new ways of interacting

705
01:00:46.960 --> 01:00:51.880
between creators and developers. So thank
you very much for your attention. And if you

706
01:00:51.880 --> 01:00:57.700
have questions, we are probably going to be
able to take one or two, but we can also talk

707
01:00:57.700 --> 01:00:59.710
after the end of the sessions. Thank you very
much.

708
01:00:59.710 --> 01:00:59.960
[ Applause ]

WEBVTT

1
00:00:02.899 --> 00:00:08.440
&gt;&gt;Nat Duca: All right. It's time to talk about
jank, everybody.

2
00:00:08.440 --> 00:00:14.339
Before I even do introductions, which is what
usually comes first, I want to actually teach

3
00:00:14.339 --> 00:00:19.199
you the word jank.
Jank spotting, right? We all should do it,

4
00:00:19.199 --> 00:00:24.359
and that's the first part of this talk.
So if you go to HTML5 Rocks, hopefully everybody

5
00:00:24.359 --> 00:00:30.710
has done this. It's a great resource. And
you scroll up and down in an article, sometimes

6
00:00:30.710 --> 00:00:36.690
it janks. And especially on bigger screens
or slower computers, it feels yucky.

7
00:00:36.690 --> 00:00:43.690
Now, let's define yucky. Watch the scroll
bar as I scroll. See how it jumps? Watch on

8
00:00:44.760 --> 00:00:48.500
your own computer. Scroll up and down. That's
jank. It's the screen not updating in some

9
00:00:48.500 --> 00:00:53.370
way.
So the purpose of our talk today is to get

10
00:00:53.370 --> 00:00:58.220
you, so that when you walk out the door, you
can make your site or HTML5 Rocks, take your

11
00:00:58.220 --> 00:01:03.270
pick, so that when I do the same thing, no
jank. Right?

12
00:01:03.270 --> 00:01:08.930
This is our goal. I hope we succeed at it.
The reason that we're up here is we work on

13
00:01:08.930 --> 00:01:15.250
jank all the time. I'm Nat Duca, I'm on the
Chrome Developer team. I work on the rendering

14
00:01:15.250 --> 00:01:16.750
engine for Chrome, GPU, 60 frames a second,
blah-blah-blah.

15
00:01:16.750 --> 00:01:19.140
&gt;&gt;Tom Wiltzius: I'm Tom Wiltzius, I'm the
project manager on the Chrome graphics team

16
00:01:19.140 --> 00:01:24.800
thinking about all the same stuff.
&gt;&gt;Nat Duca: So we care a lot about this and

17
00:01:24.800 --> 00:01:31.800
we want you to as well.
So a nice smooth Web app is about feeding

18
00:01:31.850 --> 00:01:37.990
your display. So you've got many displays
surrounding you. These are displays.

19
00:01:37.990 --> 00:01:43.370
There's a lot of variety as it turns out.
For various reasons, for budget reasons, for

20
00:01:43.370 --> 00:01:46.560
power reasons, different screens update at
different rates.

21
00:01:46.560 --> 00:01:50.010
Now, what is this update thing?
You've heard the word vsync thrown around

22
00:01:50.010 --> 00:01:54.670
over the course of I/O a few times. And what
this is is your screen is going to pull into

23
00:01:54.670 --> 00:01:59.450
memory somewhere and just pull out picture
from the GPU or whatever and put it up on

24
00:01:59.450 --> 00:02:05.060
either the LCD or the CRT, and it's going
to do that in a fixed heartbeat. You can't

25
00:02:05.060 --> 00:02:09.649
control it, especially not from software.
It's just going to do that.

26
00:02:09.649 --> 00:02:14.459
Now, this is mostly a good thing. And being
smooth, having a smooth animation, something

27
00:02:14.459 --> 00:02:19.279
that slides across the screen and looks really,
really nice and buttery, is about having your

28
00:02:19.279 --> 00:02:26.279
picture ready when that happens, just before
it happens. And you have to do so being aware

29
00:02:26.889 --> 00:02:31.680
of the fact that different screens are going
to do that at different rates.

30
00:02:31.680 --> 00:02:37.189
So in the yesteryear and even up to last year,
some of the best JavaScript libraries out

31
00:02:37.189 --> 00:02:41.909
there animated would set timeout. jQuery,
for instance, I think had an eight-millisecond

32
00:02:41.909 --> 00:02:44.310
set timeout thing. And we're here today to
say --

33
00:02:44.310 --> 00:02:48.939
&gt;&gt;Tom Wiltzius: Don't do it.
&gt;&gt;Nat Duca: Please don't do it.

34
00:02:48.939 --> 00:02:53.159
Now, it's kind of complicated why you shouldn't
do it, so we built a simulation here for you

35
00:02:53.159 --> 00:02:57.879
to help you understand this.
So what you're seeing here is a couple of

36
00:02:57.879 --> 00:03:01.680
sliders. This determines my refresh rate of
the screen.

37
00:03:01.680 --> 00:03:07.609
So you know, if I'm a low power Chromebook
that's unplugged and decided that it should

38
00:03:07.609 --> 00:03:11.999
go into low power mode, it's at 50-hertz and
the blue line means in time it's going to

39
00:03:11.999 --> 00:03:15.959
update the screen at that point.
Let's bring that back up to 60 for a minute.

40
00:03:15.959 --> 00:03:21.680
So then we've got our set timeout, right,
the old school animation approach, and that's

41
00:03:21.680 --> 00:03:24.540
at 16.
So here's the thing. There is our set timeout.

42
00:03:24.540 --> 00:03:31.540
It fires, then it fires again, exactly 16
milliseconds later. And then again, so on

43
00:03:32.239 --> 00:03:36.389
and so forth.
Now, see the relationship between the timer

44
00:03:36.389 --> 00:03:42.219
firing and the blue line? It's moving. And
in fact, you see this arrow, which is showing

45
00:03:42.219 --> 00:03:48.040
when whatever you did in that set timeout,
the arrow draws a line to where the monitor

46
00:03:48.040 --> 00:03:52.040
-- which refresh of that monitor is going
to pick up your picture. So if each one of

47
00:03:52.040 --> 00:03:57.919
those timeouts moves something to the left
by one pixel, you will get a picture showing

48
00:03:57.919 --> 00:04:03.319
up when the vsync line runs.
Now, here's the problem. 16 into 60-hertz

49
00:04:03.319 --> 00:04:10.319
does not equally go, right? 16 milliseconds
and 16.6 are the two numbers that really -- 16.6

50
00:04:11.109 --> 00:04:16.320
repeating are your two magic numbers, and
that's only for a 60-hertz display. The problem

51
00:04:16.320 --> 00:04:21.519
here -- there are really two. The first problem
is that as you go on in time -- I'm just scrolling

52
00:04:21.519 --> 00:04:26.430
to the right to show you more and more of
these patterns. Sometimes you get a situation

53
00:04:26.430 --> 00:04:33.039
where the same 16-millisecond time lap fires
twice in the same VBlank interval, these two

54
00:04:33.039 --> 00:04:39.699
lines. So this red X'd one never made it on
the screen. So that's going to be an apparent

55
00:04:39.699 --> 00:04:44.080
jank. You won't see that, so all of a sudden
just for one fraction of a second you'll see

56
00:04:44.080 --> 00:04:51.080
-- you'll feel like, oh, something's wrong.
The other problem is that these lines are

57
00:04:52.240 --> 00:04:57.930
varying in angle. Now, what that means is
if you're moving something at a constant stream,

58
00:04:57.930 --> 00:05:04.220
trying to move something smoothly across the
screen, the steeper the line, the more the

59
00:05:04.220 --> 00:05:10.770
velocity, the apparent velocity of your image
will match what you're computing. But the

60
00:05:10.770 --> 00:05:16.340
more slanted the line, the more it will appear
to your eyes to slow down. So in this case

61
00:05:16.340 --> 00:05:22.120
if I just moved something slowly across the
screen, you would at a very, very subtle level

62
00:05:22.120 --> 00:05:27.389
feel like the object was slowing down and
then suddenly would skip and then it would

63
00:05:27.389 --> 00:05:31.479
slow down, but it would be very, very minor.
So this is not buttery smooth.

64
00:05:31.479 --> 00:05:36.509
&gt;&gt;Tom Wiltzius: No. We even call it sometimes
an uncanny value of smoothness. You may be

65
00:05:36.509 --> 00:05:41.759
thinking in a 60-hertz setup does it really
matter so much if I drop one frame in 50,

66
00:05:41.759 --> 00:05:45.479
like if I'm going to drop the 50th frame?
And the answer is yes, it does. You'll notice

67
00:05:45.479 --> 00:05:50.650
these things, but it's more, as Nat is saying,
a feel. So this is the kind of thing that

68
00:05:50.650 --> 00:05:55.509
we can become very attuned to, and if you
start to notice it you're going to see these

69
00:05:55.509 --> 00:05:58.400
tiny little hitches.
&gt;&gt;Nat Duca: And tweaking the number doesn't

70
00:05:58.400 --> 00:06:03.919
make it better. You can turn it to 10, it
just drops more frames. You're gonna get more

71
00:06:03.919 --> 00:06:07.539
jank. If you turn it up to 17 because, hey,
17 is closer to 16.6, you'll get the same

72
00:06:07.539 --> 00:06:11.810
thing, it's just gonna longer for that to
happen.

73
00:06:11.810 --> 00:06:16.419
And if you want to pass 16.6, the browser
will drop that decimal point on the floor

74
00:06:16.419 --> 00:06:21.430
and give you 16 anyway.
So don't use set timeout. We're sort of beating

75
00:06:21.430 --> 00:06:25.659
this point because there's been discussion
in the world about whether this is a good

76
00:06:25.659 --> 00:06:28.360
thing.
So what should you do? Well, stay on time

77
00:06:28.360 --> 00:06:34.360
every time by using requestAnimationFrame.
It's a drop in replacement for set timeout.

78
00:06:34.360 --> 00:06:39.960
The quality of the implementation of requestAnimationFrame
is not 100% on all browsers right now. Some

79
00:06:39.960 --> 00:06:46.080
browsers are trying to get little nitty-gritty
corner cases just perfect, but unlike set

80
00:06:46.080 --> 00:06:52.840
timeout, which is sort of permanently messed
up, we have hope as Chrome or Mozilla or any

81
00:06:52.840 --> 00:06:56.749
of these to make it better. So please do use
it.

82
00:06:56.749 --> 00:07:01.300
And the reason is because then when you're
on a high-speed monitor or a low-powered screen,

83
00:07:01.300 --> 00:07:06.060
your rAF is always on time.
&gt;&gt;Tom Wiltzius: This is supported in all the

84
00:07:06.060 --> 00:07:08.439
major browsers at this point. This is very
much the direction everyone is going.

85
00:07:08.439 --> 00:07:15.439
&gt;&gt;Nat Duca: But this is not the only thing
that you need to do to be jank-free because

86
00:07:16.569 --> 00:07:18.599
otherwise we could all leave and go get drunk
or something.

87
00:07:18.599 --> 00:07:25.159
So anyway, we can't do that, we have to also
keep in budget. So let's talk about budget.

88
00:07:25.159 --> 00:07:30.719
So what I have here is a requestAnimationFrame
script that's just rotating this thing, right?

89
00:07:30.719 --> 00:07:35.870
Pretty straightforward. And what I've also
done is I've graphed, just with the canvas,

90
00:07:35.870 --> 00:07:41.770
the time that I'm getting between these requestAnimationFrames.
And you can see they're nice and regular.

91
00:07:41.770 --> 00:07:46.139
There's a good line here.
Now, this big jank button, right, it's a big

92
00:07:46.139 --> 00:07:51.099
red button, don't press it, but if you press
it, it puts it to sleep, just puts V8 to sleep

93
00:07:51.099 --> 00:07:57.270
for awhile and what happens is there are two
things to watch. You will see the spike on

94
00:07:57.270 --> 00:08:03.729
the graph, right? But also look at the actual
spinner. See how it's sort of jumping? So

95
00:08:03.729 --> 00:08:09.819
this isn't terribly surprising, but this visualization
of seeing this graph spike is incredibly useful

96
00:08:09.819 --> 00:08:14.060
and it's so useful that we've actually built
it right into devtools.

97
00:08:14.060 --> 00:08:19.449
So a new feature announcement, or you've seen
it maybe, this is Chrome devtools frame mode

98
00:08:19.449 --> 00:08:25.219
and it's recording now and what we're seeing
is that same graph of the time between frames

99
00:08:25.219 --> 00:08:30.610
live, plotted up top, so you see a long frame.
So let's try it out. Let's go here. I'm gonna

100
00:08:30.610 --> 00:08:35.040
start a new recording. I'm going to press
the big jank button.

101
00:08:35.040 --> 00:08:41.340
Go back. So now that nice, beautiful, flat
thing that we saw now has these nasty things

102
00:08:41.340 --> 00:08:45.660
in it. And your eye should be drawn to that
because that's jank.

103
00:08:45.660 --> 00:08:49.630
So if I zoom in on this, right, if I click
on one of these, one of the cool things you're

104
00:08:49.630 --> 00:08:56.630
seeing is these are good frames. These individual
columns are nice, smooth 16-millisecond frames.

105
00:08:57.000 --> 00:09:04.000
16, 17, it will be a little bit noisy.
But this one -- that one is right out.

106
00:09:04.040 --> 00:09:07.300
Tom, is a 100-millisecond frame smooth?
&gt;&gt;Tom Wiltzius: Nope.

107
00:09:07.300 --> 00:09:12.940
&gt;&gt;Nat Duca: He's good. He's a good PM.
So this is the jank that we introduced. And

108
00:09:12.940 --> 00:09:19.940
in fact, devtools is awesome. We can go to
here, see that big timer-fired event and see

109
00:09:20.280 --> 00:09:26.100
that that's the big jank button.
Now, it's not just about avoiding the big

110
00:09:26.100 --> 00:09:30.550
timeouts in your code, like you could just
write a memo and say "Don't sleep for 100

111
00:09:30.550 --> 00:09:34.520
milliseconds," okay, now your Web page is
jank-free, but not quite.

112
00:09:34.520 --> 00:09:41.150
So the other part of this puzzle is sticking
within your budget. So I've got two buttons

113
00:09:41.150 --> 00:09:46.020
here, this early button. And as you can see,
there's a little bit of noise, but that's

114
00:09:46.020 --> 00:09:49.410
not me clicking the button. I'm pressing this
button really hard and the frame graph is

115
00:09:49.410 --> 00:09:52.400
pretty stable, right?
And then I'm going to do the same thing, and

116
00:09:52.400 --> 00:09:56.830
I have this eight milliseconds late thing,
and you can see we're getting regular jumps.

117
00:09:56.830 --> 00:10:01.420
Now, let's go back to the recording. I had
a recording going.

118
00:10:01.420 --> 00:10:08.420
So here are the ones when I pressed early.
Okay? See how the line here didn't go up?

119
00:10:09.000 --> 00:10:15.040
What this is saying to me is that I used some
time during my frame to do JavaScript, but

120
00:10:15.040 --> 00:10:19.300
I didn't push out my frame.
Now, let's look at this down in the bottom

121
00:10:19.300 --> 00:10:21.420
bin. So if I scroll down I have to sort of
find it.

122
00:10:21.420 --> 00:10:28.070
The recording is a little long, so bear with
me. There it is.

123
00:10:28.070 --> 00:10:33.750
So here's our eight-millisecond fired call.
And we fit it in between these two frames.

124
00:10:33.750 --> 00:10:37.440
See how it just fit right in?
So because it just fit right in, it didn't

125
00:10:37.440 --> 00:10:43.330
push out the frame. But if I go over here
and look at this one -- so there's one of

126
00:10:43.330 --> 00:10:47.360
those timers that actually fired. And you
can -- even without zooming in too far on

127
00:10:47.360 --> 00:10:53.390
it, you can see that basically we started
too late and so we pushed out the frame, and

128
00:10:53.390 --> 00:10:59.800
this frame ran long. This frame is 21 milliseconds,
right, instead of the 16.

129
00:10:59.800 --> 00:11:03.980
So this would have janked. And in fact, if
you sit there in these slides and really pound

130
00:11:03.980 --> 00:11:07.320
on the eight milliseconds late button, just
hitting it, you will start seeing the spinner

131
00:11:07.320 --> 00:11:14.250
feel a little bit janky.
So the rule here is you've got 16 milliseconds

132
00:11:14.250 --> 00:11:16.370
to do everything, including all this stuff
that Chrome needs to do to put the picture

133
00:11:16.370 --> 00:11:21.390
on the screen.
If you're going to do work, you've got to

134
00:11:21.390 --> 00:11:27.910
stay in that budget and you've got to measure
it in order to verify that you're staying

135
00:11:27.910 --> 00:11:33.330
in the budget.
So that's a nice toy example. It's one type

136
00:11:33.330 --> 00:11:40.330
of example, but what do we do in the Web browser
most of the time? We scroll. Almost all of

137
00:11:41.190 --> 00:11:46.890
my Web browsing time is scrolling.
So you can get janked there, too, and in fact

138
00:11:46.890 --> 00:11:51.810
we showed it once.
Here's a toy example Number 2 of jank scrolling.

139
00:11:51.810 --> 00:11:57.590
So this code moves these divs around in an
onscroll handler.

140
00:11:57.590 --> 00:12:01.930
Is it's a pretty straightforward example.
It's not exactly the prettiest thing in the

141
00:12:01.930 --> 00:12:06.130
world, but we want to show you two things.
First I want to make you very, very comfortable

142
00:12:06.130 --> 00:12:11.110
with when you see this kind of pattern, just
pop into the timeline and take a recording.

143
00:12:11.110 --> 00:12:17.530
So let's do that. Up and down, we're having
some fun here. Hopefully we're having some

144
00:12:17.530 --> 00:12:21.920
fun.
There it is. So here are some frames. So the

145
00:12:21.920 --> 00:12:28.920
first thing that should stand out to you is
look at the size of these things.

146
00:12:30.000 --> 00:12:32.790
Again, back to jank expert. Are these fast?
&gt;&gt;Tom Wiltzius: Only on a five-hertz screen.

147
00:12:32.790 --> 00:12:37.170
&gt;&gt;Nat Duca: These are long frames. This is
not okay. So we need to make this okayer.

148
00:12:37.170 --> 00:12:42.820
Technical term alert, okayer.
So what I'm seeing here between these two

149
00:12:42.820 --> 00:12:48.470
lines, just pick any pair of lines, I'm seeing
some green, which is painting, and I'm seeing

150
00:12:48.470 --> 00:12:52.670
some event.
If I expand this out you see just tons and

151
00:12:52.670 --> 00:12:56.780
tons of stuff happening in this event.
So what I think when I see this is I go, let's

152
00:12:56.780 --> 00:12:59.880
hit this. This is pretty obvious or maybe
it's obvious.

153
00:12:59.880 --> 00:13:06.840
So when we pop into the source code for this,
what the Chrome devtools is pointing us at

154
00:13:06.840 --> 00:13:10.510
is this line.
So what this is doing is it's trying to pull

155
00:13:10.510 --> 00:13:16.510
up -- the test is just trying to pull up the
scrolltop in order to then use it in a formula.

156
00:13:16.510 --> 00:13:23.510
Now, one of the key parts of most Web browsers
is that when you ask for layout information

157
00:13:23.610 --> 00:13:29.450
or style, and scrolltop is part of that, it
has to recalculate the world essentially or

158
00:13:29.450 --> 00:13:34.100
a lot of the world.
And in this case that means figuring out all

159
00:13:34.100 --> 00:13:37.100
the div positions and everything and doing
a big think, and then it will give you back

160
00:13:37.100 --> 00:13:43.690
the scrolltop.
Now, then we take the value that we've computed

161
00:13:43.690 --> 00:13:48.190
and we shove it into this left position of
our item, which goes and tells the browser,

162
00:13:48.190 --> 00:13:52.360
"Hey, the world has changed again. If you
get asked about the world's state again, recompute

163
00:13:52.360 --> 00:13:57.900
again."
So what's happening here is that we compute

164
00:13:57.900 --> 00:14:03.240
style, we dirty style, we go around the loop
again and we do this over and over and over

165
00:14:03.240 --> 00:14:08.780
again. And this is why we're seeing so many
purple entries in the timeline. Of course,

166
00:14:08.780 --> 00:14:12.450
this being the demo I have made that behind
a check box, right?

167
00:14:12.450 --> 00:14:19.060
So in theory this should be faster now, right,
but don't believe it. Trace it or record it.

168
00:14:19.060 --> 00:14:22.720
So I've got a recording going and we're going
to scroll again.

169
00:14:22.720 --> 00:14:26.110
Oh, happy day, it's gone.
But hey, Tom, is that fast yet?

170
00:14:26.110 --> 00:14:29.810
&gt;&gt;Tom Wiltzius: Still not fast enough.
&gt;&gt;Nat Duca: It's not smooth yet. I need a

171
00:14:29.810 --> 00:14:36.810
light that's are we smooth yet? So our paint
is a problem and we've got to hit this too.

172
00:14:38.940 --> 00:14:42.250
So painting, what's painting?
So painting is the part where we take the

173
00:14:42.250 --> 00:14:49.250
styles that you've given us and we do the
drawing. So Line 2, fill, draw image, do a

174
00:14:49.890 --> 00:14:54.670
blur. All of that stuff, and it takes time.
So when you see big paintings, start looking

175
00:14:54.670 --> 00:14:59.740
at things that could be costly. So when I
look at this doc and I look in the elements

176
00:14:59.740 --> 00:15:04.540
inspector -- the only thing up here really
is a bunch of images, so it's a pretty easy

177
00:15:04.540 --> 00:15:07.450
case.
But we look at these images and we've just

178
00:15:07.450 --> 00:15:13.300
got tons of styles on them. We've got, you
know, background image, we've got a box shadow,

179
00:15:13.300 --> 00:15:16.450
you know.
Hmm, let's remove that. So I've got a heavy

180
00:15:16.450 --> 00:15:23.450
painting class this is all in. So if I toggle
that off like that and we hit record again,

181
00:15:25.270 --> 00:15:30.260
this should be better.
And in fact, because of a bug in devtools

182
00:15:30.260 --> 00:15:35.940
it's not completely smooth, but if you look
at the actual costs, remember our paint time

183
00:15:35.940 --> 00:15:41.830
was -- what was it, like 40 something?
So it's gone from 40 something to about four

184
00:15:41.830 --> 00:15:48.160
milliseconds. So definitely those CSS files
that I toggled off are to blame. And in fact,

185
00:15:48.160 --> 00:15:55.160
when devtools is off this is nice and smooth.
So we busted some jank in some synthetic demos,

186
00:15:56.610 --> 00:16:03.120
kind of cool, but in general what we're trying
to teach you is keep your eye open for costly

187
00:16:03.120 --> 00:16:08.500
things, long frames. Anything bigger than
16 is right at you've got to bust it.

188
00:16:08.500 --> 00:16:14.010
Garbage collection can do this to you, just
manipulating lots of DOM, heavy script obviously.

189
00:16:14.010 --> 00:16:18.040
Timers are particularly something you have
to be careful of. Be aware of a timer that

190
00:16:18.040 --> 00:16:23.050
comes in just about at the end of the frame
because it can push out that frame. Same goes

191
00:16:23.050 --> 00:16:28.660
for XHR. Use the devtools features in order
to bust this stuff up and make your website

192
00:16:28.660 --> 00:16:31.380
smoother.
But there's more and Tom is going to tell

193
00:16:31.380 --> 00:16:33.250
you about it.
&gt;&gt;Tom Wiltzius: Thanks, Nat.

194
00:16:33.250 --> 00:16:39.130
So Nat's been talking a lot about sort of
what JavaScript, et cetera, can get in the

195
00:16:39.130 --> 00:16:43.450
way of your animations running smoothly. And
there's sort of an implied limitation to what

196
00:16:43.450 --> 00:16:48.840
the browser can do in everything that Nat's
just said. And that's that why can't some

197
00:16:48.840 --> 00:16:52.280
of this happen at the same time? It doesn't
really seem like there should be anything

198
00:16:52.280 --> 00:16:59.280
related between handling some XHR callback
in JavaScript and the browser painting, like

199
00:16:59.280 --> 00:17:01.540
you might not be actually touching the DOM
at all.

200
00:17:01.540 --> 00:17:06.559
But unfortunately for better or worse, the
way browsers are today it's a pretty good

201
00:17:06.559 --> 00:17:11.790
assumption that everything happening in a
given tab happens on one thread; i.e., that

202
00:17:11.790 --> 00:17:18.579
XHR callback can block painting, right?
Also, that XHR callback could block your requestAnimationFrame

203
00:17:18.579 --> 00:17:22.420
from running.
So if you remember, we've got this requestAnimationFrame

204
00:17:22.420 --> 00:17:28.040
that's ticking at the vsync heartbeat, but
it can't run if some heavy block of JavaScript

205
00:17:28.040 --> 00:17:32.260
is running. This is a pretty severe limitation,
right, because this means that you can't really

206
00:17:32.260 --> 00:17:36.880
be running in animation at the time when you've
got to do more than 16 milliseconds of JavaScript

207
00:17:36.880 --> 00:17:39.440
work at a time.
Either you have to break up your JavaScript

208
00:17:39.440 --> 00:17:44.280
into really little bite-sized increments and
handle them in the rAF callback or you can

209
00:17:44.280 --> 00:17:48.490
use CSS animation.
CSS animation is one of the exceptions to

210
00:17:48.490 --> 00:17:52.490
everything happens in one thread rule. We
brought to Chrome for Android first, so we're

211
00:17:52.490 --> 00:17:56.380
going to do a demo Android in a second, but
pretty soon this is going to be everywhere,

212
00:17:56.380 --> 00:18:01.100
including on desktop Chrome. So let's switch
to the demo here.

213
00:18:01.100 --> 00:18:07.030
I'm going to turn on the projector over on
the left, that's going to open up the source

214
00:18:07.030 --> 00:18:14.030
on my right. So if I look at this simple,
simple demo, this should look familiar, this

215
00:18:17.000 --> 00:18:21.780
is the same thing that we saw earlier, and
what Nat was showing earlier as this logo

216
00:18:21.780 --> 00:18:28.590
spun around was driven by requestAnimationFrame.
This is driven by CSS animation. You can see

217
00:18:28.590 --> 00:18:32.910
that I mention this is only on Chrome for
Android now, so for comparison's sake, if

218
00:18:32.910 --> 00:18:36.810
Nat hits the sleep button, you can see that
little bit of jank happening, right? Like

219
00:18:36.810 --> 00:18:40.360
that little hitch in the animation that's
the kind of thing that you want to be attuned

220
00:18:40.360 --> 00:18:47.360
to. Whereas if I hit that same button on this,
JavaScript still just spins for 180 milliseconds,

221
00:18:48.000 --> 00:18:52.980
but the animation is smooth, right? This is
huge. This is a big deal because it means

222
00:18:52.980 --> 00:18:55.820
that you can run arbitrary JavaScript and
the CSS animations are all going to run.

223
00:18:55.820 --> 00:19:01.100
It's kind of like the easy mode of getting
your animations to run smoothly, because you

224
00:19:01.100 --> 00:19:06.410
just need to define an animation in CSS, which
is fairly natural for most Web authors anyway,

225
00:19:06.410 --> 00:19:13.410
then let Chrome do the rest.
So this applies to both CSS transitions and

226
00:19:14.250 --> 00:19:20.350
CSS key frame animations and like requestAnimationFrame
you get some stuff for free. You get a lot

227
00:19:20.350 --> 00:19:22.470
of benefits. You get better time, smoother
looking animations, which is what we just

228
00:19:22.470 --> 00:19:24.710
showed you.
You also get better battery life, because

229
00:19:24.710 --> 00:19:28.460
we get pause animations that are in background
tabs. You get more graceful degradation because

230
00:19:28.460 --> 00:19:33.500
if there are a lot of things animating on
the screen, we can drop the browser's refresh

231
00:19:33.500 --> 00:19:38.960
rate to 30-hertz instead of 60, for instance
and keep it regular, rather than almost making

232
00:19:38.960 --> 00:19:42.260
it 60 but missing frames every once in a while.
Because for all of the reasons that we were

233
00:19:42.260 --> 00:19:46.620
talking about earlier, missing that frame
every once in a while is what your eye notices.

234
00:19:46.620 --> 00:19:52.050
Right?
So it's much better to be very, very regular,

235
00:19:52.050 --> 00:19:55.910
but a bit slower, than it is to be variable
and almost good enough. And this is the kind

236
00:19:55.910 --> 00:20:00.120
of thing that the browser can handle for you.
CSS animations are particularly good if you

237
00:20:00.120 --> 00:20:05.990
are doing some sort of continuous animation
like this silly Chrome logo spinning, if you've

238
00:20:05.990 --> 00:20:10.540
got some logo like that, and you want to be
doing anything on your page, like all of your

239
00:20:10.540 --> 00:20:15.070
social widgets are firing timers all of the
time, for instance, this is going to get in

240
00:20:15.070 --> 00:20:21.580
the way of something like the requestAnimationFrame,
driven animation, but it will not get in the

241
00:20:21.580 --> 00:20:24.960
way of the CSS animation.
It's also good for UI substitution effects,

242
00:20:24.960 --> 00:20:30.370
so you can imagine whatever GML wants to sort
of nicely animate the opening of their compose

243
00:20:30.370 --> 00:20:34.820
window, they can do that with CSS animations,
and it's much easier to do all of the heavy

244
00:20:34.820 --> 00:20:41.010
lifting in the background of building up document
fragments and doing DOM manipulation and parsing

245
00:20:41.010 --> 00:20:44.790
the email text. All of the stuff that you
have got to do to make your app run that you

246
00:20:44.790 --> 00:20:47.730
don't want to have to think about in the same
way that you are thinking about the animation

247
00:20:47.730 --> 00:20:50.210
running.
&gt;&gt;Nat Duca: Yeah. So we can't underscore this

248
00:20:50.210 --> 00:20:55.490
enough. CSS animation is your get out of jail
free card. When you have something, you can't

249
00:20:55.490 --> 00:21:02.410
keep it to your 16 millisecond budget, you
know, break out of that 16 millisecond jail

250
00:21:02.410 --> 00:21:06.800
temporarily by throwing up a nice animation.
&gt;&gt;Tom Wiltzius: Yeah, that's right. I also

251
00:21:06.800 --> 00:21:10.440
want to -- before we go further, I should
note that we talk a lot about 16 milliseconds

252
00:21:10.440 --> 00:21:16.250
because that's about right. But all of this
stuff about browser and screen refresh rates

253
00:21:16.250 --> 00:21:21.570
still apply and I want to point out that just
because you are within budget on your computer,

254
00:21:21.570 --> 00:21:24.680
doesn't necessarily mean that you're going
to be within budget on most people's computers

255
00:21:24.680 --> 00:21:27.520
which are probably slower than your computers
and doesn't mean that you're going to be within

256
00:21:27.520 --> 00:21:32.710
budget on phone and tablets, and all of this
stuff. All of this is very, very machine dependent.

257
00:21:32.710 --> 00:21:36.440
Right? So you need to be diligent about doing
the kind of measurements that we're talking

258
00:21:36.440 --> 00:21:41.550
about throughout this talk to make sure that
you're actually comfortably within budget

259
00:21:41.550 --> 00:21:46.880
and can even withstand some variation like
machine speed. So -- so now we're going to

260
00:21:46.880 --> 00:21:53.309
go back to the demo we opened with. And we're
going to try to fix this up. We're going to

261
00:21:53.309 --> 00:21:59.330
sort of show you the process that we went
through to speed up this page. On this projector's

262
00:21:59.330 --> 00:22:03.670
resolution, the results aren't quite as dramatic,
but you should still be able to see them,

263
00:22:03.670 --> 00:22:09.320
especially if, as imploring you use devtools
and actually like really note the times. I'm

264
00:22:09.320 --> 00:22:16.320
going to pop up devtools here and I'm going
to look around and I'm going to take a timeline

265
00:22:16.940 --> 00:22:23.940
recording of this page that we say scrolls
jangly. If I zoom in on some of those frames,

266
00:22:24.730 --> 00:22:31.480
what do I see? I see big swaths of green,
right? I see all of this paint time, which

267
00:22:31.480 --> 00:22:37.250
is completely blowing the frame budget. These
frames are like 45 plus milliseconds long

268
00:22:37.250 --> 00:22:41.260
and they are dominated, I mean they are not
dominated, the only thing going on is painting,

269
00:22:41.260 --> 00:22:45.720
right? So before we were talking about JavaScript
getting in the way sort of complicated interaction

270
00:22:45.720 --> 00:22:50.809
between the browser painting and JavaScript
running and style recalculation. None of that

271
00:22:50.809 --> 00:22:56.190
is going on here. This is a static Web page,
not complicated in the slightest. It still

272
00:22:56.190 --> 00:23:02.220
scrolls really slowly. It scrolls slowly on
this like fancy MacBook Pro. You can imagine

273
00:23:02.220 --> 00:23:08.410
how well this scrolls on most people's computers
which are not nearly as fast, right? So what

274
00:23:08.410 --> 00:23:14.330
do we do? How do you diagnose those big, pretty,
opaque big green paint blocks. When you are

275
00:23:14.330 --> 00:23:18.730
diagnosing a long paint time, there are a
few basic questions that you want to start

276
00:23:18.730 --> 00:23:23.700
with. What element was slow or what element
is causing you to be slow and what styles

277
00:23:23.700 --> 00:23:29.450
are causing you to be slow? The way we answer
the first question is that we do this really

278
00:23:29.450 --> 00:23:34.420
dumb thing where we just turn off parts of
the DOM. Right? We just get rid of elements

279
00:23:34.420 --> 00:23:38.160
and say did getting rid of this element improve
my paint times?

280
00:23:38.160 --> 00:23:43.900
Maybe we decide we don't need that or we're
going to do some sort of visual reengineering,

281
00:23:43.900 --> 00:23:49.290
so it's not as big of a problem, et cetera.
So we can start with something like that here.

282
00:23:49.290 --> 00:23:56.050
Again, I'm going to switch to devtools, pop
open the elements view, and I'm going to start

283
00:23:56.050 --> 00:24:00.770
just looking for things to turn off. So I'm
going to start with trying to turn off this

284
00:24:00.770 --> 00:24:05.460
header, because I'm sort of suspicious of
that. It's on the screen all the time. And

285
00:24:05.460 --> 00:24:12.460
I'm just going to flip this to display none.
This feels a little smoother to my finger

286
00:24:12.929 --> 00:24:16.940
on the track pad, but it's hard to tell that
from the audience. So again, be diligent,

287
00:24:16.940 --> 00:24:23.250
take a recording. We switch back to timeline,
we take a recording. Did we get better? Ah,

288
00:24:23.250 --> 00:24:28.450
we got a little bit better. There were some
that were above 45 seconds before, so I maybe

289
00:24:28.450 --> 00:24:33.050
would count this a win, but it's not that
significant, right? Plus there's a down side

290
00:24:33.050 --> 00:24:37.100
here. I just got rid of the header. This is
like pretty integral to my site, right?

291
00:24:37.100 --> 00:24:39.730
[ Laughter ]
&gt;&gt;Nat Duca: You can do it, you can go push

292
00:24:39.730 --> 00:24:45.520
this, right? Sometimes that sort of a thing
will be a real hit. It's not unsurprising

293
00:24:45.520 --> 00:24:50.790
that we'll see websites that just lose 90%
of their speed to one element. But in this

294
00:24:50.790 --> 00:24:55.650
case, it's sort of marginal and it's kind
of cool. Like I like that orange thing.

295
00:24:55.650 --> 00:24:57.640
&gt;&gt;Tom Wiltzius: Right.
&gt;&gt;Nat Duca: So we should keep it, right?

296
00:24:57.640 --> 00:25:04.580
&gt;&gt;Tom Wiltzius: Right. So we're going to try
not to make our UI designers, et cetera, angry

297
00:25:04.580 --> 00:25:08.670
by telling them that their layout is too complicated.
And instead we're going to move on to the

298
00:25:08.670 --> 00:25:12.370
second question, which is, well, we're stuck
painting everything that we're going to paint

299
00:25:12.370 --> 00:25:15.630
and we're not going to worry about why it's
being painted. Instead we're just going to

300
00:25:15.630 --> 00:25:19.950
say what made this take so long? Like given
that we can't change it.

301
00:25:19.950 --> 00:25:25.570
The answer is always going to be CSS styles,
right? CSS styles define what the page looks

302
00:25:25.570 --> 00:25:29.440
like, it defines what an element looks like,
it also defines how an element renders, right?

303
00:25:29.440 --> 00:25:35.370
So when we tell an element to go draw itself,
we being like WebKit, right, the amount of

304
00:25:35.370 --> 00:25:40.130
time that that takes is highly variable depending
on CSS styles. We wish it was the case that

305
00:25:40.130 --> 00:25:43.640
all CSS styles sort of took equal cost to
paint because it would make --

306
00:25:43.640 --> 00:25:46.880
&gt;&gt;Nat Duca: I want a pony as well.
&gt;&gt;Tom Wiltzius: Yeah, yeah. It would make

307
00:25:46.880 --> 00:25:52.490
performance optimization much easier, but
that's just not true. But so as much as Nat

308
00:25:52.490 --> 00:25:58.320
said earlier, sometimes one element can really
slow you down. Similarly sometimes just one

309
00:25:58.320 --> 00:26:02.440
or two styles or like the intersection of
a couple can really, really kill you when

310
00:26:02.440 --> 00:26:06.980
it comes to paint times.
So we're going to start doing the same dumb

311
00:26:06.980 --> 00:26:11.350
trick. Right? We're just going to start turning
stuff off and seeing if we can identify a

312
00:26:11.350 --> 00:26:14.270
couple of things that are really causing us
pain.

313
00:26:14.270 --> 00:26:21.120
So again I'm going to flip open devtools,
go to the elements view and I'm going to start

314
00:26:21.120 --> 00:26:25.710
poking around. The first thing that I'm going
to look at is maybe this background. It's

315
00:26:25.710 --> 00:26:29.840
on a lot of the screen. Like the reason I'm
choosing this is because it looks kind of

316
00:26:29.840 --> 00:26:36.840
complicated, especially if I inspect it here.
Oh, there's all of this like 20 lines of CSS

317
00:26:37.900 --> 00:26:42.160
declaration for this thing. And it's all over
the place. So I'm assuming maybe it's going

318
00:26:42.160 --> 00:26:44.670
to take some time.
&gt;&gt;Nat Duca: Even more amusingly on your projectors

319
00:26:44.670 --> 00:26:51.670
it's showing up as gray. But when you look
at it here, it's got this nice little checker-boardy

320
00:26:52.210 --> 00:26:54.510
thing and it's all gorgeous and textured.
&gt;&gt;Tom Wiltzius: Yeah, I apologize.

321
00:26:54.510 --> 00:26:57.490
&gt;&gt;Nat Duca: And -- we're not going to see
it, but maybe we're paying a lot for that,

322
00:26:57.490 --> 00:27:00.710
all of that CSS.
&gt;&gt;Tom Wiltzius: Right. So we're going to go

323
00:27:00.710 --> 00:27:06.210
back to the timeline view again, we're going
to take a recording, we're going to scroll

324
00:27:06.210 --> 00:27:10.260
down, we're going to see what changed. Huh.
A lot changed, right?

325
00:27:10.260 --> 00:27:17.100
So now I've turned off that background and
my frame times are now like in the high 20s.

326
00:27:17.100 --> 00:27:19.400
&gt;&gt;Nat Duca: Tom, I think we classify that
as a win.

327
00:27:19.400 --> 00:27:23.179
&gt;&gt;Tom Wiltzius: Yeah, right. This is --
&gt;&gt;Nat Duca: Brush metal aside.

328
00:27:23.179 --> 00:27:29.030
&gt;&gt;Tom Wiltzius: Right, but again there's this
tradeoff between the visual effect that you've

329
00:27:29.030 --> 00:27:33.870
achieved with the styles that you've used
and what they are costing you. So -- and so

330
00:27:33.870 --> 00:27:38.770
this process, this is only the beginning.
What -- as we disable things -- and I'm going

331
00:27:38.770 --> 00:27:45.010
to disable something else, too. As we disable
things, like we're making the page look different.

332
00:27:45.010 --> 00:27:51.790
So this is only the beginning. The next step
is adding stuff back in or trying to achieve

333
00:27:51.790 --> 00:27:58.610
the same visual effect via different styles
that won't have the same sort of like pathologically

334
00:27:58.610 --> 00:28:02.620
bad cost.
So in this case, there's one more thing I

335
00:28:02.620 --> 00:28:08.150
want to try. Thanks to Nat's demo earlier,
I'm thinking maybe like box shadows are a

336
00:28:08.150 --> 00:28:12.660
bad idea, so I'm going to turn off box shadows
and maybe the backgrounds of these things,

337
00:28:12.660 --> 00:28:19.660
too, for the same reason that I turned it
off on the body. And looking at this, it feels

338
00:28:21.820 --> 00:28:27.370
a lot smoother to my finger, but once again,
I'm not going to trust it, I'm going to go

339
00:28:27.370 --> 00:28:32.220
to timeline, take a recording. And like, wow,
that just got way better, right?

340
00:28:32.220 --> 00:28:38.630
There's one big one at the beginning. But
almost all of these times like look how low

341
00:28:38.630 --> 00:28:42.570
these are. We started off at like what was
it?

342
00:28:42.570 --> 00:28:44.720
&gt;&gt;Nat Duca: Janktastic.
&gt;&gt;Tom Wiltzius: Like 50 milliseconds a frame.

343
00:28:44.720 --> 00:28:48.330
&gt;&gt;Nat Duca: Some big number.
&gt;&gt;Tom Wiltzius: Like i.e., five frames worth

344
00:28:48.330 --> 00:28:53.910
in one frame and now these paint times they
are like so small I'm having trouble clicking

345
00:28:53.910 --> 00:29:00.910
on them. They are in the like few millisecond
range, like one millisecond range. And again,

346
00:29:01.460 --> 00:29:05.160
you are saying well, that's great but you
changed the way the page looks, right? And

347
00:29:05.160 --> 00:29:08.650
that's totally fair.
&gt;&gt;Nat Duca: And I mean this is PM versus programmer,

348
00:29:08.650 --> 00:29:14.020
so I'm going, I'm good with this, right? But
this creates the right tension, right, between

349
00:29:14.020 --> 00:29:18.940
design and technical that you can then use.
&gt;&gt;Tom Wiltzius: And even at a technical level,

350
00:29:18.940 --> 00:29:23.840
again, like you can then start building your
way back up. Now that you've identified what's

351
00:29:23.840 --> 00:29:27.190
causing your problems -- because again I didn't
change that much here, right? I got rid of

352
00:29:27.190 --> 00:29:32.420
the box shadow and the background, and that's
it. And it's like that completely removed

353
00:29:32.420 --> 00:29:36.440
the problem. So the question is how do I get
that nice background gradient and how do I

354
00:29:36.440 --> 00:29:41.480
get the nice drop shadow effect, but without
all of the paint time cost. So I have this

355
00:29:41.480 --> 00:29:45.910
version, oops, going to leave that open for
later. I have this version that I fixed up

356
00:29:45.910 --> 00:29:52.150
a little bit. And I did it exactly what I
just showed you. I just started hunting around

357
00:29:52.150 --> 00:29:56.990
for stuff. I went straight for the ones that
I found eventually first in this -- in the

358
00:29:56.990 --> 00:30:01.580
interest of time, so you didn't have to sit
through anything too boring. But like you

359
00:30:01.580 --> 00:30:05.570
can imagine how this process goes, right?
And then I built it back up so that it visually

360
00:30:05.570 --> 00:30:09.290
looks almost the same. I did this quickly
so there are a few differences, but you can

361
00:30:09.290 --> 00:30:14.580
imagine getting there, right? I just used
images. I honestly just took screen shots

362
00:30:14.580 --> 00:30:20.200
of the background and just like tiled them
and that was way faster. So now you can see

363
00:30:20.200 --> 00:30:25.280
that like this thing is zippy.
And if I open up devtools, switch to timeline,

364
00:30:25.280 --> 00:30:32.280
take a recording, like we're not at the one
millisecond paint times that we were before,

365
00:30:32.549 --> 00:30:36.240
but what are these costing, three milliseconds.
&gt;&gt;Nat Duca: That's butter.

366
00:30:36.240 --> 00:30:40.500
&gt;&gt;Tom Wiltzius: It's an order of magnitude
faster than it was before and it looks the

367
00:30:40.500 --> 00:30:45.910
same. Right? Like this is significant and
all that I did was change two styles.

368
00:30:45.910 --> 00:30:50.559
So the point is sometimes -- this was like
a live website, right, like this is a live

369
00:30:50.559 --> 00:30:52.480
website that Google made.
[ Laughter ]

370
00:30:52.480 --> 00:30:58.000
&gt;&gt;Tom Wiltzius: So -- so the point is there
are plenty of times when just changing a few

371
00:30:58.000 --> 00:31:03.280
little things is going to have a huge impact.
But the hard part is how do you find those

372
00:31:03.280 --> 00:31:07.860
things and that's what we're trying to impart
today, right? We're trying to explain to you

373
00:31:07.860 --> 00:31:14.860
the process and the tools that you can use
to identify those bad, bad cases.

374
00:31:14.880 --> 00:31:19.790
There is one more trick I pulled in between
the good version and the bad version, which

375
00:31:19.790 --> 00:31:25.059
I'm going to open back up again.
And the way I found this trick, the way I

376
00:31:25.059 --> 00:31:29.580
found this thing that was additionally slowing
me down was through abouttracing. So devtools

377
00:31:29.580 --> 00:31:33.860
is great and we recommend everyone start with
devtools and the new features in timeline

378
00:31:33.860 --> 00:31:39.190
are particularly compelling for this. But
-- but if this is not enough for you, you

379
00:31:39.190 --> 00:31:43.710
can get a lot closer to the middle by using
abouttracing, which is a special tab in Chrome.

380
00:31:43.710 --> 00:31:48.850
It's what we use to debug performance problems
in the Web browser. And it can be really useful

381
00:31:48.850 --> 00:31:52.730
for you if timeline isn't enough for you or
if you are just stuck. And it will show you

382
00:31:52.730 --> 00:31:57.610
a lot of stuff that's happening inside of
the browser. It exposes Chrome's multi-process

383
00:31:57.610 --> 00:32:02.760
model. It is a lot more complicated and not
nearly as user friendly, but there is some

384
00:32:02.760 --> 00:32:07.480
documentation that the two of us wrote up,
we put it up on the Chromium dev site so you

385
00:32:07.480 --> 00:32:12.030
can check that out from there.
The trick that I discovered for this particular

386
00:32:12.030 --> 00:32:18.440
page using abouttracing is something that
doesn't show up inside of devtools right now,

387
00:32:18.440 --> 00:32:24.760
and that's image decode costs -- so as I mentioned
earlier, that green paint block, that we see

388
00:32:24.760 --> 00:32:28.470
in the devtools timeline, today it's totally
opaque, right?

389
00:32:28.470 --> 00:32:31.799
You don't get any granularity until like what
is the Web browser doing?

390
00:32:31.799 --> 00:32:37.830
We're working on that. Those of you who saw
Pavel's talk before with Sam, you guys know

391
00:32:37.830 --> 00:32:42.110
that there is some good stuff coming from
devtools that's going to expose more detailed

392
00:32:42.110 --> 00:32:46.980
information. But in the meantime, like that
wasn't obvious to me from devtools, but I

393
00:32:46.980 --> 00:32:51.460
saw these long JPEG like decodes and resizes
--

394
00:32:51.460 --> 00:32:54.280
&gt;&gt;Nat Duca: What happens is that he'll show
you the trick in a minute or maybe you can

395
00:32:54.280 --> 00:33:01.280
bring up the bit. You would scroll, it felt
really good, but the first time you loaded

396
00:33:02.020 --> 00:33:04.830
it, just the first time, every once in a while
you would see something, like what in the

397
00:33:04.830 --> 00:33:09.080
heck was that, felt a little janky, right?
It was in the uncanny valley territory. This

398
00:33:09.080 --> 00:33:12.590
page started off as really just terrible.
Right?

399
00:33:12.590 --> 00:33:17.160
But there's still this uncanny valley and
it was showing up as long paints, but you

400
00:33:17.160 --> 00:33:21.140
couldn't tell why. So that's where you jump
into -- if you care, you jump into tracing

401
00:33:21.140 --> 00:33:24.059
to figure that last bit out.
&gt;&gt;Tom Wiltzius: Yeah. And so in this case,

402
00:33:24.059 --> 00:33:31.059
again, there were some JPEG decodes that were
showing up, these can take upwards of like

403
00:33:31.110 --> 00:33:37.190
40 to 60 milliseconds even on this fast computer.
This is huge, right, because again that happens

404
00:33:37.190 --> 00:33:40.559
within a frame because the Web browser is
not doing anything else while it's decoding

405
00:33:40.559 --> 00:33:46.130
that image at least in the renderer, right?
Which means you just missed five frames, like

406
00:33:46.130 --> 00:33:50.030
you just stalled, you are done.
And this is bad.

407
00:33:50.030 --> 00:33:56.000
So how do you avoid this? Well, in this case
the reason that these scales were happening

408
00:33:56.000 --> 00:34:02.750
was because the images weren't sized at the
resolution that they were being displayed.

409
00:34:02.750 --> 00:34:07.540
Right? So devtools will tell you this, it
just doesn't show up as a component of the

410
00:34:07.540 --> 00:34:10.770
paint time. So if you moused over this image
in devtools, you will see that it's being

411
00:34:10.770 --> 00:34:16.679
displayed at 300 by 300 pixels, but in fact
it's a 512 by 512 pixel image. Again, like

412
00:34:16.679 --> 00:34:20.589
that JPEG scale probably doesn't seem like
a big deal, but it starts to become a big

413
00:34:20.589 --> 00:34:25.659
deal when you start thinking about things
on the order of milliseconds, right? Because

414
00:34:25.659 --> 00:34:31.739
a 40-millisecond image resizing operation
actually becomes quite painful. So from the

415
00:34:31.739 --> 00:34:35.929
good version to the bad version that I was
showing earlier, in addition to making those

416
00:34:35.929 --> 00:34:40.369
two style changes, I also resized all the
images so that they were displaying natively.

417
00:34:40.369 --> 00:34:44.829
This is a simple trick any of you can pull
because this has no visual impact, right?

418
00:34:44.829 --> 00:34:48.720
This is just a perf point --
&gt;&gt;Nat Duca: But it will cause jank. Most websites,

419
00:34:48.720 --> 00:34:53.509
this is a really common one, so go -- go to
your websites now.

420
00:34:53.509 --> 00:34:54.609
&gt;&gt;Tom Wiltzius: So this is the kind of thing
--

421
00:34:54.609 --> 00:35:00.239
&gt;&gt;Nat Duca: Fix it, okay?
&gt;&gt;Tom Wiltzius: The point here, lest Nat get

422
00:35:00.239 --> 00:35:06.430
too emphatic, the point here is not here are
some magic bullets to go make your websites

423
00:35:06.430 --> 00:35:09.589
faster.
The point is the process, right? This is all

424
00:35:09.589 --> 00:35:14.749
about the tools that you can use and the techniques
that you can follow in order to figure out

425
00:35:14.749 --> 00:35:19.759
what's slowing down your site. Browsers evolve
really fast. And like -- to the people who

426
00:35:19.759 --> 00:35:21.700
are like trying to evolve the browser really
fast --

427
00:35:21.700 --> 00:35:25.619
&gt;&gt;Nat Duca: To blame.
&gt;&gt;Tom Wiltzius: Right. So all of the specifics

428
00:35:25.619 --> 00:35:29.269
of what we're talking about here, the drop
shadows, the background gradients, the image

429
00:35:29.269 --> 00:35:33.339
resizing, like we are actually working actively
working on making all of this faster, so hopefully

430
00:35:33.339 --> 00:35:36.710
in six months they aren't going to be a problem.
&gt;&gt;Nat Duca: But then there will be another

431
00:35:36.710 --> 00:35:41.289
style or another new hotness and that one
will be tickling the corner case in the browser

432
00:35:41.289 --> 00:35:44.729
and it will make the browser sneeze or it
will be fast in IE or fast in Chrome.

433
00:35:44.729 --> 00:35:46.809
&gt;&gt;Tom Wiltzius: Right.
&gt;&gt;Nat Duca: It's this wild world out there.

434
00:35:46.809 --> 00:35:52.160
&gt;&gt;Tom Wiltzius: Browser variation, also huge,
right? Like, as we care more and more about

435
00:35:52.160 --> 00:35:55.769
performance on the Web, like it starts to
become a problem that like different browsers

436
00:35:55.769 --> 00:35:57.979
do things slightly differently, et cetera,
et cetera.

437
00:35:57.979 --> 00:36:04.979
So the point is use the tools. Like start
to train your eye to notice jank. Follow the

438
00:36:05.210 --> 00:36:09.819
architectural best practices that we have
laid out, because these are true across browsers

439
00:36:09.819 --> 00:36:15.479
and will be true across time, too. Use requestAnimationFrame,
use CSS animation, make sure you don't have

440
00:36:15.479 --> 00:36:19.890
like one-second long parsing JavaScript operation
going on.

441
00:36:19.890 --> 00:36:21.349
&gt;&gt;Nat Duca: Rendering.
&gt;&gt;Tom Wiltzius: Right.

442
00:36:21.349 --> 00:36:25.119
I mean, like kick stuff to worker threads,
right, or like break stuff into queues and

443
00:36:25.119 --> 00:36:30.650
yields, right, like anything that you can
do to like not clog the main thread with all

444
00:36:30.650 --> 00:36:35.819
of the other crap your other applications
are doing is good, right? But again, the specifics

445
00:36:35.819 --> 00:36:39.099
are all going to change.
So once you start to notice Jank, you're going

446
00:36:39.099 --> 00:36:42.789
to see it everywhere, and hopefully you've
got a passion for making things faster, you

447
00:36:42.789 --> 00:36:46.890
want to make your site faster, et cetera,
et cetera, so you're going to use the devtools

448
00:36:46.890 --> 00:36:50.460
timeline, you're going to use about tracing,
you're going to do this funny trick we did

449
00:36:50.460 --> 00:36:56.950
where we just bisecting down what's slow by
turning things off and re-enabling them, and

450
00:36:56.950 --> 00:37:03.039
with that, hopefully you'll be better equipped
than you were before to make this stuff fast.

451
00:37:03.039 --> 00:37:08.970
If you're hungry for more, these slides and
other resources are off of Jankfree.com, and

452
00:37:08.970 --> 00:37:12.710
we are actually going to be -- we're going
to take questions in a couple of minutes,

453
00:37:12.710 --> 00:37:16.819
but we're also going to be at office hours
in the Chrome area, just around the corner,

454
00:37:16.819 --> 00:37:22.499
I think, right after this talk. We like doing
this. If you have a site that's janky, and

455
00:37:22.499 --> 00:37:27.130
you want to come by, like, we'll take a crack
at speeding it up. We'd love to do that, like,

456
00:37:27.130 --> 00:37:32.039
for an audience, too, so if anyone wants to
come by and try that, we'll give it a shot,

457
00:37:32.039 --> 00:37:37.500
and with that, I think we're going to say
thanks, and take questions...

458
00:37:37.500 --> 00:37:40.710
[ Applause ]
Anyone got anything?

459
00:37:40.710 --> 00:37:46.329
&gt;&gt;&gt; I have one.
&gt;&gt;Tom Wiltzius: Yeah, please.

460
00:37:46.329 --> 00:37:53.329
&gt;&gt;&gt; The CSS animation transition threading,
will that or does that apply to Web view?

461
00:37:57.569 --> 00:38:04.569
&gt;&gt;Nat Duca: Talking about Android Webview?
So, you know, the Web moves really fast and

462
00:38:05.229 --> 00:38:12.229
there are like a zillion different ports,
and CSS spec in general, the animation spec,

463
00:38:12.630 --> 00:38:17.940
it allows this, so it's good to design for
even if it's not working today, it will start

464
00:38:17.940 --> 00:38:20.539
working everywhere within the next, you know
--

465
00:38:20.539 --> 00:38:22.470
&gt;&gt;Tom Wiltzius: Yeah.
&gt;&gt;&gt; Nat Duca: But this is very much our plan.

466
00:38:22.470 --> 00:38:25.700
The next soon; that's a unit of time. &gt;&gt;Tom
Wiltzius: Yeah, and like there is going to

467
00:38:25.700 --> 00:38:30.299
be other stuff like this, like basically we're
trying to kind of move away from the model

468
00:38:30.299 --> 00:38:35.729
of everything happens on the single thread
in the renderer, right, and this is kind of

469
00:38:35.729 --> 00:38:41.079
the beginning of that, but there will be more
things like this as well, so, yeah -- please,

470
00:38:41.079 --> 00:38:43.539
yeah.
&gt;&gt;&gt; So one of the use cases between mobile

471
00:38:43.539 --> 00:38:48.650
browsers and desktop browsers is that mobile
browsers tend to zoom a lot, right? So what

472
00:38:48.650 --> 00:38:53.900
can you say about that and handling that,
like your image case, it's useless if it's

473
00:38:53.900 --> 00:38:59.109
only 300 x 300 if you're actually zooming
in, you cant actually see that extra detail.

474
00:38:59.109 --> 00:39:04.200
&gt;&gt;Tom Wiltzius: Uh-huh, yeah, so I would say
-- you might also say like for high resolution

475
00:39:04.200 --> 00:39:10.130
screens like I want that image to be able
to be resized at a larger resolution, right?

476
00:39:10.130 --> 00:39:15.059
Like there are a lot of cases where you're
going to make tradeoffs between like quality

477
00:39:15.059 --> 00:39:19.460
essentially and performance, right, like these
things are almost always going to be in tension.

478
00:39:19.460 --> 00:39:23.940
I think in that case, you probably are going
to have to decide where on that --

479
00:39:23.940 --> 00:39:30.220
&gt;&gt;Nat Duca: You're totally right. Mobile browsers
are the forefront of awesomeness in terms

480
00:39:30.220 --> 00:39:33.539
of like stuff behind the scenes.
&gt;&gt;Tom Wiltzius: Like PERF winds because the

481
00:39:33.539 --> 00:39:37.470
part --
&gt;&gt;Nat Duca: So that will bite you in the case

482
00:39:37.470 --> 00:39:44.470
of a pinch zoom, but mobile browsers have
-- especially Chrome Android has some very

483
00:39:44.950 --> 00:39:51.680
severe magic so that you wouldn't even notice
this in the first place during a pinch zoom.

484
00:39:51.680 --> 00:39:56.170
We'll probably blog about the magic at some
point, but essentially, you know, when you

485
00:39:56.170 --> 00:40:03.170
use Chrome Android, you can time it, you can
pinch zoom, and you'll actually see that in

486
00:40:03.569 --> 00:40:04.509
that case you won't get a jank and so then
you won't care. That's the best answer I can

487
00:40:04.509 --> 00:40:05.479
give you.
&gt;&gt;Tom Wiltzius: We can talk more about that

488
00:40:05.479 --> 00:40:10.450
at office hours. The full -- the full sort
of magic explanation is really complicated.

489
00:40:10.450 --> 00:40:14.940
We'll be happy to talk about it more.
&gt;&gt;Nat Duca: Measure.

490
00:40:14.940 --> 00:40:19.210
&gt;&gt;Tom Wiltzius: Yeah.
&gt;&gt;&gt; Great presentation. You hinted at some

491
00:40:19.210 --> 00:40:24.109
more tools that you were going to be adding
to the frame view and the profiler, can you

492
00:40:24.109 --> 00:40:26.369
give us some hints as in updates on what those
are going to be?

493
00:40:26.369 --> 00:40:28.119
&gt;&gt;Nat Duca: Well, how about you tell us what
you want.

494
00:40:28.119 --> 00:40:34.829
&gt;&gt;&gt; I would love to be able to see the element
that takes the longest and just be able to

495
00:40:34.829 --> 00:40:38.140
go right to it.
&gt;&gt;Tom Wiltzius: Right, yeah. That sounds cool.

496
00:40:38.140 --> 00:40:40.809
&gt;&gt;Nat Duca: We should totally do that.
&gt;&gt;Tom Wiltzius: Should tell that to Pavel.

497
00:40:40.809 --> 00:40:45.749
&gt;&gt;Nat Duca: We're on the team and we're pushing--
&gt;&gt;Tom Wiltzius: We bug Pavel who is standing

498
00:40:45.749 --> 00:40:49.249
in the back, and just talk about devtools
all the time for like -- yeah, we totally

499
00:40:49.249 --> 00:40:52.309
want things like this.
&gt;&gt;&gt; Maybe line numbers and like function -- or

500
00:40:52.309 --> 00:40:55.719
functions that take the longest time which
is where you're spending the most time instead

501
00:40:55.719 --> 00:41:00.519
of JavaScript functions would be awesome.
&gt;&gt;Nat Duca: So my hope, and my boss -- my

502
00:41:00.519 --> 00:41:04.640
actual boss is in this room, so I hope to
be able to stand here next year and instead

503
00:41:04.640 --> 00:41:08.039
of having to say, oh, look at this big green
thing, and then spend -- how long did we spend,

504
00:41:08.039 --> 00:41:13.289
like 20 minutes trying to explain what was
slow about the -- I'll push a button and it

505
00:41:13.289 --> 00:41:17.109
will be like that one, that would be great.
Whether we can get there, yeah, TBD, but that

506
00:41:17.109 --> 00:41:20.769
would be a nice thing.
&gt;&gt;Tom Wiltzius: Definitely -- definitely granularity

507
00:41:20.769 --> 00:41:26.630
in like paint cost is something we're looking
at. I think like some of the -- some of the

508
00:41:26.630 --> 00:41:30.719
JavaScript stuff may be better served by improving
the profiler than improving timeline, right,

509
00:41:30.719 --> 00:41:34.769
but, like it's a point well taken.
&gt;&gt;&gt; Great, thanks again.

510
00:41:34.769 --> 00:41:40.579
&gt;&gt;Nat Duca: Feel free to file new.crbug.com,
because we really do read all that stuff,

511
00:41:40.579 --> 00:41:45.640
and so like crazy ideas are awesome, because
we can tell you you're crazy, but then we'll

512
00:41:45.640 --> 00:41:52.640
listen, and make a note, we'll try to do it.
&gt;&gt;&gt; So this trace and recording, they really

513
00:41:53.979 --> 00:41:59.819
slow down the Web page? So if I disable that,
will the Web page work faster?

514
00:41:59.819 --> 00:42:05.479
&gt;&gt;Tom Wiltzius: In some cases, yeah, like
so you even saw like Nat at some point during

515
00:42:05.479 --> 00:42:08.989
his demo, was like, yeah, this still looks
-- even though I've disabled my heavy onscroll

516
00:42:08.989 --> 00:42:15.989
handler and my costly CSS styles, it's still
a little janky, and as soon as you close devtools,

517
00:42:16.249 --> 00:42:21.650
it got a lot smoother, so there is some instrumentation
overhead especially with devtools. That's

518
00:42:21.650 --> 00:42:28.650
going to be fixed. Pavel is going to fix that.
&gt;&gt;Nat Duca: So the high level is -- we won't

519
00:42:28.690 --> 00:42:32.029
-- we're trying not build things that have
those corners. Right?

520
00:42:32.029 --> 00:42:34.900
When you're using -- this is bleeding edge,
this stuff that we showed today, it's the

521
00:42:34.900 --> 00:42:36.329
--
&gt;&gt;Tom Wiltzius: Like this is yesterday's Canary.

522
00:42:36.329 --> 00:42:42.219
&gt;&gt;Nat Duca: This is like the Canary. By the
time this is stable, it will be totally awesome,

523
00:42:42.219 --> 00:42:46.499
and you may hit a corner case, but it's very,
very unlikely. Does that answer your question?

524
00:42:46.499 --> 00:42:51.109
&gt;&gt;Tom Wiltzius: And there should be -- there
should be like -- there is sufficient granularity

525
00:42:51.109 --> 00:42:55.489
in the timeline already that like -- we saw
some problems where like there's -- there's

526
00:42:55.489 --> 00:42:59.130
some instrumentation overhead and you don't
get the frame times you want, but we still

527
00:42:59.130 --> 00:43:04.559
know pretty well how long the paints take,
for instance, and that kind of thing shouldn't

528
00:43:04.559 --> 00:43:11.309
be as dramatically affected by tool overhead.
&gt;&gt;&gt; I still cannot use it for stats.

529
00:43:11.309 --> 00:43:12.229
&gt;&gt;Nat Duca: What's that?
&gt;&gt;&gt; I still cannot use it for stats?

530
00:43:12.229 --> 00:43:15.390
&gt;&gt;Tom Wiltzius: You can't maybe use it for,
in that case, like frame time stats, but you

531
00:43:15.390 --> 00:43:18.869
can use it for like -- if you cut your paint
time in half, you have cut your paint time

532
00:43:18.869 --> 00:43:21.160
in half.
&gt;&gt;&gt; I cannot save my page when they're like

533
00:43:21.160 --> 00:43:23.940
60 frames per second.
&gt;&gt;Nat Duca: Yeah, you can.

534
00:43:23.940 --> 00:43:29.559
&gt;&gt;Tom Wiltzius: You can see that within a
frame you didn't take -- like your page only

535
00:43:29.559 --> 00:43:36.559
consumed whatever, like ten milliseconds worth
of stuff, right, and then if you close devtools

536
00:43:38.049 --> 00:43:40.569
and it's fast and you're good, right.
&gt;&gt;&gt; But if it's recording then --

537
00:43:40.569 --> 00:43:44.829
&gt;&gt;Nat Duca: It's not that -- it's not that
heavy and it's not on that process, especially

538
00:43:44.829 --> 00:43:48.309
like -- yes, on an Android you might get a
slight, slight penalty, but to be totally

539
00:43:48.309 --> 00:43:55.269
honest, by the time we're done, it should
be maybe one or two percent overhead, which

540
00:43:55.269 --> 00:43:59.630
one or two percent overhead on 16 milliseconds
is nonzero, but it's not so much that I think

541
00:43:59.630 --> 00:44:06.630
it will perturb the average Web page enough
that you'll notice, okay?

542
00:44:07.630 --> 00:44:09.029
&gt;&gt;&gt; Yeah, thanks.
&gt;&gt;&gt; Awesome presentation, awesome tool, totally

543
00:44:09.029 --> 00:44:16.029
stoked that we have it. My question is now
we have high DPI devices, not necessarily

544
00:44:18.349 --> 00:44:20.349
Chrome, I mean --
&gt;&gt;Tom Wiltzius: Yeah, sure.

545
00:44:20.349 --> 00:44:23.009
&gt;&gt;&gt; Like the iPhone. And so using background
size, you need to use background size to take

546
00:44:23.009 --> 00:44:28.049
these huge images so that they're high DPI
in your example -- so is there any way to

547
00:44:28.049 --> 00:44:33.380
measure it on -- like I know your tools only
work for Chrome, but how can we force it into

548
00:44:33.380 --> 00:44:37.979
a high DPI without buying the new MacBook
Pro that's higher DPI?

549
00:44:37.979 --> 00:44:42.180
&gt;&gt;Nat Duca: So probably a question for Pavel,
who you could turn around and walk to --

550
00:44:42.180 --> 00:44:46.640
&gt;&gt;Tom Wiltzius: Well, I mean, I can give you
some starter hints. One, there's a way to

551
00:44:46.640 --> 00:44:48.700
turn, if you've got a non-high resolution
MacBook, you can flip it, if you install some

552
00:44:48.700 --> 00:44:53.599
tools, you can flip it into like a fake high
DPI mode, won't be as accurate because you

553
00:44:53.599 --> 00:44:57.849
can't get the whole thing so you can't get
like the cost of full page repaints, for instance,

554
00:44:57.849 --> 00:45:00.749
because it's only a quarter of the screen,
but at least you can see how things will look

555
00:45:00.749 --> 00:45:06.359
and you can get a sense for some of the timing
which is a start. There are ways to avoid

556
00:45:06.359 --> 00:45:11.519
like using JavaScript and stuff, you can only
load like -- I think this was the first part

557
00:45:11.519 --> 00:45:14.999
of your question, like you can only load high
resolution assets if you need them.

558
00:45:14.999 --> 00:45:19.910
You can use media queries for instance, so
that will sort of avoid unnecessarily taking

559
00:45:19.910 --> 00:45:26.910
the hits, and as for profiling what the hit
is like, you can kind of again fake it, but

560
00:45:27.529 --> 00:45:30.440
to really test, yeah, you probably got to
buy a new computer.

561
00:45:30.440 --> 00:45:34.170
&gt;&gt;Nat Duca: I do have one like ignoring the
image discussion. There is one caveat for

562
00:45:34.170 --> 00:45:41.170
all of you, which is high DPI means that your
paint times double, not exactly, but that's

563
00:45:41.239 --> 00:45:48.239
your risk, right? You're painting twice -- well,
four times as much, look at me doing math.

564
00:45:48.640 --> 00:45:49.789
&gt;&gt;&gt; Sometimes it's quadruple.
&gt;&gt;Nat Duca: Yeah, no, this is me doing math

565
00:45:49.789 --> 00:45:55.779
in a really funny way. Four is the number.
I shouldn't work for Google, should I?

566
00:45:55.779 --> 00:45:59.229
&gt;&gt;Tom Wiltzius: High DPI -- the point is high
DPI stuff is going to have significant --

567
00:45:59.229 --> 00:46:04.559
&gt;&gt;Nat Duca: So you gotta keep your base loads.
So if you're like on this MacBook Pro, this

568
00:46:04.559 --> 00:46:08.999
is like a two-year-old MacBook, and it's really
chugging and it's hitting like fifteen millisecond

569
00:46:08.999 --> 00:46:13.289
paints, then you're really, really -- this
is not going to work on a good -- on one of

570
00:46:13.289 --> 00:46:15.450
the new ones because the paint is only going
to go up. It might be a slightly faster Intel

571
00:46:15.450 --> 00:46:15.849
CPU --
&gt;&gt;Tom Wiltzius: About four times faster.

572
00:46:15.849 --> 00:46:22.029
&gt;&gt;Nat Duca: -- but you got to just -- you
gotta keep it small, right, and give yourself

573
00:46:22.029 --> 00:46:24.529
head room for the higher end devices. And
the lower end.

574
00:46:24.529 --> 00:46:27.599
&gt;&gt;Tom Wiltzius: Yeah, and I mentioned this
-- I mentioned this a little like really briefly

575
00:46:27.599 --> 00:46:31.309
as an aside during the presentation, but I
do want to put a plug in, too, for like most

576
00:46:31.309 --> 00:46:35.640
of you are Web developers, most of you have
very fast, very fancy computer, like think

577
00:46:35.640 --> 00:46:41.930
about the computers your users have because
they are not MacBook Pros, right? And like

578
00:46:41.930 --> 00:46:47.549
we collect stats, like anonymous stats about
like the common sort of like system configurations

579
00:46:47.549 --> 00:46:52.539
of Chrome users, and like I'll tell you, like,
the average Chrome user has like a really

580
00:46:52.539 --> 00:46:57.009
crappy three-year-old laptop, right? And like
this is -- this is what the internet population

581
00:46:57.009 --> 00:47:02.789
is, so for some things this doesn't matter,
but for like really sensitive performance

582
00:47:02.789 --> 00:47:09.309
stuff, like I'm trying to make a 16 millisecond
paint -- frame budget, it's huge, right?

583
00:47:09.309 --> 00:47:13.309
So think about that. Like I wouldn't even
recommend maybe testing on not your development

584
00:47:13.309 --> 00:47:19.319
machine for instance, but that's just me.
&gt;&gt;&gt; Literally exactly on that point, and maybe

585
00:47:19.319 --> 00:47:22.599
this for Pavel.
&gt;&gt;Tom Wiltzius: He's not a plant.

586
00:47:22.599 --> 00:47:25.829
&gt;&gt;&gt; Can you guys just add a --
&gt;&gt;Nat Duca: Slow me down --

587
00:47:25.829 --> 00:47:29.799
&gt;&gt;&gt; Yeah, exactly.
&gt;&gt;Tom Wiltzius: We talked about it. It's a

588
00:47:29.799 --> 00:47:33.709
little hard to do super accurately. We've
talked about like making it do something like,

589
00:47:33.709 --> 00:47:39.299
ah, just like paint everything ten times,
right? Because that way even small paint time

590
00:47:39.299 --> 00:47:46.109
problems will be really (inaudible), I think
we probably need more fine grained instrumentation

591
00:47:46.109 --> 00:47:49.029
before that is going to be really useful.
&gt;&gt;Nat Duca: That is geeky cool. We should

592
00:47:49.029 --> 00:47:51.039
figure out how to make something with your
intent to work.

593
00:47:51.039 --> 00:47:53.969
&gt;&gt;Tom Wiltzius: It's a good idea. I think
your intent is spot on.

594
00:47:53.969 --> 00:47:56.729
&gt;&gt;Nat Duca: I think your intent is really
key. You want to be able to, from your computer,

595
00:47:56.729 --> 00:48:02.640
understand the performance of this content
somewhere else, and that's hard right now,

596
00:48:02.640 --> 00:48:06.149
so maybe we should figure out maybe as a community
how to do better there.

597
00:48:06.149 --> 00:48:08.869
&gt;&gt;&gt; Yeah, I mean, you know, Pavel was saying
in the previous session, you know, the devtools,

598
00:48:08.869 --> 00:48:14.140
the realtime and all that kind of stuff, you
know, having to right now have a bunch of

599
00:48:14.140 --> 00:48:18.400
VMs or a bunch of like Chrome books, and these
kind of things, it just doesn't really scale,

600
00:48:18.400 --> 00:48:23.789
versus I have a slider in my devtools, that
I can be like okay, I want to run at 20%,

601
00:48:23.789 --> 00:48:27.799
see how this feels, oh, I can have the -- all
the same timelines, all these kinds of things,

602
00:48:27.799 --> 00:48:32.299
now the ability to improve my performance
on, you know, substandard machines dramatically

603
00:48:32.299 --> 00:48:35.279
improves.
&gt;&gt;Nat Duca: Great point. I totally hear you.

604
00:48:35.279 --> 00:48:36.940
Thank you.
&gt;&gt;Tom Wiltzius: Yeah.

605
00:48:36.940 --> 00:48:42.359
&gt;&gt;&gt; I have two questions. First one was so
an example you had with like drop shadow and

606
00:48:42.359 --> 00:48:45.160
(indiscernible) HTML5, you said you replaced
them with images to improve the performance,

607
00:48:45.160 --> 00:48:49.130
is that right? &gt;&gt;&gt; Yeah, but that is obviously
not ideal from like a Web development.

608
00:48:49.130 --> 00:48:53.119
&gt;&gt;Tom Wiltzius: Like the -- like the -- like
the spec people are going to kill me, right,

609
00:48:53.119 --> 00:48:55.500
like I'm just like -- I'm just saying don't
use any of this, it's not fast enough.

610
00:48:55.500 --> 00:48:58.640
&gt;&gt;&gt; Right, right, so like I mean are there
other techniques we can use now or is there

611
00:48:58.640 --> 00:49:01.959
something browsers could do to optimize that
more? Because like I would assume the browsers

612
00:49:01.959 --> 00:49:05.369
would pre-render shadows and cache them and
not have to re-render them all the time.

613
00:49:05.369 --> 00:49:07.839
&gt;&gt;Tom Wiltzius: Yeah. No, there are things
like that that we're doing, and this is why

614
00:49:07.839 --> 00:49:13.200
we ended like with don't listen to the specifics
because they're going to change, the way -- like

615
00:49:13.200 --> 00:49:17.729
there are even bigger changes than that afoot
in like Chrome's rendering pipeline, to some

616
00:49:17.729 --> 00:49:21.279
extent, and there's going to be caching at
like a much higher level, where we like stuff

617
00:49:21.279 --> 00:49:25.809
on the GPU, so we don't need to repaint that
anymore, and like, yeah, that's all going

618
00:49:25.809 --> 00:49:32.190
to be happening, so like it may end up being
that the one-time cost of like rendering those

619
00:49:32.190 --> 00:49:37.009
shadows, say, actually turns out to be pretty
insignificant for you, and so I guess the

620
00:49:37.009 --> 00:49:41.700
short answer is, yes, the browser is going
to try to take care of this for you. I don't

621
00:49:41.700 --> 00:49:46.940
-- I don't want you to sweat like drop shadow
too much, like this was very much a demo that

622
00:49:46.940 --> 00:49:51.229
was meant to show you, like, how to find something
that is taking a disproportionate amount of

623
00:49:51.229 --> 00:49:56.459
time and then dealing with it right now, right?
But I absolutely agree that the browser should

624
00:49:56.459 --> 00:50:00.890
be solving this problem, and we're trying.
&gt;&gt;&gt; And the other quick question is one of

625
00:50:00.890 --> 00:50:06.660
your slides you mentioned something like performance.webkitnow,
but I don't think you talked about it. I was

626
00:50:06.660 --> 00:50:08.950
just curious what that was.
&gt;&gt;Nat Duca: Yeah, we slipped that in there.

627
00:50:08.950 --> 00:50:14.079
You've got a good eye. You can Google it.
Date.now is how we've always measured time,

628
00:50:14.079 --> 00:50:18.719
and something that we slipped out there, and
it's going to be pretty much everywhere including

629
00:50:18.719 --> 00:50:25.719
IE, is window.performance.now. There's this
whole prefix game, right? But it gives you

630
00:50:25.920 --> 00:50:30.380
time at a submicrosecond resolution, it gives
you the fastest that your computer can give

631
00:50:30.380 --> 00:50:36.430
you, so now you can timestamp individual functions
even and get reasonably good numbers out of

632
00:50:36.430 --> 00:50:40.859
it. Totally use it. We used it, but, you know,
we didn't want to go into too much detail,

633
00:50:40.859 --> 00:50:45.130
but it's a pretty cool addition to the platform.
And it's very useful for things like this,

634
00:50:45.130 --> 00:50:49.519
when you're thinking on like -- like --
&gt;&gt;&gt; A millisecond, six percent error.

635
00:50:49.519 --> 00:50:54.869
&gt;&gt;Tom Wiltzius: Exactly, correct, yeah, it
ends up being very important to have submillisecond

636
00:50:54.869 --> 00:51:01.549
precision and so we're finally bringing that
to the browser which is good. We're actually

637
00:51:01.549 --> 00:51:05.130
going to even change like out of -- for any
of you who already knew about request animation

638
00:51:05.130 --> 00:51:08.890
frame and think like, oh, this is all old
hat, like we're actually changing the request

639
00:51:08.890 --> 00:51:14.410
animation frame specs slightly to use the
new high resolution timer, so like you get

640
00:51:14.410 --> 00:51:19.019
a time stamp with the rAF callback and it
used to be measured in milliseconds, since

641
00:51:19.019 --> 00:51:24.880
EPOC now it's measured in whatever the high
resolution timer is which is like since page

642
00:51:24.880 --> 00:51:30.829
load, so if you were using it already, check
your sites.

643
00:51:30.829 --> 00:51:32.599
&gt;&gt;Nat Duca: Did you get the answer you're
looking for?

644
00:51:32.599 --> 00:51:32.849
&gt;&gt;&gt; Yeah.
&gt;&gt;Nat Duca: Great. Thank you.

645
00:51:32.749 --> 00:51:35.999
&gt;&gt;&gt; Actually part of my question so that you
could get some metrics from the field, with

646
00:51:35.999 --> 00:51:41.469
this kind of stuff. It's nice as a developer,
but if the device diversity is so huge, especially

647
00:51:41.469 --> 00:51:46.249
with the new GL stuff, because I'm trying
to make UIs in GL now, and it's really cool

648
00:51:46.249 --> 00:51:50.160
to beat the 60 fps one, but it's really terrible
if you have to do it in FireFox as well and

649
00:51:50.160 --> 00:51:55.609
all of these other things. And so my question
to you is how do you see the 60 fps domain

650
00:51:55.609 --> 00:51:59.569
with browser diversity, because you guys are
optimizing in ways that you have to adapt

651
00:51:59.569 --> 00:52:02.729
to to get that 60 fps, and everybody else
is doing something.

652
00:52:02.729 --> 00:52:08.640
&gt;&gt;&gt; Well, actually, so in theory, let me game
something out with you, and let's hear your

653
00:52:08.640 --> 00:52:14.170
feedback. Like FireFox is actually like at
this minute, the Mozilla team is adjusting

654
00:52:14.170 --> 00:52:17.390
their rAF implementation to do a lot better.
It used to be that their rAF implementation

655
00:52:17.390 --> 00:52:24.390
didn't actually hit 60, and they're changing
it to actually hit 60 as we speak, so good

656
00:52:26.809 --> 00:52:30.789
content that does what we think the right
thing is for the platform then drives the

657
00:52:30.789 --> 00:52:37.009
browser vendors to optimize -- or to make
things work correctly. All of this stuff is

658
00:52:37.009 --> 00:52:41.420
so new that there's a lot of diversity in
the correctness of the implementations. So

659
00:52:41.420 --> 00:52:48.239
my theory, may be wrong, is that this will
get a lot better in about a year as people

660
00:52:48.239 --> 00:52:53.109
really catch up in their implementation quality
of the spec. I think the spec's about right,

661
00:52:53.109 --> 00:52:58.069
plus or minus some nasty details, but we need
to really polish.

662
00:52:58.069 --> 00:53:01.540
&gt;&gt;&gt; Right.
&gt;&gt;Nat Duca: Is that responsive to your question?

663
00:53:01.540 --> 00:53:04.089
&gt;&gt;&gt; You're optimizing, right, so you're profiling
and optimizing, and that means that you get

664
00:53:04.089 --> 00:53:07.670
case specific for browsers to try to make
things faster. I'm just wondering how you

665
00:53:07.670 --> 00:53:09.859
see that evolve? Is it going to stay within
the spec or --

666
00:53:09.859 --> 00:53:12.819
&gt;&gt;Tom Wiltzius: Yeah, I mean, I think at a
meta level, like you're absolutely right,

667
00:53:12.819 --> 00:53:19.259
that this is -- this is a problem for the
ecosystem, right, like the potential for performance

668
00:53:19.259 --> 00:53:23.630
profile divergence, amongst like the browser
vendors is like potentially very serious,

669
00:53:23.630 --> 00:53:29.900
right, and like we actually have probably
a lot more in common with FireFox than we

670
00:53:29.900 --> 00:53:34.599
do with say like IE, but like you want your
stuff to work on IE too, and like it's implemented

671
00:53:34.599 --> 00:53:35.509
very differently. I don't -- we don't have
--

672
00:53:35.509 --> 00:53:40.529
&gt;&gt;&gt; Are you responding to the 60 fps thing?
&gt;&gt;Tom Wiltzius: I use usually like super key

673
00:53:40.529 --> 00:53:44.619
nonperformance now. There's super key nonperformance
in spec compliance, and like they don't move

674
00:53:44.619 --> 00:53:47.900
as fast as we do, because they don't want
to drive things forward as quickly, but like

675
00:53:47.900 --> 00:53:51.940
they're -- they -- they were very support
of cross animation frame from the -- this

676
00:53:51.940 --> 00:53:54.930
is --
&gt;&gt;Nat Duca: Let me be clear, at least to my

677
00:53:54.930 --> 00:53:58.200
understanding, there are two -- there's a
branch here, so there's the techniques like

678
00:53:58.200 --> 00:54:04.719
request animation frame, and keeping within
a budget. That applies to IE as well, especially

679
00:54:04.719 --> 00:54:11.719
IE that have request animation frame which
is I believe nine plus. Might be ten, but

680
00:54:12.599 --> 00:54:15.839
I'm sorry, you always want to keep that 6,
that is not a fact of a browser, that's a

681
00:54:15.839 --> 00:54:22.839
fact of these stupid display thingies that
we love. The place where there is browser-to-browser

682
00:54:23.200 --> 00:54:28.309
divergence is which CSS effects get you in
trouble or which DOM manipulations? Or to

683
00:54:28.309 --> 00:54:33.819
a certain extent GLL, but that is usually
just because of GPUs.

684
00:54:33.819 --> 00:54:36.390
&gt;&gt;&gt; I missed it. Is that going to go into
IE at some point?

685
00:54:36.390 --> 00:54:37.939
&gt;&gt;Tom Wiltzius: Ask them.
&gt;&gt;Nat Duca: That's way above my pay grade.

686
00:54:37.939 --> 00:54:43.569
&gt;&gt;&gt; I mean, if we're optimizing we have to
sort of look at what we're targeting, right?

687
00:54:43.569 --> 00:54:50.569
&gt;&gt;Tom Wiltzius: Yeah, totally, I -- I mean,
it is my sincere hope that IE adopts Web GL,

688
00:54:50.630 --> 00:54:55.759
they're the only browser who hasn't so far,
and I say this as the like the Chrome graphics

689
00:54:55.759 --> 00:54:56.319
PM. Obviously that's what I want.
&gt;&gt;&gt; Well, same here but --

690
00:54:56.319 --> 00:55:00.539
&gt;&gt;Tom Wiltzius: It is unclear what they're
going to do in like the 3D on the Web space.

691
00:55:00.539 --> 00:55:05.519
I think they will do something pretty soon
is my suspicion, but what it is, they're pretty

692
00:55:05.519 --> 00:55:08.170
quiet. I don't know.
&gt;&gt;&gt; Good stuff, guys.

693
00:55:08.170 --> 00:55:13.839
&gt;&gt;Nat Duca: Yeah, feel free to reach out.
&gt;&gt;Tom Wiltzius: We're happy to talk more about

694
00:55:13.839 --> 00:55:14.940
that kind of thing afterwards. Any other questions?
Otherwise we'll wrap up.

695
00:55:14.940 --> 00:55:18.519
&gt;&gt;Nat Duca: Thank you, and we'll be out in
the -- in the area where Chrome is if you

696
00:55:18.519 --> 00:55:20.780
want to bring us over a slow website.

WEBVTT

1
00:00:00.000 --> 00:00:04.820

2
00:00:04.820 --> 00:00:07.460
CHRIS WILSON: Good afternoon
and welcome to Turning

3
00:00:07.460 --> 00:00:08.580
the Web Up to 11.

4
00:00:08.580 --> 00:00:09.800
I'm Chris Wilson.

5
00:00:09.800 --> 00:00:12.300
I'm a Developer Advocate
on the Chrome team.

6
00:00:12.300 --> 00:00:13.790
And I'm here to take you
on a journey through

7
00:00:13.790 --> 00:00:15.200
the Web Audio API.

8
00:00:15.200 --> 00:00:17.190
So if you didn't know what
I was going to talk

9
00:00:17.190 --> 00:00:19.950
about, now you do.

10
00:00:19.950 --> 00:00:22.780
I wanted to start by showing why
I'm so excited about the

11
00:00:22.780 --> 00:00:24.370
Web Audio API.

12
00:00:24.370 --> 00:00:28.300
When I first ran across the Web
Audio work, I got really

13
00:00:28.300 --> 00:00:30.400
excited because for the last
couple years, I've gotten

14
00:00:30.400 --> 00:00:33.070
really interested in building
and using software

15
00:00:33.070 --> 00:00:36.740
synthesizers, drum machines, all
kinds of production stuff,

16
00:00:36.740 --> 00:00:40.040
on desktop and also
on tablets.

17
00:00:40.040 --> 00:00:42.510
And I'd gotten really
excited about this.

18
00:00:42.510 --> 00:00:43.940
I wanted to start
building my own.

19
00:00:43.940 --> 00:00:46.900
And as I looked at the Web Audio
API, it looked super

20
00:00:46.900 --> 00:00:49.160
easy to do, super interesting.

21
00:00:49.160 --> 00:00:52.480
And I actually very quickly
realized that most of building

22
00:00:52.480 --> 00:00:55.860
a software synthesizer with
web audio ends up being a

23
00:00:55.860 --> 00:00:58.210
really big user interface
chore.

24
00:00:58.210 --> 00:01:00.810
And I'm not a great
UI designer.

25
00:01:00.810 --> 00:01:04.209
You'll probably notice
that during my deck.

26
00:01:04.209 --> 00:01:06.880
So I set my sights on a
different challenge.

27
00:01:06.880 --> 00:01:09.130
Because I wanted to do something
that was really

28
00:01:09.130 --> 00:01:11.790
pretty heavy duty with
audio processing.

29
00:01:11.790 --> 00:01:15.240
So I decided I would set my
sights on making robot voices.

30
00:01:15.240 --> 00:01:20.640
Or more particularly, building
a vocoder and trying to

31
00:01:20.640 --> 00:01:25.540
replicate Styx's seminal
1983 hit "Mr. Roboto."

32
00:01:25.540 --> 00:01:27.850
And I'm actually happy
to report that I've

33
00:01:27.850 --> 00:01:29.650
managed to do this.

34
00:01:29.650 --> 00:01:31.960
This is actually a vocoder
that I built.

35
00:01:31.960 --> 00:01:33.620
It's up on GitHub right now.

36
00:01:33.620 --> 00:01:35.210
There's a link to it at
the end of the deck.

37
00:01:35.210 --> 00:01:38.640
So you can go play with it
yourself, or fork it and do

38
00:01:38.640 --> 00:01:40.710
all kinds of interesting
things with it.

39
00:01:40.710 --> 00:01:45.225
So how many people know what a
vocoder is or how it works?

40
00:01:45.225 --> 00:01:48.730
Yeah, the guy on the Web Audio
team doesn't actually get to

41
00:01:48.730 --> 00:01:49.290
raise his hand.

42
00:01:49.290 --> 00:01:50.610
But I kind of figured.

43
00:01:50.610 --> 00:01:52.980
So I don't want to get
really deeply to

44
00:01:52.980 --> 00:01:54.770
vocoder theory or anything.

45
00:01:54.770 --> 00:01:59.090
Basically, what a vocoder does
is it takes one signal,

46
00:01:59.090 --> 00:02:01.260
generally called the modulator,
it's usually a

47
00:02:01.260 --> 00:02:02.030
vocal sample.

48
00:02:02.030 --> 00:02:04.290
Something like this--

49
00:02:04.290 --> 00:02:07.650
PLAYBACK: Four score and seven
years ago, our fathers brought

50
00:02:07.650 --> 00:02:09.830
forth on this continent.

51
00:02:09.830 --> 00:02:12.770
CHRIS WILSON: And it maps the
frequency characteristics of

52
00:02:12.770 --> 00:02:14.050
that sound over time.

53
00:02:14.050 --> 00:02:16.190
It chops it up into
frequency bands.

54
00:02:16.190 --> 00:02:18.570
And then it watches how
much energy is in

55
00:02:18.570 --> 00:02:20.040
each frequency band.

56
00:02:20.040 --> 00:02:22.890
And it maps it onto a different
signal, the carrier

57
00:02:22.890 --> 00:02:25.670
signal, which is usually
a synthesized sound.

58
00:02:25.670 --> 00:02:26.868
Something like this--

59
00:02:26.868 --> 00:02:28.540
[BUZZING NOISE]

60
00:02:28.540 --> 00:02:30.840
CHRIS WILSON: And I had
to tell the audio guys

61
00:02:30.840 --> 00:02:33.550
beforehand, No, that's not
something going wrong.

62
00:02:33.550 --> 00:02:34.720
That is actually what
it's supposed to

63
00:02:34.720 --> 00:02:36.630
sound like right now.

64
00:02:36.630 --> 00:02:37.900
It sounds really awful, right?

65
00:02:37.900 --> 00:02:40.580
But when you actually map the
frequency characteristics onto

66
00:02:40.580 --> 00:02:43.406
that sound, it ends up sounding
kind of like this--

67
00:02:43.406 --> 00:02:43.638
PLAYBACK: [ROBOT VOICE]

68
00:02:43.638 --> 00:02:46.150
Four score and seven years ago,
our fathers brought forth

69
00:02:46.150 --> 00:02:47.426
on this continent.

70
00:02:47.426 --> 00:02:47.910
[CONTINUES PLAYING
IN BACKGROUND]

71
00:02:47.910 --> 00:02:48.500
CHRIS WILSON: It's
kind of cool.

72
00:02:48.500 --> 00:02:51.550
It's actually somewhat
recognizable.

73
00:02:51.550 --> 00:02:56.030
Now the interesting thing about
this code, to me after

74
00:02:56.030 --> 00:02:59.810
having written it, is that this
is not being precomputed.

75
00:02:59.810 --> 00:03:02.030
This is actually
happening live.

76
00:03:02.030 --> 00:03:03.890
In fact, I can change
characteristics.

77
00:03:03.890 --> 00:03:06.040
Like I can detune the
voices being used.

78
00:03:06.040 --> 00:03:07.300
[VOICE SPEEDS UP]

79
00:03:07.300 --> 00:03:09.186
CHRIS WILSON: And change
how it sounds.

80
00:03:09.186 --> 00:03:14.240
[VOICE SLOWS DOWN]

81
00:03:14.240 --> 00:03:16.920
CHRIS WILSON: Or I can also
change what voices are being

82
00:03:16.920 --> 00:03:18.310
used to produce it.

83
00:03:18.310 --> 00:03:20.110
So if I grab and--

84
00:03:20.110 --> 00:03:25.351
[VOICE DEEPENS]

85
00:03:25.351 --> 00:03:26.630
CHRIS WILSON: I'm probably using
a different sample or

86
00:03:26.630 --> 00:03:28.780
something like that.

87
00:03:28.780 --> 00:03:31.260
So I have a lot of control
over what's going on.

88
00:03:31.260 --> 00:03:35.120
In fact, the only bit of my
JavaScript code that's running

89
00:03:35.120 --> 00:03:37.870
while this is going, is the
stuff used to animate the

90
00:03:37.870 --> 00:03:40.360
vocoder bands, how the frequency
bands are jumping

91
00:03:40.360 --> 00:03:44.180
around, and the input
and output signals.

92
00:03:44.180 --> 00:03:48.160
So the ability to build rich
audio applications like this.

93
00:03:48.160 --> 00:03:50.380
Because by the way, I'm
not an audio engineer.

94
00:03:50.380 --> 00:03:53.930
I'm not a digital signal
processing expert or anything.

95
00:03:53.930 --> 00:03:57.940
It did take me a lot of trial
and error to build this.

96
00:03:57.940 --> 00:04:01.950
But the ability to build rich
audio apps like this, without

97
00:04:01.950 --> 00:04:04.400
having a degree in audio
engineering, is why I'm so

98
00:04:04.400 --> 00:04:06.650
excited about the processing
capabilities here.

99
00:04:06.650 --> 00:04:10.580
100
00:04:10.580 --> 00:04:11.310
And I will stop that.

101
00:04:11.310 --> 00:04:12.560
Because you can go play
with it yourself.

102
00:04:12.560 --> 00:04:15.230
103
00:04:15.230 --> 00:04:17.079
Oops.

104
00:04:17.079 --> 00:04:19.890
Click on my slides here.

105
00:04:19.890 --> 00:04:22.940
So you might start out by
asking, why do we even need

106
00:04:22.940 --> 00:04:24.260
another API?

107
00:04:24.260 --> 00:04:27.510
We already have the HTML5
audio element.

108
00:04:27.510 --> 00:04:29.790
And I love the HTML5
audio element.

109
00:04:29.790 --> 00:04:32.220
Because it wraps everything
about audio--

110
00:04:32.220 --> 00:04:35.490
loading, decoding, and playing
audio-- all up into one easy,

111
00:04:35.490 --> 00:04:36.770
declarative step.

112
00:04:36.770 --> 00:04:36.970
Right?

113
00:04:36.970 --> 00:04:38.770
You stick an audio tag in.

114
00:04:38.770 --> 00:04:40.730
You tell it whether you want to
show the controls or not,

115
00:04:40.730 --> 00:04:43.620
whether you want to pre-load
it, give it the source, and

116
00:04:43.620 --> 00:04:44.380
you're good to go.

117
00:04:44.380 --> 00:04:45.455
Like I can--

118
00:04:45.455 --> 00:04:47.520
gonna turn my sound down
just a little here.

119
00:04:47.520 --> 00:04:50.610
120
00:04:50.610 --> 00:04:51.400
I click the button.

121
00:04:51.400 --> 00:04:52.360
[LASER SOUND]

122
00:04:52.360 --> 00:04:53.800
CHRIS WILSON: I probably
can turn it back up.

123
00:04:53.800 --> 00:04:54.760
[LASER SOUND]

124
00:04:54.760 --> 00:04:55.300
CHRIS WILSON: Click
the button.

125
00:04:55.300 --> 00:04:56.250
And it plays the sound.

126
00:04:56.250 --> 00:04:58.660
In fact, I even get built-in
scrubbing of the sound.

127
00:04:58.660 --> 00:05:00.132
So I can--

128
00:05:00.132 --> 00:05:02.460
if I stop hitting my
right button--

129
00:05:02.460 --> 00:05:03.300
[PLAYS END OF LASER SOUND]

130
00:05:03.300 --> 00:05:04.330
CHRIS WILSON: I can scrub
it to part of the

131
00:05:04.330 --> 00:05:06.230
sound and hit play.

132
00:05:06.230 --> 00:05:07.390
Now this is great.

133
00:05:07.390 --> 00:05:10.170
But the thing that you don't
get from the HTML5 audio

134
00:05:10.170 --> 00:05:14.220
element is you don't get
sample-accurate control over

135
00:05:14.220 --> 00:05:16.310
when the sound is going
to be played.

136
00:05:16.310 --> 00:05:19.120
And it really struggles with
scalability, when you have a

137
00:05:19.120 --> 00:05:21.760
whole bunch of sounds what you
want to play all at the same

138
00:05:21.760 --> 00:05:23.960
time or very close
to each other.

139
00:05:23.960 --> 00:05:27.290
It's kind of a challenge to
get it to scale to that.

140
00:05:27.290 --> 00:05:29.340
Now the Web Audio API is
designed a little bit

141
00:05:29.340 --> 00:05:29.750
differently.

142
00:05:29.750 --> 00:05:32.560
It's really designed around
this idea of having very

143
00:05:32.560 --> 00:05:35.330
precise timing of
lots of sounds.

144
00:05:35.330 --> 00:05:39.534
So I can play the same
sound sample.

145
00:05:39.534 --> 00:05:40.490
[LASER SOUND]

146
00:05:40.490 --> 00:05:42.460
CHRIS WILSON: But I can also
play it a lot of times.

147
00:05:42.460 --> 00:05:44.260
[MULTIPLE SIMULTANEOUS
LASER SOUNDS]

148
00:05:44.260 --> 00:05:48.050
CHRIS WILSON: And it's very
precise in timing as to when

149
00:05:48.050 --> 00:05:53.140
it's playing, exactly when
I hit the button.

150
00:05:53.140 --> 00:05:56.300
The Web Audio API also provides
a really rich audio

151
00:05:56.300 --> 00:06:00.640
pipeline for building effects
and filters and routing audio

152
00:06:00.640 --> 00:06:02.680
around in different
powerful ways.

153
00:06:02.680 --> 00:06:05.210
So adding an effect
to that same sound

154
00:06:05.210 --> 00:06:06.150
file is really easy.

155
00:06:06.150 --> 00:06:09.110
[LASER SOUND ECHOING]

156
00:06:09.110 --> 00:06:11.960
CHRIS WILSON: And then finally,
the Web Audio API

157
00:06:11.960 --> 00:06:15.240
builds in a bunch of hooks
so you can analyze, and

158
00:06:15.240 --> 00:06:18.090
visualize, and kind of
manipulate the data on the

159
00:06:18.090 --> 00:06:19.150
fly, as well.

160
00:06:19.150 --> 00:06:22.790
So it's really pretty easy
to build something like--

161
00:06:22.790 --> 00:06:24.470
[MUSIC PLAYING WITH
VISUAL ANALYZER]

162
00:06:24.470 --> 00:06:27.040
CHRIS WILSON: A visual
analyzer.

163
00:06:27.040 --> 00:06:28.640
I actually built this
visual analyzer

164
00:06:28.640 --> 00:06:30.280
special for this talk.

165
00:06:30.280 --> 00:06:31.210
And it didn't take very long.

166
00:06:31.210 --> 00:06:34.560
We're going to walk through the
code a little bit later.

167
00:06:34.560 --> 00:06:38.680
So looking at the API from the
top down, it's kind of

168
00:06:38.680 --> 00:06:41.820
surprising that it's actually
designed to be a relatively

169
00:06:41.820 --> 00:06:43.060
high-level API.

170
00:06:43.060 --> 00:06:47.820
It's really pretty easy to do
basic tasks in the API, like--

171
00:06:47.820 --> 00:06:49.150
PLAYBACK: Play sound now.

172
00:06:49.150 --> 00:06:50.430
CHRIS WILSON: Playing a sound.

173
00:06:50.430 --> 00:06:51.810
That's the code for
it right there.

174
00:06:51.810 --> 00:06:54.840
That's all that I needed to
do to play that sound.

175
00:06:54.840 --> 00:06:56.770
Because I'd already had the
buffer loaded and we'll talk

176
00:06:56.770 --> 00:06:58.390
about that.

177
00:06:58.390 --> 00:07:02.800
But even better than that, the
effects and filters engine

178
00:07:02.800 --> 00:07:06.210
doesn't require you to
be a DSP engineer.

179
00:07:06.210 --> 00:07:09.490
If you told me that in order to
build that vocoder I had to

180
00:07:09.490 --> 00:07:14.160
go build my own FFT algorithm
implementation, and come up

181
00:07:14.160 --> 00:07:16.450
with a bunch of matrices
and transforms, and

182
00:07:16.450 --> 00:07:18.810
stick it all together.

183
00:07:18.810 --> 00:07:21.200
I would have walked away and
done something else, frankly.

184
00:07:21.200 --> 00:07:24.700
Math is not my favorite thing
to do on a sunny afternoon.

185
00:07:24.700 --> 00:07:29.030
So I probably would have figured
out something else.

186
00:07:29.030 --> 00:07:32.290
But if you want to do that, if
you want to get right down

187
00:07:32.290 --> 00:07:35.980
into the guts and do your own
processing in JavaScript, on

188
00:07:35.980 --> 00:07:38.300
the fly, you absolutely
can do that with the

189
00:07:38.300 --> 00:07:40.950
Web Audio API, too.

190
00:07:40.950 --> 00:07:43.090
But most of the effects engine,
and certainly the

191
00:07:43.090 --> 00:07:48.150
routing engine that we provide
in the implementation, it uses

192
00:07:48.150 --> 00:07:49.630
a separate high-priority
thread.

193
00:07:49.630 --> 00:07:53.750
It uses native implementation of
FFTs and things like that.

194
00:07:53.750 --> 00:07:57.950
And that way we can resist
problems like glitching.

195
00:07:57.950 --> 00:08:02.980
So if you have an application
that has pretty rich visuals

196
00:08:02.980 --> 00:08:05.373
and nice animation, here.

197
00:08:05.373 --> 00:08:11.050
[PLAYS POOL GAME]

198
00:08:11.050 --> 00:08:13.810
CHRIS WILSON: I never sink
anywhere when I do this.

199
00:08:13.810 --> 00:08:15.710
But this actually has
really rich sound.

200
00:08:15.710 --> 00:08:16.690
It's in 3D.

201
00:08:16.690 --> 00:08:19.910
So you actually hear the balls
clicking together in the

202
00:08:19.910 --> 00:08:21.380
appropriate place
and everything.

203
00:08:21.380 --> 00:08:22.970
It works better with headphones

204
00:08:22.970 --> 00:08:25.730
obviously than in the room.

205
00:08:25.730 --> 00:08:27.670
But you could tell
the sound wasn't

206
00:08:27.670 --> 00:08:28.870
interfering with the audio.

207
00:08:28.870 --> 00:08:30.830
And the audio wasn't interfering
with the sound.

208
00:08:30.830 --> 00:08:35.380
And this is really critical,
to not have these things

209
00:08:35.380 --> 00:08:39.299
interact with each other
accidentally.

210
00:08:39.299 --> 00:08:42.520
Now when you look at what you
need to build gaming.

211
00:08:42.520 --> 00:08:45.610
Because there are really two
major scenarios that we're

212
00:08:45.610 --> 00:08:47.020
super interested in--

213
00:08:47.020 --> 00:08:50.220
music applications and gaming.

214
00:08:50.220 --> 00:08:54.450
Gaming has a lot of features
that are expected for high-end

215
00:08:54.450 --> 00:08:56.140
console games.

216
00:08:56.140 --> 00:08:58.720
You expect to see things like
I talked before about very

217
00:08:58.720 --> 00:09:01.100
precise timing of audio
elements and

218
00:09:01.100 --> 00:09:02.680
simultaneous sounds.

219
00:09:02.680 --> 00:09:05.460
But you also expect to be able
to do things like position

220
00:09:05.460 --> 00:09:09.400
sound in 3D, have automatic
effects happen, like Doppler

221
00:09:09.400 --> 00:09:12.890
shift when the siren races past
you and the pitch seems

222
00:09:12.890 --> 00:09:17.270
to change because of
the physics of it.

223
00:09:17.270 --> 00:09:19.820
You also want to be able to do
things like filtering effects.

224
00:09:19.820 --> 00:09:22.890
So that, if you're doing a
live chat, you want it to

225
00:09:22.890 --> 00:09:25.920
sound like it's coming over the
radio or over a telephone.

226
00:09:25.920 --> 00:09:28.400
So I can take that same
sample I did earlier--

227
00:09:28.400 --> 00:09:29.770
PLAYBACK: Play sound now.

228
00:09:29.770 --> 00:09:31.550
CHRIS WILSON: And filter it so
it sounds like it's coming

229
00:09:31.550 --> 00:09:35.080
over a really kind of
crappy-quality telephone.

230
00:09:35.080 --> 00:09:38.860
And, of course, replicating
acoustic environments.

231
00:09:38.860 --> 00:09:42.260
Like if you fire your BFG 9,000
in a huge hall, you

232
00:09:42.260 --> 00:09:44.740
expect it to sound a little
different than if you fire it

233
00:09:44.740 --> 00:09:47.570
in a small room.

234
00:09:47.570 --> 00:09:50.420
And, of course, you need the
ability to create rhythms and

235
00:09:50.420 --> 00:09:51.920
sequences and things
like that.

236
00:09:51.920 --> 00:09:53.510
But also do automation.

237
00:09:53.510 --> 00:09:58.140
Do automated fade ins, fade
outs, that sort of thing.

238
00:09:58.140 --> 00:10:01.730
On top of that, for music
applications you also need to

239
00:10:01.730 --> 00:10:03.080
be able to generate sound.

240
00:10:03.080 --> 00:10:04.570
You need oscillators.

241
00:10:04.570 --> 00:10:07.760
You need things like dynamics
processing, and distortion,

242
00:10:07.760 --> 00:10:09.020
and things like that.

243
00:10:09.020 --> 00:10:11.360
And, of course, this is where
frequency and waveform

244
00:10:11.360 --> 00:10:15.110
analysis gets really
interesting.

245
00:10:15.110 --> 00:10:18.250
So I want to start diving in
to how we make this happen

246
00:10:18.250 --> 00:10:21.340
with the Web Audio API.

247
00:10:21.340 --> 00:10:22.790
This is an application
that I wrote.

248
00:10:22.790 --> 00:10:25.190
I'm going to use this multiple
times during the talk.

249
00:10:25.190 --> 00:10:26.620
It's also posted on GitHub.

250
00:10:26.620 --> 00:10:28.070
It's also posted publicly.

251
00:10:28.070 --> 00:10:29.960
So you can just go run it.

252
00:10:29.960 --> 00:10:32.620
It basically is something that
I built to let me kind of

253
00:10:32.620 --> 00:10:36.060
explore, visually, the
Web Audio API.

254
00:10:36.060 --> 00:10:37.950
So the first thing to understand
is that the Web

255
00:10:37.950 --> 00:10:43.980
Audio API works on the concept
of a node graph.

256
00:10:43.980 --> 00:10:45.070
You create nodes.

257
00:10:45.070 --> 00:10:47.810
So I just created an audio
buffer source node.

258
00:10:47.810 --> 00:10:49.580
And you connect them.

259
00:10:49.580 --> 00:10:52.170
And in this case I'm going to
connect it to the speakers.

260
00:10:52.170 --> 00:10:54.160
Because you need to connect
everything to the speakers if

261
00:10:54.160 --> 00:10:56.110
you want to hear a sound.

262
00:10:56.110 --> 00:10:58.576
And I'll hit play.

263
00:10:58.576 --> 00:11:00.570
[BELL DINGS]

264
00:11:00.570 --> 00:11:01.220
CHRIS WILSON: Yay.

265
00:11:01.220 --> 00:11:03.330
So you get the basic idea.

266
00:11:03.330 --> 00:11:06.500
Create nodes, connect them
together, hit play.

267
00:11:06.500 --> 00:11:13.970
Now these node graphs can
be varying complexity.

268
00:11:13.970 --> 00:11:18.160
What I just had here, that just
went away, was actually

269
00:11:18.160 --> 00:11:18.800
really simple.

270
00:11:18.800 --> 00:11:20.260
It just had two nodes--

271
00:11:20.260 --> 00:11:22.500
the source code and the speaker

272
00:11:22.500 --> 00:11:24.310
destination node that I played.

273
00:11:24.310 --> 00:11:26.600
This is a little bit more
complex node graph.

274
00:11:26.600 --> 00:11:29.310
But if you work through it one
piece at a time, it's pretty

275
00:11:29.310 --> 00:11:30.030
straightforward.

276
00:11:30.030 --> 00:11:31.060
There's a few sources.

277
00:11:31.060 --> 00:11:32.500
There's a few effects.

278
00:11:32.500 --> 00:11:35.276
They're mixed together in
sub-mixes and then it goes

279
00:11:35.276 --> 00:11:38.175
through a compressor
and gets played.

280
00:11:38.175 --> 00:11:41.840
That vocoder app that I ran in
the beginning, by the way, is

281
00:11:41.840 --> 00:11:43.510
a really complex node graph.

282
00:11:43.510 --> 00:11:48.980
It has somewhere around 420
nodes, I think, active while

283
00:11:48.980 --> 00:11:50.660
it's playing, the whole time.

284
00:11:50.660 --> 00:11:52.410
So you can tell how
scalable it is.

285
00:11:52.410 --> 00:11:56.060
Because that's running on my
two-year-old MacBook Pro.

286
00:11:56.060 --> 00:12:00.360
And really doesn't make the
system sweat even that much.

287
00:12:00.360 --> 00:12:03.020
For a while I was accidentally
running two copies at the same

288
00:12:03.020 --> 00:12:05.810
time, I was wondering why I
got a weird effect, but--

289
00:12:05.810 --> 00:12:08.310
290
00:12:08.310 --> 00:12:14.320
So I want to start by walking
through how to build all of

291
00:12:14.320 --> 00:12:15.350
this audio code.

292
00:12:15.350 --> 00:12:18.290
I'm not going to dig into the
code of the vocoder app.

293
00:12:18.290 --> 00:12:20.360
I started trying to do that and
realized it's kind of hard

294
00:12:20.360 --> 00:12:23.280
to explain in an hour.

295
00:12:23.280 --> 00:12:26.530
But, at the same time, I do want
to walk through each of

296
00:12:26.530 --> 00:12:28.360
these building blocks
and help you

297
00:12:28.360 --> 00:12:30.120
understand how to use them.

298
00:12:30.120 --> 00:12:32.500
Now you're going to have
to bear with me.

299
00:12:32.500 --> 00:12:35.240
We have to get through five
types before I can start

300
00:12:35.240 --> 00:12:37.570
playing with the fun stuff.

301
00:12:37.570 --> 00:12:40.300
The first of those is
the AudioContext.

302
00:12:40.300 --> 00:12:45.400
The AudioContext is kind of the
root of all things audio.

303
00:12:45.400 --> 00:12:48.500
This is kind of similar to
a 2D canvas context.

304
00:12:48.500 --> 00:12:51.410
So you create one of these.

305
00:12:51.410 --> 00:12:53.180
And this is where you
get access to all

306
00:12:53.180 --> 00:12:54.630
the other fun stuff.

307
00:12:54.630 --> 00:12:57.000
First and foremost, of course,
this is where you get access

308
00:12:57.000 --> 00:12:58.560
to the speakers.

309
00:12:58.560 --> 00:13:00.710
And you have to route
everything to this

310
00:13:00.710 --> 00:13:03.110
destination, to the speakers,
in order to

311
00:13:03.110 --> 00:13:04.630
have it make sound.

312
00:13:04.630 --> 00:13:06.560
Otherwise you're not plugging
the cable into

313
00:13:06.560 --> 00:13:08.190
anything, in effect.

314
00:13:08.190 --> 00:13:11.960
But we also have methods here
to create audio buffers, to

315
00:13:11.960 --> 00:13:16.200
decode audio buffers from common
file formats like mp3,

316
00:13:16.200 --> 00:13:19.210
or wav, or ogg, or that
sort of thing.

317
00:13:19.210 --> 00:13:21.890
And this is also down at the
bottom where we create all

318
00:13:21.890 --> 00:13:23.035
kinds of different
audio nodes.

319
00:13:23.035 --> 00:13:24.610
And we're going to walk through
each one of those

320
00:13:24.610 --> 00:13:26.240
audio nodes.

321
00:13:26.240 --> 00:13:28.080
This is a good time to mention,
by the way, I show

322
00:13:28.080 --> 00:13:31.940
you a lot of interfaces
in this talk.

323
00:13:31.940 --> 00:13:35.220
These are not the precise
interface declarations.

324
00:13:35.220 --> 00:13:37.310
I tried to simplify them to
make them a little more

325
00:13:37.310 --> 00:13:39.240
understandable.

326
00:13:39.240 --> 00:13:41.140
And, obviously, like I've
cropped a bunch the audio

327
00:13:41.140 --> 00:13:42.790
nodes out of the bottom here.

328
00:13:42.790 --> 00:13:44.430
So look in the spec
if you want the

329
00:13:44.430 --> 00:13:47.750
full, complete version.

330
00:13:47.750 --> 00:13:52.580
So this is the first line of Web
Audio applications, or a

331
00:13:52.580 --> 00:13:54.460
very early line, I should say.

332
00:13:54.460 --> 00:13:57.390
You need to create a
new AudioContext.

333
00:13:57.390 --> 00:14:01.110
Right now, obviously, we're a
WebKit prefix, vendor prefix.

334
00:14:01.110 --> 00:14:03.540
Sooner or later, that will go
away as we move the spec

335
00:14:03.540 --> 00:14:04.790
through the standards process.

336
00:14:04.790 --> 00:14:07.760
337
00:14:07.760 --> 00:14:10.930
Now the second type
is AudioNode.

338
00:14:10.930 --> 00:14:14.330
And I already said Web Audio API
is based on the concept of

339
00:14:14.330 --> 00:14:15.480
a node graph.

340
00:14:15.480 --> 00:14:18.810
AudioNode is basically the super
class for all nodes in

341
00:14:18.810 --> 00:14:19.890
that graph.

342
00:14:19.890 --> 00:14:22.300
In fact, it really only has
two things that are super

343
00:14:22.300 --> 00:14:23.050
interesting.

344
00:14:23.050 --> 00:14:24.020
It has a connect.

345
00:14:24.020 --> 00:14:25.330
It has a disconnect.

346
00:14:25.330 --> 00:14:28.380
You want to connect a source
node to a destination node,

347
00:14:28.380 --> 00:14:31.410
you just call source.connect
and pass it the destination

348
00:14:31.410 --> 00:14:34.230
you want to connect it to.

349
00:14:34.230 --> 00:14:36.560
I will point out, here, there's
a second connect

350
00:14:36.560 --> 00:14:39.920
method that takes
an AudioParam.

351
00:14:39.920 --> 00:14:42.110
I don't want to get into the
implications of that, yet.

352
00:14:42.110 --> 00:14:43.190
But I did want to call it out.

353
00:14:43.190 --> 00:14:46.110
Because it's going to be
important later on.

354
00:14:46.110 --> 00:14:49.970
And that leads me to the third
type, which is AudioParam.

355
00:14:49.970 --> 00:14:53.680
The AudioParam is a really
kind of complex type to

356
00:14:53.680 --> 00:14:55.210
understand at first.

357
00:14:55.210 --> 00:14:57.990
But it ends up being super,
super important.

358
00:14:57.990 --> 00:15:00.840
So most of the values, the
things you would think of as

359
00:15:00.840 --> 00:15:04.470
values in the Web Audio API,
like the volume on a

360
00:15:04.470 --> 00:15:06.890
gain-controlling node,
for example.

361
00:15:06.890 --> 00:15:09.280
They're actually represented
as AudioParams.

362
00:15:09.280 --> 00:15:12.370
Now you can still get and set
the values, the first thing in

363
00:15:12.370 --> 00:15:13.910
the interface declaration.

364
00:15:13.910 --> 00:15:15.800
You can go in and grab the
value out of there.

365
00:15:15.800 --> 00:15:18.020
You can manipulate
it, set it to

366
00:15:18.020 --> 00:15:19.750
something different, whatever.

367
00:15:19.750 --> 00:15:21.010
And that's an easy
way to use it.

368
00:15:21.010 --> 00:15:23.040
And I do use it that
way a lot.

369
00:15:23.040 --> 00:15:25.090
But at the same time you
can also do things

370
00:15:25.090 --> 00:15:26.600
that schedule it.

371
00:15:26.600 --> 00:15:29.220
So you can say, I want to set
the value at a particular time

372
00:15:29.220 --> 00:15:30.200
in the future.

373
00:15:30.200 --> 00:15:34.290
Or, my personal favorite, I want
to ramp this over time.

374
00:15:34.290 --> 00:15:36.520
I want to set the value to zero
now, but I want to ramp

375
00:15:36.520 --> 00:15:39.940
it up to one over the course
of the next couple seconds.

376
00:15:39.940 --> 00:15:41.950
And we handle that for you
under the covers in

377
00:15:41.950 --> 00:15:43.010
the Web Audio API.

378
00:15:43.010 --> 00:15:45.240
So you get really, really
smooth automation.

379
00:15:45.240 --> 00:15:47.950
Because of course we can
do that very fast.

380
00:15:47.950 --> 00:15:51.810
And I will show several examples
of how to do that.

381
00:15:51.810 --> 00:15:55.050
So we covered the three
infrastructure bits of

382
00:15:55.050 --> 00:15:57.510
context, nodes, and params.

383
00:15:57.510 --> 00:15:59.710
Now I want to talk
about sounds.

384
00:15:59.710 --> 00:16:02.610
And AudioBuffer is the
first thing to talk

385
00:16:02.610 --> 00:16:03.690
about, audio buffers.

386
00:16:03.690 --> 00:16:09.110
It represents a decoded
buffer of sound.

387
00:16:09.110 --> 00:16:11.470
So that means it's actually
in memory.

388
00:16:11.470 --> 00:16:15.170
And the bits are right there,
lined up in a row for you.

389
00:16:15.170 --> 00:16:19.210
You can actually access them
in here as a float32array.

390
00:16:19.210 --> 00:16:22.430
You can go directly twiddle,
get, set, whatever you want to

391
00:16:22.430 --> 00:16:24.400
do with those bits.

392
00:16:24.400 --> 00:16:27.740
You can, of course, also see the
sample rate and how long

393
00:16:27.740 --> 00:16:30.480
the buffer is and that sort
of thing, if you want.

394
00:16:30.480 --> 00:16:34.350
But if you want to, you can
access the data directly.

395
00:16:34.350 --> 00:16:39.380
In fact, this set of code
creates an audio buffer and

396
00:16:39.380 --> 00:16:43.550
gets the data, gets a pointer
to the data, and then just

397
00:16:43.550 --> 00:16:46.560
sets it to random numbers.

398
00:16:46.560 --> 00:16:49.340
This sounds like a goofy
thing to do, but

399
00:16:49.340 --> 00:16:50.326
actually this is how--

400
00:16:50.326 --> 00:16:52.310
[STATIC]

401
00:16:52.310 --> 00:16:54.290
CHRIS WILSON: This is how
you get white noise.

402
00:16:54.290 --> 00:16:56.790
You know, white noise is
actually musically useful in a

403
00:16:56.790 --> 00:16:57.660
number of cases.

404
00:16:57.660 --> 00:17:03.050
Like the vocoder app uses white
noise in one place.

405
00:17:03.050 --> 00:17:05.720
So it's something that
you may want to do.

406
00:17:05.720 --> 00:17:10.339
Now, of course, you typically
aren't really going to want to

407
00:17:10.339 --> 00:17:12.319
directly set these values.

408
00:17:12.319 --> 00:17:15.460
You're going to want to load
them from somewhere.

409
00:17:15.460 --> 00:17:18.460
So usually, you'll do
something like this.

410
00:17:18.460 --> 00:17:22.960
This is using pretty standard
XMLHttpRequest code.

411
00:17:22.960 --> 00:17:27.579
I set up a new XHR request.

412
00:17:27.579 --> 00:17:28.670
I open it with a get.

413
00:17:28.670 --> 00:17:31.270
I point it to an mp3
file, in this case.

414
00:17:31.270 --> 00:17:34.720
The only interesting bits here
are I set the response type to

415
00:17:34.720 --> 00:17:36.260
arraybuffer.

416
00:17:36.260 --> 00:17:39.000
Because I want to get this back
as an array, not as a

417
00:17:39.000 --> 00:17:39.930
bunch of plain text.

418
00:17:39.930 --> 00:17:40.860
It's an audio file.

419
00:17:40.860 --> 00:17:41.950
It's probably not--

420
00:17:41.950 --> 00:17:44.410
plain text is not going to
be super interesting.

421
00:17:44.410 --> 00:17:48.090
And then when it loads, I
call the AudioContext's

422
00:17:48.090 --> 00:17:50.520
decodeAudioData method.

423
00:17:50.520 --> 00:17:55.410
And I give it that buffer that
I just got back from XHR.

424
00:17:55.410 --> 00:18:00.170
And when it asynchronously
completes, it passes me back a

425
00:18:00.170 --> 00:18:02.920
buffer, an audio buffer,
that I can then do

426
00:18:02.920 --> 00:18:05.430
whatever I want with.

427
00:18:05.430 --> 00:18:08.730
Now what, you might ask, do
I do with an audio buffer?

428
00:18:08.730 --> 00:18:11.990
It's not a node, you might
notice if you go back to the

429
00:18:11.990 --> 00:18:13.740
interface that we had
a minute ago.

430
00:18:13.740 --> 00:18:16.070
It doesn't derive from node.

431
00:18:16.070 --> 00:18:18.630
It's an object in
its own right.

432
00:18:18.630 --> 00:18:23.010
So what you do is you use an
AudioBufferSourceNode.

433
00:18:23.010 --> 00:18:26.480
An AudioBufferSourceNode is a
node that we wrap around--

434
00:18:26.480 --> 00:18:30.390
or actually, we point
to an audio buffer.

435
00:18:30.390 --> 00:18:33.890
And it's really important to
understand this is a one shot

436
00:18:33.890 --> 00:18:35.320
playback node.

437
00:18:35.320 --> 00:18:38.120
AudioBufferSourceNode can
only be played once.

438
00:18:38.120 --> 00:18:40.460
This is really, really super
important, which is why I say

439
00:18:40.460 --> 00:18:42.700
it multiple times during
this slide.

440
00:18:42.700 --> 00:18:45.670
Once you've played the
AudioBufferSourceNode once,

441
00:18:45.670 --> 00:18:47.510
you have to throw it away.

442
00:18:47.510 --> 00:18:49.500
You don't have to throw
away the buffer.

443
00:18:49.500 --> 00:18:51.610
The buffer you can keep
around and use as many

444
00:18:51.610 --> 00:18:52.920
times as you want.

445
00:18:52.920 --> 00:18:54.960
In fact, you can share
it with multiple

446
00:18:54.960 --> 00:18:56.340
AudioBufferSourceNodes Buffer
Source that are

447
00:18:56.340 --> 00:18:58.050
playing at the same time.

448
00:18:58.050 --> 00:19:00.940
When I hit the fire button
repeatedly earlier, I only had

449
00:19:00.940 --> 00:19:03.100
one copy of that sound buffer.

450
00:19:03.100 --> 00:19:05.540
I just had multiple buffer
source nodes that pointed to

451
00:19:05.540 --> 00:19:08.490
it and were playing
at the same time.

452
00:19:08.490 --> 00:19:12.085
So buffer source node, the type
points to the buffer that

453
00:19:12.085 --> 00:19:13.840
it's playing.

454
00:19:13.840 --> 00:19:15.720
It also lets you change
the playback rate.

455
00:19:15.720 --> 00:19:18.540
So you can make it playback
faster or slower.

456
00:19:18.540 --> 00:19:21.620
Meaning you can increase
or decrease the pitch.

457
00:19:21.620 --> 00:19:22.390
You can loop it.

458
00:19:22.390 --> 00:19:24.090
You can tell it when
to start playing.

459
00:19:24.090 --> 00:19:27.380
And you can tell when
to stop playing.

460
00:19:27.380 --> 00:19:29.960
So let's look at how we use
these two together.

461
00:19:29.960 --> 00:19:32.690
462
00:19:32.690 --> 00:19:35.840
So the top part of this code
sample is the code you just

463
00:19:35.840 --> 00:19:40.810
saw to do an XMLHttpRequest,
get the data back, call the

464
00:19:40.810 --> 00:19:43.100
code audio data, and
get a buffer.

465
00:19:43.100 --> 00:19:45.980
And the only difference is once
I've gotten the buffer, I

466
00:19:45.980 --> 00:19:47.950
call this method bark().

467
00:19:47.950 --> 00:19:51.980
And bark() creates a buffer
source node, points the buffer

468
00:19:51.980 --> 00:19:55.300
for the buffer source node to
what we just loaded, connects

469
00:19:55.300 --> 00:19:56.300
it to the speaker--

470
00:19:56.300 --> 00:19:58.230
because remember, we have to
connect everything to the

471
00:19:58.230 --> 00:20:00.540
speakers or we don't
hear anything--

472
00:20:00.540 --> 00:20:02.810
and then calls noteOn
to start it.

473
00:20:02.810 --> 00:20:04.140
And I can--

474
00:20:04.140 --> 00:20:05.120
[BARK]

475
00:20:05.120 --> 00:20:06.150
CHRIS WILSON: --make it bark.

476
00:20:06.150 --> 00:20:08.500
There's "Hello, World,"
right there.

477
00:20:08.500 --> 00:20:10.400
"Hello, dog," I don't
know, whatever.

478
00:20:10.400 --> 00:20:12.170
Now if this were my
dog, on the other

479
00:20:12.170 --> 00:20:14.650
hand, it would be loop.

480
00:20:14.650 --> 00:20:15.490
Because she barks--

481
00:20:15.490 --> 00:20:17.990
[REPEATED BARKING]

482
00:20:17.990 --> 00:20:18.910
CHRIS WILSON: A lot.

483
00:20:18.910 --> 00:20:21.100
I didn't actually want to
run this for 10 minutes.

484
00:20:21.100 --> 00:20:24.480
But she does back about that
long, most of the time.

485
00:20:24.480 --> 00:20:27.980
Now, there are a couple things
that I want to point out here.

486
00:20:27.980 --> 00:20:30.030
One thing that I should have
mentioned before, when I was

487
00:20:30.030 --> 00:20:33.590
talking about writing values
in, is the sound values are

488
00:20:33.590 --> 00:20:35.620
actually floating-point
numbers.

489
00:20:35.620 --> 00:20:40.010
It's negative one to one is
the range that we have.

490
00:20:40.010 --> 00:20:41.100
But it's floating point.

491
00:20:41.100 --> 00:20:45.690
It's not 16-bit integers, it's
not 24-bit integers, or 32-bit

492
00:20:45.690 --> 00:20:49.310
integers, which if you were
heavy into digital sound in

493
00:20:49.310 --> 00:20:51.470
the past, you might
have expected.

494
00:20:51.470 --> 00:20:55.620
The reason is that gives us
a lot of play in where the

495
00:20:55.620 --> 00:20:57.310
dynamic range gets applied.

496
00:20:57.310 --> 00:20:59.550
So we still have a lot
of dynamic range.

497
00:20:59.550 --> 00:21:01.320
We're not wasting the
dynamic range.

498
00:21:01.320 --> 00:21:04.630
But it helps us to
avoid clipping.

499
00:21:04.630 --> 00:21:07.370
The second thing here
is I've been passing

500
00:21:07.370 --> 00:21:09.180
these time values around.

501
00:21:09.180 --> 00:21:09.990
Like here I call

502
00:21:09.990 --> 00:21:15.240
audioContext.currentTime plus 600.

503
00:21:15.240 --> 00:21:20.520
So time, in the Web Audio API,
is an interesting beast

504
00:21:20.520 --> 00:21:22.550
because it's in seconds.

505
00:21:22.550 --> 00:21:24.480
It's not in milliseconds.

506
00:21:24.480 --> 00:21:26.090
But it's a floating-point
number.

507
00:21:26.090 --> 00:21:29.590
And this is really why we used
milliseconds for a long time.

508
00:21:29.590 --> 00:21:33.330
I imagine that very few of you
in the room have not used

509
00:21:33.330 --> 00:21:37.340
setTimeout at one point or
another in web programming.

510
00:21:37.340 --> 00:21:39.740
SetTimeout takes values
in milliseconds.

511
00:21:39.740 --> 00:21:42.650
The problem with this is a
millisecond is actually a

512
00:21:42.650 --> 00:21:44.680
really long time when
you're looking at

513
00:21:44.680 --> 00:21:46.250
each sample of audio.

514
00:21:46.250 --> 00:21:46.440
Right?

515
00:21:46.440 --> 00:21:51.460
In one millisecond, on a
CD-quality audio, that's 44

516
00:21:51.460 --> 00:21:53.810
and a tenth samples.

517
00:21:53.810 --> 00:21:55.870
You're not very precise
in that case.

518
00:21:55.870 --> 00:21:58.710
So we needed something more
precise and went with seconds

519
00:21:58.710 --> 00:22:00.970
not milliseconds.

520
00:22:00.970 --> 00:22:04.680
Secondly, you want to
grab this from the

521
00:22:04.680 --> 00:22:05.930
audioContext.currentTime.

522
00:22:05.930 --> 00:22:07.550
523
00:22:07.550 --> 00:22:09.460
You don't grab it
from time.now or

524
00:22:09.460 --> 00:22:10.190
something like that.

525
00:22:10.190 --> 00:22:12.730
It's not the Unix Epoch clock.

526
00:22:12.730 --> 00:22:15.830
It actually starts at zero when
the context is created.

527
00:22:15.830 --> 00:22:19.690
That's not a super useful point
in time, it's more a

528
00:22:19.690 --> 00:22:23.830
relative unit than an absolute
unit, in that sense.

529
00:22:23.830 --> 00:22:27.900
But finally, and also critically
important, you kind

530
00:22:27.900 --> 00:22:28.680
of have to be careful.

531
00:22:28.680 --> 00:22:31.330
Because this is a
different clock.

532
00:22:31.330 --> 00:22:34.610
It literally may have a
different clock crystal that

533
00:22:34.610 --> 00:22:35.690
it's running off of.

534
00:22:35.690 --> 00:22:38.960
Because audio hardware systems
frequently have a separate

535
00:22:38.960 --> 00:22:42.090
crystal that keeps the
audio very stable.

536
00:22:42.090 --> 00:22:44.870
And the CPU may spin its
crystal up or down or

537
00:22:44.870 --> 00:22:49.890
something like that for power
management reasons.

538
00:22:49.890 --> 00:22:54.870
So by now, we're, I don't know,
a little under halfway

539
00:22:54.870 --> 00:22:57.760
through, and you're thinking,
that's great.

540
00:22:57.760 --> 00:23:00.740
You dumped a bunch of types on
me, a whole bunch of code, and

541
00:23:00.740 --> 00:23:03.280
fundamentally all you did
was make a dog bark.

542
00:23:03.280 --> 00:23:06.750
And I can loop that in the
HTML5 audio tag, too.

543
00:23:06.750 --> 00:23:09.820
So what have you shown me that's
really interesting?

544
00:23:09.820 --> 00:23:13.230
Well, first and foremost, you
don't usually do code the way

545
00:23:13.230 --> 00:23:14.970
that I did it there.

546
00:23:14.970 --> 00:23:18.450
Most particularly, you don't
usually immediately play the

547
00:23:18.450 --> 00:23:21.190
sound buffer when you've loaded
it with web audio.

548
00:23:21.190 --> 00:23:22.770
It's called a buffer
for a reason.

549
00:23:22.770 --> 00:23:24.800
You want to keep it around
for a while.

550
00:23:24.800 --> 00:23:28.740
In fact, I use about a dozen
sound samples during the

551
00:23:28.740 --> 00:23:30.080
course of this talk.

552
00:23:30.080 --> 00:23:31.330
And I've loaded all of them.

553
00:23:31.330 --> 00:23:33.970
I loaded them all when the page
loaded the first time.

554
00:23:33.970 --> 00:23:35.340
And I just hang on
to the buffer.

555
00:23:35.340 --> 00:23:36.980
And I use them whenever
I want.

556
00:23:36.980 --> 00:23:40.980
So there are a couple samples
that I use repeatedly.

557
00:23:40.980 --> 00:23:42.010
They're already in memory.

558
00:23:42.010 --> 00:23:44.150
I don't need to worry about,
Are they still there?

559
00:23:44.150 --> 00:23:45.170
Do I load them again?

560
00:23:45.170 --> 00:23:48.620
Are they going to get
cached or not?

561
00:23:48.620 --> 00:23:52.020
Now, there is, of course,
one other

562
00:23:52.020 --> 00:23:54.560
critical difference here.

563
00:23:54.560 --> 00:23:57.660
Which is the Web Audio API has
a lot of audio nodes for

564
00:23:57.660 --> 00:23:58.720
processing.

565
00:23:58.720 --> 00:24:02.380
We can do a lot of interesting
things with the audio, once

566
00:24:02.380 --> 00:24:03.500
we've started playing.

567
00:24:03.500 --> 00:24:06.110
I just wanted to get
out of the way,

568
00:24:06.110 --> 00:24:07.760
how do you play something.

569
00:24:07.760 --> 00:24:09.950
Because it's actually
relatively easy.

570
00:24:09.950 --> 00:24:13.800
And by the way, if you want to
use the HTML5 audio, as I did

571
00:24:13.800 --> 00:24:17.420
mention before, HTML5 audio
supports streaming.

572
00:24:17.420 --> 00:24:20.190
And streaming is a critically
important thing to do for some

573
00:24:20.190 --> 00:24:21.370
types of audio.

574
00:24:21.370 --> 00:24:24.630
If you want to play background
music for a game, for example,

575
00:24:24.630 --> 00:24:26.270
you may not want to load
all of that into

576
00:24:26.270 --> 00:24:27.820
an in-memory buffer.

577
00:24:27.820 --> 00:24:32.250
So here, you can take an HTML5
audio element and grab its

578
00:24:32.250 --> 00:24:34.355
audio output by calling
audioContext.cre

579
00:24:34.355 --> 00:24:39.670
ateMediaElementSource, handing
it the HTML5 audio or video

580
00:24:39.670 --> 00:24:43.290
element, and it grabs the sound
output from that tag,

581
00:24:43.290 --> 00:24:44.710
from that element.

582
00:24:44.710 --> 00:24:46.930
And then you can connect it
to wherever you want.

583
00:24:46.930 --> 00:24:48.610
You can connect it to the
effects pipeline.

584
00:24:48.610 --> 00:24:49.410
You can route it.

585
00:24:49.410 --> 00:24:52.010
You can change its gain,
all kinds of things.

586
00:24:52.010 --> 00:24:54.410
So it does integrate very
well into the Web

587
00:24:54.410 --> 00:24:55.660
Audio API as well.

588
00:24:55.660 --> 00:24:58.360
589
00:24:58.360 --> 00:25:01.380
So I want to walk through each
of the types of processing

590
00:25:01.380 --> 00:25:04.460
nodes, and what they can do,
and how to use them.

591
00:25:04.460 --> 00:25:08.430
The first one, and kind of the
easiest one to knock out

592
00:25:08.430 --> 00:25:10.720
first, I guess, is
the gain node.

593
00:25:10.720 --> 00:25:12.170
And gain node is pretty
straightforward.

594
00:25:12.170 --> 00:25:15.140
It lets you control the
gain, AKA volume.

595
00:25:15.140 --> 00:25:23.470
And I'll just drop a sound file
in, drop a gain node in,

596
00:25:23.470 --> 00:25:28.880
connect the sound file to the
gain node, the speakers.

597
00:25:28.880 --> 00:25:32.610
Let's choose a different
sound here.

598
00:25:32.610 --> 00:25:34.410
[MUSIC PLAYING]

599
00:25:34.410 --> 00:25:34.700
CHRIS WILSON: OK.

600
00:25:34.700 --> 00:25:37.350
So I've done my sound playing.

601
00:25:37.350 --> 00:25:38.685
And now I can change
the gain value.

602
00:25:38.685 --> 00:25:40.470
[MUSIC FADES OUT]

603
00:25:40.470 --> 00:25:41.560
CHRIS WILSON: And it
makes it quieter.

604
00:25:41.560 --> 00:25:43.280
[MUSIC FADES IN]

605
00:25:43.280 --> 00:25:46.510
CHRIS WILSON: Or makes
it a lot louder.

606
00:25:46.510 --> 00:25:50.160
Pretty straightforward,
pretty easy.

607
00:25:50.160 --> 00:25:53.280
However, it's important to
understand gain nodes are

608
00:25:53.280 --> 00:25:56.450
fantastically useful and really,
really important.

609
00:25:56.450 --> 00:25:59.550
Because this is how you create
a lot of the points in the

610
00:25:59.550 --> 00:26:00.290
routing graph.

611
00:26:00.290 --> 00:26:03.120
This is how you create things
like sub-mixes.

612
00:26:03.120 --> 00:26:06.600
If you are implementing a game
sound manager, for example,

613
00:26:06.600 --> 00:26:10.210
and you're creating a bunch of
effect sounds, like guns

614
00:26:10.210 --> 00:26:13.340
firing, or whatever, that
probably all gets connected to

615
00:26:13.340 --> 00:26:15.100
a single gain node
that lets you

616
00:26:15.100 --> 00:26:16.750
control the effects volume.

617
00:26:16.750 --> 00:26:18.250
And then you have a different
gain node that lets you

618
00:26:18.250 --> 00:26:19.620
control the music volume.

619
00:26:19.620 --> 00:26:21.220
And maybe you have a master
volume that they

620
00:26:21.220 --> 00:26:22.380
both connect to.

621
00:26:22.380 --> 00:26:24.480
But all of these
routing points,

622
00:26:24.480 --> 00:26:25.860
frequently, are gain nodes.

623
00:26:25.860 --> 00:26:28.161
Because they're an easy
thing to hang off of.

624
00:26:28.161 --> 00:26:30.930
625
00:26:30.930 --> 00:26:34.420
I should also mention, by the
way, implicitly you can make

626
00:26:34.420 --> 00:26:37.770
more than one connection at
any node connection point.

627
00:26:37.770 --> 00:26:41.420
If you connect multiple nodes to
one destination, they just

628
00:26:41.420 --> 00:26:43.010
automatically mix together.

629
00:26:43.010 --> 00:26:45.330
So if I have my dog barking--

630
00:26:45.330 --> 00:26:46.226
[BARK]

631
00:26:46.226 --> 00:26:46.338
CHRIS

632
00:26:46.338 --> 00:26:48.020
WILSON: --my cat [MEOW]

633
00:26:48.020 --> 00:26:50.400
CHRIS WILSON: --and I just
connect them both to the same

634
00:26:50.400 --> 00:26:52.530
destination down below,
and call noteOn

635
00:26:52.530 --> 00:26:53.570
on at the same time--

636
00:26:53.570 --> 00:26:54.950
[SIMULTANEOUS BARK AND MEOW]

637
00:26:54.950 --> 00:26:55.830
CHRIS WILSON: You get
them both together.

638
00:26:55.830 --> 00:26:57.620
It just mixes them together.

639
00:26:57.620 --> 00:27:01.120
And, of course, if I connected
one node to multiple

640
00:27:01.120 --> 00:27:03.740
destination nodes,
that also works.

641
00:27:03.740 --> 00:27:05.730
It just automatically
fans out.

642
00:27:05.730 --> 00:27:08.890
In fact, my vocoder app in the
beginning, I mentioned at one

643
00:27:08.890 --> 00:27:11.610
point it's a 28-band vocoder.

644
00:27:11.610 --> 00:27:16.170
That means one of the nodes fans
out to 28 other nodes.

645
00:27:16.170 --> 00:27:20.180
And then at the other end, 28
nodes all have to mix back

646
00:27:20.180 --> 00:27:22.020
down together into one node.

647
00:27:22.020 --> 00:27:23.670
And I just do that by
connecting them.

648
00:27:23.670 --> 00:27:25.760
I didn't have to do anything
special or come up with a

649
00:27:25.760 --> 00:27:28.970
special node to do that.

650
00:27:28.970 --> 00:27:35.370
Now, I also want to point out--
remember I said that all

651
00:27:35.370 --> 00:27:38.330
the things that you would think
of like parameters, like

652
00:27:38.330 --> 00:27:41.960
gain on a gain node, are
actually AudioParams.

653
00:27:41.960 --> 00:27:44.050
This lets you do automation.

654
00:27:44.050 --> 00:27:46.740
So I can do things like
this automated fade

655
00:27:46.740 --> 00:27:47.550
that I played earlier.

656
00:27:47.550 --> 00:27:49.800
[MUSIC FADES IN AND OUT]

657
00:27:49.800 --> 00:27:51.750
CHRIS WILSON: I should
have played earlier.

658
00:27:51.750 --> 00:27:53.630
And it fades it in,
and fades it out.

659
00:27:53.630 --> 00:27:57.140
And I did this simply by saying,
I want to start by

660
00:27:57.140 --> 00:28:00.080
creating a gain node, inserting
it into the path,

661
00:28:00.080 --> 00:28:03.510
and then, right now, set
the value to zero.

662
00:28:03.510 --> 00:28:07.970
In two seconds, I want you
to have ramped up to 1.0.

663
00:28:07.970 --> 00:28:11.655
And four seconds from now, I
want you to have ramped back

664
00:28:11.655 --> 00:28:13.300
down to zero.

665
00:28:13.300 --> 00:28:15.140
These are really
easy to set up.

666
00:28:15.140 --> 00:28:18.070
And as I said, they happen
very, very smoothly.

667
00:28:18.070 --> 00:28:21.190
Because we handle them under
the covers a very high time

668
00:28:21.190 --> 00:28:22.440
resolution.

669
00:28:22.440 --> 00:28:25.890
670
00:28:25.890 --> 00:28:27.870
Now my next node type--

671
00:28:27.870 --> 00:28:29.520
it's also relatively basic--

672
00:28:29.520 --> 00:28:30.770
is a delay node.

673
00:28:30.770 --> 00:28:32.870
674
00:28:32.870 --> 00:28:36.130
Now, it's pretty obvious
what a delay node does.

675
00:28:36.130 --> 00:28:39.610
It delays the audio
sent through it.

676
00:28:39.610 --> 00:28:46.225
So I'm going to create a delay
node and hook it up.

677
00:28:46.225 --> 00:28:49.440
678
00:28:49.440 --> 00:28:50.700
And I'll hit play--

679
00:28:50.700 --> 00:28:52.330
[BELL DINGS]

680
00:28:52.330 --> 00:28:54.090
CHRIS WILSON: --and the
interesting thing is you

681
00:28:54.090 --> 00:28:55.870
probably didn't notice
anything different.

682
00:28:55.870 --> 00:28:57.900
Well, it's because what
goes through the

683
00:28:57.900 --> 00:29:00.620
node is entirely delayed.

684
00:29:00.620 --> 00:29:02.940
So it's not mixing it
back together with

685
00:29:02.940 --> 00:29:04.260
the original sound.

686
00:29:04.260 --> 00:29:06.560
It's only delaying all the
audio going through it.

687
00:29:06.560 --> 00:29:09.690
So there was an extra 0.2
seconds from when I hit the

688
00:29:09.690 --> 00:29:11.220
button to when it played.

689
00:29:11.220 --> 00:29:13.380
But of course that's not
really noticeable.

690
00:29:13.380 --> 00:29:17.970
Now, if I wanted to, to sound
like an echo, then I can

691
00:29:17.970 --> 00:29:20.450
connect the original source
straight to the speaker

692
00:29:20.450 --> 00:29:24.980
destination, too, and
play it again.

693
00:29:24.980 --> 00:29:27.130
And now you get the
echo effect.

694
00:29:27.130 --> 00:29:30.260
Now if you really want what you
classically think of as a

695
00:29:30.260 --> 00:29:34.060
fading feedback echo digital
delay, you want to

696
00:29:34.060 --> 00:29:35.310
add a gain node in.

697
00:29:35.310 --> 00:29:39.410
698
00:29:39.410 --> 00:29:40.800
Let's move it where we
can actually see

699
00:29:40.800 --> 00:29:42.510
where the routing goes.

700
00:29:42.510 --> 00:29:44.870
And you want to put a cycle
through this delay.

701
00:29:44.870 --> 00:29:48.170
So the output of the delay
goes into the gain node.

702
00:29:48.170 --> 00:29:51.420
And the gain node goes
back into the delay.

703
00:29:51.420 --> 00:29:53.390
And a critically important
piece is set the

704
00:29:53.390 --> 00:29:55.760
gain less than one.

705
00:29:55.760 --> 00:29:58.400
And now when I play it, it's
gonna cycle through this

706
00:29:58.400 --> 00:30:01.150
delay-gain, delay-gain,
delay-gain, until the sound

707
00:30:01.150 --> 00:30:04.598
just dies back down to zero.

708
00:30:04.598 --> 00:30:08.420
So you can hear how I can
build a digital delay.

709
00:30:08.420 --> 00:30:12.200
In fact, for any studio
engineer types in the

710
00:30:12.200 --> 00:30:15.230
audience, if you want to build
multi-tap delays, you just

711
00:30:15.230 --> 00:30:17.830
stack a few delay nodes
in parallel.

712
00:30:17.830 --> 00:30:20.490
If you want to do things like
multi-channel effects like

713
00:30:20.490 --> 00:30:23.620
ping-pong delay, I'll actually
get into that later.

714
00:30:23.620 --> 00:30:24.770
They're really easy to do.

715
00:30:24.770 --> 00:30:28.350
Because you have the basic
tool kit for doing delay.

716
00:30:28.350 --> 00:30:30.060
And all you have to
do is route it in

717
00:30:30.060 --> 00:30:31.310
an interesting way.

718
00:30:31.310 --> 00:30:35.410
719
00:30:35.410 --> 00:30:40.050
Now another amazing thing is
that delay time is actually an

720
00:30:40.050 --> 00:30:41.390
audio param.

721
00:30:41.390 --> 00:30:43.170
That means you can schedule
changes to it.

722
00:30:43.170 --> 00:30:47.270
You can make changes to it live
and things will happen.

723
00:30:47.270 --> 00:30:51.630
So if I wanted to do code like
this, I can actually increase

724
00:30:51.630 --> 00:30:53.750
the delay time over time.

725
00:30:53.750 --> 00:30:56.310
And it automatically
makes it happen.

726
00:30:56.310 --> 00:30:57.293
So--

727
00:30:57.293 --> 00:30:57.615
PLAYBACK: [ECHOING]

728
00:30:57.615 --> 00:30:58.865
Hello.

729
00:30:58.865 --> 00:31:02.123
730
00:31:02.123 --> 00:31:02.610
CHRIS WILSON: OK.

731
00:31:02.610 --> 00:31:04.115
That one didn't sound right.

732
00:31:04.115 --> 00:31:07.250
I'm gonna restart this.

733
00:31:07.250 --> 00:31:09.960
For some reason, this
demo occasionally

734
00:31:09.960 --> 00:31:12.680
decides to be finicky.

735
00:31:12.680 --> 00:31:17.325
So I'm gonna try
that one again.

736
00:31:17.325 --> 00:31:17.635
PLAYBACK: [ECHOING]

737
00:31:17.635 --> 00:31:18.885
Hello.

738
00:31:18.885 --> 00:31:21.980
739
00:31:21.980 --> 00:31:23.170
CHRIS WILSON: There we go.

740
00:31:23.170 --> 00:31:24.140
Kind of a subtle effect.

741
00:31:24.140 --> 00:31:27.190
But it's basically increasing
the delay time over time.

742
00:31:27.190 --> 00:31:29.720
743
00:31:29.720 --> 00:31:33.120
I mentioned before, you can also
connect audio nodes into

744
00:31:33.120 --> 00:31:38.060
AudioParams, like take the
output of an audio feed and

745
00:31:38.060 --> 00:31:40.960
pump it straight in as a
parameter controller.

746
00:31:40.960 --> 00:31:43.880
This is how you do effects like
flanging and chorusing,

747
00:31:43.880 --> 00:31:46.340
which basically just have an
oscillator modulating the

748
00:31:46.340 --> 00:31:48.210
display time.

749
00:31:48.210 --> 00:31:51.980
I'll have a demo about that
up on the net later.

750
00:31:51.980 --> 00:31:53.820
I didn't put it in here because
it's kind of hard to

751
00:31:53.820 --> 00:31:55.070
walk through the code for it.

752
00:31:55.070 --> 00:31:58.110
753
00:31:58.110 --> 00:32:01.170
Now is the time, actually, in
this talk, to introduce a

754
00:32:01.170 --> 00:32:03.470
really, really good
friend of mine--

755
00:32:03.470 --> 00:32:05.290
the RealtimeAnalyserNode.

756
00:32:05.290 --> 00:32:07.920
And I say a really, really good
friend of mine because I

757
00:32:07.920 --> 00:32:11.960
used these constantly while
I was debugging my vocoder

758
00:32:11.960 --> 00:32:14.940
application to figure out
what was going on

759
00:32:14.940 --> 00:32:16.480
in the sound feed.

760
00:32:16.480 --> 00:32:19.240
Because it turns out, you really
cannot debug an audio

761
00:32:19.240 --> 00:32:21.930
application by using
console.log to

762
00:32:21.930 --> 00:32:23.400
spit out sound values.

763
00:32:23.400 --> 00:32:24.710
It just doesn't work.

764
00:32:24.710 --> 00:32:29.370
Like you have 44,000 values blow
past in a second, you're

765
00:32:29.370 --> 00:32:31.560
not going to recognize the
pattern and say, Oh yeah,

766
00:32:31.560 --> 00:32:33.500
that's a sine wave.

767
00:32:33.500 --> 00:32:37.090
So the RealtimeAnalyserNode
is what lets

768
00:32:37.090 --> 00:32:39.410
you visualize things.

769
00:32:39.410 --> 00:32:40.760
Like this.

770
00:32:40.760 --> 00:32:42.290
So all that this does--

771
00:32:42.290 --> 00:32:47.260
you can set this up and tell
it, I want to get an array

772
00:32:47.260 --> 00:32:49.860
that represents the frequency
band energy.

773
00:32:49.860 --> 00:32:51.970
And you can tell it how
detailed you want

774
00:32:51.970 --> 00:32:53.660
that array to be.

775
00:32:53.660 --> 00:32:56.480
Or you can say, I want kind
of a chunk of the

776
00:32:56.480 --> 00:32:57.880
waveform, as well.

777
00:32:57.880 --> 00:33:01.040
We use the same node to give
you both of those features.

778
00:33:01.040 --> 00:33:03.970
The frequency data you can ask
for as a Unit8 or as a float.

779
00:33:03.970 --> 00:33:06.660
It's kind of totally up to
you in your coding how

780
00:33:06.660 --> 00:33:08.730
you want to do it.

781
00:33:08.730 --> 00:33:13.050
So let's see how we
actually do this.

782
00:33:13.050 --> 00:33:14.340
So here's how you use it.

783
00:33:14.340 --> 00:33:17.720
The frequency buckets, by the
way, are split up linearly

784
00:33:17.720 --> 00:33:21.860
across zero to the NyQuist
frequency, which is half of

785
00:33:21.860 --> 00:33:24.210
the AudioContext's
sample rate.

786
00:33:24.210 --> 00:33:28.430
So if you say you want 1,024
buckets, then it's going to

787
00:33:28.430 --> 00:33:31.470
chop that up evenly
across zero to

788
00:33:31.470 --> 00:33:35.220
probably 22.05 kilohertz.

789
00:33:35.220 --> 00:33:39.960
And then, at some point in time,
what you do is you go to

790
00:33:39.960 --> 00:33:40.730
your analyser.

791
00:33:40.730 --> 00:33:42.540
And you pass it an array
that you've created.

792
00:33:42.540 --> 00:33:46.020
And you say, Give me the bite
frequency count data here.

793
00:33:46.020 --> 00:33:49.730
And it performs the frequency
analysis of the current sound

794
00:33:49.730 --> 00:33:52.320
and passes it back to you.

795
00:33:52.320 --> 00:33:55.530
And then of course you just go
in a loop through that array.

796
00:33:55.530 --> 00:33:58.800
Do whatever you want to make
something interesting

797
00:33:58.800 --> 00:34:01.630
visually, or do interesting
analysis, or

798
00:34:01.630 --> 00:34:03.330
whatever you want.

799
00:34:03.330 --> 00:34:07.060
In the case of this visualizer,
all I did was I

800
00:34:07.060 --> 00:34:08.760
walked through that array
and drew little

801
00:34:08.760 --> 00:34:11.120
boxes on the screen.

802
00:34:11.120 --> 00:34:14.310
But, of course, if you do that
on a RequestAnimationFrame

803
00:34:14.310 --> 00:34:17.820
timer, then it happens at the
refresh rate of your monitor

804
00:34:17.820 --> 00:34:18.820
or whatever.

805
00:34:18.820 --> 00:34:21.479
And you can do something
that looks very live.

806
00:34:21.479 --> 00:34:21.820
Right.

807
00:34:21.820 --> 00:34:23.409
You're doing it constantly.

808
00:34:23.409 --> 00:34:25.170
You're getting lots
of analysis.

809
00:34:25.170 --> 00:34:27.840
Please, by the way, don't use
setTimeout to do this.

810
00:34:27.840 --> 00:34:30.460
SetTimeout's not a great way
to do animation anyways.

811
00:34:30.460 --> 00:34:34.929
But it gets even worse
in sound sometimes.

812
00:34:34.929 --> 00:34:40.889
So now that we've looked
at frequency analysers.

813
00:34:40.889 --> 00:34:43.960
Now we can talk about
filter nodes.

814
00:34:43.960 --> 00:34:46.989
So filtering is a process
that happens in

815
00:34:46.989 --> 00:34:48.270
the frequency domain.

816
00:34:48.270 --> 00:34:51.440
It changes the response
across frequencies.

817
00:34:51.440 --> 00:34:52.909
So we have a bunch of
different types.

818
00:34:52.909 --> 00:34:56.170
We have LOWPASS, HIGHPASS,
BANDPASS, LOW and HIGH

819
00:34:56.170 --> 00:34:58.580
shelving filters, PEAKING
filter, NOTCH filter, and

820
00:34:58.580 --> 00:34:59.760
ALLPASS filter.

821
00:34:59.760 --> 00:35:01.440
I don't expect to magically
know what all

822
00:35:01.440 --> 00:35:03.270
those do, or care.

823
00:35:03.270 --> 00:35:06.590
This actually let you play with
the parameters and see

824
00:35:06.590 --> 00:35:09.080
what happens when you change
the frequency.

825
00:35:09.080 --> 00:35:11.730
When you change from a LOWPASS
filter, which lets all the low

826
00:35:11.730 --> 00:35:15.040
frequencies through but cuts
off the high ones, to a

827
00:35:15.040 --> 00:35:18.370
HIGHPASS filter, you can
see how it shifts.

828
00:35:18.370 --> 00:35:21.090
It's a neat little graph to play
with and gives you some

829
00:35:21.090 --> 00:35:23.530
idea of how things work.

830
00:35:23.530 --> 00:35:25.810
And, by the way, the parameters
in this are

831
00:35:25.810 --> 00:35:29.070
frequency and Q, or occasionally
what's referred

832
00:35:29.070 --> 00:35:32.230
to as quality, or sometimes
resonance.

833
00:35:32.230 --> 00:35:34.450
Because it's sort of
a related concept.

834
00:35:34.450 --> 00:35:38.890
So like here, if I pump up the
Q, you can see how it sort of

835
00:35:38.890 --> 00:35:41.010
accentuates whatever
the frequency is.

836
00:35:41.010 --> 00:35:44.730
It's causing a resonance
right at that spot.

837
00:35:44.730 --> 00:35:46.260
Now this is great.

838
00:35:46.260 --> 00:35:47.910
I'm showing you some
neat graphs.

839
00:35:47.910 --> 00:35:51.610
You can actually hear and see
how it sounds, by using my

840
00:35:51.610 --> 00:35:53.880
neat little demo app here.

841
00:35:53.880 --> 00:35:56.560
And don't worry, this is the
most complex graph I'm going

842
00:35:56.560 --> 00:35:59.700
to draw in this thing on my
little track-pad here.

843
00:35:59.700 --> 00:36:03.140
So let's create an
AudioBufferSource, grab an

844
00:36:03.140 --> 00:36:08.300
analyser, a filter, and
another analyser.

845
00:36:08.300 --> 00:36:10.630
And let's see if I can get these
all to fit on the screen

846
00:36:10.630 --> 00:36:11.880
at the same time.

847
00:36:11.880 --> 00:36:14.960
848
00:36:14.960 --> 00:36:17.540
There we go.

849
00:36:17.540 --> 00:36:19.366
Connect.

850
00:36:19.366 --> 00:36:23.060
You know, If I had had time I
would have figured out how to

851
00:36:23.060 --> 00:36:27.340
pre-load these in
my app, but--

852
00:36:27.340 --> 00:36:27.830
all right.

853
00:36:27.830 --> 00:36:30.010
Let's use our same drum
sample and loop it.

854
00:36:30.010 --> 00:36:31.720
[MUTED DRUMS]

855
00:36:31.720 --> 00:36:33.820
CHRIS WILSON: And you can hear
how all the high frequencies

856
00:36:33.820 --> 00:36:35.940
are getting cut off on
this sound sample.

857
00:36:35.940 --> 00:36:38.860
You can actually see it in the
difference between the before

858
00:36:38.860 --> 00:36:40.910
and after analyser here.

859
00:36:40.910 --> 00:36:43.040
And if I play with
the frequency--

860
00:36:43.040 --> 00:36:46.040
[MUSIC FADES IN]

861
00:36:46.040 --> 00:36:46.890
CHRIS WILSON: --you can
hear it open up.

862
00:36:46.890 --> 00:36:49.766
And now I'm pretty much passing
through all of the

863
00:36:49.766 --> 00:36:50.740
frequencies.

864
00:36:50.740 --> 00:36:53.216
But just for kicks, let's
crank up the resonance.

865
00:36:53.216 --> 00:36:56.204
866
00:36:56.204 --> 00:37:02.710
[MUSIC WARPS]

867
00:37:02.710 --> 00:37:03.030
CHRIS WILSON: OK.

868
00:37:03.030 --> 00:37:05.930
So I'm not Paul Oakenfold.

869
00:37:05.930 --> 00:37:07.920
But you get how this
stuff works.

870
00:37:07.920 --> 00:37:10.870
And you get the application
of these kinds of things.

871
00:37:10.870 --> 00:37:13.600
Now it's turning into
a UI problem--

872
00:37:13.600 --> 00:37:16.570
to build some really cool DJ
tools, which I'm kind of

873
00:37:16.570 --> 00:37:19.360
excited about building next.

874
00:37:19.360 --> 00:37:23.110
That'll be my next
little fun game.

875
00:37:23.110 --> 00:37:28.250
Now, I also wanted to point out,
again, frequency and Q?

876
00:37:28.250 --> 00:37:31.260
They're both AudioParams, so
you can automate them.

877
00:37:31.260 --> 00:37:34.150
You can change these
automatically over time.

878
00:37:34.150 --> 00:37:38.720
And so I took this, and I took
the output of a standard, I

879
00:37:38.720 --> 00:37:41.510
think it's a triangle wave, and
just pumped it straight

880
00:37:41.510 --> 00:37:43.580
into a filter.

881
00:37:43.580 --> 00:37:47.090
So the original sound is
an unchanging wave.

882
00:37:47.090 --> 00:37:50.390
And I just changed the filter
and told it, hey, sweep the

883
00:37:50.390 --> 00:37:54.720
filter from zero to 2,000 hertz
over the course of two

884
00:37:54.720 --> 00:37:56.820
seconds, and then back
down to zero.

885
00:37:56.820 --> 00:37:58.655
I think I automated
the Q, too.

886
00:37:58.655 --> 00:38:03.110
[SOUND EFFECT]

887
00:38:03.110 --> 00:38:04.670
CHRIS WILSON: So you can do
these neat little filter

888
00:38:04.670 --> 00:38:06.890
sweeps really, really easily.

889
00:38:06.890 --> 00:38:08.980
That actually is the
code snippet pasted

890
00:38:08.980 --> 00:38:11.720
out of my js file.

891
00:38:11.720 --> 00:38:14.560
And you can take that same
filter, and you can use it to

892
00:38:14.560 --> 00:38:16.110
process other things.

893
00:38:16.110 --> 00:38:18.060
You don't have to have an
unchanging sound that you

894
00:38:18.060 --> 00:38:18.390
start with.

895
00:38:18.390 --> 00:38:24.410
[MUSIC PLAYS]

896
00:38:24.410 --> 00:38:26.436
CHRIS WILSON: Sorry, I should
have cranked that up a little.

897
00:38:26.436 --> 00:38:31.150
[MUSIC PLAYS LOUDER]

898
00:38:31.150 --> 00:38:33.710
CHRIS WILSON: So you can do
all kinds of fun things by

899
00:38:33.710 --> 00:38:36.120
automating those filters, as
well as just twiddling the

900
00:38:36.120 --> 00:38:37.630
values yourself.

901
00:38:37.630 --> 00:38:41.130
In fact, filters are also how
you get effects like, I'm

902
00:38:41.130 --> 00:38:43.940
talking on a telephone, or I'm
talking on an am radio, or

903
00:38:43.940 --> 00:38:45.490
something like that.

904
00:38:45.490 --> 00:38:47.660
You can take the original
sound, here--

905
00:38:47.660 --> 00:38:49.390
PLAYBACK: Play sound now.

906
00:38:49.390 --> 00:38:50.800
CHRIS WILSON: Which
you heard earlier.

907
00:38:50.800 --> 00:38:53.550
And all that I do in this other
sample is I pump it

908
00:38:53.550 --> 00:38:57.140
through a couple of filters to
mask off the low and the high

909
00:38:57.140 --> 00:38:57.850
frequencies.

910
00:38:57.850 --> 00:39:01.130
It turns out a telephone sound
is really just-- the old

911
00:39:01.130 --> 00:39:04.140
telephone system chopped off
all of the upper and lower

912
00:39:04.140 --> 00:39:04.790
frequencies.

913
00:39:04.790 --> 00:39:06.810
Because of the way that
they transferred the

914
00:39:06.810 --> 00:39:08.150
data across the lines.

915
00:39:08.150 --> 00:39:09.770
PLAYBACK: Play sound now.

916
00:39:09.770 --> 00:39:12.800
CHRIS WILSON: And you get
something like that, just by

917
00:39:12.800 --> 00:39:16.130
filtering off those
frequencies.

918
00:39:16.130 --> 00:39:19.780
CHRIS WILSON: So now we've got
all these really cool sounds,

919
00:39:19.780 --> 00:39:23.940
or the tools to build all of
them, we need to position them

920
00:39:23.940 --> 00:39:25.110
in 3D space.

921
00:39:25.110 --> 00:39:28.210
There's a great tutorial on
HTML5Rocks about this.

922
00:39:28.210 --> 00:39:30.940
I basically decided I couldn't
improve on that a whole lot,

923
00:39:30.940 --> 00:39:32.760
so I was just going to show
the demo for it--

924
00:39:32.760 --> 00:39:34.250
[MUSIC PLAYS]

925
00:39:34.250 --> 00:39:35.600
CHRIS WILSON: And talk through
it a little bit.

926
00:39:35.600 --> 00:39:39.420
And you'll see as we
move around here--

927
00:39:39.420 --> 00:39:46.320
hopefully, you're hearing
the audio move around.

928
00:39:46.320 --> 00:39:48.580
I wanna thank the sound guys
again for getting the room set

929
00:39:48.580 --> 00:39:49.040
up for stereo.

930
00:39:49.040 --> 00:39:51.400
Because it definitely
would not been

931
00:39:51.400 --> 00:39:52.650
as impressive otherwise.

932
00:39:52.650 --> 00:39:55.280
933
00:39:55.280 --> 00:39:58.810
So the way that you do this is
you create an AudioPannerNode.

934
00:39:58.810 --> 00:40:01.690
You just pump your sound into
an AudioPannerNode.

935
00:40:01.690 --> 00:40:04.770
And you set its position, its
orientation if you want to

936
00:40:04.770 --> 00:40:08.720
sound to be directional,
and its velocity.

937
00:40:08.720 --> 00:40:11.330
And this sounds really
complex to do.

938
00:40:11.330 --> 00:40:13.580
Obviously, it makes sense for
the demo that I just showed

939
00:40:13.580 --> 00:40:15.470
you where it's really
a 3D space.

940
00:40:15.470 --> 00:40:18.690
But maybe you just want to take
a normal sound and pan it

941
00:40:18.690 --> 00:40:20.390
to the left or the right.

942
00:40:20.390 --> 00:40:22.220
Well that's actually
really easy to do.

943
00:40:22.220 --> 00:40:24.870
You just create a panner node,
you set the position to

944
00:40:24.870 --> 00:40:29.910
straight ahead, and then you can
animate the x position to

945
00:40:29.910 --> 00:40:31.980
change where it is,
left or right.

946
00:40:31.980 --> 00:40:33.435
And you end up with something
like this--

947
00:40:33.435 --> 00:40:34.685
[MUSIC PLAYS, PANNING
LEFT AND RIGHT]

948
00:40:34.685 --> 00:40:44.340
949
00:40:44.340 --> 00:40:46.400
CHRIS WILSON: So it's actually
really easy to do simple

950
00:40:46.400 --> 00:40:47.130
things, as well.

951
00:40:47.130 --> 00:40:51.010
You don't have to do super
complex 3D math to figure out

952
00:40:51.010 --> 00:40:53.720
where to position things.

953
00:40:53.720 --> 00:40:56.450
This is also, by the way, how
you get Doppler effects.

954
00:40:56.450 --> 00:40:59.650
That whole setVelocity
method is to set the

955
00:40:59.650 --> 00:41:01.480
velocity of an object.

956
00:41:01.480 --> 00:41:03.175
So that you get these
sounds where--

957
00:41:03.175 --> 00:41:05.730
958
00:41:05.730 --> 00:41:08.170
[SIREN]

959
00:41:08.170 --> 00:41:10.430
CHRIS WILSON: You can hear the
pitch change as something

960
00:41:10.430 --> 00:41:11.870
races past you.

961
00:41:11.870 --> 00:41:18.120
So given the number of
ambulances or policemen that

962
00:41:18.120 --> 00:41:21.250
I've heard going around on the
streets of San Francisco the

963
00:41:21.250 --> 00:41:23.650
last couple days, you
hear this a lot.

964
00:41:23.650 --> 00:41:25.550
But you expect that
sound to change.

965
00:41:25.550 --> 00:41:28.700
If you were playing a game and
you raced past the police

966
00:41:28.700 --> 00:41:31.340
officer in the game and the
pitch of the siren didn't

967
00:41:31.340 --> 00:41:33.230
change, you would
actually notice.

968
00:41:33.230 --> 00:41:34.250
It would be kind of weird.

969
00:41:34.250 --> 00:41:34.850
It would be jarring.

970
00:41:34.850 --> 00:41:38.990
Because that's not the way that
it works in real life.

971
00:41:38.990 --> 00:41:40.210
And this just magically
happened.

972
00:41:40.210 --> 00:41:43.640
All you had to do was set the
velocity of the object and we

973
00:41:43.640 --> 00:41:47.990
knew to change the pitch
of the object.

974
00:41:47.990 --> 00:41:52.910
Now, all of these things.

975
00:41:52.910 --> 00:41:55.690
All of these AudioPannerNodes
that may be in play, they're

976
00:41:55.690 --> 00:41:58.380
all relative to a listener
somewhere.

977
00:41:58.380 --> 00:42:00.980
You have to position
the person hearing

978
00:42:00.980 --> 00:42:02.380
all of these things.

979
00:42:02.380 --> 00:42:06.910
And the person hearing all these
things is an attribute

980
00:42:06.910 --> 00:42:08.510
of the speakers, in effect.

981
00:42:08.510 --> 00:42:10.800
It's an attribute of
the entire context.

982
00:42:10.800 --> 00:42:13.960
So the AudioListener hangs
directly off the AudioContext.

983
00:42:13.960 --> 00:42:15.260
There's only one of them.

984
00:42:15.260 --> 00:42:16.350
You don't create these.

985
00:42:16.350 --> 00:42:17.760
It's always there.

986
00:42:17.760 --> 00:42:20.770
And you just set your position,
or your orientation

987
00:42:20.770 --> 00:42:21.410
or velocity.

988
00:42:21.410 --> 00:42:24.740
When I moved around in that
sound field during the demo a

989
00:42:24.740 --> 00:42:27.540
couple seconds ago, I was
changing the AudioListener

990
00:42:27.540 --> 00:42:30.420
properties, as well as the
visual representation of that.

991
00:42:30.420 --> 00:42:33.220
992
00:42:33.220 --> 00:42:38.040
So with that, I want to jump
to another fun node--

993
00:42:38.040 --> 00:42:39.290
the ConvolverNode.

994
00:42:39.290 --> 00:42:41.600
995
00:42:41.600 --> 00:42:48.560
So convolution is a process to
digitally simulate a space, or

996
00:42:48.560 --> 00:42:50.330
a process actually.

997
00:42:50.330 --> 00:42:53.910
Because you can use this to
simulate room ambiance, like

998
00:42:53.910 --> 00:42:56.210
the way sound bounces
around in this room.

999
00:42:56.210 --> 00:42:58.250
This room has kind of a
nice response to it.

1000
00:42:58.250 --> 00:43:02.560
I can hear my voice bouncing
off the back wall.

1001
00:43:02.560 --> 00:43:06.660
But you can also use it to
simulate an analog processor.

1002
00:43:06.660 --> 00:43:12.230
Something that you use to plug
an audio signal through.

1003
00:43:12.230 --> 00:43:14.140
The way that this works is you
use these things called

1004
00:43:14.140 --> 00:43:15.740
Impulse Response files.

1005
00:43:15.740 --> 00:43:18.480
And Impulse Response files
can be recorded.

1006
00:43:18.480 --> 00:43:21.270
You can literally go into a room
like this with a couple

1007
00:43:21.270 --> 00:43:25.230
microphones and a speaker, play
a set of sounds, and then

1008
00:43:25.230 --> 00:43:27.420
run that through this
convolution processing

1009
00:43:27.420 --> 00:43:30.900
software, and it creates
a sound file that is

1010
00:43:30.900 --> 00:43:33.000
representative of how this room

1011
00:43:33.000 --> 00:43:36.030
responds to a sound impulse.

1012
00:43:36.030 --> 00:43:39.090
Or you can have been generated
algorithmically.

1013
00:43:39.090 --> 00:43:41.550
Or you can just come up with
really wacky ones, which

1014
00:43:41.550 --> 00:43:44.250
usually has very unpredictable
results, of course.

1015
00:43:44.250 --> 00:43:50.150
But fundamentally, in order to
simulate different responses,

1016
00:43:50.150 --> 00:43:52.410
you have to use this
file, a sound file.

1017
00:43:52.410 --> 00:43:55.980
There are tons of these
available on the net, freely.

1018
00:43:55.980 --> 00:43:58.940
You can just go search for
Impulse Response files.

1019
00:43:58.940 --> 00:44:00.000
Tons of them are out there.

1020
00:44:00.000 --> 00:44:03.020
Lots of hall reverbs, room
reverbs, and things like that,

1021
00:44:03.020 --> 00:44:05.740
as well as some really
crazy ones.

1022
00:44:05.740 --> 00:44:08.520
Again, I do want to point out
the output of this node is

1023
00:44:08.520 --> 00:44:10.900
just the processed signal.

1024
00:44:10.900 --> 00:44:13.630
And typically, you don't
just hear the echos.

1025
00:44:13.630 --> 00:44:15.350
You hear the original
sound too.

1026
00:44:15.350 --> 00:44:17.170
So you probably want to mix
these together when you

1027
00:44:17.170 --> 00:44:19.270
actually use it.

1028
00:44:19.270 --> 00:44:21.790
But ConvolverNode is pretty
straightforward because it

1029
00:44:21.790 --> 00:44:24.860
basically has one property that
you really care about.

1030
00:44:24.860 --> 00:44:26.240
It's a buffer.

1031
00:44:26.240 --> 00:44:28.760
Remember I said these are
Impulse Response files.

1032
00:44:28.760 --> 00:44:29.700
They're sound files.

1033
00:44:29.700 --> 00:44:33.130
You load them the same way you
load any other sound sample.

1034
00:44:33.130 --> 00:44:35.370
You just set it here, rather
than setting it in

1035
00:44:35.370 --> 00:44:38.070
AudioBufferSource node.

1036
00:44:38.070 --> 00:44:42.040
So to do this, I'm going to use
my favorite drum sample

1037
00:44:42.040 --> 00:44:43.710
that I keep using.

1038
00:44:43.710 --> 00:44:45.141
[MUSIC PLAYS]

1039
00:44:45.141 --> 00:44:47.050
CHRIS WILSON: Turn that
down a little bit.

1040
00:44:47.050 --> 00:44:51.440
And so I took my drum sound, I
created a ConvolverNode, I

1041
00:44:51.440 --> 00:44:54.210
pumped the drum sound into that
ConvolverNode, but also

1042
00:44:54.210 --> 00:44:55.700
connected it to the speakers--

1043
00:44:55.700 --> 00:44:56.920
to the destination.

1044
00:44:56.920 --> 00:44:58.550
So I hear both of them.

1045
00:44:58.550 --> 00:45:01.030
And then all that I'm going to
do now, is I'm gonna switch

1046
00:45:01.030 --> 00:45:03.780
what the ImpulseResponseBuffer
is.

1047
00:45:03.780 --> 00:45:05.120
So I can change it to a hall--

1048
00:45:05.120 --> 00:45:08.410
[MUSIC ALTERS]

1049
00:45:08.410 --> 00:45:10.770
CHRIS WILSON: Which I
hope you can hear.

1050
00:45:10.770 --> 00:45:12.702
I can change it to
a spring reverb.

1051
00:45:12.702 --> 00:45:14.090
[MUSIC ALTERS]

1052
00:45:14.090 --> 00:45:17.500
CHRIS WILSON: Spring reverb is
an old analog processor that

1053
00:45:17.500 --> 00:45:19.490
literally used springs.

1054
00:45:19.490 --> 00:45:22.010
And you can kind of hear this
weird slapping noise going

1055
00:45:22.010 --> 00:45:22.920
back and forth as a

1056
00:45:22.920 --> 00:45:25.470
characteristic of spring reverb.

1057
00:45:25.470 --> 00:45:27.098
You can do a comb filter.

1058
00:45:27.098 --> 00:45:28.412
[MUSIC ALTERS]

1059
00:45:28.412 --> 00:45:30.396
CHRIS WILSON: Which has a
really, really awful sound.

1060
00:45:30.396 --> 00:45:32.570
I'm not gonna stay
on that one.

1061
00:45:32.570 --> 00:45:36.650
Or, my personal favorite with
drums, is a backwards reverb.

1062
00:45:36.650 --> 00:45:36.950
[MUSIC ALTERS]

1063
00:45:36.950 --> 00:45:39.530
CHRIS WILSON: Because you can
do any Impulse Response.

1064
00:45:39.530 --> 00:45:42.680
This Impulse Response may be
completely the opposite in

1065
00:45:42.680 --> 00:45:45.040
time of what you would
actually hear

1066
00:45:45.040 --> 00:45:47.000
in the reverb space.

1067
00:45:47.000 --> 00:45:48.353
So if I stop it.

1068
00:45:48.353 --> 00:45:50.325
[MUSIC FADES]

1069
00:45:50.325 --> 00:45:53.380
CHRIS WILSON: You can actually
hear the reversed

1070
00:45:53.380 --> 00:45:54.750
reverb sound of that.

1071
00:45:54.750 --> 00:45:57.390
1072
00:45:57.390 --> 00:45:58.170
OK.

1073
00:45:58.170 --> 00:46:02.790
So we've talked a lot
about how to build

1074
00:46:02.790 --> 00:46:07.310
these processing systems.

1075
00:46:07.310 --> 00:46:10.310
I want to talk for a minute
about how to synthesize sound.

1076
00:46:10.310 --> 00:46:13.970
How to do musical applications
with sound, not just provide

1077
00:46:13.970 --> 00:46:16.840
ambient environments
for sound.

1078
00:46:16.840 --> 00:46:18.330
First and foremost,
it's actually

1079
00:46:18.330 --> 00:46:20.160
really easy to do this.

1080
00:46:20.160 --> 00:46:23.840
If you go and just do a search
for Web Audio API demos,

1081
00:46:23.840 --> 00:46:27.290
there's a whole bunch of demos
out there that are different

1082
00:46:27.290 --> 00:46:28.050
synthesizers.

1083
00:46:28.050 --> 00:46:29.030
This is only one of them.

1084
00:46:29.030 --> 00:46:30.630
It's actually a fairly
simplistic one,

1085
00:46:30.630 --> 00:46:31.980
which is why use it.

1086
00:46:31.980 --> 00:46:32.460
But--

1087
00:46:32.460 --> 00:46:32.940
[PLAYS SYNTHESIZER]

1088
00:46:32.940 --> 00:46:35.730
CHRIS WILSON: It has controls
for all of these different

1089
00:46:35.730 --> 00:46:39.390
things that I'm playing
around with.

1090
00:46:39.390 --> 00:46:40.180
It's actually--

1091
00:46:40.180 --> 00:46:42.690
the hardest part about building
something like this

1092
00:46:42.690 --> 00:46:45.570
is providing the user
experience for it.

1093
00:46:45.570 --> 00:46:49.530
I've actually built a test-bed
synthesizer out that

1094
00:46:49.530 --> 00:46:52.060
has no UI at all.

1095
00:46:52.060 --> 00:46:55.250
And it's really easy-- like the
actual sound production.

1096
00:46:55.250 --> 00:46:57.670
I want to build an envelope, I
want to stick a filter in, I

1097
00:46:57.670 --> 00:47:00.740
want to control some other
properties of it, is like a

1098
00:47:00.740 --> 00:47:02.220
dozen lines of code.

1099
00:47:02.220 --> 00:47:05.310
The rest of it, the shell for
drawing knobs and everything

1100
00:47:05.310 --> 00:47:09.420
else is actually a lot
more troublesome.

1101
00:47:09.420 --> 00:47:12.640
And remember when I mentioned
before, you can actually

1102
00:47:12.640 --> 00:47:17.820
connect AudioNodes to
AudioParams, as well.

1103
00:47:17.820 --> 00:47:20.840
For those of you who are synth
geeks, like me-- because I've

1104
00:47:20.840 --> 00:47:24.960
loved synthesizers since
I was about 12--

1105
00:47:24.960 --> 00:47:27.060
this is how you get things
like low-frequency

1106
00:47:27.060 --> 00:47:27.710
oscillators.

1107
00:47:27.710 --> 00:47:30.050
It's how you do things
like FM synthesis.

1108
00:47:30.050 --> 00:47:31.950
They're actually just
intersecting two different

1109
00:47:31.950 --> 00:47:36.470
audio signals or multiplying
them together.

1110
00:47:36.470 --> 00:47:39.590
So the first and most
fundamental piece of

1111
00:47:39.590 --> 00:47:42.910
generating sound is
an oscillator.

1112
00:47:42.910 --> 00:47:46.120
Oscillators provide a periodic
waveform source.

1113
00:47:46.120 --> 00:47:50.190
It's going to draw for you, or
create for you, things like a

1114
00:47:50.190 --> 00:47:50.570
sine

1115
00:47:50.570 --> 00:47:52.519
wave, [BEEP]

1116
00:47:52.519 --> 00:47:53.485
CHRIS WILSON: Square wave.

1117
00:47:53.485 --> 00:47:54.934
[BEEP]

1118
00:47:54.934 --> 00:47:55.417
CHRIS WILSON: Sawtooth wave.

1119
00:47:55.417 --> 00:47:57.350
[BEEP]

1120
00:47:57.350 --> 00:47:58.897
CHRIS WILSON: And
a triangle wave.

1121
00:47:58.897 --> 00:48:00.270
[BEEP]

1122
00:48:00.270 --> 00:48:02.400
CHRIS WILSON: Those all sound
kind of vaguely similar.

1123
00:48:02.400 --> 00:48:03.930
It's because I didn't
alter the pitch.

1124
00:48:03.930 --> 00:48:05.360
I haven't filtered them.

1125
00:48:05.360 --> 00:48:07.690
They're not super complex
waveforms.

1126
00:48:07.690 --> 00:48:08.600
But they are different.

1127
00:48:08.600 --> 00:48:10.840
And they have very different
harmonic characteristics,

1128
00:48:10.840 --> 00:48:13.640
which give you some interesting
properties.

1129
00:48:13.640 --> 00:48:16.120
So an oscillator is an
AudioSourceNode.

1130
00:48:16.120 --> 00:48:18.490
It's an audio node that you
can connect up to a

1131
00:48:18.490 --> 00:48:19.610
destination.

1132
00:48:19.610 --> 00:48:24.280
It lets you control the
frequency in hertz, it

1133
00:48:24.280 --> 00:48:26.000
actually also lets you
control the frequency

1134
00:48:26.000 --> 00:48:28.740
with the detune parameter.

1135
00:48:28.740 --> 00:48:31.730
Detuning basically lets you
control using a different unit

1136
00:48:31.730 --> 00:48:32.840
known as cents.

1137
00:48:32.840 --> 00:48:36.040
Cents are great for musical
applications because in an

1138
00:48:36.040 --> 00:48:39.240
equal-tempered scale there's
100 cents per note.

1139
00:48:39.240 --> 00:48:42.840
So it's super easy to say,
I want three octaves up.

1140
00:48:42.840 --> 00:48:47.380
It's three times 12 times 100.

1141
00:48:47.380 --> 00:48:49.230
And just like
AudioBufferSourceNode you have

1142
00:48:49.230 --> 00:48:51.890
noteOn, noteOff, and that
sort of things.

1143
00:48:51.890 --> 00:48:54.470
Now, I did skip that we
have another type up

1144
00:48:54.470 --> 00:48:57.320
there, called custom.

1145
00:48:57.320 --> 00:49:01.260
Custom lets us use this really
interesting oscillator called

1146
00:49:01.260 --> 00:49:03.020
a wavetable oscillator.

1147
00:49:03.020 --> 00:49:05.910
Wavetables are not a sample
playback buffer.

1148
00:49:05.910 --> 00:49:08.730
The term got misused in
the late '80s and

1149
00:49:08.730 --> 00:49:10.910
early '90s for a while.

1150
00:49:10.910 --> 00:49:16.530
It's actually a way to produce
sound that uses--

1151
00:49:16.530 --> 00:49:18.311
looks like my page didn't
load, hang on.

1152
00:49:18.311 --> 00:49:21.400
1153
00:49:21.400 --> 00:49:24.070
Let's try this again.

1154
00:49:24.070 --> 00:49:25.320
There we go.

1155
00:49:25.320 --> 00:49:27.370
1156
00:49:27.370 --> 00:49:33.040
It creates wave forms by adding
different coefficients

1157
00:49:33.040 --> 00:49:35.520
onto harmonic partials.

1158
00:49:35.520 --> 00:49:39.660
So it basically stacks up
harmonics of the same tone.

1159
00:49:39.660 --> 00:49:42.850
And then lets you control how
much of each harmonic to draw,

1160
00:49:42.850 --> 00:49:45.010
or to play, to add
to the waveform.

1161
00:49:45.010 --> 00:49:46.520
So here, we start out
with a fairly

1162
00:49:46.520 --> 00:49:47.600
simple set of harmonics.

1163
00:49:47.600 --> 00:49:48.040
[DEEP BUZZING NOISE]

1164
00:49:48.040 --> 00:49:49.866
CHRIS WILSON: There's three
harmonics playing.

1165
00:49:49.866 --> 00:49:51.500
And it sounds pretty basic.

1166
00:49:51.500 --> 00:49:53.756
It's not a very rich
sound or anything.

1167
00:49:53.756 --> 00:49:55.930
But I can draw in more--

1168
00:49:55.930 --> 00:49:59.080
[SOUND ALTERS]

1169
00:49:59.080 --> 00:50:00.926
CHRIS WILSON: And you can get a
lot more interesting sound.

1170
00:50:00.926 --> 00:50:04.050
1171
00:50:04.050 --> 00:50:05.510
So this is kind of weird.

1172
00:50:05.510 --> 00:50:09.940
It's a very deep area to build
complex waveforms.

1173
00:50:09.940 --> 00:50:11.140
Because you can sit there
and tweak the

1174
00:50:11.140 --> 00:50:12.390
partials all you want.

1175
00:50:12.390 --> 00:50:14.850
1176
00:50:14.850 --> 00:50:16.800
But I don't want to go
too deeply into it.

1177
00:50:16.800 --> 00:50:19.340
Because we could just sit
here and play with

1178
00:50:19.340 --> 00:50:20.380
partials all day.

1179
00:50:20.380 --> 00:50:22.210
It's a different way
of creating sounds.

1180
00:50:22.210 --> 00:50:23.990
It's a different generation
system.

1181
00:50:23.990 --> 00:50:26.480
It actually was very popular
in the early '80s.

1182
00:50:26.480 --> 00:50:29.460
There was a PPG wave synthesizer
that kind of

1183
00:50:29.460 --> 00:50:31.390
kicked off the usage of this.

1184
00:50:31.390 --> 00:50:35.020
The great thing, to me,
is this creates a very

1185
00:50:35.020 --> 00:50:38.970
spectrum-rich sound, creates a
lot of harmonics, which was

1186
00:50:38.970 --> 00:50:42.080
super useful in building
the vocoder.

1187
00:50:42.080 --> 00:50:43.880
The sound that I used
for that vocoder

1188
00:50:43.880 --> 00:50:45.130
is actually a wavetable.

1189
00:50:45.130 --> 00:50:51.620
1190
00:50:51.620 --> 00:50:52.190
OK.

1191
00:50:52.190 --> 00:50:54.010
So we've created sound.

1192
00:50:54.010 --> 00:50:55.850
Now we need to process
it a little bit more.

1193
00:50:55.850 --> 00:50:59.330
And there a couple of node
types that are really

1194
00:50:59.330 --> 00:51:00.400
musically interesting.

1195
00:51:00.400 --> 00:51:03.290
The first of these is
Compressor node.

1196
00:51:03.290 --> 00:51:06.200
Now compressors are a very
common musical tool.

1197
00:51:06.200 --> 00:51:09.830
In fact, that picture of a
rack of music equipment?

1198
00:51:09.830 --> 00:51:12.080
That's actually from
my basement studio.

1199
00:51:12.080 --> 00:51:15.190
One of the units in that is
a hardware compressor.

1200
00:51:15.190 --> 00:51:18.520
And compression basically
controls the volume peaks of a

1201
00:51:18.520 --> 00:51:21.990
sound, but tries to increase
the overall volume.

1202
00:51:21.990 --> 00:51:25.860
So this is a before-and-after
picture of the same sound

1203
00:51:25.860 --> 00:51:28.320
sample, of me playing
my bass guitar.

1204
00:51:28.320 --> 00:51:29.800
The first one is uncompressed.

1205
00:51:29.800 --> 00:51:31.160
The second one is compressed.

1206
00:51:31.160 --> 00:51:34.190
I've actually increased the
average volume, but I've had

1207
00:51:34.190 --> 00:51:38.360
to turn it down in a couple of
places to make sure that I

1208
00:51:38.360 --> 00:51:41.550
don't spike past the
clipping range.

1209
00:51:41.550 --> 00:51:44.480
1210
00:51:44.480 --> 00:51:47.180
So this is kind of like having
an engineer who sits there

1211
00:51:47.180 --> 00:51:50.680
with his hand on the volume knob
with an extremely fast

1212
00:51:50.680 --> 00:51:51.740
reaction time.

1213
00:51:51.740 --> 00:51:55.718
You can actually see
how this works--

1214
00:51:55.718 --> 00:51:57.150
[MUSIC PLAYS]

1215
00:51:57.150 --> 00:51:57.380
CHRIS WILSON: Here.

1216
00:51:57.380 --> 00:52:01.000
These are really standardized
controls, by the way.

1217
00:52:01.000 --> 00:52:04.440
The AudioParams that give you
controls on Compressor node

1218
00:52:04.440 --> 00:52:07.030
for threshold, knee, ratio,
attack, and release.

1219
00:52:07.030 --> 00:52:10.400
These are the five standard
things that you get on a

1220
00:52:10.400 --> 00:52:11.130
compressor.

1221
00:52:11.130 --> 00:52:13.720
There's actually knobs that say
threshold, knee, ratio,

1222
00:52:13.720 --> 00:52:15.840
attack, and release
on that hardware

1223
00:52:15.840 --> 00:52:16.776
compressor that I have.

1224
00:52:16.776 --> 00:52:18.650
[MUSIC VOLUME INCREASES]

1225
00:52:18.650 --> 00:52:20.890
CHRIS WILSON: Now the little
bouncing red bar shows you how

1226
00:52:20.890 --> 00:52:23.340
much compression is being
applied at any

1227
00:52:23.340 --> 00:52:24.920
given point in time.

1228
00:52:24.920 --> 00:52:31.800
So I can crank the threshold
down, crank the knee up, crank

1229
00:52:31.800 --> 00:52:33.016
the ratio up.

1230
00:52:33.016 --> 00:52:33.890
[MUSIC ALTERS]

1231
00:52:33.890 --> 00:52:35.380
CHRIS WILSON: And you can
probably tell in the back.

1232
00:52:35.380 --> 00:52:37.470
It sounds a little
muddled, for me.

1233
00:52:37.470 --> 00:52:39.060
But you can probably
tell in the back.

1234
00:52:39.060 --> 00:52:45.350
Suddenly, the peaks aren't so
loud, but the whole sound is a

1235
00:52:45.350 --> 00:52:48.140
little bit muddled right
now, actually.

1236
00:52:48.140 --> 00:52:50.445
Because you don't generally
over-compress like this.

1237
00:52:50.445 --> 00:52:53.210
If you want to, you can change
the attack time, and you'll

1238
00:52:53.210 --> 00:52:54.715
start hearing some of the--

1239
00:52:54.715 --> 00:52:56.110
[MUSIC ALTERS]

1240
00:52:56.110 --> 00:52:57.520
CHRIS WILSON: Some of the
poppiness of the attack is

1241
00:52:57.520 --> 00:53:01.658
back, which is why you have all
these different controls.

1242
00:53:01.658 --> 00:53:02.600
[MUSIC STOPS]

1243
00:53:02.600 --> 00:53:04.690
CHRIS WILSON: So I'm not going
to do a class in how to use

1244
00:53:04.690 --> 00:53:05.660
compressors.

1245
00:53:05.660 --> 00:53:09.560
I just wanted to say, this
is a tool that we have.

1246
00:53:09.560 --> 00:53:13.130
The last processing node
tool in our toolbox is

1247
00:53:13.130 --> 00:53:14.980
a WaveShaper node.

1248
00:53:14.980 --> 00:53:17.630
WaveShapers are a little
bit complex to explain.

1249
00:53:17.630 --> 00:53:21.630
Basically, what they do is they
let you create a curve, a

1250
00:53:21.630 --> 00:53:25.070
response curve, that's like
a sample look-up table.

1251
00:53:25.070 --> 00:53:27.550
And it happens on every
sound sample.

1252
00:53:27.550 --> 00:53:30.210
So for every sample it
says, I'm actually

1253
00:53:30.210 --> 00:53:31.140
going to return this.

1254
00:53:31.140 --> 00:53:36.690
If I set a curve that was
actually just a flat line on a

1255
00:53:36.690 --> 00:53:39.700
45 degree angle down here, then
it would actually just

1256
00:53:39.700 --> 00:53:42.780
have the output be exactly
the same as the input.

1257
00:53:42.780 --> 00:53:46.270
Otherwise it's going to change
the waveforms that go through.

1258
00:53:46.270 --> 00:53:49.630
Not control the volume over
time, like a Compressor node.

1259
00:53:49.630 --> 00:53:52.000
But actually change the
waveforms and kind of squish

1260
00:53:52.000 --> 00:53:53.770
the peaks down a little bit.

1261
00:53:53.770 --> 00:53:57.670
So I can use this to create like
distortion and overdrive.

1262
00:53:57.670 --> 00:53:58.130
[GUITAR]

1263
00:53:58.130 --> 00:54:02.238
CHRIS WILSON: So here, you have
me playing the guitar.

1264
00:54:02.238 --> 00:54:06.625
And if I just drive the gain a
little bit more to push up

1265
00:54:06.625 --> 00:54:09.300
into the areas that
get clipped off--

1266
00:54:09.300 --> 00:54:11.505
[GUITAR DISTORTS]

1267
00:54:11.505 --> 00:54:13.170
CHRIS WILSON: You can hear
it sounds like a guitar

1268
00:54:13.170 --> 00:54:17.160
distortion pedal, or
over-driving an amplifier.

1269
00:54:17.160 --> 00:54:18.440
And this is just a--

1270
00:54:18.440 --> 00:54:19.060
[GUITAR STOPS]

1271
00:54:19.060 --> 00:54:21.200
CHRIS WILSON: A single sound
curve that I created and

1272
00:54:21.200 --> 00:54:22.300
shoved into there.

1273
00:54:22.300 --> 00:54:25.080
You can actually change these
curves infinitely.

1274
00:54:25.080 --> 00:54:29.130
You can give it any size of
array curve that you want.

1275
00:54:29.130 --> 00:54:31.860
And you can change what the
response looks like and get

1276
00:54:31.860 --> 00:54:33.350
very, very different
distortion effects.

1277
00:54:33.350 --> 00:54:36.620
1278
00:54:36.620 --> 00:54:37.930
OK.

1279
00:54:37.930 --> 00:54:40.060
Almost there.

1280
00:54:40.060 --> 00:54:43.800
So I haven't mentioned mono
sound versus stereo sound,

1281
00:54:43.800 --> 00:54:47.550
versus 5.1 surround sound,
or anything like that.

1282
00:54:47.550 --> 00:54:50.570
Mostly because the Web Audio
API, for the most part, just

1283
00:54:50.570 --> 00:54:52.380
kind of handles it for you.

1284
00:54:52.380 --> 00:54:54.500
You don't have to deal
with channels.

1285
00:54:54.500 --> 00:54:57.380
It just sort of magically
upgrades whenever it needs to

1286
00:54:57.380 --> 00:55:01.150
go to stereo, or if you have a
mono signal, or upgrades all

1287
00:55:01.150 --> 00:55:04.440
the way to 5.1 surround sound
if it has to, whatever.

1288
00:55:04.440 --> 00:55:06.950
If you really do want
to poke into channel

1289
00:55:06.950 --> 00:55:08.870
control, you can do that.

1290
00:55:08.870 --> 00:55:12.790
Most of those connections may
be more than one channel.

1291
00:55:12.790 --> 00:55:15.990
And you just don't have to worry
about whether it's a

1292
00:55:15.990 --> 00:55:17.790
mono or stereo signal.

1293
00:55:17.790 --> 00:55:20.540
If you want to, use an audio
channel splitter and an audio

1294
00:55:20.540 --> 00:55:22.570
channel merger.

1295
00:55:22.570 --> 00:55:25.090
So for example, I mentioned
a ping-pong delay.

1296
00:55:25.090 --> 00:55:28.050
Ping-pong delay bounces the
delay back and forth between

1297
00:55:28.050 --> 00:55:29.070
the left and the
right channels.

1298
00:55:29.070 --> 00:55:31.853
So it sounds kind
of like this--

1299
00:55:31.853 --> 00:55:34.110
[BELL DINGS]

1300
00:55:34.110 --> 00:55:36.220
CHRIS WILSON: Hopefully you hear
that bouncing between the

1301
00:55:36.220 --> 00:55:37.920
channels back there.

1302
00:55:37.920 --> 00:55:38.485
[BELL DINGS]

1303
00:55:38.485 --> 00:55:41.000
CHRIS WILSON: You'd accomplish
this just by taking two

1304
00:55:41.000 --> 00:55:43.745
delays, feeding the original
signal into one side,

1305
00:55:43.745 --> 00:55:44.090
[BELL DINGS]

1306
00:55:44.090 --> 00:55:45.890
CHRIS WILSON: And then crossing
the feedback loop.

1307
00:55:45.890 --> 00:55:48.480
So it goes from the left channel
output into the right

1308
00:55:48.480 --> 00:55:51.190
channel's delay node and
then back the same

1309
00:55:51.190 --> 00:55:54.210
way the other direction.

1310
00:55:54.210 --> 00:55:57.460
And, of course, you can
individually control in here

1311
00:55:57.460 --> 00:56:02.580
how long the delay is for each
side, and that kind of stuff.

1312
00:56:02.580 --> 00:56:06.340
So I mentioned at the very
beginning you can actually

1313
00:56:06.340 --> 00:56:09.760
plug in and do any kind of
custom JavaScript you want to,

1314
00:56:09.760 --> 00:56:11.400
on a sound node.

1315
00:56:11.400 --> 00:56:13.410
JavaScriptAudioNode is
how you do that.

1316
00:56:13.410 --> 00:56:16.260
You plug in, you set up an event
listener, and then you

1317
00:56:16.260 --> 00:56:20.650
process buffers of audio
in that event listener.

1318
00:56:20.650 --> 00:56:22.060
I'm not going to go into
the demo of this.

1319
00:56:22.060 --> 00:56:24.770
It's really subtle and it takes
a lot of explaining.

1320
00:56:24.770 --> 00:56:28.570
And we are at about three
minutes left, I think.

1321
00:56:28.570 --> 00:56:31.080
So but this is how you do it.

1322
00:56:31.080 --> 00:56:34.200
There's some pretty good
examples of how to do it on

1323
00:56:34.200 --> 00:56:36.770
the Chromium sight.

1324
00:56:36.770 --> 00:56:39.840
And I want to jump to where
we are with Web Audio.

1325
00:56:39.840 --> 00:56:41.490
One of the first questions
is always, So

1326
00:56:41.490 --> 00:56:43.400
is this Chrome only?

1327
00:56:43.400 --> 00:56:47.010
And it is supported in Chrome,
Windows, Mac OS, and Linux.

1328
00:56:47.010 --> 00:56:49.200
ChromeOS actually just
enabled it, as well.

1329
00:56:49.200 --> 00:56:51.650
So we have it on Chrome OS.

1330
00:56:51.650 --> 00:56:55.000
But even more interestingly,
Safari has now enabled in

1331
00:56:55.000 --> 00:56:56.350
nightly builds and
it's shipping in

1332
00:56:56.350 --> 00:56:58.570
the Safari 5.2 beta.

1333
00:56:58.570 --> 00:57:00.650
And, my personal favorite,
it's now on the

1334
00:57:00.650 --> 00:57:02.510
iOS 6 betas, also.

1335
00:57:02.510 --> 00:57:07.430
So you can get the Web Audio
API on your iPhone or iPad.

1336
00:57:07.430 --> 00:57:10.900
Apple actually covered the Web
Audio API in one of their

1337
00:57:10.900 --> 00:57:13.520
sessions in WWDC earlier
this month, which

1338
00:57:13.520 --> 00:57:15.580
I thought was great.

1339
00:57:15.580 --> 00:57:20.300
And we have some really active
discussion going on on the Web

1340
00:57:20.300 --> 00:57:22.510
Audio working group, of
which I'm a member.

1341
00:57:22.510 --> 00:57:25.570
We have a bunch of active
participants from Mozilla,

1342
00:57:25.570 --> 00:57:28.880
Opera, the Internet Explorer
team, a bunch of other

1343
00:57:28.880 --> 00:57:31.230
industry people, as well,
helping to get the

1344
00:57:31.230 --> 00:57:34.500
specification to the point where
we can get rid of vendor

1345
00:57:34.500 --> 00:57:38.290
prefix and turn it into
a solid standard.

1346
00:57:38.290 --> 00:57:40.600
And, of course, if you need
it today though in other

1347
00:57:40.600 --> 00:57:43.580
browsers, use ChromeFrame.

1348
00:57:43.580 --> 00:57:46.570
I promised I would plug
for ChromeFrame, so.

1349
00:57:46.570 --> 00:57:49.610
So we are just about
out of time.

1350
00:57:49.610 --> 00:57:52.520
But I did want to call out two
features that I'm actually

1351
00:57:52.520 --> 00:57:55.090
really excited about coming
up in the future.

1352
00:57:55.090 --> 00:57:58.520
They're not quite there yet, so
I can't demo them, really.

1353
00:57:58.520 --> 00:58:00.460
But they are exciting.

1354
00:58:00.460 --> 00:58:03.880
And I also want to kind of
paint a picture of what I

1355
00:58:03.880 --> 00:58:06.010
really hope people build
and what I'm really

1356
00:58:06.010 --> 00:58:08.300
excited about building.

1357
00:58:08.300 --> 00:58:13.610
First and foremost, I'm super
pumped to have audio input.

1358
00:58:13.610 --> 00:58:16.166
Jan can tell you I keep pinging
the team like, When am

1359
00:58:16.166 --> 00:58:17.410
I gonna get my audio input?

1360
00:58:17.410 --> 00:58:19.700
When am I going to get
my audio input?

1361
00:58:19.700 --> 00:58:21.510
Mostly because I want
to plug a live

1362
00:58:21.510 --> 00:58:23.800
microphone into my vocoder.

1363
00:58:23.800 --> 00:58:27.830
And do stuff like that, like
plug my guitar in and create

1364
00:58:27.830 --> 00:58:30.350
my own guitar amp simulators,
and stuff like that.

1365
00:58:30.350 --> 00:58:34.190
Because they're pretty easy to
do using the Web Audio API.

1366
00:58:34.190 --> 00:58:38.850
Not quite there yet, hopefully
will be in the near future.

1367
00:58:38.850 --> 00:58:41.830
The second one is one that is
a little bit further out.

1368
00:58:41.830 --> 00:58:46.520
But I'm actually the co-editor
of a proposal in the W3C to do

1369
00:58:46.520 --> 00:58:47.660
MIDI input.

1370
00:58:47.660 --> 00:58:50.210
Some of you up front may notice
that I've actually

1371
00:58:50.210 --> 00:58:53.450
driven some of these demos off
a little keyboard here.

1372
00:58:53.450 --> 00:58:56.760
I'm cheating because
that uses a plugin.

1373
00:58:56.760 --> 00:58:58.960
And I've just hard-wired the
plug-in in to do the

1374
00:58:58.960 --> 00:59:00.400
appropriate thing.

1375
00:59:00.400 --> 00:59:04.860
But the specification that I'm
co-editing will eventually

1376
00:59:04.860 --> 00:59:08.180
allow us to have that as part
of the web platform.

1377
00:59:08.180 --> 00:59:10.530
And we can natively just
handle MIDI input.

1378
00:59:10.530 --> 00:59:13.040
So you can do controllers,
you can access external

1379
00:59:13.040 --> 00:59:15.730
synthesizers, you can do all
kinds of cool stuff.

1380
00:59:15.730 --> 00:59:18.620
Light shows are generally driven
by MIDI, as well, like

1381
00:59:18.620 --> 00:59:21.730
all the controllers for the
fancy lights last night are

1382
00:59:21.730 --> 00:59:22.980
driven through that.

1383
00:59:22.980 --> 00:59:25.280
1384
00:59:25.280 --> 00:59:27.470
Now for awesome apps
that I really want

1385
00:59:27.470 --> 00:59:28.980
to see people build?

1386
00:59:28.980 --> 00:59:29.850
There's tons of them.

1387
00:59:29.850 --> 00:59:32.750
First and foremost, great game
audio, like really richly

1388
00:59:32.750 --> 00:59:33.800
interactive.

1389
00:59:33.800 --> 00:59:35.030
Don't just make it beep.

1390
00:59:35.030 --> 00:59:39.170
Make it beep differently
depending on some parameter I

1391
00:59:39.170 --> 00:59:40.150
can't even think of.

1392
00:59:40.150 --> 00:59:42.330
Like how fast someone's
running, or whatever.

1393
00:59:42.330 --> 00:59:45.190
But we have the tools to build
shared music composition

1394
00:59:45.190 --> 00:59:47.460
tools, and digital audio
workstations, and all this

1395
00:59:47.460 --> 00:59:48.710
kind of stuff today.

1396
00:59:48.710 --> 00:59:50.910
1397
00:59:50.910 --> 00:59:54.210
So with that, no deck is
complete without tons of

1398
00:59:54.210 --> 00:59:55.670
references.

1399
00:59:55.670 --> 00:59:57.280
You don't have to
memorize these

1400
00:59:57.280 --> 00:59:59.080
because the deck's posted.

1401
00:59:59.080 --> 01:00:01.110
You don't even have to memorize
the thing at the top,

1402
01:00:01.110 --> 01:00:04.680
because it's on my last slide in
a shortened form and it'll

1403
01:00:04.680 --> 01:00:06.080
be easier to read.

1404
01:00:06.080 --> 01:00:09.700
If you don't already follow
Chrome developers on Google+,

1405
01:00:09.700 --> 01:00:11.270
please add us to a circle.

1406
01:00:11.270 --> 01:00:12.770
We do lots of communication
there.

1407
01:00:12.770 --> 01:00:15.420
But we do try to keep it nice
and concise and useful and

1408
01:00:15.420 --> 01:00:17.790
interesting.

1409
01:00:17.790 --> 01:00:20.610
And with that, thank you.

1410
01:00:20.610 --> 01:00:22.050
We're basically out of time.

1411
01:00:22.050 --> 01:00:23.510
But I'm going to
be around now.

1412
01:00:23.510 --> 01:00:26.500
I'll be outside once we've
packed up here.

1413
01:00:26.500 --> 01:00:29.220
And I'll be doing office hours
for the next hour or two, too,

1414
01:00:29.220 --> 01:00:30.850
if you have other questions.

1415
01:00:30.850 --> 01:00:31.150
Thanks.

1416
01:00:31.150 --> 01:00:35.435
[APPLAUSE]

WEBVTT

1
00:00:07.339 --> 00:00:13.340
&gt;&gt;Boris Smus: All right. Hey, folks, good
to see so many people in the room. Can everyone

2
00:00:13.340 --> 00:00:18.650
hear me fine?
Great. So my name is Boris Smus. I'm an engineer

3
00:00:18.650 --> 00:00:23.640
in the Chrome developer relations team. And
this talk is called Fast User Interface for

4
00:00:23.640 --> 00:00:30.570
the cross-device Web. So before talking about
this, let me motivate the subject a little

5
00:00:30.570 --> 00:00:36.239
bit. Who cares?
And I care and you should care because this

6
00:00:36.239 --> 00:00:41.270
is the current state of mobile internet usage
compared to desktop internet usage. So you

7
00:00:41.270 --> 00:00:48.270
can see the projected cross-over point for
when mobile becomes more used, and this is

8
00:00:48.380 --> 00:00:55.000
sometime around 2013, 2014. This is all internet
use, so not just Web. The Web is currently

9
00:00:55.000 --> 00:01:02.000
about 10% of all -- mobile Web is about 10%
of all Web usage and it's been doubling every

10
00:01:02.510 --> 00:01:09.510
year, so expect this to change very drastically.
Note that I call the talk cross-device, and

11
00:01:11.280 --> 00:01:17.189
not mobile, because the term mobile is a little
bit overloaded. Does it include tablets?

12
00:01:17.189 --> 00:01:21.590
Does it include other kinds of devices like
TVs, cars, et cetera?

13
00:01:21.590 --> 00:01:24.279
And what is the opposite of mobile?
Stationary?

14
00:01:24.279 --> 00:01:29.369
Desktop?
Not clear. So I'm not going to jump into pedantic

15
00:01:29.369 --> 00:01:35.859
discussions about this. Instead, clearly,
this is not a mobile device, so this is a

16
00:01:35.859 --> 00:01:42.259
desktop, and many people still think of this
as the target for the Web. But, in fact, the

17
00:01:42.259 --> 00:01:48.009
Web looks a lot more like this. We have a
mass of devices that all access -- that all

18
00:01:48.009 --> 00:01:53.969
expect Web content to serve correctly for
them, tablets, SmartPhones, et cetera, it's

19
00:01:53.969 --> 00:01:59.630
very complex landscape, and it's only going
to get more complex and more interesting with

20
00:01:59.630 --> 00:02:06.630
future interactions that can include gestural
UIs, handtracking, full body tracking, et

21
00:02:07.099 --> 00:02:13.940
cetera, or audio input. So how can we talk
about this broad topic?

22
00:02:13.940 --> 00:02:18.299
There are still a set of common issues that
we need to tackle for all of these problems

23
00:02:18.299 --> 00:02:24.390
that I've discussed. We have a wide variety
of form factors, as you saw a couple of slides

24
00:02:24.390 --> 00:02:29.599
ago. In addition we have CPUs and networks
that are much, much slower and much less predictable

25
00:02:29.599 --> 00:02:35.189
in many cases on mobile devices. We need to
deal with new kinds of input, specifically

26
00:02:35.189 --> 00:02:40.390
touch and multi-touch, and we have issues
with developing when your host machine is

27
00:02:40.390 --> 00:02:45.730
not your target machine. So I'll talk more
about that, in addition. So this is -- these

28
00:02:45.730 --> 00:02:51.790
are all issues, but they're also -- this is
also a outline for the rest of the talk. So

29
00:02:51.790 --> 00:02:57.700
let's jump right in into the form factor question.
And how do we support multiple devices that

30
00:02:57.700 --> 00:03:04.700
access our site?
First extreme is we simply create one version.

31
00:03:05.909 --> 00:03:11.150
And some people do this. Some of the examples
of sites that do -- that take this approach

32
00:03:11.150 --> 00:03:17.640
are shown here. We have -- you can see text
that's not very clearly readable. It's very

33
00:03:17.640 --> 00:03:23.760
small on a mobile device. Text that's being
cut off because the developers didn't intend

34
00:03:23.760 --> 00:03:29.489
it to be used on such a screen, or in this
last example, we have actually two versions,

35
00:03:29.489 --> 00:03:33.459
one of which says the device doesn't work
on your phone, or the application doesn't

36
00:03:33.459 --> 00:03:39.379
work on your phone. Sorry. So this is not
a very good extreme to be at. The other opposite

37
00:03:39.379 --> 00:03:46.370
end of the spectrum is to create a version
for each device, so we have here a very incomplete

38
00:03:46.370 --> 00:03:52.249
list of sound devices in the market and you
can simply say, okay, let's develop a version

39
00:03:52.249 --> 00:03:56.689
for each. You can see this has ten devices,
there's probably hundreds, maybe thousands

40
00:03:56.689 --> 00:04:01.209
of devices out there. It's simply not feasible
to do this, especially if you take into account

41
00:04:01.209 --> 00:04:05.749
the number of browsers that exists on some
platforms. For example, Android supports a

42
00:04:05.749 --> 00:04:11.469
wide variety of browsers. So we need to find
some sort of middle ground, keeping in mind

43
00:04:11.469 --> 00:04:16.620
this tradeoff that the more versions you create
the better each one can be from a user experience

44
00:04:16.620 --> 00:04:23.220
perspective but the more effort it will require.
So the question then is where can we save

45
00:04:23.220 --> 00:04:27.680
some effort?
And how can we make this a -- how can we make

46
00:04:27.680 --> 00:04:34.680
a better decision what to build?
So we have two sort of axes to choose from.

47
00:04:35.830 --> 00:04:42.830
We have platforms and form factors. Let's
talk about platforms. So native platforms,

48
00:04:44.639 --> 00:04:51.000
this is a bit of an aside, they provide human
interface guidelines and UI frameworks, so

49
00:04:51.000 --> 00:04:56.509
this is on the -- on the right, example of
a human interface guideline for Android, it

50
00:04:56.509 --> 00:05:01.819
provides a set of common UI controls and the
corresponding UI framework makes it really

51
00:05:01.819 --> 00:05:08.280
easy to build that kind of UI for a developer.
So the point of this is to make it -- to have

52
00:05:08.280 --> 00:05:13.539
developers fall into a pit of success by default.
If you try to do this sort of thing on the

53
00:05:13.539 --> 00:05:20.539
Web, as some people have, you quickly run
into problems, so emulating native UIs is

54
00:05:22.050 --> 00:05:28.430
a perilous path. It's hard to implement. You're
going to be always slightly off and look and/or

55
00:05:28.430 --> 00:05:34.830
feel, and even once you've done this painstaking
effort that some people have taken, you still

56
00:05:34.830 --> 00:05:40.500
have to repeat that same process on every
other platform that you want to support. So

57
00:05:40.500 --> 00:05:44.979
if you want to read more about some pour soul
that did this, you should check out this guy's

58
00:05:44.979 --> 00:05:49.229
blog post. It's very detailed and good. He
goes into details like you can see a little

59
00:05:49.229 --> 00:05:56.229
bit of diagonal artifact here in the CSS version
of this platform. So that kind of level of

60
00:05:57.430 --> 00:06:03.580
detail. So generally speaking platform differences
vary -- platform differences are both small,

61
00:06:03.580 --> 00:06:09.419
so we can have different styles for buttons,
but some of them may appear bigger, for example,

62
00:06:09.419 --> 00:06:15.150
the placement of navigation bar, the Android
human interface guideline says to place it

63
00:06:15.150 --> 00:06:21.060
at the top of the screen whereas the IOS one
places it on the bottom. Fairly major change,

64
00:06:21.060 --> 00:06:25.940
but it's important to note that these are
differences that -- or, sorry, these are rules

65
00:06:25.940 --> 00:06:31.330
that are meant to be broken, and in many cases
are. So on Android many applications place

66
00:06:31.330 --> 00:06:36.569
the tool bar on the bottom, whereas on IOS
for example, on iPad the guidelines actually

67
00:06:36.569 --> 00:06:43.569
say to place it on the top. If we look at
form factor differences, though, these are

68
00:06:44.039 --> 00:06:48.940
much bigger. We have completely different
usage patterns, phones that you hold with

69
00:06:48.940 --> 00:06:55.599
one hand, and tablets that you hold with two.
Major variations in screen real estate. So

70
00:06:55.599 --> 00:07:02.599
these form factor differences I would say
trump platform differences, so as a first

71
00:07:03.240 --> 00:07:08.300
cut, and I'm not saying that this is perfect
for your application, we can consider having

72
00:07:08.300 --> 00:07:15.300
multiple versions of our site, and compromise
to phone, tablet and desktop, just as a starting

73
00:07:18.879 --> 00:07:24.110
point. So how do we actually build this?
We build this -- there's two possible angles

74
00:07:24.110 --> 00:07:28.349
to come at it from. We can start from single
version and make tweaks -- diversion tweaks

75
00:07:28.349 --> 00:07:34.120
to that version, or we can say up front we're
going to build three versions and serve the

76
00:07:34.120 --> 00:07:41.120
correct one. So the first version, many of
you are probably familiar with CSS media queries.

77
00:07:42.599 --> 00:07:49.419
In case you're not, it's an easy way to tweak
your CSS style sheets depending on properties

78
00:07:49.419 --> 00:07:55.979
of your device. So here I have a media query
which says if the screen is less than 1,000

79
00:07:55.979 --> 00:08:02.979
pixels, then hide the side bar. So this is
pretty straightforward, and is used to create

80
00:08:03.550 --> 00:08:10.550
websites that look like this. So here is a
German design magazine, and you can see, as

81
00:08:13.050 --> 00:08:20.050
I resize the page, the styling changes subtly.
You will see -- you'll notice also that Chrome

82
00:08:23.319 --> 00:08:28.969
has a minimum size. Let me show you a cool
trick that you can -- you may not know. I

83
00:08:28.969 --> 00:08:35.169
can actually resize the page using the developer
tools. Resize it back to the correct size

84
00:08:35.169 --> 00:08:41.980
here. Switch over to Dev Tools, and I will
override device metrics here and pick the

85
00:08:41.980 --> 00:08:48.980
resolution that I want. Just set it to 320
by 480, and you can see I've sized it down

86
00:08:49.440 --> 00:08:56.160
-- I couldn't use Chrome natively -- or sorry,
I couldn't resize Chrome to be this small.

87
00:08:56.160 --> 00:09:03.160
You can get a good preview of how these sites
look like using this feature. But there's

88
00:09:06.350 --> 00:09:11.260
limitations to this approach, right?
We're talking here about a shared DOM, shared

89
00:09:11.260 --> 00:09:17.060
JavaScript and simply tweaking the CSS. So
if we want to make big changes between form

90
00:09:17.060 --> 00:09:23.260
factors such as this example here where we
have Gmail native apps for Android, you can

91
00:09:23.260 --> 00:09:28.720
imagine the pain that you would have to go
through to use this same HTML and create these

92
00:09:28.720 --> 00:09:35.720
separate layouts. A lot of CSS tweaks, a lot
of hidden content, a lot of conditional CSS

93
00:09:36.010 --> 00:09:41.120
for the various -- for the two form factors.
Also, since we have shared JavaScript in this

94
00:09:41.120 --> 00:09:48.120
case, how do we load additional functionality?
So one middle ground here, between these -- between

95
00:09:50.840 --> 00:09:56.510
the two extremes of one version and separate
versions completely is using media queries

96
00:09:56.510 --> 00:10:02.970
in JavaScript, we can do this with the window
of match media call, and this lets you evaluate

97
00:10:02.970 --> 00:10:07.600
arbitrary media queries as in this sample,
you can see I'm evaluating this media query

98
00:10:07.600 --> 00:10:14.600
and I'm seeing if it matches or not. You can
also listen for changes with this event listener,

99
00:10:15.420 --> 00:10:21.520
syntax, and here in this example, I'm listening
for the orientation media query, and as soon

100
00:10:21.520 --> 00:10:27.070
as that changes, if I switch from portrait
to landscape, this will fire, and I can respond

101
00:10:27.070 --> 00:10:34.070
to that. It's a much nicer way of going about
things using orientation change.

102
00:10:36.500 --> 00:10:42.590
But if we want to completely separate the
two -- separate the versions that we want

103
00:10:42.590 --> 00:10:49.590
to create, we can take an approach like this.
This is really simple code that basically

104
00:10:49.600 --> 00:10:55.150
says default to a desk -- to the desktop version,
then check for touch support, if there's touch

105
00:10:55.150 --> 00:10:59.970
support and the screen is small, is there
a phone version, otherwise if the screen is

106
00:10:59.970 --> 00:11:06.970
large but touch is still enabled, serve the
tablet. So here we need to figure out how

107
00:11:07.100 --> 00:11:11.790
to know if there's touch or not. Right now
there's not a really good way of doing this

108
00:11:11.790 --> 00:11:18.490
on the open Web. So we can use modernizr or
other feature detection libraries to do this

109
00:11:18.490 --> 00:11:25.490
sort of thing. So modernizr.touch will return
true if touch is enabled. But we have media

110
00:11:26.520 --> 00:11:31.080
queries that are coming through the pipe.
They're not implemented anywhere yet. We have

111
00:11:31.080 --> 00:11:38.080
hover and pointer media queries which are
used to distinguish between pointer or mouse

112
00:11:38.270 --> 00:11:45.270
pointer type input and touch input. The other
question here is how do we know what's small

113
00:11:46.870 --> 00:11:50.520
enough?
Where do we draw the line between phones and

114
00:11:50.520 --> 00:11:54.110
tablets?
So we can evaluate the media query, but where

115
00:11:54.110 --> 00:12:01.110
do we set this boundary?
So here is a -- on the right -- diagram of

116
00:12:04.190 --> 00:12:10.890
various mobile devices and their resolutions
in CSS pixels, so it's important here for

117
00:12:10.890 --> 00:12:16.480
this discussion to remember that, CSS pixels
are not the same as device pixels. CSS pixels

118
00:12:16.480 --> 00:12:23.480
are scaled to the -- they're scaled by the
device pixel ratio to be virtually sized,

119
00:12:25.960 --> 00:12:32.550
essentially, so the history here is when Apple
released iPhone 4, they had doubled the resolution

120
00:12:32.550 --> 00:12:37.120
of both dimensions, creating four times as
many pixels on the screen. So if they did

121
00:12:37.120 --> 00:12:42.300
nothing about this, then sites would render
at half size, so they introduced this notion

122
00:12:42.300 --> 00:12:49.300
of device pixel ratio, and sites render the
same way on iPhone 4 and iPhone 3, and other

123
00:12:49.850 --> 00:12:55.200
device vendors have been embracing this and
providing device pixel ratios sometimes of

124
00:12:55.200 --> 00:13:02.200
2, sometimes of 1.5, sometimes somewhat irrational
numbers so it's a little bit interesting and

125
00:13:04.070 --> 00:13:10.790
you should definitely be aware of this -- this
concept. So if we take a look at the diagram,

126
00:13:10.790 --> 00:13:17.000
we can say, well, let's just draw the line
at, let's see, 400, somewhere between 400

127
00:13:17.000 --> 00:13:21.980
and 600, that's pretty straightforward, right?
But we should remember that all these devices

128
00:13:21.980 --> 00:13:26.980
have landscape mode as well, in which case
width becomes height, height becomes width.

129
00:13:26.980 --> 00:13:33.720
So the actual picture is something more like
this, if we take a look at the max of the

130
00:13:33.720 --> 00:13:38.430
two dimensions for phones and they're meant
for tablets, so we can draw the line roughly

131
00:13:38.430 --> 00:13:44.640
at 650 pixels, and this will work most of
the time with some exceptions. For example,

132
00:13:44.640 --> 00:13:51.640
some -- some tablets in portrait mode, in
this case will get the phone version. So if

133
00:13:53.360 --> 00:13:57.410
you're specifying multiple versions of your
site, you may be sharing a URL or you may

134
00:13:57.410 --> 00:14:04.410
have separate URLs. If you have separate URLs,
then you can declaratively define all the

135
00:14:04.510 --> 00:14:08.920
versions of your site in your head section,
and you can do that with the link rel equals

136
00:14:08.920 --> 00:14:15.650
alternate and the idea here is you specify
the URLs and the associated media queries

137
00:14:15.650 --> 00:14:20.840
for each of these versions. This is good for
crawlers that are indexing your site so that

138
00:14:20.840 --> 00:14:27.390
they can know which versions exist and to
crawl them with these different settings.

139
00:14:27.390 --> 00:14:32.700
So one thing that you might want to do is
based on these versions that you've declared

140
00:14:32.700 --> 00:14:39.700
up front, redirect correctly. So the Web doesn't
do this for you, so I worked on a project

141
00:14:40.580 --> 00:14:46.310
called device.js which tries to formalize
this approach, and what it does is it parses

142
00:14:46.310 --> 00:14:52.420
the link alternates in your head section,
matches the media queries and then redirects

143
00:14:52.420 --> 00:14:59.420
you to the right version, if necessary. So
let me quickly show you how this works. So

144
00:15:00.040 --> 00:15:07.040
I'll -- I'll load up a really simple application.
This is a fake to do list. Now, if I send

145
00:15:07.370 --> 00:15:14.370
it over to Chrome, on my phone, and switch
it, switch the camera here, let me just load

146
00:15:27.500 --> 00:15:34.500
it up... one second... all right. Okay. So
I've -- I've loaded the same exact URL on

147
00:15:41.120 --> 00:15:47.440
both devices, here I've been redirected to
the phone version. Let me do that again. I'll

148
00:15:47.440 --> 00:15:54.440
try loading to desktop version. Sorry. Hmmm...
it's going to work, trust me. Could you guys

149
00:16:33.490 --> 00:16:33.740
turn off your internet?
[chuckling]

150
00:16:33.540 --> 00:16:37.110
&gt;&gt;Boris Smus: I should have done that Steve
Jobs thing.

151
00:16:37.110 --> 00:16:44.110
[ Laughter ]
&gt;&gt;Boris Smus: Thanks. Let's try this one.

152
00:16:58.910 --> 00:17:05.910
The pipes are clogged. It's terrible. Ah,
amazing. Watch this. It's loading. So the

153
00:17:08.439 --> 00:17:15.439
same URL loaded a completely different version,
so let me just show you for comparison here,

154
00:17:18.470 --> 00:17:24.589
the desktop version, the phone version, so
it's useful to still provide a fall-back mechanism

155
00:17:24.589 --> 00:17:29.299
so that you're able to specify a different
version if you prefer it, so device.js does

156
00:17:29.299 --> 00:17:35.169
that as well, and here if I switch to layout
-- landscape mode, I may actually prefer the

157
00:17:35.169 --> 00:17:42.169
tablet version, so if I pick it, then I can
override the default version that was served

158
00:17:42.350 --> 00:17:49.350
to me and this will eventually load, so we
can move on for now. So for more details about

159
00:17:49.509 --> 00:17:56.509
this project, take a look at the GitHub page,
and you're welcome to collaborate with me

160
00:17:56.870 --> 00:18:03.720
on it, so that's the clientside story, so
we've taken a look at both of these approaches,

161
00:18:03.720 --> 00:18:10.720
separate versions and one shared version,
but the client has performance penalties for

162
00:18:10.799 --> 00:18:16.529
doing redirection, so if we do a redirect
that costs somewhere between 100 and 1,000

163
00:18:16.529 --> 00:18:22.539
milliseconds, on the server we can save on
that redirection in some cases, so the only

164
00:18:22.539 --> 00:18:27.620
problem with the server is we have much less
features than we do on the client. We don't

165
00:18:27.620 --> 00:18:33.179
have JavaScript. We don't have media queries.
All we have is a user agent string, and this

166
00:18:33.179 --> 00:18:40.179
string gets sent with every request, so the
server can decide what to do with this. You

167
00:18:40.350 --> 00:18:45.990
can see it's a bit of a mess, so this is what
Chrome for Android user agent string looks

168
00:18:45.990 --> 00:18:52.159
like, and this is pretty much as complicated
as most other browsers. You can see there's

169
00:18:52.159 --> 00:18:58.480
mentions of pretty much every single browser
that has ever existed. I'm exaggerating. But

170
00:18:58.480 --> 00:19:03.980
it's kind of a messy thing to deal with. Let
me show you a couple of tools that can make

171
00:19:03.980 --> 00:19:10.980
this a bit easier. Firstly, let me show you
how pervasive this use is of user agent strings

172
00:19:10.980 --> 00:19:17.980
on the net. So here is YouTube. If I open
Dev Tools, and I'll turn off this screen scaling

173
00:19:18.070 --> 00:19:23.519
device metrics feature that I had before.
I can override the user agent, so why don't

174
00:19:23.519 --> 00:19:30.519
I set it to Galaxy Nexus on Android 402, you'll
notice the device metrics have been set for

175
00:19:30.519 --> 00:19:36.679
me, automatically, based on a little database
that you just send the developer tools, but

176
00:19:36.679 --> 00:19:43.679
when I over -- when I reload the page here,
now I've -- I've used a new -- I've reset

177
00:19:43.740 --> 00:19:49.230
my user agent header and YouTube has sent
me a completely different version of the page,

178
00:19:49.230 --> 00:19:55.190
so just for comparison, this is the mobile
version, and if I reload, I just the regular

179
00:19:55.190 --> 00:20:00.610
YouTube version, it's a completely separate
page, so many, many Web properties use this

180
00:20:00.610 --> 00:20:07.610
service side detection and redirect you without
you even knowing. So how do they do it?

181
00:20:09.679 --> 00:20:16.679
Generally, they have some sort of device database.
These are typically large databases of known

182
00:20:17.309 --> 00:20:22.110
user agents and their capabilities and what
device databases do is they try to find the

183
00:20:22.110 --> 00:20:29.110
closest known UA and give you information
based on your client. So a couple of them

184
00:20:30.870 --> 00:20:36.620
are device applets in WURFL. They have drawbacks
in that they're nonfree for commercial use.

185
00:20:36.620 --> 00:20:42.779
They come in two flavors, typically, one as
an API service, so you can make a request

186
00:20:42.779 --> 00:20:48.779
every time you get a new client connected
and ask a service somewhere else in the Cloud

187
00:20:48.779 --> 00:20:54.509
what that user agent is, or you can set it
up yourself, but it's not that simple to do,

188
00:20:54.509 --> 00:21:01.509
so that's the state-of-the-art right now.
And just to recap this multiple versions idea.

189
00:21:02.289 --> 00:21:08.379
If you're separating your versions upfront,
I would recommend to start with device.js

190
00:21:08.379 --> 00:21:13.419
or some other similar solution in the client,
measure performance overhead, see if that

191
00:21:13.419 --> 00:21:20.419
performance of mobile or of clientside redirection
is too high, and if that penalty is too high,

192
00:21:20.440 --> 00:21:27.440
then switch to user side. So at this point
you're probably thinking this guy is telling

193
00:21:27.769 --> 00:21:34.769
me to create multiple versions of my app.
This is terrible. I'm not going to do this.

194
00:21:35.639 --> 00:21:40.100
And I am probably -- I'm thinking you're probably
using a model view controller or if not, you

195
00:21:40.100 --> 00:21:46.610
should be. So if you don't know what this
pattern is, it is a way to separate the presentation

196
00:21:46.610 --> 00:21:53.220
layer of your code from the structure and
data logic, business logic of your application.

197
00:21:53.220 --> 00:22:00.220
So with a cross-device approach, we can simply
swap out the views, create form factor specific

198
00:22:01.580 --> 00:22:08.580
views and serve them to the various devices
sharing a lot of code. Okay. So that's the

199
00:22:11.049 --> 00:22:15.850
story for multiple versions, single versions.
Let's talk about some technical things about

200
00:22:15.850 --> 00:22:22.850
building a great UI. Firstly, what makes a
great UI?

201
00:22:22.960 --> 00:22:29.960
On the Web, on the mobile Web, I would say
single page sites are examples of that. Some

202
00:22:30.159 --> 00:22:35.870
features of single page sites are limited
zooming so the user gets text that's readable

203
00:22:35.870 --> 00:22:40.889
immediately, they don't have to pinch zoom
around. Fixed headers and footers. So content

204
00:22:40.889 --> 00:22:46.289
that scrolls independently of one another
or having a header placed that's fixed to

205
00:22:46.289 --> 00:22:53.179
the viewport as opposed to content, and smooth
transitions, animations between states as

206
00:22:53.179 --> 00:23:00.179
well as just loading links. The most basic
fundament mobile thing to do is the viewport,

207
00:23:04.139 --> 00:23:09.999
viewport is a virtual viewing area that's
scaled down to your phones or your mobile

208
00:23:09.999 --> 00:23:16.720
device's display, and you can configure this
viewport by setting the metatag called viewport

209
00:23:16.720 --> 00:23:23.440
inside your head, and by default it's set
to something ridiculous, like 980 pixels,

210
00:23:23.440 --> 00:23:30.370
which is wider than most devices. You can
configure it by setting its width to some

211
00:23:30.370 --> 00:23:37.370
value, but if you set it to a fixed value,
say 320 pixels, that won't work on many devices

212
00:23:38.850 --> 00:23:44.749
that aren't 320 pixels wide and you will have
the problem of when you switch from landscape

213
00:23:44.749 --> 00:23:50.190
or from portrait to landscape, text will be
scaled in interesting ways, so the best practice

214
00:23:50.190 --> 00:23:55.419
here, at minimum, at minimum, is to set the
width to be the device width, which evaluates

215
00:23:55.419 --> 00:24:00.850
to be the current width for your device in
its current orientation. And you can see without

216
00:24:00.850 --> 00:24:07.850
a viewport the text is hardly readable on
the left. With a viewport set as I recommend,

217
00:24:08.240 --> 00:24:15.240
it's much more readable and everyone is happy.
We can take this one step further and prevent

218
00:24:15.240 --> 00:24:22.240
zooming entirely to sort of be closer to the
user experience of a mobile -- native mobile

219
00:24:23.389 --> 00:24:28.929
application. We can do this by setting initial
minimum and maximum scale to 1. Just adding

220
00:24:28.929 --> 00:24:33.679
that to the viewport, and know that you should
separate these directives with commas, not

221
00:24:33.679 --> 00:24:40.539
semi colons, a lot of Web samples on the Web
use semi colons unfortunately, that is not

222
00:24:40.539 --> 00:24:46.869
the standard thing to do. Also avoid user
scalable equals no or supplement it with these

223
00:24:46.869 --> 00:24:53.519
media queries, or, sorry, these content directives,
because it's not supported in Chrome -- user

224
00:24:53.519 --> 00:25:00.240
scalable, no, is not supported in Android
-- other Android browsers and some other that

225
00:25:00.240 --> 00:25:07.240
I've tested. So generally speaking, on the
mobile Web, or on any Web, anywhere, really,

226
00:25:09.389 --> 00:25:16.389
we want our animations to be smooth, and what
this means is we want -- we want them to be

227
00:25:16.429 --> 00:25:23.429
approaching the limits of human perception,
so 60 frames per second is the animation refresh

228
00:25:23.820 --> 00:25:30.080
rate above which we can't really tell the
difference, so on mobile devices, this is

229
00:25:30.080 --> 00:25:35.909
hard, because we have CPUs that are far less
powerful than desktops, and because of this

230
00:25:35.909 --> 00:25:39.740
we want to utilize hardware acceleration as
much as possible because these devices come

231
00:25:39.740 --> 00:25:46.740
with pretty powerful CPUs, so an example of
this, to keep an element fixed in relation

232
00:25:47.529 --> 00:25:52.019
to scrolling of content, the old style way
of doing this, you would position something

233
00:25:52.019 --> 00:25:58.070
absolutely, listen to scroll events and then
kind of jitter as you try to reposition your

234
00:25:58.070 --> 00:26:04.690
element every time you scroll. With position
fixed, what you're essentially saying is you're

235
00:26:04.690 --> 00:26:11.690
telling your GPU that this is a separate layer
and composite in a -- composite it separate

236
00:26:13.789 --> 00:26:20.789
from my CPU, and this is a much more, much
less janky experience, and much more smooth.

237
00:26:22.610 --> 00:26:29.610
Similar -- similar tactic applies for scrolling.
Often we want sub element scrolling, so an

238
00:26:29.940 --> 00:26:36.940
example here is Gmail. Or any two pane tablet
application. So we have a list view and a

239
00:26:39.279 --> 00:26:45.409
content view on the right, and we can enable
independent scrolling of elements with overflow

240
00:26:45.409 --> 00:26:52.409
auto, so this is old news. The new thing here
is Webkit overflow scrolling.

241
00:26:53.379 --> 00:26:58.860
This is a custom Webkit property which works
on IOS and Chrome for Android and it essentially

242
00:26:58.860 --> 00:27:05.860
forces hardware accelerated scrolling. Let
me quickly show you a demo here. So I'll send

243
00:27:06.419 --> 00:27:09.539
this -- these are beautiful Chrome ponies.
Chronies?

244
00:27:09.539 --> 00:27:16.539
I'm not sure. So I'm going to load this on
the device. Mobile Web scrolling. I'm going

245
00:27:25.240 --> 00:27:32.240
to load it on both devices. See which one
is faster. It's going to be a race. So you

246
00:27:40.070 --> 00:27:47.070
can watch them race. Anyway, while it's loading,
the idea here is here with overflow hidden,

247
00:27:56.799 --> 00:28:02.429
we see we can't scroll this region at all,
I'm trying to scroll, we can't. Overflow auto

248
00:28:02.429 --> 00:28:08.039
is scrolling, but with this Webkit overflow
scrolling touch edition, we get really, really

249
00:28:08.039 --> 00:28:14.860
fast scrolling on mobile devices, and this
is what I'm trying to show you with this demo,

250
00:28:14.860 --> 00:28:21.860
and unfortunately it doesn't seem to want
to work. That's too bad. Okay, well, hopefully

251
00:28:30.980 --> 00:28:37.980
it will load eventually. Okay. So scrolling.
Often we want to go beyond scrolling and have

252
00:28:46.169 --> 00:28:51.460
transformations of an arbitrary nature, animations,
et cetera, and we still want this to be as

253
00:28:51.460 --> 00:28:58.009
fast as possible. 60 frames a second. A key
thing here is being able to position elements

254
00:28:58.009 --> 00:29:04.580
arbitrarily on the screen. You would use position
absolute to do this, but this isn't slow and

255
00:29:04.580 --> 00:29:10.049
takes the software path -- or this isn't fast,
and takes the software path, so the hardware

256
00:29:10.049 --> 00:29:14.879
accelerated approach, which is very useful
on mobile, is to use the WebKit transform

257
00:29:14.879 --> 00:29:21.700
and the WebKit translate -- I'm sorry, WebKit
transform and translate transformations, this

258
00:29:21.700 --> 00:29:28.200
will trigger hardware accelerated rendering,
especially with translate 3D, this gives a

259
00:29:28.200 --> 00:29:34.860
hint to the GPU that, hey, you're doing something
fancy and probably GPU mode should be enabled.

260
00:29:34.860 --> 00:29:40.360
You can of course also do rotations and scales
in this fashion, and it looks like our demo

261
00:29:40.360 --> 00:29:45.850
has loaded, which is great, so let me switch
back to the projector here for both screens.

262
00:29:45.850 --> 00:29:52.850
We have our beautiful ponies, as you would
expect. As I scroll hidden -- attempt to scroll

263
00:29:53.649 --> 00:29:59.409
the hidden view, nothing works. Auto, you
can see it's scrolling. But it's kind of janky,

264
00:29:59.409 --> 00:30:06.409
I don't know if you can notice that on the
projector. Compare that to this.

265
00:30:06.600 --> 00:30:07.840
So this is what you get.
[ Laughter ]

266
00:30:07.840 --> 00:30:11.739
&gt;&gt;Boris Smus: Thanks, guys, this is what you
get with the WebKit overflowing scrolling

267
00:30:11.739 --> 00:30:18.739
touch. So on -- on Chrome for Android, this
is the -- basically the smoothness that you

268
00:30:19.200 --> 00:30:26.200
get, on iOS. You end up with -- with bounceback
effects. And inertial scrolling as well.

269
00:30:27.960 --> 00:30:34.960
So we'll do questions after.
So as I go into the next section, I'm going

270
00:30:35.929 --> 00:30:41.600
to preload this.
So in addition to regular transforms, we can

271
00:30:41.600 --> 00:30:47.690
do more advanced things. As I alluded, we
can do 3D transformations, we can apply perspective

272
00:30:47.690 --> 00:30:54.659
as well. Even arbitrary matrices, as in this
example here, if you are into linear algebra.

273
00:30:54.659 --> 00:31:01.659
And we can let CSS interpolate between the
various animation states by using the transition

274
00:31:02.470 --> 00:31:09.320
property and here we are transitioning between
-- or say -- sorry, we're transitioning the

275
00:31:09.320 --> 00:31:14.419
transform property, we're specifying its length
of time, one second, and an easing function

276
00:31:14.419 --> 00:31:21.419
as well. So these -- both the transition and
the transform property need vendor prefixes.

277
00:31:23.919 --> 00:31:30.919
So unfortunately the demo here is still loading.
But ... I'm gonna ... just gonna hope that

278
00:31:43.109 --> 00:31:45.889
it will load eventually.
Okay. We'll get back to that. We'll have reason

279
00:31:45.889 --> 00:31:50.989
to revisit.
So I talked a lot about output here. Let's

280
00:31:50.989 --> 00:31:57.989
talk about input. So for decades, 20, 30 years,
more, more than that, this has been the input

281
00:32:00.029 --> 00:32:07.029
mode of computing. Mouse and keyboard. And
for quite a long time, even into mobile, we've

282
00:32:09.559 --> 00:32:16.230
had very similar input devices. This is a
pretty new Blackberry with keyboard and essentially

283
00:32:16.230 --> 00:32:23.230
a mouse-like implement.
So the current state is much more interesting.

284
00:32:24.409 --> 00:32:29.129
Multi-touch pretty much changed the game completely.
And one thing that I want to emphasize here

285
00:32:29.129 --> 00:32:36.049
is touch is not the same as mouse. It's completely
different. There's no hover state in touch.

286
00:32:36.049 --> 00:32:41.080
There are multiple touch points. Input is
far less precise. You don't get the pixel

287
00:32:41.080 --> 00:32:46.879
accuracy of a mouse. And going forward, fingers
aren't just coordinates, but they also have

288
00:32:46.879 --> 00:32:53.879
shape and in the future we have all sorts
of interesting possibilities. Pressure input,

289
00:32:54.769 --> 00:33:00.779
haptic feedback, et cetera. Touch interface,
as I'm sure you are all familiar with, have

290
00:33:00.779 --> 00:33:05.009
essential building blocks. These are very
simple gestures. Well, they range from simple

291
00:33:05.009 --> 00:33:10.779
ones like tap and double tap to more complex
one like pinch-zoom and rotation and we can

292
00:33:10.779 --> 00:33:17.779
do all of these things on the Web using the
touch events. So here we have touchmove, touchstart

293
00:33:18.009 --> 00:33:21.269
and touchend.
These are pretty similar to their mouse equivalents,

294
00:33:21.269 --> 00:33:28.269
except instead of single coordinates, we have
lists of touches on the screen. There's a

295
00:33:28.369 --> 00:33:34.230
spec and you can read more about this.
So one of the first things that you'll notice

296
00:33:34.230 --> 00:33:41.200
is the browser has its own touch behavior.
So like I mentioned earlier, pinch-zoom is

297
00:33:41.200 --> 00:33:47.549
one of them, scrolling is another, tap switching
as you probably saw in the keynote this morning

298
00:33:47.549 --> 00:33:52.239
between tabs when you slide out from the side
of the bevel on some browsers and you can

299
00:33:52.239 --> 00:33:59.019
override some of these behaviors using the
event prevent default call in JavaScript.

300
00:33:59.019 --> 00:34:05.899
In IE it's a little bit different, you can
specify touch action none, this is IE 10,

301
00:34:05.899 --> 00:34:11.639
and you can even specify which specific kinds
of interactions to disable. So you can say

302
00:34:11.639 --> 00:34:18.639
enable no touch interactions by default or
you can say only enable pinch-zooms or only

303
00:34:19.450 --> 00:34:25.160
enable scrolls.
Touch performance is an interesting topic

304
00:34:25.160 --> 00:34:32.160
because as a Web developer, if you are not
creating touch specific input, you end up

305
00:34:32.220 --> 00:34:37.160
having events that are very heavily delayed.
The reason for this is, for example, if you

306
00:34:37.160 --> 00:34:44.160
do a double tap, the browser needs to decide
if it's a zoom gesture or if it's a click.

307
00:34:44.360 --> 00:34:49.390
So it waits for 300 milliseconds to wait for
that second tap and then if there's no other

308
00:34:49.390 --> 00:34:53.640
tap, it emits a click.
So this is not great, 300 milliseconds is

309
00:34:53.640 --> 00:34:59.370
definitely visible. You can see the delay
and the -- the workaround for this is to use

310
00:34:59.370 --> 00:35:05.640
touchend. Touchend will fire right away. As
soon as you release your finger from the screen

311
00:35:05.640 --> 00:35:10.570
and there's a nice guide about this on Google
developer docs.

312
00:35:10.570 --> 00:35:17.570
The other consideration here is with multi-touch,
events often come in very quickly, much faster

313
00:35:18.110 --> 00:35:24.350
than 60 frames per second. If you are touching
your screen with many fingers, every single

314
00:35:24.350 --> 00:35:29.770
finger will fire at whatever that rate is.
And if you draw, as soon as you handle the

315
00:35:29.770 --> 00:35:36.770
event, you will end up just having too many
things rendering at the same time and this

316
00:35:36.830 --> 00:35:43.830
will be very bad for your performance.
So the solution for this is to create separate

317
00:35:44.170 --> 00:35:51.170
handlers for input handling and create a separate
animation thread. Or animation timer in this

318
00:35:51.430 --> 00:35:54.100
case.
So here I'm doing exactly that. I've got a

319
00:35:54.100 --> 00:36:01.100
set interval call and the touch rendering
code goes here. We can do even better in Chrome

320
00:36:01.860 --> 00:36:08.860
for Android and Chrome and Safari and probably
other browsers, we just requestAnimationFrame.

321
00:36:09.070 --> 00:36:15.950
What this does is it's essentially a polite
request to the browser for animation frame

322
00:36:15.950 --> 00:36:22.950
so it aims to -- to fire roughly 60 to -- 60
times a second. But if something is overloading

323
00:36:24.810 --> 00:36:30.190
the -- the machine or the device, then it
scales back in an elegant way and you can

324
00:36:30.190 --> 00:36:35.980
get as smooth of an animation as you possible
can.

325
00:36:35.980 --> 00:36:40.320
So with this, let me show you an example of
that.

326
00:36:40.320 --> 00:36:46.260
Style switch over. The demo is already loaded.
That's awesome!

327
00:36:46.260 --> 00:36:51.980
So for this particular demo, I'm using a requestAnimationFrame
and the transitions and transforms that I

328
00:36:51.980 --> 00:36:58.980
talked about earlier, to have this pretty
smooth transition experience between multiple

329
00:37:00.380 --> 00:37:06.510
screens. So you can see it follows my finger
pretty closely. And when I let go, the transition

330
00:37:06.510 --> 00:37:13.510
will fire. And the content just shows up.
So this is using requestAnimationFrame WebKit

331
00:37:14.170 --> 00:37:20.600
transforms and transitions.
I also have another demo that I'm going to

332
00:37:20.600 --> 00:37:27.600
start loading now.
And I'll get to that in a second as soon as

333
00:37:32.180 --> 00:37:37.080
it loads.
So let's talk about some of the problems with

334
00:37:37.080 --> 00:37:44.070
-- with touch input.
The first is how do we handle both gracefully?

335
00:37:44.070 --> 00:37:51.070
Right? What if we want to support both?
This right now is not very pleasant. So what

336
00:37:51.790 --> 00:37:58.170
we end up with is two essentially completely
different input methods. Mouse and touch.

337
00:37:58.170 --> 00:38:04.050
And what we might do is we can extract the
positions of the relevant input. And then

338
00:38:04.050 --> 00:38:10.610
just relay them to a common handler. This
-- eh ... it's unnecessary boilerplate. It's

339
00:38:10.610 --> 00:38:16.820
not something that you want to do every single
time. So instead -- well, we'll talk about

340
00:38:16.820 --> 00:38:21.330
solutions to this in a second.
The other problem before I talk about solutions,

341
00:38:21.330 --> 00:38:25.820
is gestures are difficult. You saw that list
of gestures that I showed you that are common

342
00:38:25.820 --> 00:38:32.410
for mobile devices, but doing such a thing
without gesture events, which are only available

343
00:38:32.410 --> 00:38:39.410
on iOS, is pretty hard. So here's a pinch-zoom
snippet that recognizes the pinch-zoom gesture.

344
00:38:40.830 --> 00:38:47.830
It's a lot of code. And doing this every time
you want to pinch-zoom just is not reasonable.

345
00:38:48.140 --> 00:38:55.140
So Microsoft has a -- has an input model that
they're planning on using for metro. It's

346
00:38:59.310 --> 00:39:06.310
called MSPointer. And the idea is to consolidate
input, to consolidate mouse, touch and pointer

347
00:39:06.520 --> 00:39:11.640
into one single type.
And, of course, you can still distinguish

348
00:39:11.640 --> 00:39:18.170
between mouse and touch with -- with an event
property and it's a really nice idea. I like

349
00:39:18.170 --> 00:39:22.430
it a lot.
The problem is, with the current proposal,

350
00:39:22.430 --> 00:39:26.370
it's essentially just another input mechanism
to deal with. So now you have the mouse handler,

351
00:39:26.370 --> 00:39:33.370
the touch handler and the MSPointer handler
and it's just not necessarily great.

352
00:39:33.460 --> 00:39:39.860
So pointer.js is a project that I worked on
to try to consolidate this input problem between

353
00:39:39.860 --> 00:39:45.710
browsers. Using a similar idea as MSPointer
events except to take all of these different

354
00:39:45.710 --> 00:39:52.410
event models and make an abstraction layer
around them to make it really easy for developers.

355
00:39:52.410 --> 00:39:59.410
So let me show you this in action.
And here I have a -- a space shooter. And

356
00:40:00.990 --> 00:40:07.160
actually let me show you this on the device
instead. So this is a -- this is a demo that

357
00:40:07.160 --> 00:40:13.570
was created by a friend of mine called Seb
and you can see it's essentially just a -- a

358
00:40:13.570 --> 00:40:18.130
space shooter thing demo. It's kind of neat
because you can place your control anywhere

359
00:40:18.130 --> 00:40:23.240
you want and then just shoot on the -- anywhere
on the right side of the screen.

360
00:40:23.240 --> 00:40:30.240
So this is using pointerevents. One of the
benefits of this, it was initially using just

361
00:40:30.600 --> 00:40:37.600
touchevents. So on the desktop nothing would
work at all. With pointerevents, though, I

362
00:40:37.910 --> 00:40:44.910
can have essentially the same experience in
-- on both mouse and touch input. So this

363
00:40:45.410 --> 00:40:52.410
is a quick and straightforward pointer example.
Pointer.js also aspires to have gesture recognizers

364
00:40:56.070 --> 00:41:00.920
on top of the consolidated input model. For
more details about this, check out the project

365
00:41:00.920 --> 00:41:07.920
page on GitHub.
So let me quickly talk about mobile Web development.

366
00:41:14.900 --> 00:41:21.900
One second.
So I've been trying to show you some features

367
00:41:24.750 --> 00:41:31.750
of the Chrome developer tools as we go. And,
of course, the easiest path to getting started

368
00:41:32.240 --> 00:41:36.960
with mobile development is to emulate it on
the desktop. You don't have to deal with extra

369
00:41:36.960 --> 00:41:42.570
devices. You don't have any of that headache
of trying to -- having to touch around all

370
00:41:42.570 --> 00:41:49.280
of the time. So it's nice. And I have shown
you how to emulate screen size, how to override

371
00:41:49.280 --> 00:41:56.280
the User-Agent string and let me just show
you one more thing ... 
this is part of the mobile Chrome experiments

372
00:42:03.780 --> 00:42:08.070
that you may or may not have seen. If you
haven't seen it, check it out, it's on the

373
00:42:08.070 --> 00:42:12.830
second floor in the Chrome booth. So this
is a Chrome experiment. And it's essentially

374
00:42:12.830 --> 00:42:18.850
a scroll view. With a twist.
So to show you the twist, I have to scroll,

375
00:42:18.850 --> 00:42:25.680
but you'll notice here that it's using touchevents.
And when I try to scroll, nothing works. So

376
00:42:25.680 --> 00:42:32.680
let me open up devtools.
And show you a cool feature that's very useful.

377
00:42:33.380 --> 00:42:40.380
I can emulate touchevents. So what this will
do, when I reload the page, and switch back

378
00:42:41.500 --> 00:42:48.280
to it, now when I mouse around these mouse
events are being translated into touches,

379
00:42:48.280 --> 00:42:53.210
so instead of a mouse down I get a touch start,
et cetera. You can see this is using again

380
00:42:53.210 --> 00:43:00.210
requestAnimationFrame and Hakim here has a
whole bunch of cool effects to just give you

381
00:43:00.350 --> 00:43:06.730
a sense of how performant you can have these
nice transitions. On both Chrome and -- it

382
00:43:06.730 --> 00:43:13.730
works just great on Chrome for Android as
well. You should check it out in the Chrome

383
00:43:13.750 --> 00:43:19.380
experiments booth.
So that's -- that's some Chrome devtools features.

384
00:43:19.380 --> 00:43:26.380
You can also emulate multi-touch events on
the Mac. And this is a fun little project

385
00:43:26.830 --> 00:43:33.830
that I worked on. It requires a bit of setup.
But once you've got it set up, then you can

386
00:43:36.430 --> 00:43:43.160
-- you can essentially create multi-touch
prototyping, you can do multi-touch prototyping

387
00:43:43.160 --> 00:43:49.490
on any Mac with a magic touch track pad. So
here you can see I've got a single touch that's

388
00:43:49.490 --> 00:43:55.170
coming from my Mac track pad and I can do
multiple touches, too.

389
00:43:55.170 --> 00:44:00.320
And I can do this arbitrarily. So it's kind
of cool if you're doing complex multi-touch

390
00:44:00.320 --> 00:44:03.210
interactions. This game is just like a fruit
ninja clone that I whipped up, except with

391
00:44:03.210 --> 00:44:10.210
browsers. It doesn't really make sense. You
hit a blink tag and you get a 406. [Laughter

392
00:44:10.540 --> 00:44:14.870
]
&gt;&gt;Boris Smus: Right? Anyway, so that's multi-touch.

393
00:44:14.870 --> 00:44:21.430
And, of course, you want to test on your device,
ultimately. You can do these emulations, you

394
00:44:21.430 --> 00:44:25.980
can use these tricks, but ultimately you need
to test on your device. And Chrome for Android

395
00:44:25.980 --> 00:44:31.750
has great support for remote debugging, and
we have plenty of resources about that. In

396
00:44:31.750 --> 00:44:34.870
the interest of time I won't burden you, but
you should check it out. And I will make these

397
00:44:34.870 --> 00:44:41.870
slides available afterward.
So thank you all for listening. We've got

398
00:44:41.980 --> 00:44:47.460
some time for questions.
And, um ... so, yeah, right, we have microphones

399
00:44:47.460 --> 00:44:52.420
on both sides. So feel free to ask anything
and I'll be available in the Chrome area as

400
00:44:52.420 --> 00:44:59.420
well afterward.
[ Applause ]

401
00:45:01.940 --> 00:45:06.950
&gt;&gt;&gt; You -- I guess the mic is off. There we
go.

402
00:45:06.950 --> 00:45:09.990
&gt;&gt;Boris Smus: I think it's on.
&gt;&gt;&gt; You showed examples of how to get the

403
00:45:09.990 --> 00:45:15.430
GPU hardware acceleration enabled. Why don't
those turn on by defaults? Why do you have

404
00:45:15.430 --> 00:45:22.430
to play tricks to get it to work reasonably?
&gt;&gt;Boris Smus: Right, this is -- I agree -- a

405
00:45:23.160 --> 00:45:30.160
problem that we are tackling currently. So
the Chrome GPU team is working very hard to

406
00:45:30.190 --> 00:45:36.630
try to make these -- to try to make more of
the rendering part of the GPU pipeline, essentially.

407
00:45:36.630 --> 00:45:41.950
So like you are saying, part of the problem
is you don't really know which tricks will

408
00:45:41.950 --> 00:45:47.330
render GPU mode, which ones won't, it's very
implicit. And generally, of course, the whole

409
00:45:47.330 --> 00:45:51.230
rendering path should be done on the GPU as
much as possible. So GPU team is definitely

410
00:45:51.230 --> 00:45:55.850
looking at this and trying to optimize it
as much as possible. It's on my radar.

411
00:45:55.850 --> 00:46:01.980
&gt;&gt;&gt; All right.
&gt;&gt;Boris Smus: Yes, go ahead.

412
00:46:01.980 --> 00:46:08.230
&gt;&gt;&gt; If you are trying to emulate more of a
mobile native experience, the address bar

413
00:46:08.230 --> 00:46:13.180
gets in the way or -- and is there anything
more elegant than just scroll one pixel when

414
00:46:13.180 --> 00:46:17.590
your app starts up?
&gt;&gt;Boris Smus: Um, yeah. So -- right, as you

415
00:46:17.590 --> 00:46:23.570
are saying, the current hacks are around using
Scroll 2, which is a JavaScript function that

416
00:46:23.570 --> 00:46:28.240
you just call and say scroll to the top and
in most browsers, in some browsers, it will

417
00:46:28.240 --> 00:46:35.240
hide the location bar. We're working on evaluating
what a full screen API might look like. So

418
00:46:36.570 --> 00:46:42.160
this is an example of there's an open Web
API that lets you make a browser go into full-screen

419
00:46:42.160 --> 00:46:47.630
mode. So this would be a nice application.
That said, right now in Chrome for Android,

420
00:46:47.630 --> 00:46:54.630
we have an Omnibox that's always there. There's
good reasons for that as well. Just if you

421
00:46:54.670 --> 00:47:00.180
have your URL bar always present, it's an
indication that you are in the browser, you

422
00:47:00.180 --> 00:47:05.440
are not being phished, you know exactly where
you are, and it's also very easy to navigate

423
00:47:05.440 --> 00:47:11.950
away, like, to any other page.
Oftentimes on iOS I'll have hard time getting

424
00:47:11.950 --> 00:47:18.080
back to the URL bar, especially if someone
is overriding the default scrolling behavior.

425
00:47:18.080 --> 00:47:21.100
&gt;&gt;&gt; I see.
&gt;&gt;Boris Smus: It's hard to get back. So ... but,

426
00:47:21.100 --> 00:47:26.540
yeah, I agree, it's totally a hack.
&gt;&gt;&gt; Should be a new GitHub project for you.

427
00:47:26.540 --> 00:47:30.640
Fullscreen.js --
&gt;&gt;Boris Smus: Thanks. Yes?

428
00:47:30.640 --> 00:47:34.680
&gt;&gt;&gt; I was just wondering, you were always
saying it's important on iOS and on Chrome

429
00:47:34.680 --> 00:47:38.970
for Android. What about stock browser that
gets shipped?

430
00:47:38.970 --> 00:47:44.630
&gt;&gt;Boris Smus: Right. So the stock browser
on Ice Cream Sandwich is actually quite good.

431
00:47:44.630 --> 00:47:51.630
And there's a lot of -- there are many features
that are supported on it that I discussed

432
00:47:51.950 --> 00:47:58.950
today. Don't quote me, I believe requestAnimationFrame
maybe. Anyway the inertial scrolling certainly

433
00:47:59.900 --> 00:48:03.160
is.
So -- yeah. Thanks.

434
00:48:03.160 --> 00:48:10.160
&gt;&gt;&gt; I was curious. So we provide a third-party
widget that you can embed on your page. So

435
00:48:12.440 --> 00:48:19.130
we don't have control over things like the
meta tags, some of the stuff that you showed.

436
00:48:19.130 --> 00:48:22.900
I'm kind of curious, we were thinking of using
the new implementation of position fixed to

437
00:48:22.900 --> 00:48:26.410
allow our chat box to show up.
&gt;&gt;Boris Smus: Yep.

438
00:48:26.410 --> 00:48:30.890
&gt;&gt;&gt; But you don't get kind of zoom fixed on
it. So when you zoom in, then like eventually

439
00:48:30.890 --> 00:48:34.310
this position fix thing just takes over the
whole screen.

440
00:48:34.310 --> 00:48:38.830
&gt;&gt;Boris Smus: Yep.
&gt;&gt;&gt; Anything new that we could take advantage

441
00:48:38.830 --> 00:48:41.670
of?
&gt;&gt;Boris Smus: Yeah, it's a good question.

442
00:48:41.670 --> 00:48:47.030
Position fixed is a little interesting if
you don't have control over the fixed viewport.

443
00:48:47.030 --> 00:48:51.990
Because it -- it actually varies quite a bit
in its behavior depending on the browser.

444
00:48:51.990 --> 00:48:58.540
So, yeah, I think you have a pretty unique
case in that you're like a third period JavaScript

445
00:48:58.540 --> 00:49:03.410
plug-in. I can't think of anything off the
top of my head that you could do that with.

446
00:49:03.410 --> 00:49:07.190
Maybe we should talk offline.
&gt;&gt;&gt; Sure thing.

447
00:49:07.190 --> 00:49:13.990
&gt;&gt;Boris Smus: Great, thanks. All right? No
other questions? Find me later, I'll be hanging

448
00:49:13.990 --> 00:49:15.160
out in the Chrome booth.

WEBVTT

1
00:00:00.680 --> 00:00:03.800
&gt;&gt;Erik Kay: Hi, everyone. Welcome. I think
we will have a few more people sprinkling

2
00:00:03.800 --> 00:00:09.810
in here, but my name is Erik Kay.
&gt;&gt;Mihai Parparita: And hi, I'm Mihai Parparita,

3
00:00:09.810 --> 00:00:16.810
and together we work on the Chrome apps team.
&gt;&gt;Erik Kay: So just a quick show of hands

4
00:00:20.530 --> 00:00:24.690
so I can get a feel for what the audience
is here, how many people are as familiar with

5
00:00:24.690 --> 00:00:30.619
Chrome apps as they are today?
All right, great. That makes things easier.

6
00:00:30.619 --> 00:00:35.930
So why don't we dive in a little bit and just
sort of do a little recap about how we got

7
00:00:35.930 --> 00:00:41.820
to where we're at today?
So I/O last year we talked about a few things.

8
00:00:41.820 --> 00:00:48.460
First off, as you know, we talked about Chrome
getting to, you know, 160 million active users.

9
00:00:48.460 --> 00:00:53.420
We also launched for Chrome apps in-app payments
through Google Wallet.

10
00:00:53.420 --> 00:01:00.280
We announced that the Web store was now localized
in 42 languages.

11
00:01:00.280 --> 00:01:07.280
And we had the Angry Birds exclusive promotion
that really showed how that it was really

12
00:01:07.560 --> 00:01:13.360
possible to make great quality apps just using
HTML5.

13
00:01:13.360 --> 00:01:17.520
And we've kept busy over the last year since
then.

14
00:01:17.520 --> 00:01:22.930
The first thing, you know, to highlight, is
Native Client. We launched that this fall.

15
00:01:22.930 --> 00:01:29.520
And Native Client really brought to the table
a great set of games. You know, some showed

16
00:01:29.520 --> 00:01:32.340
that you could do high performance computing,
that you could leverage native code in your

17
00:01:32.340 --> 00:01:38.630
browser. Things like Bastion, Mini-Ninjas,
From Dust, great titles that show off the

18
00:01:38.630 --> 00:01:44.020
capabilities of the platform.
You saw Gaikai in the keynote today that really

19
00:01:44.020 --> 00:01:49.409
was another great example.
We redesigned the Web store. We have a completely

20
00:01:49.409 --> 00:01:56.409
new look and feel, and that really expanded
the usage that we saw out from our users.

21
00:01:57.000 --> 00:02:03.509
Users were much more engaged. They come back
more frequently. They install more applications.

22
00:02:03.509 --> 00:02:08.439
We've announced today that we're up to 750
million app installs. Overall things are going

23
00:02:08.439 --> 00:02:12.950
great for the Web store.
And of course, you know that Chrome is now

24
00:02:12.950 --> 00:02:19.079
at 310 million active users, almost doubling
last year's number. So the reach potential

25
00:02:19.079 --> 00:02:26.079
for apps has been going through the roof.
However, you know, that's never enough. And

26
00:02:27.469 --> 00:02:32.049
we want -- we've been worrying about the platform
itself and how to keep pushing that forward.

27
00:02:32.049 --> 00:02:37.230
And so we've been thinking about, well, what
do Web developers need? What are the capabilities

28
00:02:37.230 --> 00:02:41.029
that are missing from the platform and what
can we do to move things forward?

29
00:02:41.029 --> 00:02:45.189
So we've been listening to your feedback and
we've actually been bringing people on the

30
00:02:45.189 --> 00:02:49.709
team who have come from Web development backgrounds.
People who have experience building some these

31
00:02:49.709 --> 00:02:56.709
Web apps, like Mihai, who is our tech lead
for Google Reader, which many of you may know.

32
00:02:57.689 --> 00:03:03.199
&gt;&gt;Mihai Parparita: Yeah. So I was on Google
Reader for quite a few years. As you may know,

33
00:03:03.199 --> 00:03:07.389
Google Reader is an advanced HDIC application
that has pushed the edge of what browsers

34
00:03:07.389 --> 00:03:11.400
can do.
On the other hand, we feel like the platform

35
00:03:11.400 --> 00:03:16.069
could do more, could provide more flexibility,
more power for Reader and similar apps.

36
00:03:16.069 --> 00:03:21.120
Just to give you a few examples, Reader is
one of the first apps to be offline enabled,

37
00:03:21.120 --> 00:03:26.449
and that was a technical challenge and we
fought with manifests and caches like everyone

38
00:03:26.449 --> 00:03:32.430
else, but even with that it wasn't the best
user experience. Users had to enable offline

39
00:03:32.430 --> 00:03:37.999
mode. Users had to launch a browser to use
the app which sort of feels like a tautology.

40
00:03:37.999 --> 00:03:42.139
Why would I use a browser when I'm offline?
Another issue that we faced in Reader was

41
00:03:42.139 --> 00:03:47.299
dealing with third-party content where feeds
can have Flash, they can have iFrames, they

42
00:03:47.299 --> 00:03:52.329
can have arbitrary JavaScript, and we want
to have the experience to be as rich as possible,

43
00:03:52.329 --> 00:03:56.689
but we don't want a random feed to be able
to steal your Google cookies or otherwise

44
00:03:56.689 --> 00:04:00.439
take advantage of the fact that it's being
displayed in a privileged environment. We

45
00:04:00.439 --> 00:04:03.949
have to jump through a lot of hoops to sanitize
the content, have whitelists, blacklists,

46
00:04:03.949 --> 00:04:08.739
and we always lived in fear of well, what
if we missed something? What if tomorrow anyone

47
00:04:08.739 --> 00:04:12.119
can access your Reader account and your account
and all that?

48
00:04:12.119 --> 00:04:16.759
And finally, users wanted a lot more flexibility
about how they consume feeds. Do they want

49
00:04:16.759 --> 00:04:21.400
to open up the item in a new tab, in a new
window, in a pop-up, they want a mini browser

50
00:04:21.400 --> 00:04:25.840
inside of Reader? We couldn't provide any
of that. We could provide a usewindow.open

51
00:04:25.840 --> 00:04:29.300
or target equals blank, and sort of hope for
the best, hope that the pop-up blocker didn't

52
00:04:29.300 --> 00:04:36.080
get us, but that was about it.
So Reader, you know, is in some ways a well-suited

53
00:04:36.080 --> 00:04:39.460
app for the Web environment and I'm sure others
of you have run into even more issues.

54
00:04:39.460 --> 00:04:46.060
&gt;&gt;Erik Kay: Right. So we took feedback like
that and we really started to push forward

55
00:04:46.060 --> 00:04:51.780
in terms of what we wanted to do.
We're evolving in four main areas. The main

56
00:04:51.780 --> 00:04:57.550
one that we'll start with is we're pulling
apps outside of the browser. We'll dive into

57
00:04:57.550 --> 00:05:01.060
each of these in more detail, but just the
quick overview is pulling them out of the

58
00:05:01.060 --> 00:05:06.409
browser. We're enhancing the user interface,
giving you more control over the windows and

59
00:05:06.409 --> 00:05:10.960
we're making apps be offline by default, making
it so it's easy to build them in a way that

60
00:05:10.960 --> 00:05:16.259
they behave reasonably with poor network connectivity.
And finally, we're adding a wealth of new

61
00:05:16.259 --> 00:05:20.919
APIs to give you access to powerful system
and device capabilities.

62
00:05:20.919 --> 00:05:25.650
So let's dive in a little more deeply.
So what do we mean by breaking out of the

63
00:05:25.650 --> 00:05:30.930
browser? Well, the first thing we mean is
that you launch apps from outside the browser.

64
00:05:30.930 --> 00:05:37.930
So you'll see in a minute here that basically
you'll no longer need to launch the browser,

65
00:05:38.030 --> 00:05:42.710
go into Chrome, go to the new tab page to
find your apps. The apps will instead come

66
00:05:42.710 --> 00:05:46.819
from the operating system, the traditional
place that you're used to finding them and

67
00:05:46.819 --> 00:05:50.099
launching them.
Second, the apps will act as peers to their

68
00:05:50.099 --> 00:05:56.800
other native applications, top level windows.
They interact alt tab to switch between applications.

69
00:05:56.800 --> 00:06:00.189
Everything you would expect a native app to
behave like in a user interface perspective,

70
00:06:00.189 --> 00:06:07.050
OS integration perspective. It will no longer
be a tab in a browser.

71
00:06:07.050 --> 00:06:10.780
So let's give them a demo and show them what
this looks like, Mihai.

72
00:06:10.780 --> 00:06:16.580
&gt;&gt;Mihai Parparita: Sure. So this presentation
is actually in itself an app. The demo just

73
00:06:16.580 --> 00:06:23.319
breaks out of the app. And if I move the window
out of the way you can see that I have my

74
00:06:23.319 --> 00:06:30.180
top level window. It has, you know, minimal
-- no tab strip, no Omnibox, and there's a

75
00:06:30.180 --> 00:06:36.270
Chrome icon at the bottom that seems to be
getting clipped. And where I can make tabs

76
00:06:36.270 --> 00:06:41.469
and the application itself has its own icon
in the launcher.

77
00:06:41.469 --> 00:06:44.749
This is the experience on Chrome OS where
it is a full application launcher. On Windows

78
00:06:44.749 --> 00:06:49.939
there will be shortcuts on a desktop and the
appropriate behavior on other platforms.

79
00:06:49.939 --> 00:06:53.520
So let's switch back to the app and let's
talk about UI.

80
00:06:53.520 --> 00:07:00.520
&gt;&gt;Erik Kay: Right. So enhanced user interface.
So you already saw that it has a native level

81
00:07:01.919 --> 00:07:08.330
-- top level window frame. There's no browser
Chrome, there's no tabs, no address bar, no

82
00:07:08.330 --> 00:07:15.330
back button. And further, you have full control
over the look and feel of that frame.

83
00:07:16.860 --> 00:07:19.849
Next you have -- you can actually manage multi-window
applications.

84
00:07:19.849 --> 00:07:25.699
Actually, I did this the wrong order. But
multi-window applications. So that means you

85
00:07:25.699 --> 00:07:30.249
really will be able to cooperate between multiple
windows and have them interoperate. Today

86
00:07:30.249 --> 00:07:35.080
in tabs it's very hard to sort of have multiple
tabs that are not cooperating with each other

87
00:07:35.080 --> 00:07:40.960
and interacting with each other and it's hard
to do things like tool bars and, you know,

88
00:07:40.960 --> 00:07:46.279
panels that cooperate and interact with your
host window.

89
00:07:46.279 --> 00:07:51.729
And you know, one of the things by not having
browser Chrome is, well, what do links do?

90
00:07:51.729 --> 00:07:55.789
Well, links behave just like they would in
a normal native app. When you click on the

91
00:07:55.789 --> 00:08:00.409
link it opens the browser window. Let's show
them. There's a link to Google.com.

92
00:08:00.409 --> 00:08:04.879
&gt;&gt;Mihai Parparita: I'll tab back to the application.
&gt;&gt;Erik Kay: Right. So now you're back inside

93
00:08:04.879 --> 00:08:09.889
the application. So we've got another demo
here that shows a little bit more about what

94
00:08:09.889 --> 00:08:13.110
windowing control can do.
&gt;&gt;Mihai Parparita: This is a little toy demo

95
00:08:13.110 --> 00:08:17.580
showing that we have an app window. You can
see the minimal Chrome. Bizarro World one

96
00:08:17.580 --> 00:08:22.139
is actually a full custom window where the
app controls every single on it. In this case

97
00:08:22.139 --> 00:08:29.139
I just made it all black. We have full control
over behavior so I know I can have it resize

98
00:08:30.309 --> 00:08:35.599
itself and certainly drag around and follows.
You imagine this could be a little dog toolbar

99
00:08:35.599 --> 00:08:39.169
and I can control it or have the window in
a minimized state.

100
00:08:39.169 --> 00:08:46.169
&gt;&gt;Erik Kay: Right. So offline by default.
Before we dive into the specifics of this,

101
00:08:46.230 --> 00:08:50.160
it's probably worth explaining what do we
mean by offline.

102
00:08:50.160 --> 00:08:54.380
So A lot of people think offline and they
think, okay, I'm on an airplane, I have no

103
00:08:54.380 --> 00:09:00.610
connectivity whatsoever. That's not the only
time that offline matters for applications.

104
00:09:00.610 --> 00:09:06.910
Offline can mean I have got slow connectivity.
I've got spotty connectivity. For anyone who

105
00:09:06.910 --> 00:09:12.620
uses a cellular network, maybe in this building,
the Wi-Fi, you know, you're used to not have

106
00:09:12.620 --> 00:09:16.130
reliable connectivity.
The speed might change as you go. Maybe you're

107
00:09:16.130 --> 00:09:21.420
in a hotel with a captive proxy. If your application
is trying to talk over the network, it needs

108
00:09:21.420 --> 00:09:25.350
to be able to be robust in the face of these
different network connections.

109
00:09:25.350 --> 00:09:31.839
So how do we do this? Well, we're starting
from a base of Chrome packaged apps. Basically

110
00:09:31.839 --> 00:09:36.529
for those of you who aren't familiar with
Chrome apps in general, packaged apps are

111
00:09:36.529 --> 00:09:43.529
a zip file, a collection of HTML, JavaScript
and other resources for your Web application

112
00:09:44.029 --> 00:09:48.380
that are downloaded, installed on the user's
computer. So all the code and logic is always

113
00:09:48.380 --> 00:09:54.050
there ready to go.
We take some extra steps and -- to make sure

114
00:09:54.050 --> 00:09:59.839
that we're enforcing a strict separation between
data and user interface.

115
00:09:59.839 --> 00:10:05.180
By being packaged, by making sure that all
the code and logic are always being -- are

116
00:10:05.180 --> 00:10:09.579
always running from client side and not being
generated server side, we mean that the app

117
00:10:09.579 --> 00:10:15.199
doesn't get into a broken state and it's up
to you to download your data, store it locally,

118
00:10:15.199 --> 00:10:21.779
render your UI appropriately.
We further enforce this with -- support this

119
00:10:21.779 --> 00:10:28.779
with building APIs that are themselves resilient
to being in these poor network connectivity

120
00:10:29.430 --> 00:10:34.310
conditions.
And finally, this may seem like a small thing,

121
00:10:34.310 --> 00:10:38.730
but the fact that we've moved apps from launching
outside the browser actually addresses one

122
00:10:38.730 --> 00:10:43.420
of the key usability issues with offline.
Today some of you may have actually gone through

123
00:10:43.420 --> 00:10:49.120
the effort to make your hosted Web app work
offline and found that even after you went

124
00:10:49.120 --> 00:10:53.709
through all the effort to work with AppCache
and make that do what you want it had to do

125
00:10:53.709 --> 00:10:59.550
that users are still not finding that functionality
and they are still frustrated with using it.

126
00:10:59.550 --> 00:11:05.399
For the reasons that Mihai was pointing out
before, they had to know first to launch the

127
00:11:05.399 --> 00:11:11.180
browser, then they had to somehow navigate
to your app. Well, if they know how to bookmark

128
00:11:11.180 --> 00:11:15.769
it, that's about 10% of users, then they can
get back to it. What about for the rest of

129
00:11:15.769 --> 00:11:21.040
the users?
Well, for them they have to either know what

130
00:11:21.040 --> 00:11:24.759
the URL is ahead of time or for many of them
actually what they do is they go to their

131
00:11:24.759 --> 00:11:28.740
favorite search engine and they try to navigate
to it. And guess what? When you're offline

132
00:11:28.740 --> 00:11:35.639
search engines don't really work.
So people in a poor connected world are continuously

133
00:11:35.639 --> 00:11:41.290
reinforced that the browser doesn't work because
all their tabs are broken. Even when they

134
00:11:41.290 --> 00:11:44.899
have an app that they know works, they don't
know how to get to it. So pulling app outside

135
00:11:44.899 --> 00:11:50.320
the browser and making it a first class peer
to their other native applications gets past

136
00:11:50.320 --> 00:11:53.970
all that anxiety and all the logistics of
getting there.

137
00:11:53.970 --> 00:12:00.480
&gt;&gt;Mihai Parparita: So we're gonna demo this
very quickly and we'll get the presentation

138
00:12:00.480 --> 00:12:05.579
out of the way. I'm going to yank the ethernet
cable out of my Chromebook.

139
00:12:05.579 --> 00:12:09.940
As you can see there's a little icon in the
corner that says I'm offline. I can refresh

140
00:12:09.940 --> 00:12:14.459
Google and show that it doesn't seem to work.
And we're going to install an app.

141
00:12:14.459 --> 00:12:18.779
In this case we're going to sort of do a kind
of stress test where we are offline. We're

142
00:12:18.779 --> 00:12:23.550
going to install the app right now in developer
mode, but it should process the same. And

143
00:12:23.550 --> 00:12:28.029
this app has never had a chance to run before.
It's never had a chance to talk to its server,

144
00:12:28.029 --> 00:12:32.220
download data, but the experience should still
be acceptable.

145
00:12:32.220 --> 00:12:37.389
The specific app we're doing is a diff tool
that lets you compare files. So when it launched

146
00:12:37.389 --> 00:12:42.720
it has an offline indicator that says you're
currently offline, so all it can do is it

147
00:12:42.720 --> 00:12:49.720
can diff local files, but dash will keep working.
So let me pick a couple of files. And as you

148
00:12:58.110 --> 00:13:00.190
can see -- I lost focus.
As you can see, the application still works.

149
00:13:00.190 --> 00:13:03.959
If I manage to find the ethernet cable and
plug it back in --

150
00:13:03.959 --> 00:13:10.959
&gt;&gt;Erik Kay: While Mihai is doing that, I'll
point out that we're doing this demo on Chromebook

151
00:13:12.389 --> 00:13:19.389
and we're doing it with the latest Canary
build of Chrome OS. So we're taunting the

152
00:13:21.699 --> 00:13:24.959
demo gods --
&gt;&gt;Mihai Parparita: Fine in this case. We are

153
00:13:24.959 --> 00:13:30.970
back on line. The app has noticed that we
are online. The choose URL feature has appeared,

154
00:13:30.970 --> 00:13:37.970
so now we can diff not just local files, but
ones that live on a server. So I think I have

155
00:13:41.250 --> 00:13:48.250
some cuts. And as you can see --
&gt;&gt;Erik Kay: This is really a tortured case

156
00:13:52.319 --> 00:13:58.300
for an application. It launched for the first
time never having seen the network. So it

157
00:13:58.300 --> 00:14:04.199
was able to run robustly. Without quitting
and relaunching it, it recovered. So it was

158
00:14:04.199 --> 00:14:09.230
able to see, you know, the fact that the network
was back. You didn't have to do anything,

159
00:14:09.230 --> 00:14:13.180
you didn't have to refresh the page, you didn't
have to take that extra step. The app was

160
00:14:13.180 --> 00:14:15.199
just able to proceed.
&gt;&gt;Mihai Parparita: Now that the projector

161
00:14:15.199 --> 00:14:19.899
has been fixed you guys can see that the app
launcher at the bottom is what I was referring

162
00:14:19.899 --> 00:14:26.899
where all these apps can be launched offline.
&gt;&gt;Erik Kay: Right. All right. So new APIs.

163
00:14:30.230 --> 00:14:34.490
Now, this is one of the more -- the area that
I think most of you are going to dive into

164
00:14:34.490 --> 00:14:40.360
first when you start playing with Chrome packaged
apps. And it's all the new APIs. We think

165
00:14:40.360 --> 00:14:46.440
of them in three groups. The first area are
what we call system APIs. The system APIs

166
00:14:46.440 --> 00:14:50.139
interact with the operating system at a low
level or with hardware on your device, so

167
00:14:50.139 --> 00:14:54.839
maybe USB or bluetooth, or as you saw in this
morning's keynote, raw UDP or TCP.

168
00:14:54.839 --> 00:15:01.839
These will enable a wide variety of apps that
you've never been able to build with Web technology

169
00:15:04.000 --> 00:15:06.500
before.
Next we've got shared data APIs, and shared

170
00:15:06.500 --> 00:15:12.250
data APIs are -- provide ways of interoperating
with other applications on your system. Things

171
00:15:12.250 --> 00:15:17.180
like photos or contacts, calendar entries,
things that you want to be able to access

172
00:15:17.180 --> 00:15:22.579
safely from multiple applications.
And finally then a group of service APIs.

173
00:15:22.579 --> 00:15:29.189
The service APIs are your -- the Web services
that you all know and love, but built into

174
00:15:29.189 --> 00:15:34.290
Chrome, into the Chrome runtime in such a
way that it's going to be resilient to poor

175
00:15:34.290 --> 00:15:41.290
network conditions. So things like analytics,
in-app payments, things like that, will be

176
00:15:42.269 --> 00:15:45.620
coming to the APIs.
Why don't we give a demo of one of these APIs

177
00:15:45.620 --> 00:15:48.759
in action?
&gt;&gt;Mihai Parparita: Sure. So this demo is going

178
00:15:48.759 --> 00:15:55.759
to display me because I'm going to hold a
physical device here. This is a little science

179
00:15:56.180 --> 00:16:00.990
fair kind of project that one of our engineers
Mike made. It has an arduino board on the

180
00:16:00.990 --> 00:16:06.350
back. It has -- it talks to the Chromebook
via a serial port, a serial-over-bluetooth

181
00:16:06.350 --> 00:16:12.060
a serial-over-USB in this case, and it has
a little stepper motor here that is controlled

182
00:16:12.060 --> 00:16:17.800
by the arduino. And the slider at the bottom
of the screen controls the motor. It just

183
00:16:17.800 --> 00:16:24.800
sends a one-byte command saying "please rotate
to my current position," and that goes over

184
00:16:24.920 --> 00:16:30.879
the serial wire, the arduino interprets it.
The key thing here is that the Chromebook

185
00:16:30.879 --> 00:16:35.790
knows nothing about this particular device
or about arduino in general, it just knows

186
00:16:35.790 --> 00:16:39.329
that there's a serial port and that in turn
is exposed to the application. So all of the

187
00:16:39.329 --> 00:16:44.050
logic about the specific device is in the
application that can be installed by any user.

188
00:16:44.050 --> 00:16:48.100
&gt;&gt;Erik Kay: The other key bit is that all
this code is just JavaScript and HTML, right?

189
00:16:48.100 --> 00:16:55.100
It is -- no special, no device drivers, no,
like, native code that needed to be there.

190
00:16:55.560 --> 00:17:00.730
That said, we are going to be providing bindings
in addition to JavaScript, also to Dart and

191
00:17:00.730 --> 00:17:03.399
to Native Client, so you will be able to access
these APIs from whatever programming environment

192
00:17:03.399 --> 00:17:07.770
that you'd like.
Speaking of the programming model, why don't

193
00:17:07.770 --> 00:17:13.060
we dive in and take a look at some code.
Before we do that, though, just a refresher

194
00:17:13.060 --> 00:17:20.060
of what is behind the core bit of the programming
model. So as I said, these are packaged apps,

195
00:17:20.080 --> 00:17:22.270
and that means they're a directory full of
resources.

196
00:17:22.270 --> 00:17:29.270
They have a background page that acts as a
hub, so what that means is this is what starts

197
00:17:33.010 --> 00:17:39.660
up. When you launch the app, a background
page launches and it triggers an event, and

198
00:17:39.660 --> 00:17:42.750
that's what -- then it's up to you to decide
what to do.

199
00:17:42.750 --> 00:17:48.230
In previous incarnations of Chrome apps we
had a launch URL, basically a page that would

200
00:17:48.230 --> 00:17:53.600
open up in a tab. Now you've got full control
over how your app behaves, how many windows

201
00:17:53.600 --> 00:17:59.730
it opens up, if it even opens up a window
at all, or does something in the background.

202
00:17:59.730 --> 00:18:04.760
And that last step is sort of an important
use case that we're really interested in is

203
00:18:04.760 --> 00:18:10.130
being able to handle system level events and
have your app come and go based on signals

204
00:18:10.130 --> 00:18:14.320
from the runtime.
So let's take a look at some of the code that

205
00:18:14.320 --> 00:18:18.010
shows this in action.
&gt;&gt;Mihai Parparita: Sure. So I'm going to call

206
00:18:18.010 --> 00:18:24.590
up a Hello World demo. And incidentally, to
actually code the app I'm going to use an

207
00:18:24.590 --> 00:18:30.460
app. This is a text editor that's been whipped
up by one of our other engineers.

208
00:18:30.460 --> 00:18:34.910
So like Erik said, first we start with the
manifest.

209
00:18:34.910 --> 00:18:39.840
So if you went to the extension talk yesterday,
you know there's a new manifest called Manifest

210
00:18:39.840 --> 00:18:44.870
Version 2.
&gt;&gt;Erik Kay: Right. And Manifest 2 basically

211
00:18:44.870 --> 00:18:49.880
is the trigger that we use to enforce some
of the new policies with apps and extensions,

212
00:18:49.880 --> 00:18:55.110
and fork turns on CSP by default which we'll
talk about in a little bit, but it also is

213
00:18:55.110 --> 00:19:02.110
one of the keys for showing off the new app
behavior. It also has a -- the basics that

214
00:19:03.220 --> 00:19:10.220
you're used to, a name, a version, and another
field that is -- you've seen before, the app

215
00:19:13.080 --> 00:19:17.530
field, but rather than a launch URL like we
said before, instead it has a designation

216
00:19:17.530 --> 00:19:23.150
of the background page, as I said, the main,
the hub of the application, it uses the same

217
00:19:23.150 --> 00:19:29.000
event page technology that we've just announced
with Chrome extensions which means that it

218
00:19:29.000 --> 00:19:36.000
basically can come and go on demand, as the
system needs it. So we specified the app.

219
00:19:36.040 --> 00:19:41.500
The other thing actually, Mihai, you might
want to add permissions to it. So permissions

220
00:19:41.500 --> 00:19:47.900
are the way of specifying in the manifest
what capabilities your app needs up front.

221
00:19:47.900 --> 00:19:54.030
This allows us to, you know, control, you
know, it's a security feature that basically

222
00:19:54.030 --> 00:19:59.860
allows us to limit the damage that an application
can do if it has a bug in it. So then next,

223
00:19:59.860 --> 00:20:05.350
we're diving into the actual background page
itself. This is main. As I mentioned before,

224
00:20:05.350 --> 00:20:11.590
what it does is it loads, and then it fires
off a launch event. So the first thing Mihai

225
00:20:11.590 --> 00:20:17.140
does in his background page is set up an event
listener in the background page, and in that,

226
00:20:17.140 --> 00:20:22.150
first thing he does is to create a window,
using our new window app API. And basically

227
00:20:22.150 --> 00:20:29.150
this is the Hello World, launch the app, get
a launch event, create a window, show just

228
00:20:29.550 --> 00:20:36.550
an obvious snippet of HTML, so here is our
Hello World. The next step is to load into

229
00:20:37.300 --> 00:20:43.580
Chrome, now again, since this is just a packaged
app directory, it's built in the same technology

230
00:20:43.580 --> 00:20:47.190
as Chrome extensions and other Chrome Apps
have been built in the past, so just going

231
00:20:47.190 --> 00:20:53.880
to developer mode, load and unpack extension,
and then we can just launch the app from the

232
00:20:53.880 --> 00:20:57.960
app launcher directly, there you go, and we
have our Hello World, so really trivial bit

233
00:20:57.960 --> 00:21:04.960
of code, as you can imagine you can do whatever
you want from that launch event and do more

234
00:21:05.150 --> 00:21:09.830
advanced things, so before we do the more
advanced things, let's talk a little bit more

235
00:21:09.830 --> 00:21:14.930
about some of the other features of the programming
model. So one of the things that's interesting

236
00:21:14.930 --> 00:21:21.310
is that all of the windows are what we call
single page applications. There's no navigation.

237
00:21:21.310 --> 00:21:26.340
So we think this leads to an overall better
experience and simplifies a few things, again,

238
00:21:26.340 --> 00:21:30.160
the fact that we don't have a back button,
that we don't have an address bar, we don't

239
00:21:30.160 --> 00:21:34.000
want to have people building apps that wind
up getting users trapped and stuck, we don't

240
00:21:34.000 --> 00:21:41.000
-- we want to get rid of that flash of white
repaint. And we've also actually removed a

241
00:21:41.170 --> 00:21:46.600
few Web features, things that are -- that
we think lead overall to bad Web performance

242
00:21:46.600 --> 00:21:50.190
or have security problems with them. It turns
out that on the Web at large, it's very hard

243
00:21:50.190 --> 00:21:56.290
to deprecate features. Very hard to (inaudible)
We have strict compatibility needs. As people

244
00:21:56.290 --> 00:22:00.510
who are going to be building these Chrome
Apps are going to be starting from scratch,

245
00:22:00.510 --> 00:22:04.890
we have the opportunity to take a few and
just eliminate them from the beginning, and

246
00:22:04.890 --> 00:22:09.540
they will be things like synchronous requests
that will block the UI thread or again things

247
00:22:09.540 --> 00:22:14.910
that might call security problems. Speaking
of security, let's talk a little bit about

248
00:22:14.910 --> 00:22:20.600
the security model. So to start with, you
get all the things that you're used to with

249
00:22:20.600 --> 00:22:24.990
Chrome, you get process isolation, Chrome
is famous for being a multi-process browser,

250
00:22:24.990 --> 00:22:31.990
and apps are no different. Each app runs in
its own process, completely separate from

251
00:22:32.270 --> 00:22:39.270
each other. We also Sandbox each app, so each
app has its own storage area, its own Sandbox

252
00:22:43.120 --> 00:22:49.040
execution runtime Sandbox which makes it so
that even if it had a bug, the limit, the

253
00:22:49.040 --> 00:22:56.040
damage to what it could do is tightly controlled
by the runtime. And part of that is the permissions

254
00:22:57.170 --> 00:23:01.440
model I was talking about before. The app
has to declare up front what capabilities

255
00:23:01.440 --> 00:23:06.650
it wants to use, so in this case we have our
little app that used the serial port API and

256
00:23:06.650 --> 00:23:11.440
the Web cam, so if that happened to have a
bug in it, that could be exploited by an attacker

257
00:23:11.440 --> 00:23:15.270
somehow, the worst that could happen is it
could do exactly what that app could do and

258
00:23:15.270 --> 00:23:19.390
talk to the serial part, the Web cam. This
is very different from what you're used to

259
00:23:19.390 --> 00:23:24.720
with native executables, where once you have
a security bug in the native executable, you

260
00:23:24.720 --> 00:23:31.720
have access to the whole machine, everything
the user could do, attacker could do. So I

261
00:23:32.300 --> 00:23:38.030
mentioned content security policy. Now, what
content security policy is is a way to protect

262
00:23:38.030 --> 00:23:42.100
your app against cross-side scripting bugs.
For those of you who aren't familiar with

263
00:23:42.100 --> 00:23:48.340
cross-side scripting, it's basically a way
that an attacker can somehow get code injected

264
00:23:48.340 --> 00:23:53.040
into your page and run in the context of your
page. Now, in a Web page, this is bad enough,

265
00:23:53.040 --> 00:23:56.540
because it means like -- in something like
Gmail, it could -- you know, an attacker could

266
00:23:56.540 --> 00:24:00.740
maybe read all of your e-mail and post it
to another site. In the context of an app

267
00:24:00.740 --> 00:24:06.780
it could do even more potentially with the
new more powerful APIs we're adding, like,

268
00:24:06.780 --> 00:24:12.340
you know, I don't know access your Web cam,
leave persistent files somewhere on your hard

269
00:24:12.340 --> 00:24:17.370
drive, talk to some hardware you didn't want
them to talk to. So we really try to lock

270
00:24:17.370 --> 00:24:22.780
this down content security policy makes it
so your apps will be resistant to these sorts

271
00:24:22.780 --> 00:24:27.020
of attacks. So let's show that in action.
&gt;&gt;Mihai Parparita: Sure, so I'm going to take

272
00:24:27.020 --> 00:24:31.450
my Hello World demo from earlier and make
it actually do something besides play Hello

273
00:24:31.450 --> 00:24:38.450
World. I'm going to have it -- have a little
form that asks users for their name and then

274
00:24:39.250 --> 00:24:46.250
displays it in the output, so that is the
markup side, and then on the scripting side,

275
00:24:47.080 --> 00:24:54.080
I have sort of the obvious implementation
I just described where I -- where I get the

276
00:24:58.950 --> 00:25:02.050
submit event and display the name and the
output.

277
00:25:02.050 --> 00:25:06.930
&gt;&gt;Erik Kay: For those of you who are, you
know, the more observant in the crowd, you'll

278
00:25:06.930 --> 00:25:12.230
know that inner HTML is a pretty dangerous
feature of the web to use. Basically is taking

279
00:25:12.230 --> 00:25:17.760
-- he's taking unescaped content and just
injecting it as code straight into his page.

280
00:25:17.760 --> 00:25:22.700
&gt;&gt;Mihai Parparita: Let's load that same page
because it doesn't use any app APIs just in

281
00:25:22.700 --> 00:25:29.700
a regular Chrome tab the way a Web app would
run in. So, sure, I can type in my name, but

282
00:25:30.780 --> 00:25:37.610
because of inner HTML, as Erik mentioned,
markup gets interpreted, H1s aren't so bad,

283
00:25:37.610 --> 00:25:43.380
well, what if I had an unclick handler here
that --

284
00:25:43.380 --> 00:25:47.120
&gt;&gt;Erik Kay: So you can see that this is script.
He's actually typing in JavaScript, now it's

285
00:25:47.120 --> 00:25:51.470
going to get injected into his page. Now,
obviously this is a very simplified form of

286
00:25:51.470 --> 00:25:56.530
an access because there's a form field, user
had to type it in. Usually they might come

287
00:25:56.530 --> 00:26:03.530
in as a parameter in URL somehow got data
stored into your system, but you can see that

288
00:26:03.850 --> 00:26:07.330
if they could run code in the context of your
app, they would be able to do the dangerous

289
00:26:07.330 --> 00:26:11.220
things your app could do. Let's try that same
code in an app.

290
00:26:11.220 --> 00:26:17.410
&gt;&gt;Mihai Parparita: So app still works. HTML
still gets interpreted because, you know,

291
00:26:17.410 --> 00:26:24.410
Chrome does what it's asked and gives us inner
HTML, but if I type in that same script snippet,

292
00:26:26.100 --> 00:26:33.100
right, and try to run it, nothing happens.
If I pull up the developer tools, these are

293
00:26:37.140 --> 00:26:44.140
the same developer tools that you're used
to, you can see a content script clause here

294
00:26:44.210 --> 00:26:47.250
that appears.
&gt;&gt;Erik Kay: Right. This is basically showing

295
00:26:47.250 --> 00:26:52.330
you that we are locking down the app, so if
you have a bug that might enable somebody

296
00:26:52.330 --> 00:26:57.480
to inject inline script into your page, it
can't -- it can't exploit anything in your

297
00:26:57.480 --> 00:27:03.240
app, it's just stopped right up front. As
Mihai pointed out, this is all tightly integrated

298
00:27:03.240 --> 00:27:07.540
again with all the developer tools that you're
used to, you know, so you can leverage all

299
00:27:07.540 --> 00:27:12.960
the power that's there. They've been evolving
really rapidly, and so there's a lot of great

300
00:27:12.960 --> 00:27:18.070
features if you haven't been checking them
out.

301
00:27:18.070 --> 00:27:25.070
So let's talk about a few other bits of a
security model. We take a further step and

302
00:27:27.370 --> 00:27:32.050
isolate storage from one app to the other.
So what this means is that what gets written

303
00:27:32.050 --> 00:27:36.830
in one app, what happens in one app, stays
in that app, it can't affect what happens

304
00:27:36.830 --> 00:27:43.020
in the other. Cookies in your browser don't
affect cookies in your app and vice versa.

305
00:27:43.020 --> 00:27:47.690
And this is true not only for the origin,
but if your app is doing -- interacting with

306
00:27:47.690 --> 00:27:53.490
Web content from other origins, that too is
isolated, so if you're logged in to Twitter,

307
00:27:53.490 --> 00:27:58.510
you know, in your browser with one account,
and your app interacts with Twitter, it isn't

308
00:27:58.510 --> 00:28:03.220
affected by that. It would have to log in
separately.

309
00:28:03.220 --> 00:28:07.820
And I mentioned explicit shared data APIs
before when I was talking about new APIs.

310
00:28:07.820 --> 00:28:12.410
This is also a security feature, because it
means that we can give apps access to more

311
00:28:12.410 --> 00:28:17.320
powerful functionality without exposing your
whole hard drive to them, and without giving

312
00:28:17.320 --> 00:28:22.220
them the ability to write arbitrary files
into arbitrary locations, so they can't leave

313
00:28:22.220 --> 00:28:27.540
an executable on your hard drive and they
can't, you know -- they can't just read your

314
00:28:27.540 --> 00:28:32.430
Quicken file, for example, but they can read
your photos perhaps, if they've got the photos

315
00:28:32.430 --> 00:28:39.430
permission. And one further distinction that
we've made for apps is that we no longer have

316
00:28:43.530 --> 00:28:49.740
access to extension APIs within packaged apps.
So we made an explicit split to say that an

317
00:28:49.740 --> 00:28:53.950
app is outside the browser, and that means
that interacting with the browser through

318
00:28:53.950 --> 00:29:00.090
these extension APIs no longer makes sense.
It's also true vice versa, extension APIs

319
00:29:00.090 --> 00:29:07.090
can't affect apps. These apps are truly isolated
from the browser and operate on their own.

320
00:29:07.760 --> 00:29:12.900
There's one last security feature that we
added here, which actually has some very useful

321
00:29:12.900 --> 00:29:16.760
functionality as well, so you've heard us
just talk about how we lock down this, lock

322
00:29:16.760 --> 00:29:20.280
down that, you can't get this web content
or that content. Well, sometimes it's actually

323
00:29:20.280 --> 00:29:25.190
useful to get a host of Web content in your
app. Well, in a similar way that you're used

324
00:29:25.190 --> 00:29:32.190
to with native desktop and mobile applications,
you can embed essentially a view, a full browser

325
00:29:32.450 --> 00:29:37.570
inside of your app using something we call
the browser tag, so this is different from

326
00:29:37.570 --> 00:29:44.570
an iFrame in a couple of different ways. The
first is that it's a top level frame. It doesn't

327
00:29:45.310 --> 00:29:50.880
think of itself as an iFrame, it thinks of
itself as if it were in a tab or in a window

328
00:29:50.880 --> 00:29:56.810
by itself. Second is that it runs out of process.
So if there's a bug, if there's some issue

329
00:29:56.810 --> 00:30:02.720
where by going to remote website, somebody
found a security hole in Chrome, it would

330
00:30:02.720 --> 00:30:09.120
only affect the browser tag instance. It wouldn't
be able to affect your app. And finally, once

331
00:30:09.120 --> 00:30:13.000
again storage is isolated, so again, what
happens in this browser tag doesn't affect

332
00:30:13.000 --> 00:30:20.000
what's in your app and vice versa. So we've
got a little more time, so why don't we dive

333
00:30:22.570 --> 00:30:26.550
back into the -- that serial port demo and
show what it's like to actually use some of

334
00:30:26.550 --> 00:30:29.550
the more powerful APIs and do a little bit
more stuff with it.

335
00:30:29.550 --> 00:30:35.720
&gt;&gt;Mihai Parparita: Okay. So I'm going to close
some more windows and load up a standalone

336
00:30:35.720 --> 00:30:42.720
version of that serial port demo that we had
earlier, and let's launch it. So same sort

337
00:30:45.730 --> 00:30:52.350
of setup. Camera using the Web RTC API to
show me, the same slider. This one is a bit

338
00:30:52.350 --> 00:30:57.660
fancier. It has a serial port ticker listing
all serial ports that are local. So the goal

339
00:30:57.660 --> 00:31:01.910
is we have a Chrome logo, physical Chrome
logo here, and we have the on-screen logo

340
00:31:01.910 --> 00:31:08.610
here, this board actually also has a potentiometer,
this little knob I want to turn, and I want

341
00:31:08.610 --> 00:31:13.990
to make it so that turning this knob turns
the logo on the screen, so let's pull up the

342
00:31:13.990 --> 00:31:20.990
code for this. So it's in --
&gt;&gt;Erik Kay: Right, so the existing code was

343
00:31:22.490 --> 00:31:26.950
basically writing to the board, sending it
data. Now this one, we're going to change

344
00:31:26.950 --> 00:31:31.140
it to add read function, read back.
&gt;&gt;Mihai Parparita: So walking through the

345
00:31:31.140 --> 00:31:38.100
existing code briefly, we have the Web RTC
side of things where we get access to the

346
00:31:38.100 --> 00:31:44.120
user's camera, and display the result. Since
the app has the video permission, this did

347
00:31:44.120 --> 00:31:51.090
not trigger info bar, the access happened
immediately. We have the slider, the HTML5

348
00:31:51.090 --> 00:31:56.770
range element here, we set up an on-change
listener for it to set the position, and we

349
00:31:56.770 --> 00:32:01.900
built a serial port picker by listing all
of the ports that are available. Once we pick

350
00:32:01.900 --> 00:32:08.900
a port, we have the open API call to actually
start opening up a connection to it. And once

351
00:32:09.560 --> 00:32:14.790
we open, we can start setting the position.
We have the connection ID that we get from

352
00:32:14.790 --> 00:32:21.500
the API callback. This is -- all these functions
are async and we can start setting the position.

353
00:32:21.500 --> 00:32:26.670
To actually set the position, we just send
a single byte as -- actually as an ASCII character

354
00:32:26.670 --> 00:32:32.130
from 0 to 9. We're using the buffers so that
the serial port API can work with any kind

355
00:32:32.130 --> 00:32:37.640
of binary data, too. We're using ASCII here
for convenience. So as Erik mentioned, the

356
00:32:37.640 --> 00:32:43.570
next up is to actually start reading back
from the board. So given that there's a write

357
00:32:43.570 --> 00:32:49.040
API call here, because you can imagine there's
also a read API call we can use --

358
00:32:49.040 --> 00:32:54.690
&gt;&gt;Erik Kay: Right. As Mihai mentioned all
of the Chrome App APIs are asynchronous, so

359
00:32:54.690 --> 00:33:01.290
you'll notice they all take a callback, and
so he has in his function there, and on read

360
00:33:01.290 --> 00:33:05.410
function for the callback which he's pasted
in to save some typing time.

361
00:33:05.410 --> 00:33:10.270
&gt;&gt;Mihai Parparita: Yep. So using array buffers
we read back the data from the serial port,

362
00:33:10.270 --> 00:33:17.060
we do the opposite conversion from ASCII to
a degree value, and then we use CSS 3 transforms

363
00:33:17.060 --> 00:33:22.250
to set the position of the logo and finally
we want to read the next byte, so this isn't

364
00:33:22.250 --> 00:33:26.820
a blocking call, it's just whenever the next
byte happens to appear, the call back will

365
00:33:26.820 --> 00:33:31.790
be invoked again. Let's save this. We're actually
going to save it in the same place.

366
00:33:31.790 --> 00:33:36.890
&gt;&gt;Erik Kay: And that -- by the way, that programming
model did show some of the flexibility and

367
00:33:36.890 --> 00:33:41.910
power of having an asynchronous API, but we're
able to sort of cue these things up and have

368
00:33:41.910 --> 00:33:48.910
multiple async things going on at once, and
the callbacks happen, you know, when they

369
00:33:51.370 --> 00:33:51.620
happen. We don't have to worry about inner
leaving them.

370
00:33:51.440 --> 00:33:54.020
&gt;&gt;Mihai Parparita: The App, it's the same
sort of edit reload cycle that you might be

371
00:33:54.020 --> 00:33:59.720
used to from web development, and so let's
make sure it still works, that we can still

372
00:33:59.720 --> 00:34:05.670
control it, so that part still works, and
now if we have the knob up here, and we turn

373
00:34:05.670 --> 00:34:12.670
it, the Chrome logo appears to spin, so we're
reading data.

374
00:34:13.239 --> 00:34:18.819
[ Applause ]
&gt;&gt;Erik Kay: Obviously, this is a really simple

375
00:34:18.819 --> 00:34:23.589
demo and not all of you are going to be sitting
in your garage hacking on arduino boards,

376
00:34:23.589 --> 00:34:29.919
but we're hoping that this sort of conveys
the kind of thing you can do. Web technology,

377
00:34:29.919 --> 00:34:32.859
and interact with hardware and system level
data.

378
00:34:32.859 --> 00:34:36.289
&gt;&gt;Mihai Parparita: For example, people on
our team have built our C clients, you know,

379
00:34:36.289 --> 00:34:41.289
telling their clients to use the raw socket
API, someone else built an interface to a

380
00:34:41.289 --> 00:34:45.289
heart rate monitor that uses Bluetooth, and
all of this networks on a Chrome build, for

381
00:34:45.289 --> 00:34:47.879
example, that couldn't talk to these devices
before.

382
00:34:47.879 --> 00:34:54.879
&gt;&gt;Erik Kay: So let's sort of wrap up about
and recap a little bit of what we've gone

383
00:34:55.259 --> 00:35:02.259
over. So we're evolving apps to break out
of the browser, to have enhanced user interface,

384
00:35:02.750 --> 00:35:09.329
more control over the windowing. To be offline
by default, to have access to new, more powerful

385
00:35:09.329 --> 00:35:16.329
APIs, now, we're also -- this is also available
for you to play with right now, basically

386
00:35:17.319 --> 00:35:21.410
as we said, this is canary build of Chrome.
For those of you who don't know, the Canary

387
00:35:21.410 --> 00:35:28.029
is our nightly update schedule. It's available
for windows and Mac. If you're a Linux or

388
00:35:28.029 --> 00:35:31.880
Chrome OS user, if you're brave enough, you
can do your own build, or you can wait for

389
00:35:31.880 --> 00:35:38.880
your next dev channel to come out and you
can start playing with it then. We've also

390
00:35:39.759 --> 00:35:45.250
been asked in the past about why are these
apps, you know, specific to Chrome?

391
00:35:45.250 --> 00:35:50.240
Why are they tied to Chrome?
And part of the reason is, because, well,

392
00:35:50.240 --> 00:35:55.150
there hasn't been a lot of appetite in the
browser community for doing things, doing

393
00:35:55.150 --> 00:36:01.259
more dangerous capabilities, but in the last
six months or so, we've been, you know, talking

394
00:36:01.259 --> 00:36:06.359
to more and more folks from the community
and discovered that momentum had been building,

395
00:36:06.359 --> 00:36:11.230
that people were all starting to think along
these same lines; that building -- using Web

396
00:36:11.230 --> 00:36:16.660
technologies to build more powerful applications,
its time has come, and so we're working with

397
00:36:16.660 --> 00:36:23.660
the W3C and with other browser vendors including
Mozilla, and Adobe, and Intel and Samsung,

398
00:36:24.039 --> 00:36:28.859
people in the Web community to form the new
working group to help standardize this going

399
00:36:28.859 --> 00:36:33.809
forward, so we're excited to help take the
technology that we've been building for Chrome

400
00:36:33.809 --> 00:36:40.589
and try to contribute it and make it a standard
across multiple operating systems and platforms.

401
00:36:40.589 --> 00:36:46.640
And finally you heard Sundar mention this
in the keynote, but our intent is to make

402
00:36:46.640 --> 00:36:51.619
these apps work on mobile as well. Everywhere
the Chrome runtime exists, we think that we

403
00:36:51.619 --> 00:36:58.619
can build -- bring apps -- bring this technology
along with it. Now, we only showed you this

404
00:36:59.240 --> 00:37:04.660
very simple serial demo, and -- but there's
a lot more that you can check out. Some of

405
00:37:04.660 --> 00:37:10.880
it right here at I/O. If you go over to the
Chrome Sandbox area for example, you can see

406
00:37:10.880 --> 00:37:16.740
Sencha has a neat media player demo that actually
is implementing UP&amp;P to stream from a local

407
00:37:16.740 --> 00:37:23.740
media server, which is kind of cool. Kendo
has a photo booth app that uses a lot of the

408
00:37:23.750 --> 00:37:30.750
Web RTC stuff. There's a text editor that
was done by the annular JST at Google, and

409
00:37:33.240 --> 00:37:37.039
there's a demo that we'll call "Johnny" that
is a --

410
00:37:37.039 --> 00:37:41.140
&gt;&gt;Mihai Parparita: Johnny HTML5.
&gt;&gt;Erik Kay: Oh, Johnny HTML5. Sorry. Johnny

411
00:37:41.140 --> 00:37:48.140
HTML5 which is a Lego mindstorms robot which
is being controlled over Bluetooth from your

412
00:37:48.519 --> 00:37:53.589
desktop computer. Now, you can find all of
these samples and a bunch more, actually,

413
00:37:53.589 --> 00:38:00.589
in our new GitHub repo at GitHub.com, Google
Chrome, there's an apps demo section there,

414
00:38:01.259 --> 00:38:08.259
so I encourage you to go fork and play and
contribute.

415
00:38:09.460 --> 00:38:16.460
And -- and finally, the way to learn more,
you can read our docs up at developer.chrome.com/apps.

416
00:38:17.640 --> 00:38:22.569
Now just a quick warning. Since all of this
new on the Canary channel by default, our

417
00:38:22.569 --> 00:38:26.869
apps documentation points you at our current
stable channel stuff. But there will be a

418
00:38:26.869 --> 00:38:33.019
helpful link there that shows you how to get
to the latest stuff. You can also join our

419
00:38:33.019 --> 00:38:38.299
mailing list, chromium-apps@chromium.org,
and if you want to talk to people in person,

420
00:38:38.299 --> 00:38:44.579
people on the engineering team, we also hang
out on RC at Chromium apps@freenotes. So feel

421
00:38:44.579 --> 00:38:48.730
free to join in and ask away, we are looking
forward to hearing from you.

422
00:38:48.730 --> 00:38:52.970
We're really excited to see the kind of things
that you guys can build with what we're doing,

423
00:38:52.970 --> 00:38:58.299
but it is early on. Expect some bugs. Expect
some growing pains. We would love feedback.

424
00:38:58.299 --> 00:39:05.299
So now we will take your questions.
[ Applause ]

425
00:39:05.910 --> 00:39:11.500
&gt;&gt;Erik Kay: So if you have any questions,
please come to the mic. By the way, when if

426
00:39:11.500 --> 00:39:15.980
-- if we end this and you still have questions
that you would rather not ask at the mic,

427
00:39:15.980 --> 00:39:20.089
we will stick around afterwards for a few
minutes, but also you can find us over at

428
00:39:20.089 --> 00:39:24.349
the Chrome booth. We will be having office
hours, so feel free to, you know, not only

429
00:39:24.349 --> 00:39:31.349
check out the demos, but come by and ask us
questions.

430
00:39:32.200 --> 00:39:36.640
All right?
&gt;&gt;&gt; Can -- can an app launch another app?

431
00:39:36.640 --> 00:39:43.160
&gt;&gt;Erik Kay: Not right now. That's a good question.
&gt;&gt;Mihai Parparita: Can you describe more specifically

432
00:39:43.160 --> 00:39:46.930
what you would like to do here? Is it a matter
of like I would like to send an email so I

433
00:39:46.930 --> 00:39:53.930
could launch the Gmail app sort of thing?
&gt;&gt;&gt; Well, sort of like the launcher, but without

434
00:39:56.069 --> 00:40:01.099
having to bother the user with them going
to find the app, saying this is the app that

435
00:40:01.099 --> 00:40:05.349
you are looking for to complete this request.
&gt;&gt;Erik Kay: So you can do some of it with

436
00:40:05.349 --> 00:40:10.119
Web intense but not exactly the way that you're
talking about for making a full launch replacement.

437
00:40:10.119 --> 00:40:14.859
But that's the kind of thing actually we would
probably more likely expose through extensions

438
00:40:14.859 --> 00:40:19.369
in some way, but remember that each operating
system is going to have it's own sort of natural

439
00:40:19.369 --> 00:40:25.160
way of launching apps. So even if we did provide
it, that might be specific to Chrome OS or

440
00:40:25.160 --> 00:40:28.150
something like that.
&gt;&gt;Mihai Parparita: Go ahead.

441
00:40:28.150 --> 00:40:35.150
&gt;&gt;&gt; Yeah. You mentioned early on in the presentation
about offline usage and -- and the APIs into

442
00:40:35.499 --> 00:40:40.220
the system that would degrade gracefully.
Offline. Can you give some examples of that?

443
00:40:40.220 --> 00:40:45.059
&gt;&gt;Erik Kay: Sure. So take, for example, something
like that Google analytics right now. Everyone

444
00:40:45.059 --> 00:40:50.470
is used to using Google analytics in their
app, they want to see how their app is being

445
00:40:50.470 --> 00:40:55.589
used. The way to traditionally include it
would be to say script source equals whatever

446
00:40:55.589 --> 00:41:01.650
your path to your analytics JavaScript file.
But what if you are offline? So first off,

447
00:41:01.650 --> 00:41:06.220
if you are offline when you launch the app,
it might just fail to load the analytics code

448
00:41:06.220 --> 00:41:13.180
altogether or it might load part of it. Then
let's say that you load the code successfully

449
00:41:13.180 --> 00:41:17.460
but then go offline. Well, the traditional
way that it does its thing is to ping a server

450
00:41:17.460 --> 00:41:24.460
to send its data. So in that case, we're modifying
-- both the API to be loaded, you know, safely,

451
00:41:25.759 --> 00:41:31.799
always on the client side and to know when
it's offline and to store and cache some of

452
00:41:31.799 --> 00:41:38.799
its statistics locally so it that it can save
them up and report them up at a later time.

453
00:41:42.080 --> 00:41:45.130
&gt;&gt;&gt; Okay. Thanks.
&gt;&gt;Erik Kay: Okay.

454
00:41:45.130 --> 00:41:52.130
&gt;&gt;&gt; So you said there's going to be a split
between the app extensions -- I mean the app

455
00:41:52.519 --> 00:41:56.059
API and the extension API. Can you tell us
a bit about more about these, which go to

456
00:41:56.059 --> 00:42:01.069
which category?
&gt;&gt;Erik Kay: Sure. In general, extension APIs

457
00:42:01.069 --> 00:42:07.289
are going to be limited to the things that
affect the browser. That affect Web pages,

458
00:42:07.289 --> 00:42:13.529
tabs, that sort of thing. And apps is going
to be, you know, everything else. Now there's

459
00:42:13.529 --> 00:42:19.749
going to be a few that are going to exist
in both. In general, what we have done is

460
00:42:19.749 --> 00:42:24.049
for now limited the ones that are more dangerous
system-level things and those are not going

461
00:42:24.049 --> 00:42:28.049
to be available in extensions to begin with.
Something we're evaluating, we might change

462
00:42:28.049 --> 00:42:31.740
our minds on some of that over time. But to
start with, we're going to try to keep a clean

463
00:42:31.740 --> 00:42:35.569
break between those sorts of things and apps
and the things for extensions, keep those

464
00:42:35.569 --> 00:42:38.980
tied to things that affect the browser.
&gt;&gt;Mihai Parparita: Some APIs might behave

465
00:42:38.980 --> 00:42:43.890
slightly differently, so the context of your
API, for example, can affect any Web page.

466
00:42:43.890 --> 00:42:48.740
But when used within your app it would affect
only your own apps pages.

467
00:42:48.740 --> 00:42:53.740
The docs I think should cover -- will start
covering this.

468
00:42:53.740 --> 00:42:59.079
&gt;&gt;&gt; You mentioned the -- the applicant launcher
can use a browser tag to launch another website.

469
00:42:59.079 --> 00:43:02.970
So can any JavaScript in that website interact
with the app?

470
00:43:02.970 --> 00:43:09.480
&gt;&gt;Erik Kay: Sure. The way it will interact
-- you can interact with the browser tag,

471
00:43:09.480 --> 00:43:15.089
but it will be through a very specific post
message type of interface. So it will be possible

472
00:43:15.089 --> 00:43:21.690
to have some hosted Web content that you want
that can message out and for you as the better

473
00:43:21.690 --> 00:43:26.339
of the browser tag to inject bindings into
the page as well. So you will have full control

474
00:43:26.339 --> 00:43:31.119
over that page. We actually expect eventually
the API to be rich enough that people will

475
00:43:31.119 --> 00:43:35.940
be able to build a browser using a browser
tag. So maybe you don't like Chrome's UI and

476
00:43:35.940 --> 00:43:42.410
you want to build a browser with tabs on the
side or something, I don't know, we think

477
00:43:42.410 --> 00:43:44.720
that eventually you will be able to do that
with the browser tag.

478
00:43:44.720 --> 00:43:48.180
&gt;&gt;&gt; What is the level of integration with
the file system? So I saw in the text editor

479
00:43:48.180 --> 00:43:53.980
you click, open a file, browser, you pick
a file. But say you wanted to build an editor

480
00:43:53.980 --> 00:43:58.150
where you have, you know, a directory tree
on the side like a normal ID, click through

481
00:43:58.150 --> 00:43:58.570
it.
&gt;&gt;Erik Kay: Sure.

482
00:43:58.570 --> 00:44:03.200
&gt;&gt;&gt; Is there some -- I guess what kind of
APIs are available for accessing the file

483
00:44:03.200 --> 00:44:06.470
system generally?
&gt;&gt;Erik Kay: Right. Actually, good point. We

484
00:44:06.470 --> 00:44:10.450
didn't mention that. Probably most of you
noticed that the text editor that we were

485
00:44:10.450 --> 00:44:14.769
using is itself an app and was interacting
with the file system and that text editor

486
00:44:14.769 --> 00:44:21.049
was using -- was, you know, all JavaScript
and HTML as well and it was using some of

487
00:44:21.049 --> 00:44:27.079
the file system APIs that we're working on.
In general, we're -- we're trying to limit

488
00:44:27.079 --> 00:44:33.019
it, we can think of file system access in
kind of two ways. One way are ways where the

489
00:44:33.019 --> 00:44:37.549
user specifically indicates a specific file
that they want to give you as the app access

490
00:44:37.549 --> 00:44:42.799
to, through a standard open save dialogue
type of thing. For that, you can access files

491
00:44:42.799 --> 00:44:45.960
anywhere on the system, read, write access
to them with the right sort of permission

492
00:44:45.960 --> 00:44:50.660
and that sort of a thing. But in terms of
arbitrary non-user initiated things, where

493
00:44:50.660 --> 00:44:55.769
things you might say oh, because of file A
I want to access file B, C, and D, we don't

494
00:44:55.769 --> 00:45:02.769
allow you to do that. So in those type of
cases, take an IDE, as an example,we would

495
00:45:03.249 --> 00:45:09.079
say that you should bill something that interacts
with files in your own Sandbox in that world.

496
00:45:09.079 --> 00:45:13.920
So in that case maybe you might use native
client to build the git implementation that

497
00:45:13.920 --> 00:45:19.670
actually, you know, can directly, you know,
pull down code from your repo right into your

498
00:45:19.670 --> 00:45:23.720
Sandbox and edit things locally there. In
your Sandbox you have got full access to all

499
00:45:23.720 --> 00:45:28.839
of the directories, all of the files, unrestricted.
It's the rest of the hard drive that's off

500
00:45:28.839 --> 00:45:31.749
limits, unless the user does a specific gesture
to give -- grant it --

501
00:45:31.749 --> 00:45:34.309
&gt;&gt;Mihai Parparita: The third way for getting
access to other files on the hard drive is

502
00:45:34.309 --> 00:45:39.019
by the shared data API. So if your app is
interested in not any arbitrary file but photos,

503
00:45:39.019 --> 00:45:46.019
then it can, yes, ask for any photos without
a user gesture.

504
00:45:46.109 --> 00:45:50.019
&gt;&gt;&gt; So does that mean -- so on Windows or
Mac system, there's a system photo directories,

505
00:45:50.019 --> 00:45:54.460
where supposedly the user puts their photos,
you can ask for permission to access the files

506
00:45:54.460 --> 00:45:57.150
in that directory; is that the idea?
&gt;&gt;Mihai Parparita: Yeah.

507
00:45:57.150 --> 00:46:02.059
&gt;&gt;Erik Kay: It's not exactly that. It's a
little more. So we will actually try to discover

508
00:46:02.059 --> 00:46:08.519
the types of places that you store your photos
and so a lot of people don't -- don't keep

509
00:46:08.519 --> 00:46:11.869
their photos leveraged to that one thing;
they have an extra hard drive, whatever. The

510
00:46:11.869 --> 00:46:17.049
ability for users to configure what defines
their photos area. But even then it's not

511
00:46:17.049 --> 00:46:21.880
just directory access, limited to the types
of files that you can access to. There have

512
00:46:21.880 --> 00:46:26.519
to be known types that we expect to be photos
in that case.

513
00:46:26.519 --> 00:46:30.460
&gt;&gt;&gt; Okay.
&gt;&gt;&gt; Are there any particular patterns or practices

514
00:46:30.460 --> 00:46:35.799
that we should employ when designing apps
in terms of UI state so when a user exits

515
00:46:35.799 --> 00:46:40.910
a UI, when we want that UI to come back exact
the same as when the user exited.

516
00:46:40.910 --> 00:46:46.190
&gt;&gt;Erik Kay: Yeah. That's a good point. So
there's a lot of things that we think are

517
00:46:46.190 --> 00:46:51.539
going to change in terms of how you build
these apps that are different from what you

518
00:46:51.539 --> 00:46:55.759
might expect with the Web page. Because you
might be dealing with multiple Windows and

519
00:46:55.759 --> 00:47:01.249
because your app can get shut down and pulled
back at any time, we definitely want you to

520
00:47:01.249 --> 00:47:05.650
be resilient to that and to be able to restore
and pick up from exactly where you left off

521
00:47:05.650 --> 00:47:10.779
in those cases.
You know, the example is remember -- think

522
00:47:10.779 --> 00:47:15.960
about this, these apps also need to be able
to run in mobile environments where mobile

523
00:47:15.960 --> 00:47:20.359
apps don't have guarantees of a lifetime.
So that means that you have to write your

524
00:47:20.359 --> 00:47:26.999
apps in a way where they might be shut down
due to system resource issues, right? But

525
00:47:26.999 --> 00:47:30.589
the user then switches back to them and it
should look like nothing happened and it should

526
00:47:30.589 --> 00:47:34.049
look like you never exited.
&gt;&gt;Mihai Parparita: Sorry. The other part there

527
00:47:34.049 --> 00:47:38.950
is that we have storage API. So for storage
state, you can use the storage API which looks

528
00:47:38.950 --> 00:47:43.109
like local storage but is asynchronous and
more importantly is synced so that can have

529
00:47:43.109 --> 00:47:47.349
the same state across all chrome devices that
the users assigned them to.

530
00:47:47.349 --> 00:47:51.210
&gt;&gt;Erik Kay: Yeah, absolutely. So we actually
think it's a really interesting use case,

531
00:47:51.210 --> 00:47:55.819
that you have your app in one state, you know,
on your machine at work, you go home and you

532
00:47:55.819 --> 00:48:00.299
launch it again from exactly where you left
off at work.

533
00:48:00.299 --> 00:48:04.519
&gt;&gt;&gt; Any ability for external devices to wake
up apps?

534
00:48:04.519 --> 00:48:10.809
&gt;&gt;Erik Kay: Well, basically the whole gist
of these -- of this notification based model

535
00:48:10.809 --> 00:48:15.099
that we've got for -- for the app, it should
enable that sort of a thing. We don't have

536
00:48:15.099 --> 00:48:19.940
any specific APIs to talk about on that front
yet. But -- but absolutely, things like -- you

537
00:48:19.940 --> 00:48:24.799
can imagine things like server push, synchronization,
that sort of thing will all be --

538
00:48:24.799 --> 00:48:28.009
&gt;&gt;Mihai Parparita: I think the one thing we
have is for the media gallery API, if the

539
00:48:28.009 --> 00:48:33.329
SD card is inserted, it will fire an event,
for example, so your app can decide to do

540
00:48:33.329 --> 00:48:40.329
something in response to photos that just
appeared even if it's not running.

541
00:48:41.319 --> 00:48:48.119
&gt;&gt;&gt; With the serial device that you were -- that
you were working there, can -- when can we

542
00:48:48.119 --> 00:48:55.119
expect to -- like support for USB devices
in Chrome? And will it cover the whole range?

543
00:48:56.900 --> 00:49:03.900
Can I like have a device that emulates an
RS 232 system, could I access these kind of

544
00:49:06.739 --> 00:49:08.489
things with Chrome, through Chrome?
&gt;&gt;Erik Kay: So this serial device here was

545
00:49:08.489 --> 00:49:15.180
actually a over USB, so it's serial over USB,
and actually we do have a USB API as well.

546
00:49:15.180 --> 00:49:19.910
&gt;&gt;Mihai Parparita: Low level USB API.
&gt;&gt;Erik Kay: Right, exactly. So basically if

547
00:49:19.910 --> 00:49:23.789
you know everything about a device, one of
the demos that we have if you look in our

548
00:49:23.789 --> 00:49:26.980
repro --
&gt;&gt;Mihai Parparita: It's a Griffin PowerMate.

549
00:49:26.980 --> 00:49:32.950
Sends its rotation position over the USB,
and we can read a byte off of it.

550
00:49:32.950 --> 00:49:36.640
&gt;&gt;Erik Kay: So there's a little bit more work
we need to do with the USB to really flesh

551
00:49:36.640 --> 00:49:40.720
it out. For example, we don't have support
for HID devices yet, you know, and I think

552
00:49:40.720 --> 00:49:42.559
it would be nice for us to build in a little
more knowledge about some of the specific

553
00:49:42.559 --> 00:49:48.140
devices. Right now it's low level, you have
to know a bit more about the device that you

554
00:49:48.140 --> 00:49:51.279
are talking to.
&gt;&gt;Mihai Parparita: For example, one of our

555
00:49:51.279 --> 00:49:56.069
developer relations people has got his connect
hooked up to an app, but that seems to work.

556
00:49:56.069 --> 00:49:58.640
&gt;&gt;&gt; Time schedule, approximately? Months,
years?

557
00:49:58.640 --> 00:50:01.660
[ Laughter ]
&gt;&gt;Erik Kay: Well, as we said, you can play

558
00:50:01.660 --> 00:50:08.160
with this today. And you know that in general
our approach is to take a very incremental

559
00:50:08.160 --> 00:50:13.109
release early and often type approach. So
our intent is to get it out this year, you

560
00:50:13.109 --> 00:50:17.989
know, into the stable channel. But you should
be able to start playing with it now and building

561
00:50:17.989 --> 00:50:22.789
apps now. Just depends on your tolerance for
early code.

562
00:50:22.789 --> 00:50:28.509
&gt;&gt;&gt; Right, thank you very much.
&gt;&gt;Erik Kay: All right. Well, we might be out

563
00:50:28.509 --> 00:50:35.170
of questions. Any others? All right.
Well, I think that's about it then. If anybody

564
00:50:35.170 --> 00:50:39.549
wants to find us afterwards, like I said,
we'll be over at the Chrome booth answering

565
00:50:39.549 --> 00:50:45.410
questions and come check out Johnny HTML and
the other fun demos over there and we hope

566
00:50:45.410 --> 00:50:47.569
to hear more from you. Thanks.
[ Applause ]

WEBVTT

1
00:00:00.000 --> 00:00:03.670

2
00:00:03.670 --> 00:00:04.660
RYAN FIORAVANTI: I'm going
to get started now.

3
00:00:04.660 --> 00:00:06.550
Welcome everyone.

4
00:00:06.550 --> 00:00:08.039
My name is Ryan Fioravanti.

5
00:00:08.039 --> 00:00:10.350
I'm here today from the Gmail
team to talk about building

6
00:00:10.350 --> 00:00:12.250
fast mobile web apps.

7
00:00:12.250 --> 00:00:14.510
And if you'd like to follow
along on your laptop or

8
00:00:14.510 --> 00:00:16.020
device, the URL is up here.

9
00:00:16.020 --> 00:00:17.730
You can see the slides at

10
00:00:17.730 --> 00:00:26.390
rjf-io2012.appspot.com OK.

11
00:00:26.390 --> 00:00:29.370
Everyone loves fast stuff,
especially users.

12
00:00:29.370 --> 00:00:32.439
And developers like building
fast things.

13
00:00:32.439 --> 00:00:34.470
Unfortunately, on the mobile
web, it's really

14
00:00:34.470 --> 00:00:36.390
difficult to do.

15
00:00:36.390 --> 00:00:38.790
Today I'm going to try and
present a few things that I

16
00:00:38.790 --> 00:00:42.550
hope you can use to help
build faster mobile web

17
00:00:42.550 --> 00:00:45.120
applications.

18
00:00:45.120 --> 00:00:47.840
When I start looking at
performance work, I like to

19
00:00:47.840 --> 00:00:51.080
approach things in a very
structured manner.

20
00:00:51.080 --> 00:00:53.760
What that means for me is before
I start working on some

21
00:00:53.760 --> 00:00:57.180
improvements, I like to measure
first to prove myself

22
00:00:57.180 --> 00:00:58.400
that there's actually
a problem that

23
00:00:58.400 --> 00:01:00.360
I'm trying to solve.

24
00:01:00.360 --> 00:01:03.150
As I start working on the
problem, I then remeasure

25
00:01:03.150 --> 00:01:06.920
throughout the process to make
sure that I'm making progress

26
00:01:06.920 --> 00:01:08.605
in a way that I'm happy with.

27
00:01:08.605 --> 00:01:12.190
And finally, when I think I'm
done, I'll measure again to

28
00:01:12.190 --> 00:01:14.840
see that I actually had impact
I thought I would.

29
00:01:14.840 --> 00:01:16.620
And if I didn't find an
improvement, I think it's

30
00:01:16.620 --> 00:01:19.380
really important in those
cases to investigate and

31
00:01:19.380 --> 00:01:22.040
figure out why the work that I
did didn't have the impact

32
00:01:22.040 --> 00:01:24.040
that I thought it would.

33
00:01:24.040 --> 00:01:26.370
I seen a lot of people spend a
lot of time trying to make

34
00:01:26.370 --> 00:01:30.350
performance optimizations based
off hunches they have or

35
00:01:30.350 --> 00:01:32.740
ideas, and they spend
a lot of time.

36
00:01:32.740 --> 00:01:34.710
When they're done, it
ends up having no

37
00:01:34.710 --> 00:01:35.980
impact for the users.

38
00:01:35.980 --> 00:01:38.190
And there's no benefit.

39
00:01:38.190 --> 00:01:41.080
So we want to avoid these
kinds of situations.

40
00:01:41.080 --> 00:01:43.550
With this kind of thinking in
mind, this kind of approach, I

41
00:01:43.550 --> 00:01:47.850
decided to structure this
presentation today around a

42
00:01:47.850 --> 00:01:49.600
live website.

43
00:01:49.600 --> 00:01:51.500
So I decided to pick on

44
00:01:51.500 --> 00:01:54.040
html5rocks.com, the mobile version.

45
00:01:54.040 --> 00:01:56.160
And what we're going to do
is do a little bit of

46
00:01:56.160 --> 00:01:58.740
exploration, a little bit of
measurements, to try to

47
00:01:58.740 --> 00:02:02.440
identify what kind of problems
it has, and what kind of fixes

48
00:02:02.440 --> 00:02:06.810
we can make and how much
we can improve this.

49
00:02:06.810 --> 00:02:09.770
So before we start working on
improvements, we first have to

50
00:02:09.770 --> 00:02:12.320
measure to figure out what's
actually wrong.

51
00:02:12.320 --> 00:02:16.350
The best way to do that is by
using a device to do all these

52
00:02:16.350 --> 00:02:18.230
measurements for us.

53
00:02:18.230 --> 00:02:20.920
Now that you all have Chrome on
an Android device, this is

54
00:02:20.920 --> 00:02:22.310
really easy for you to do.

55
00:02:22.310 --> 00:02:24.730
And Chrome on Android comes
with a really neat feature

56
00:02:24.730 --> 00:02:27.560
where you can use the remote
debugger to do profiling on

57
00:02:27.560 --> 00:02:29.150
the device itself.

58
00:02:29.150 --> 00:02:31.640
And this is really useful,
because profiling on your

59
00:02:31.640 --> 00:02:35.950
local desktop browser, for
example, is not at all the

60
00:02:35.950 --> 00:02:38.170
same as profiling on
your mobile device.

61
00:02:38.170 --> 00:02:39.230
The hardware's very different.

62
00:02:39.230 --> 00:02:40.940
The performance is
really different.

63
00:02:40.940 --> 00:02:42.230
And so we really need
to do all this

64
00:02:42.230 --> 00:02:44.600
profiling on a mobile device.

65
00:02:44.600 --> 00:02:47.760
We're also going to install the
PageSpeed extension, and

66
00:02:47.760 --> 00:02:50.090
this is going to help us run
a bunch of automated

67
00:02:50.090 --> 00:02:52.020
analysis on the page.

68
00:02:52.020 --> 00:02:54.300
And hopefully we can get some
quick wins based on its

69
00:02:54.300 --> 00:02:55.550
recommendations.

70
00:02:55.550 --> 00:02:59.290
71
00:02:59.290 --> 00:03:01.560
OK, before we get started out
with PageSpeed or anything

72
00:03:01.560 --> 00:03:05.410
else, we need to define
our success criteria.

73
00:03:05.410 --> 00:03:08.160
So to do that, we need an
accurate way to make some

74
00:03:08.160 --> 00:03:09.690
measurements and figure
out if we're

75
00:03:09.690 --> 00:03:12.320
actually improving anything.

76
00:03:12.320 --> 00:03:14.060
Typically this has been
done in a couple

77
00:03:14.060 --> 00:03:15.830
of ways in the past.

78
00:03:15.830 --> 00:03:17.977
One of the most common ways that
developers would profile

79
00:03:17.977 --> 00:03:21.140
their application or do
measurements for performance

80
00:03:21.140 --> 00:03:25.180
timings, was to add timings in
script blocks for the page.

81
00:03:25.180 --> 00:03:27.850
So it was really common to see
people add a script block at

82
00:03:27.850 --> 00:03:30.480
the top of the document where
they would take a time.

83
00:03:30.480 --> 00:03:31.630
And that would be time zero.

84
00:03:31.630 --> 00:03:33.830
And then they would have timing
throughout the page,

85
00:03:33.830 --> 00:03:36.240
which they could then use the
deltas of to decide how long

86
00:03:36.240 --> 00:03:39.840
certain parts of the page took
for the browser to render.

87
00:03:39.840 --> 00:03:42.540
88
00:03:42.540 --> 00:03:44.570
There's a couple of
problems with this

89
00:03:44.570 --> 00:03:45.550
that we want to avoid.

90
00:03:45.550 --> 00:03:47.930
Number one, just by adding these
measurements to your

91
00:03:47.930 --> 00:03:50.350
page, you can actually have
a negative impact on the

92
00:03:50.350 --> 00:03:51.380
browser's performance.

93
00:03:51.380 --> 00:03:53.730
So just by measuring and looking
at it, you're changing

94
00:03:53.730 --> 00:03:54.950
the situation.

95
00:03:54.950 --> 00:03:56.650
So we want to avoid that.

96
00:03:56.650 --> 00:03:58.920
But also, using this technique,
we were only able

97
00:03:58.920 --> 00:04:02.320
to measure things that were
happening in the browser after

98
00:04:02.320 --> 00:04:04.850
the browser has received
the page content.

99
00:04:04.850 --> 00:04:07.170
We didn't have access to things
like, how long did a

100
00:04:07.170 --> 00:04:07.870
redirect take?

101
00:04:07.870 --> 00:04:09.320
How long did the DNS
lookups take?

102
00:04:09.320 --> 00:04:13.720
How long did the page take to
download from first byte to

103
00:04:13.720 --> 00:04:16.209
the last byte being
sent to the page?

104
00:04:16.209 --> 00:04:18.050
Using this
window.performance.timing

105
00:04:18.050 --> 00:04:20.200
object, we're able to
capture all that

106
00:04:20.200 --> 00:04:21.920
information really easily.

107
00:04:21.920 --> 00:04:24.290
This is an object that's
injected by the browser on

108
00:04:24.290 --> 00:04:27.050
every page load, and it contains
a lot of different

109
00:04:27.050 --> 00:04:29.340
attributes that we can
use to analyze the

110
00:04:29.340 --> 00:04:31.920
full pageload sequence.

111
00:04:31.920 --> 00:04:32.800
So this is really cool.

112
00:04:32.800 --> 00:04:35.240
And we're going to use this in
a bunch of experiments that

113
00:04:35.240 --> 00:04:38.280
we're going to do throughout
this presentation.

114
00:04:38.280 --> 00:04:41.100
The ones I found particularly
interesting from the

115
00:04:41.100 --> 00:04:44.020
experiments I was running
were these four.

116
00:04:44.020 --> 00:04:45.940
So first of all, the most
important one is

117
00:04:45.940 --> 00:04:47.880
navigationStart timing.

118
00:04:47.880 --> 00:04:50.410
This is the exact time that
the user requested for the

119
00:04:50.410 --> 00:04:51.380
page to be loaded.

120
00:04:51.380 --> 00:04:55.290
So this is them clicking a link
to go to your page, or

121
00:04:55.290 --> 00:04:58.610
typing in the URL, or
opening a bookmark.

122
00:04:58.610 --> 00:05:01.060
From the user's perspective,
this is time zero, and

123
00:05:01.060 --> 00:05:03.410
everything after this time is
them sitting there staring at

124
00:05:03.410 --> 00:05:07.530
a white screen, waiting for
your content to appear.

125
00:05:07.530 --> 00:05:10.790
The responseStart event was
the second one that was

126
00:05:10.790 --> 00:05:11.660
interesting to me.

127
00:05:11.660 --> 00:05:15.570
This one is when the browser has
started receiving content.

128
00:05:15.570 --> 00:05:17.790
So this is important because
this tells me when the browser

129
00:05:17.790 --> 00:05:19.160
is able to actually
start doing work.

130
00:05:19.160 --> 00:05:21.640
It's not waiting for the page
to load over the network.

131
00:05:21.640 --> 00:05:23.670
It can start processing
a document, executing

132
00:05:23.670 --> 00:05:27.990
JavaScript, and evaluating
CSS.

133
00:05:27.990 --> 00:05:32.060
The next one is this
domContentLoadedEventStart.

134
00:05:32.060 --> 00:05:34.740
This is basically the
DOMContentReady event.

135
00:05:34.740 --> 00:05:36.630
And this one is important
because this is when your

136
00:05:36.630 --> 00:05:40.450
document becomes interactive and
can start handling events.

137
00:05:40.450 --> 00:05:43.410
And this is our best
approximation for when the

138
00:05:43.410 --> 00:05:46.390
user actually sees something
on the page.

139
00:05:46.390 --> 00:05:50.200
And this is important, because
this is the time that for the

140
00:05:50.200 --> 00:05:52.530
start of this that I'm going to
be optimizing for, for when

141
00:05:52.530 --> 00:05:54.940
the browser gets the page to
when the user sees something.

142
00:05:54.940 --> 00:05:57.680
We want the user to see
something as soon as possible,

143
00:05:57.680 --> 00:05:59.220
because until that point,
they're just staring at a

144
00:05:59.220 --> 00:06:00.170
white screen.

145
00:06:00.170 --> 00:06:02.990
So DOMContentReady means the
user is no longer staring at a

146
00:06:02.990 --> 00:06:04.230
white screen.

147
00:06:04.230 --> 00:06:08.240
The load event is the
window load event.

148
00:06:08.240 --> 00:06:10.790
And this is when the browser's
finished downloading all the

149
00:06:10.790 --> 00:06:13.320
resources on a page, including
the images.

150
00:06:13.320 --> 00:06:15.320
So this is like the final
finish point.

151
00:06:15.320 --> 00:06:18.530
152
00:06:18.530 --> 00:06:18.790
OK.

153
00:06:18.790 --> 00:06:21.260
So we had to set up a baseline
for the experiments before we

154
00:06:21.260 --> 00:06:23.060
start making any performance
improvements.

155
00:06:23.060 --> 00:06:25.220
And this is what
I came up with.

156
00:06:25.220 --> 00:06:28.280
So the way that I set up my
experiments here is, I created

157
00:06:28.280 --> 00:06:30.950
a local copy of html5rocks.com,
the mobile

158
00:06:30.950 --> 00:06:33.950
version, and I set up an
experiment where the browser

159
00:06:33.950 --> 00:06:36.950
would reload the page 50 times
and capture the time from

160
00:06:36.950 --> 00:06:39.920
response start to the
DOMContentReady event.

161
00:06:39.920 --> 00:06:41.960
So what I wanted to optimize
for was just the in-page

162
00:06:41.960 --> 00:06:44.100
rendering, none of the
network stuff.

163
00:06:44.100 --> 00:06:47.390
Just optimizing how fast we
can show the user their

164
00:06:47.390 --> 00:06:50.450
content and stop staring
at the white screen.

165
00:06:50.450 --> 00:06:54.060
And for this experiment, all
the resources are cache,

166
00:06:54.060 --> 00:06:59.810
running on Nexus S hardware,
and using window.reload to

167
00:06:59.810 --> 00:07:02.340
execute the page reloads.

168
00:07:02.340 --> 00:07:04.950
So our baseline here is
1,200 milliseconds.

169
00:07:04.950 --> 00:07:08.100
So 1,200 milliseconds from the
browser getting the first byte

170
00:07:08.100 --> 00:07:10.570
of the document to showing
the user something.

171
00:07:10.570 --> 00:07:12.450
And so that's what we're trying
to improve on now.

172
00:07:12.450 --> 00:07:15.420
And also, 812 kilobytes
transferred for the page.

173
00:07:15.420 --> 00:07:18.040
174
00:07:18.040 --> 00:07:20.270
So the first thing I tried
was PageSpeed.

175
00:07:20.270 --> 00:07:24.670
So you can just open your Chrome
debugger on the Android

176
00:07:24.670 --> 00:07:28.760
device and open up PageSpeed,
and you can run an analysis.

177
00:07:28.760 --> 00:07:31.330
So what it told me right away is
hey, you've got some images

178
00:07:31.330 --> 00:07:33.610
that aren't scaled properly.

179
00:07:33.610 --> 00:07:34.960
So this is a pretty easy fix.

180
00:07:34.960 --> 00:07:36.460
We just have to scale
the images.

181
00:07:36.460 --> 00:07:39.110
So I just modified the local
version to serve up images of

182
00:07:39.110 --> 00:07:40.400
the right size.

183
00:07:40.400 --> 00:07:43.050
The images we were serving were
actually way too big.

184
00:07:43.050 --> 00:07:47.850
They were 369x369 as
opposed to 75x75.

185
00:07:47.850 --> 00:07:49.690
So a lot of wasted
space there.

186
00:07:49.690 --> 00:07:53.830
And also, these were avatar
images, people's photographs,

187
00:07:53.830 --> 00:07:55.080
served up as PNGs.

188
00:07:55.080 --> 00:07:58.130
189
00:07:58.130 --> 00:08:00.840
So I fixed that issue, reran all
my experiments, and these

190
00:08:00.840 --> 00:08:02.280
were the results that I saw.

191
00:08:02.280 --> 00:08:06.740
We had a 2% improvement in
rendering time of the

192
00:08:06.740 --> 00:08:09.990
responseStart event to the DOM
ContentReady, and we saved

193
00:08:09.990 --> 00:08:12.030
about 67 kilobytes.

194
00:08:12.030 --> 00:08:14.070
So this isn't actually the
kind of improvement I was

195
00:08:14.070 --> 00:08:14.570
hoping for.

196
00:08:14.570 --> 00:08:16.110
I thought we were going to be
able to do much better here.

197
00:08:16.110 --> 00:08:19.210
Because we're serving up much
smaller images, and I just

198
00:08:19.210 --> 00:08:21.740
assumed that the browser would
be able to render the page

199
00:08:21.740 --> 00:08:22.450
much more quickly.

200
00:08:22.450 --> 00:08:23.710
But that wasn't actually
the case.

201
00:08:23.710 --> 00:08:25.370
But we did save some
bytes, so that's

202
00:08:25.370 --> 00:08:27.820
good for users' bandwidth.

203
00:08:27.820 --> 00:08:29.480
So at least we have that.

204
00:08:29.480 --> 00:08:31.440
The next thing I realized is,
hey, these are avatars.

205
00:08:31.440 --> 00:08:32.960
We shouldn't be serving
them up as PNGs.

206
00:08:32.960 --> 00:08:34.380
We should be using JPEG.

207
00:08:34.380 --> 00:08:37.100
And with JPEG, we can get much
better compression as well.

208
00:08:37.100 --> 00:08:42.159
So I change the JPEGs and
I remeasured everything.

209
00:08:42.159 --> 00:08:44.910
Here we have another 2%
improvement in rendering time.

210
00:08:44.910 --> 00:08:48.260
We're still talking only about
tens of milliseconds saved.

211
00:08:48.260 --> 00:08:50.690
So this isn't really anything
to get excited about yet.

212
00:08:50.690 --> 00:08:55.100
But we did save another large
chunk of the payload size.

213
00:08:55.100 --> 00:08:58.590
We saved over 300 milliseconds
here, which is a 44%

214
00:08:58.590 --> 00:09:00.840
improvement in the
download size.

215
00:09:00.840 --> 00:09:03.870
So when the resources aren't
cached, the page is going to

216
00:09:03.870 --> 00:09:05.750
load faster, and we're going
to be using less

217
00:09:05.750 --> 00:09:07.030
bandwidth for the users.

218
00:09:07.030 --> 00:09:10.490
So again, no big improvement in
rendering time, but still a

219
00:09:10.490 --> 00:09:12.140
really useful optimization
for us to have made.

220
00:09:12.140 --> 00:09:15.340
221
00:09:15.340 --> 00:09:16.180
Back to PageSpeed.

222
00:09:16.180 --> 00:09:17.600
It's now happy with
the scaled images.

223
00:09:17.600 --> 00:09:20.020
And it's telling us, now you've
got to minify some

224
00:09:20.020 --> 00:09:21.860
JavaScript.

225
00:09:21.860 --> 00:09:24.400
So that's also a pretty
easy fix.

226
00:09:24.400 --> 00:09:26.390
I opened up the network trace,
just to kind of see what

227
00:09:26.390 --> 00:09:29.370
resources it was loading, and
I found that the page was

228
00:09:29.370 --> 00:09:31.990
including the full version
of jQuery.

229
00:09:31.990 --> 00:09:34.070
So that's an easy fix.

230
00:09:34.070 --> 00:09:36.480
I just opened it up, saw that
it's actually the full

231
00:09:36.480 --> 00:09:40.430
version, and then we can just
swap that out with a minified

232
00:09:40.430 --> 00:09:43.510
version, save a bunch
of bytes.

233
00:09:43.510 --> 00:09:45.240
The page functionality
remains the same.

234
00:09:45.240 --> 00:09:47.910
This is a really easy fix to
make because it won't actually

235
00:09:47.910 --> 00:09:49.870
change anything.

236
00:09:49.870 --> 00:09:51.610
And then we can remeasure.

237
00:09:51.610 --> 00:09:54.930
This is the one that surprised
me the most, because here, we

238
00:09:54.930 --> 00:09:57.240
significantly reduced the amount
of JavaScript, but we

239
00:09:57.240 --> 00:10:00.050
didn't actually improve the
rendering time at all.

240
00:10:00.050 --> 00:10:02.580
The rendering time remained
constant from the last set of

241
00:10:02.580 --> 00:10:04.200
experiments.

242
00:10:04.200 --> 00:10:05.160
So that's not good.

243
00:10:05.160 --> 00:10:07.240
But again, we saved some bytes,
so we should do this.

244
00:10:07.240 --> 00:10:08.090
It's the right thing to do.

245
00:10:08.090 --> 00:10:10.820
It'll be faster when the
resources aren't cached, and

246
00:10:10.820 --> 00:10:12.440
that's good.

247
00:10:12.440 --> 00:10:15.350
So I said that we should always
measure before and

248
00:10:15.350 --> 00:10:16.790
after, so that's what
I did here.

249
00:10:16.790 --> 00:10:19.860
And if it doesn't match the
results that you expected, we

250
00:10:19.860 --> 00:10:21.100
should figure out why.

251
00:10:21.100 --> 00:10:23.730
So this is one that really
surprised me.

252
00:10:23.730 --> 00:10:27.350
And I figured out the answer,
and I'm going to show you that

253
00:10:27.350 --> 00:10:29.750
a bit later.

254
00:10:29.750 --> 00:10:32.540
So when you need to minify, this
is something you should

255
00:10:32.540 --> 00:10:35.380
definitely do to save
bytes over the wire.

256
00:10:35.380 --> 00:10:37.330
If you're using a third-party
library, just make sure you're

257
00:10:37.330 --> 00:10:39.940
pulling in the right version
for your production

258
00:10:39.940 --> 00:10:40.960
environment.

259
00:10:40.960 --> 00:10:43.770
So you usually want to include
the [? dead ?] version in your

260
00:10:43.770 --> 00:10:45.520
local setup.

261
00:10:45.520 --> 00:10:49.080
But when you deploy to
production, you should have

262
00:10:49.080 --> 00:10:50.780
some kind of build phase where
you swap it out with the

263
00:10:50.780 --> 00:10:51.920
minified version.

264
00:10:51.920 --> 00:10:53.080
And that's easy to do.

265
00:10:53.080 --> 00:10:54.860
If you're writing a lot of
your own JavaScript, then

266
00:10:54.860 --> 00:10:57.370
you're going to have to do
your own minification.

267
00:10:57.370 --> 00:10:58.850
This is something that
you can also set up

268
00:10:58.850 --> 00:11:00.030
into your build phase.

269
00:11:00.030 --> 00:11:03.410
There's a couple of tools you
can download as command-line

270
00:11:03.410 --> 00:11:05.720
tools that you can run
on your files.

271
00:11:05.720 --> 00:11:07.310
You run this tool, and
it spits out the

272
00:11:07.310 --> 00:11:08.810
minified version for you.

273
00:11:08.810 --> 00:11:10.750
Or if you just want to quickly
minify some stuff and you

274
00:11:10.750 --> 00:11:12.780
don't want to download anything
to get this set up,

275
00:11:12.780 --> 00:11:14.435
there's an online version as
well that you can try.

276
00:11:14.435 --> 00:11:17.650
You just drop some JavaScript
into a text area, click a

277
00:11:17.650 --> 00:11:22.100
button, and then you'll get
the minified version.

278
00:11:22.100 --> 00:11:22.260
OK.

279
00:11:22.260 --> 00:11:24.150
So the next thing that
I wanted to try--

280
00:11:24.150 --> 00:11:25.480
we're done with PageSpeed now.

281
00:11:25.480 --> 00:11:27.880
We've satisfied all of
its recommendations.

282
00:11:27.880 --> 00:11:29.990
The next thing that I
wanted to try is to

283
00:11:29.990 --> 00:11:32.330
run some CSS profiling.

284
00:11:32.330 --> 00:11:35.660
So using this, I can take a look
at exactly how expensive

285
00:11:35.660 --> 00:11:39.360
my CSS rendering is for the
browser to execute.

286
00:11:39.360 --> 00:11:42.160
So to do this, open up your
developer tools on the Android

287
00:11:42.160 --> 00:11:46.730
device, go over to the Profiles
tab, select the CSS

288
00:11:46.730 --> 00:11:49.240
Selector profile,
and click Start.

289
00:11:49.240 --> 00:11:51.930
And this will start a recording
of how expensive

290
00:11:51.930 --> 00:11:53.290
your CSS is.

291
00:11:53.290 --> 00:11:54.890
So what I did here
is I did that.

292
00:11:54.890 --> 00:11:57.010
I clicked start, started
recording, and then reload the

293
00:11:57.010 --> 00:11:59.610
page, and then I stopped
the recording.

294
00:11:59.610 --> 00:12:02.630
And this tells me how expensive
the CSS is during

295
00:12:02.630 --> 00:12:04.620
the pageload.

296
00:12:04.620 --> 00:12:06.090
And here's the results.

297
00:12:06.090 --> 00:12:09.160
So here we get a breakdown of
exactly how expensive every

298
00:12:09.160 --> 00:12:13.620
single CSS rule is in my style
sheets during a pageload.

299
00:12:13.620 --> 00:12:15.580
So it's telling me here,
this rule at the top--

300
00:12:15.580 --> 00:12:18.540
I've sorted by the total time
taken for each rule--

301
00:12:18.540 --> 00:12:21.800
the rule at the top is taking
over 50 milliseconds for the

302
00:12:21.800 --> 00:12:25.140
browser to evaluate while
the page is loading.

303
00:12:25.140 --> 00:12:27.530
This is rendering time that the
browser is spending before

304
00:12:27.530 --> 00:12:29.440
showing the user any content.

305
00:12:29.440 --> 00:12:33.220
So it's telling me, just by
fixing this rule, I can save

306
00:12:33.220 --> 00:12:35.370
the user 50 milliseconds
in wait time.

307
00:12:35.370 --> 00:12:36.800
So that's pretty cool.

308
00:12:36.800 --> 00:12:39.260
And there's also a bunch more
rules here that are over 20

309
00:12:39.260 --> 00:12:40.920
and 30 milliseconds.

310
00:12:40.920 --> 00:12:43.760
So if I fixed all of those, I'd
be looking at hundreds of

311
00:12:43.760 --> 00:12:45.570
milliseconds in savings.

312
00:12:45.570 --> 00:12:48.100
So that's something I'm
interested in, so I dug a

313
00:12:48.100 --> 00:12:49.900
little further.

314
00:12:49.900 --> 00:12:53.430
Before I show exactly what was
wrong, I'll talk a little bit

315
00:12:53.430 --> 00:12:58.180
about what can make CSS
expensive on mobile.

316
00:12:58.180 --> 00:13:01.730
Mainly, it all boils down to how
many elements is your CSS

317
00:13:01.730 --> 00:13:02.980
selector matching?

318
00:13:02.980 --> 00:13:05.170
So if you're matching all
elements in your document,

319
00:13:05.170 --> 00:13:06.530
that's going to be really
expensive for the

320
00:13:06.530 --> 00:13:09.110
browser to work with.

321
00:13:09.110 --> 00:13:12.000
This is why the universal
selector is so bad on mobile,

322
00:13:12.000 --> 00:13:15.470
because the browser has to apply
that to every element in

323
00:13:15.470 --> 00:13:17.450
your document.

324
00:13:17.450 --> 00:13:19.260
Also, ancestor rules are
pretty expensive.

325
00:13:19.260 --> 00:13:22.770
Because when it finds a match
for the right-most element in

326
00:13:22.770 --> 00:13:24.970
the selector, it has to search
the ancestor tree of that

327
00:13:24.970 --> 00:13:30.710
element, further qualifying to
find a match for that rule.

328
00:13:30.710 --> 00:13:34.590
So what I've got here, this body
* rule-- this is about

329
00:13:34.590 --> 00:13:37.450
the worst CSS rule you
could possibly write.

330
00:13:37.450 --> 00:13:39.060
This is the universal
selector matching

331
00:13:39.060 --> 00:13:40.020
everything in the document--

332
00:13:40.020 --> 00:13:41.920
which we already know we
shouldn't do on mobile-- but

333
00:13:41.920 --> 00:13:44.910
also with an ancestor selector
of the body.

334
00:13:44.910 --> 00:13:47.360
So the browser has to enumerate
every single element

335
00:13:47.360 --> 00:13:49.490
in the document, and then search
the ancestor tree of

336
00:13:49.490 --> 00:13:54.260
that element to ensure that it
has an ancestor of type body.

337
00:13:54.260 --> 00:13:56.250
So this is really expensive,
and it's also wasteful,

338
00:13:56.250 --> 00:13:58.590
because of course every
element's in the body.

339
00:13:58.590 --> 00:14:01.130
We really don't need to
qualify for this.

340
00:14:01.130 --> 00:14:04.760
341
00:14:04.760 --> 00:14:08.500
Here's some examples of ways you
can change your CSS from

342
00:14:08.500 --> 00:14:11.510
bad to good for these
different cases.

343
00:14:11.510 --> 00:14:12.830
So first of all, we know
we want to avoid

344
00:14:12.830 --> 00:14:15.040
the universal selector.

345
00:14:15.040 --> 00:14:17.750
The way to avoid this is to
just realize that most the

346
00:14:17.750 --> 00:14:19.730
time, you don't actually
need it.

347
00:14:19.730 --> 00:14:21.970
Say, for example, you want to
apply a consistent font to

348
00:14:21.970 --> 00:14:22.670
your entire document.

349
00:14:22.670 --> 00:14:24.890
You don't need to use the
universal selector to do that

350
00:14:24.890 --> 00:14:28.920
because CSS has this
cascading nature.

351
00:14:28.920 --> 00:14:31.250
You just apply the font rule
to your body, and then your

352
00:14:31.250 --> 00:14:34.250
entire document will naturally
inherit that rule.

353
00:14:34.250 --> 00:14:35.500
So that's an easy fix.

354
00:14:35.500 --> 00:14:38.280
355
00:14:38.280 --> 00:14:40.130
For [? considered ?]

356
00:14:40.130 --> 00:14:43.230
rules, these are pretty standard
rules, the ul li.

357
00:14:43.230 --> 00:14:46.020
If you want to color all of your
list items blue, that's a

358
00:14:46.020 --> 00:14:49.650
pretty standard way to do
it, when we learn CSS.

359
00:14:49.650 --> 00:14:53.070
But if you swap that out with
a specific class name called

360
00:14:53.070 --> 00:14:56.010
unordered-list-item that you
manually apply to all of your

361
00:14:56.010 --> 00:14:58.280
li elements in the document
that are children of ul

362
00:14:58.280 --> 00:15:01.230
elements, this will
execute much

363
00:15:01.230 --> 00:15:03.000
faster on mobile hardware.

364
00:15:03.000 --> 00:15:05.100
And you will see a difference.

365
00:15:05.100 --> 00:15:08.900
Lastly, don't include CSS rules
that set things that are

366
00:15:08.900 --> 00:15:10.330
default values.

367
00:15:10.330 --> 00:15:13.430
Like here, I've got div
set to display block.

368
00:15:13.430 --> 00:15:15.600
Just let the browser
figure that out.

369
00:15:15.600 --> 00:15:19.260
If you're trying to save some
rare user agents that might

370
00:15:19.260 --> 00:15:22.365
have screwed this up, then I
would say, just let most of

371
00:15:22.365 --> 00:15:23.760
your browsers be fast
and let broken

372
00:15:23.760 --> 00:15:25.055
browsers be broken browsers.

373
00:15:25.055 --> 00:15:28.080
374
00:15:28.080 --> 00:15:30.660
So back to the example,
html5rocks.com, we had that

375
00:15:30.660 --> 00:15:33.810
50-millisecond timing
on one rule.

376
00:15:33.810 --> 00:15:37.420
It turns out that it was
specifying a default CSS

377
00:15:37.420 --> 00:15:39.710
property, setting the
box sizing of every

378
00:15:39.710 --> 00:15:41.160
element in the document.

379
00:15:41.160 --> 00:15:42.600
So this one is really easy.

380
00:15:42.600 --> 00:15:43.920
Because it's a default
property, we

381
00:15:43.920 --> 00:15:44.570
can just remove it.

382
00:15:44.570 --> 00:15:46.310
The page will have the
same behavior.

383
00:15:46.310 --> 00:15:50.400
And we can figure out what
kind of impact it had.

384
00:15:50.400 --> 00:15:52.250
So here we go.

385
00:15:52.250 --> 00:15:54.510
Approximately 50 milliseconds
saved in rendering time.

386
00:15:54.510 --> 00:15:57.700
That's just about exactly
what we expected.

387
00:15:57.700 --> 00:15:59.700
That was nice to see.

388
00:15:59.700 --> 00:16:02.740
I was comforted by this, because
the profiler told me,

389
00:16:02.740 --> 00:16:06.080
when I measured before, that I
would save 50 milliseconds if

390
00:16:06.080 --> 00:16:07.660
I fixed this rule.

391
00:16:07.660 --> 00:16:09.570
And then when I measured after,
that was confirmed.

392
00:16:09.570 --> 00:16:11.850
So what this means is that the
profiler is doing an accurate

393
00:16:11.850 --> 00:16:15.600
job of predicting exactly how
much my users will save in

394
00:16:15.600 --> 00:16:18.370
time if I fix those rules.

395
00:16:18.370 --> 00:16:19.060
So that's good to know.

396
00:16:19.060 --> 00:16:22.010
So if you are planning on
setting out for a couple of

397
00:16:22.010 --> 00:16:25.950
days or a week to optimize the
CSS on your page, you can be

398
00:16:25.950 --> 00:16:28.600
sure that you should definitely
open up your CSS

399
00:16:28.600 --> 00:16:31.110
profiler and check, are there
actually any problems?

400
00:16:31.110 --> 00:16:33.050
And if not, then you can just
skip that whole process.

401
00:16:33.050 --> 00:16:37.540
402
00:16:37.540 --> 00:16:37.740
OK.

403
00:16:37.740 --> 00:16:40.700
So what's next?

404
00:16:40.700 --> 00:16:42.780
Remember what we're
trying to do here.

405
00:16:42.780 --> 00:16:46.400
We want to optimize the time for
which the user is sitting

406
00:16:46.400 --> 00:16:49.200
there waiting, looking
at a white screen.

407
00:16:49.200 --> 00:16:52.730
From the time the browser gets
the page to the time they want

408
00:16:52.730 --> 00:16:55.450
to see content, we want to get
rid of everything on that

409
00:16:55.450 --> 00:16:57.260
critical path.

410
00:16:57.260 --> 00:17:01.450
So if we look at the network
trace in your developer tools,

411
00:17:01.450 --> 00:17:05.210
you can see exactly when that
DomReady event is firing.

412
00:17:05.210 --> 00:17:07.230
That's the blue line.

413
00:17:07.230 --> 00:17:08.849
So this is our approximation
for when the

414
00:17:08.849 --> 00:17:10.890
user is seeing content.

415
00:17:10.890 --> 00:17:13.839
Everything on the left of this
is just getting in the way.

416
00:17:13.839 --> 00:17:15.740
So we need to make sure that
everything over here is

417
00:17:15.740 --> 00:17:19.450
something that's critical to
showing our user content.

418
00:17:19.450 --> 00:17:21.270
So here's the first resource.

419
00:17:21.270 --> 00:17:22.260
Obviously this is critical.

420
00:17:22.260 --> 00:17:24.599
This is the main markup
of the page.

421
00:17:24.599 --> 00:17:25.880
Our CSS is pretty critical.

422
00:17:25.880 --> 00:17:29.560
We don't want to show people
just plain HTML.

423
00:17:29.560 --> 00:17:31.742
But then the rest of these are
all JavaScript files that are

424
00:17:31.742 --> 00:17:36.380
loading over the network and
taking time to execute.

425
00:17:36.380 --> 00:17:39.730
So on html5rocks.com, this
is just a plain website.

426
00:17:39.730 --> 00:17:42.860
We don't need to include all
these scripts before we show

427
00:17:42.860 --> 00:17:44.840
the user something.

428
00:17:44.840 --> 00:17:48.280
And the problem with these is
just the presence of the

429
00:17:48.280 --> 00:17:50.540
scripts on the page that's
slowing down the

430
00:17:50.540 --> 00:17:52.200
DOMContentReady event.

431
00:17:52.200 --> 00:17:54.680
When you include a script on
your page, the browser doesn't

432
00:17:54.680 --> 00:17:58.030
actually know when it should
do something with it.

433
00:17:58.030 --> 00:18:00.860
It doesn't know if you need that
script immediately, or if

434
00:18:00.860 --> 00:18:02.920
you just need it 10
seconds from now.

435
00:18:02.920 --> 00:18:05.810
So what it does is it downloads
it immediately,

436
00:18:05.810 --> 00:18:07.910
before doing anything else,
before it proceeds with the

437
00:18:07.910 --> 00:18:09.880
rest of your document,
and then executes

438
00:18:09.880 --> 00:18:12.080
it right away, too.

439
00:18:12.080 --> 00:18:15.400
So in this case, we don't need
that kind of behavior.

440
00:18:15.400 --> 00:18:18.110
We can defer this JavaScript
until later.

441
00:18:18.110 --> 00:18:22.920
So we can do something here in
order to get rid of that.

442
00:18:22.920 --> 00:18:25.570
443
00:18:25.570 --> 00:18:27.800
So what we need is a way to
defer this JavaScript in a

444
00:18:27.800 --> 00:18:29.880
reliable manner.

445
00:18:29.880 --> 00:18:32.670
I looked at a couple
of ways to do this.

446
00:18:32.670 --> 00:18:34.670
First, I tried the
defer attribute.

447
00:18:34.670 --> 00:18:35.680
This didn't work well for me.

448
00:18:35.680 --> 00:18:39.530
I tried it and it worked, but
when I reran my experiments,

449
00:18:39.530 --> 00:18:41.920
it didn't actually
help anything.

450
00:18:41.920 --> 00:18:43.870
When I investigated a little
deeper to find out what was

451
00:18:43.870 --> 00:18:47.350
happening, I found a lot of
resources suggesting that the

452
00:18:47.350 --> 00:18:50.540
defer attribute is more like a
suggestion to the browser.

453
00:18:50.540 --> 00:18:52.830
So it can defer it if it thinks
that's a good idea, or

454
00:18:52.830 --> 00:18:56.380
it'll execute in parallel
to those idle cycles.

455
00:18:56.380 --> 00:18:58.570
I also found a bunch of stuff
that it's not good

456
00:18:58.570 --> 00:19:00.720
cross-browser, and
all this stuff.

457
00:19:00.720 --> 00:19:02.930
But the point is, it just
didn't really work well.

458
00:19:02.930 --> 00:19:06.780
It didn't speed up the
page-rendering time.

459
00:19:06.780 --> 00:19:09.260
I then looked at async
attribute, and this had some

460
00:19:09.260 --> 00:19:12.930
different behavior, where
it would defer the

461
00:19:12.930 --> 00:19:14.200
loading of the scripts.

462
00:19:14.200 --> 00:19:16.810
But they would load in at any
order, not necessarily the

463
00:19:16.810 --> 00:19:18.530
order that you included
them on the page.

464
00:19:18.530 --> 00:19:22.710
So this can lead to some race
conditions where you get

465
00:19:22.710 --> 00:19:24.490
JavaScript errors.

466
00:19:24.490 --> 00:19:26.890
Say, you have some inline
script running jQuery

467
00:19:26.890 --> 00:19:30.280
functions before the jQuery
file gets loaded.

468
00:19:30.280 --> 00:19:31.770
Then that's not going
to work properly.

469
00:19:31.770 --> 00:19:34.420
470
00:19:34.420 --> 00:19:37.910
So what I did is, I cooked up
a way you can include a

471
00:19:37.910 --> 00:19:40.290
special type on your script
attribute that tricks the

472
00:19:40.290 --> 00:19:42.480
browser into thinking that
this isn't actually

473
00:19:42.480 --> 00:19:43.710
JavaScript.

474
00:19:43.710 --> 00:19:45.860
So what we have here, is I've
just stamped all these script

475
00:19:45.860 --> 00:19:48.780
elements with a special
type called notJs.

476
00:19:48.780 --> 00:19:50.740
And so now these scripts will
actually download over the

477
00:19:50.740 --> 00:19:53.770
network, but the browser will
just pass over these and not

478
00:19:53.770 --> 00:19:55.640
do anything with it, because
it doesn't know what it is.

479
00:19:55.640 --> 00:19:58.350
480
00:19:58.350 --> 00:20:00.010
And then when you want to load
these scripts, you can just

481
00:20:00.010 --> 00:20:02.230
include this simple bit
of script here.

482
00:20:02.230 --> 00:20:04.355
What this does is it loads all
the scripts in the document,

483
00:20:04.355 --> 00:20:05.950
and loops through them.

484
00:20:05.950 --> 00:20:08.820
If the type is notJs, then
it sets the type back to

485
00:20:08.820 --> 00:20:12.670
text/javascript and then it
re-adds it to the document.

486
00:20:12.670 --> 00:20:16.180
When you do this, the document
reevaluates it, parses it

487
00:20:16.180 --> 00:20:18.740
right away because now it sees
that it's JavaScript, and

488
00:20:18.740 --> 00:20:22.070
executes it just as
we would expect.

489
00:20:22.070 --> 00:20:24.390
So what I've done is, I modified
the experiments.

490
00:20:24.390 --> 00:20:25.670
I created this function.

491
00:20:25.670 --> 00:20:28.180
I added notJs to all the
scripts on the page.

492
00:20:28.180 --> 00:20:29.650
And then I set this
function to be the

493
00:20:29.650 --> 00:20:32.120
window.onload function.

494
00:20:32.120 --> 00:20:33.942
Here's the results.

495
00:20:33.942 --> 00:20:35.192
Oooh.

496
00:20:35.192 --> 00:20:37.420
497
00:20:37.420 --> 00:20:40.050
So our page running time
just got a lot faster.

498
00:20:40.050 --> 00:20:42.910
We have a 33% improvement in
running time, and this is

499
00:20:42.910 --> 00:20:45.515
hundreds of milliseconds.

500
00:20:45.515 --> 00:20:49.540
But remember, all these
resources are cached.

501
00:20:49.540 --> 00:20:51.480
That's how we're running
these experiments.

502
00:20:51.480 --> 00:20:52.850
So why does this take so long?

503
00:20:52.850 --> 00:20:56.210
504
00:20:56.210 --> 00:20:59.520
It takes so long because it
takes one millisecond to parse

505
00:20:59.520 --> 00:21:03.930
every kilobyte of JavaScript
on modern mobile hardware.

506
00:21:03.930 --> 00:21:04.920
And this is really important.

507
00:21:04.920 --> 00:21:08.450
What I mean by parse is, when
the browser encounters a

508
00:21:08.450 --> 00:21:12.110
script block, this is the time
that it takes to read all the

509
00:21:12.110 --> 00:21:15.900
text in that script block and
figure out what it means in

510
00:21:15.900 --> 00:21:18.910
terms of JavaScript, and then
execute on the top-level lines

511
00:21:18.910 --> 00:21:22.230
of JavaScript in that
script function.

512
00:21:22.230 --> 00:21:25.320
And this is much more expensive
to do on mobile than

513
00:21:25.320 --> 00:21:28.420
it is on desktop.

514
00:21:28.420 --> 00:21:29.870
Here's a more detailed breakdown
of some of the

515
00:21:29.870 --> 00:21:33.430
experiments that my team has run
to investigate what kind

516
00:21:33.430 --> 00:21:36.200
of parse times we see
across devices.

517
00:21:36.200 --> 00:21:39.730
So you can see here, for Nexus
S hardware, it takes 300

518
00:21:39.730 --> 00:21:42.960
milliseconds to parse 300
kilobytes of JavaScript.

519
00:21:42.960 --> 00:21:44.820
And that's where we get our
one millisecond to one

520
00:21:44.820 --> 00:21:46.480
kilobyte rule.

521
00:21:46.480 --> 00:21:49.850
And 300K is a pretty average
amount of JavaScript to

522
00:21:49.850 --> 00:21:52.690
include on a page, especially
for pages that have kind of

523
00:21:52.690 --> 00:21:55.970
been ported over from desktop,
where we just include lots of

524
00:21:55.970 --> 00:21:59.430
JavaScript all the time and
it doesn't really matter.

525
00:21:59.430 --> 00:22:02.170
And 300 milliseconds is a long
time for a user to wait,

526
00:22:02.170 --> 00:22:04.380
sitting and staring at a white
screen, seeing nothing,

527
00:22:04.380 --> 00:22:06.150
waiting for your page to load.

528
00:22:06.150 --> 00:22:07.920
Now what's really interesting
is looking back a few

529
00:22:07.920 --> 00:22:09.690
generations in phone hardware.

530
00:22:09.690 --> 00:22:13.730
And we see that iPhone 2G would
take over three seconds

531
00:22:13.730 --> 00:22:16.900
to parse the same amount
of JavaScript.

532
00:22:16.900 --> 00:22:19.800
And that's a 10x improvement in
just a few generations of

533
00:22:19.800 --> 00:22:21.310
phone hardware.

534
00:22:21.310 --> 00:22:25.160
So what we're seeing is a trend
where phone hardware is

535
00:22:25.160 --> 00:22:28.610
improving drastically,
very quickly.

536
00:22:28.610 --> 00:22:30.650
And so this should play--

537
00:22:30.650 --> 00:22:31.680
you should keep this in mind.

538
00:22:31.680 --> 00:22:34.260
It should play a pretty big role
in how you think about

539
00:22:34.260 --> 00:22:36.850
performance optimizations.

540
00:22:36.850 --> 00:22:37.840
Now let's think back--

541
00:22:37.840 --> 00:22:39.730
our jQuery example.

542
00:22:39.730 --> 00:22:43.130
We minified jQuery, and we saved
over 100 kilobytes in

543
00:22:43.130 --> 00:22:46.180
JavaScript, but we saw no
improvement in rendering time.

544
00:22:46.180 --> 00:22:48.050
So why was that?

545
00:22:48.050 --> 00:22:51.250
So in this table, you'll see--

546
00:22:51.250 --> 00:22:52.420
or maybe you won't see--

547
00:22:52.420 --> 00:22:56.400
these are for minified
JavaScript sizes.

548
00:22:56.400 --> 00:23:00.750
So when we minified our jQuery
file from 240 kilobytes to 90

549
00:23:00.750 --> 00:23:04.220
kilobytes, we didn't actually
make it any less complex for

550
00:23:04.220 --> 00:23:05.180
the browser to parse.

551
00:23:05.180 --> 00:23:07.010
It's still the same
JavaScript.

552
00:23:07.010 --> 00:23:09.960
It still has the same level of
complexity, the same amount of

553
00:23:09.960 --> 00:23:11.910
stuff to execute, and the same
amount of stuff for the

554
00:23:11.910 --> 00:23:13.460
browser to figure out.

555
00:23:13.460 --> 00:23:16.200
So just by minifying it, we
didn't actually save anything

556
00:23:16.200 --> 00:23:17.060
in parse time.

557
00:23:17.060 --> 00:23:19.360
So that makes sense.

558
00:23:19.360 --> 00:23:21.590
What this also means is that you
shouldn't just minify your

559
00:23:21.590 --> 00:23:22.160
JavaScript.

560
00:23:22.160 --> 00:23:23.910
You should compile it.

561
00:23:23.910 --> 00:23:27.530
Using tools like Closure
Compiler, you can run phases

562
00:23:27.530 --> 00:23:32.030
like the dead code removal in
order to get rid of all the

563
00:23:32.030 --> 00:23:34.870
JavaScript on your page that's
not actually being used.

564
00:23:34.870 --> 00:23:37.080
So when you're pulling in
libraries like jQuery and

565
00:23:37.080 --> 00:23:40.410
using only a small fraction of
it, you can use compilers to

566
00:23:40.410 --> 00:23:42.370
remove all the stuff that you're
not actually using.

567
00:23:42.370 --> 00:23:43.950
And when you do that, that's
when you're going to see

568
00:23:43.950 --> 00:23:45.200
improvements in parse time.

569
00:23:45.200 --> 00:23:49.360
570
00:23:49.360 --> 00:23:50.940
OK, so how much faster
can we go now?

571
00:23:50.940 --> 00:23:54.730
We have optimized images,
optimized CSS, and no

572
00:23:54.730 --> 00:23:58.240
JavaScript getting in the way
of our content rendering.

573
00:23:58.240 --> 00:24:01.040
The only thing we could do now
is get rid of styles, which we

574
00:24:01.040 --> 00:24:06.460
probably don't want to do, or
send down a smaller DOM.

575
00:24:06.460 --> 00:24:08.480
So we could just say to our
designers, hey, your

576
00:24:08.480 --> 00:24:09.430
document's too big.

577
00:24:09.430 --> 00:24:10.525
I don't want to show
this much content.

578
00:24:10.525 --> 00:24:12.120
It's really expensive
on mobile.

579
00:24:12.120 --> 00:24:13.400
And maybe that's acceptable.

580
00:24:13.400 --> 00:24:14.740
But say it's not.

581
00:24:14.740 --> 00:24:16.370
There's still something
that you can do.

582
00:24:16.370 --> 00:24:19.600
583
00:24:19.600 --> 00:24:20.610
Here's a little trick.

584
00:24:20.610 --> 00:24:23.330
We're going to lazy load a
bunch of the document.

585
00:24:23.330 --> 00:24:27.910
So we can send down large
portions of the document and

586
00:24:27.910 --> 00:24:31.000
only show a little bit
when we're first

587
00:24:31.000 --> 00:24:33.820
rendering the page.

588
00:24:33.820 --> 00:24:37.350
The html5rocks.com main
page, it's got a lot

589
00:24:37.350 --> 00:24:38.450
of scrollable content.

590
00:24:38.450 --> 00:24:41.240
So there's a lot of stuff when
the user loads the page that's

591
00:24:41.240 --> 00:24:43.020
there, but they can't
actually see.

592
00:24:43.020 --> 00:24:44.910
So there's no reason for us to
actually demand that the

593
00:24:44.910 --> 00:24:47.550
browser try and render
that right away.

594
00:24:47.550 --> 00:24:50.170
So what I've done here is I took
a couple of the top-level

595
00:24:50.170 --> 00:24:53.430
elements on the web page and
set them to display:none,

596
00:24:53.430 --> 00:24:56.880
which just takes it out of the
rendering process completely.

597
00:24:56.880 --> 00:25:00.120
Then on the pageload, we can
just set these back to

598
00:25:00.120 --> 00:25:02.460
display:visible and they'll
show up right away.

599
00:25:02.460 --> 00:25:05.030
So they'll be there by the time
the user scrolls down to

600
00:25:05.030 --> 00:25:07.060
try and use those parts
of the page.

601
00:25:07.060 --> 00:25:09.660
And by doing this, we've made
the page significantly simpler

602
00:25:09.660 --> 00:25:12.350
for the browser to render, and
now we've saved another couple

603
00:25:12.350 --> 00:25:16.140
hundred milliseconds
in rendering time.

604
00:25:16.140 --> 00:25:19.630
So now we're sitting at 600
milliseconds of render time.

605
00:25:19.630 --> 00:25:22.340
So remember, that's time from
the browser getting the page

606
00:25:22.340 --> 00:25:24.550
to showing user content.

607
00:25:24.550 --> 00:25:27.850
And that's just about a 2x
improvement since we started

608
00:25:27.850 --> 00:25:29.690
these optimizations.

609
00:25:29.690 --> 00:25:32.380
So at this point I'm
pretty happy.

610
00:25:32.380 --> 00:25:35.030
And I don't know that there's
much more we can do on just

611
00:25:35.030 --> 00:25:36.390
the rendering, other
than waiting

612
00:25:36.390 --> 00:25:39.340
for newer phone hardware.

613
00:25:39.340 --> 00:25:42.480
We could maybe squeeze out
another 50 or 100 milliseconds

614
00:25:42.480 --> 00:25:45.910
in this rendering time by really
digging into the CSS or

615
00:25:45.910 --> 00:25:49.140
simplifying the DOM a little bit
more, and stuff like that.

616
00:25:49.140 --> 00:25:53.050
But at this point, our effort
is probably better spent

617
00:25:53.050 --> 00:25:55.210
optimizing other things.

618
00:25:55.210 --> 00:25:57.700
So, so far we've only been
looking at the rendering

619
00:25:57.700 --> 00:26:00.815
performance, but there's
actually a lot more variables

620
00:26:00.815 --> 00:26:04.270
that the user waits on, other
than just the rendering.

621
00:26:04.270 --> 00:26:06.375
We need to consider things like
the network load time and

622
00:26:06.375 --> 00:26:08.480
redirects and all this
kind of stuff.

623
00:26:08.480 --> 00:26:11.100
And optimizing for these is
really hard to do on your

624
00:26:11.100 --> 00:26:13.260
local development environments,
because the

625
00:26:13.260 --> 00:26:15.320
environment is completely
different from the production

626
00:26:15.320 --> 00:26:17.230
environment.

627
00:26:17.230 --> 00:26:19.780
So to figure out what real
users in the wild are

628
00:26:19.780 --> 00:26:21.430
experiencing, there's this
cool website called

629
00:26:21.430 --> 00:26:25.040
webpagetest.org, where you can
go and they've got a browser

630
00:26:25.040 --> 00:26:27.240
farm, and you can type
in any website URL.

631
00:26:27.240 --> 00:26:30.630
It will load the page and tell
you exactly what kind of load

632
00:26:30.630 --> 00:26:33.240
sequence your page has.

633
00:26:33.240 --> 00:26:36.310
So these are results for
html5rocks.com using one of

634
00:26:36.310 --> 00:26:40.100
their Android browsers in
the mobile browser farm.

635
00:26:40.100 --> 00:26:42.380
So here we can see exactly
what's happening on pageload.

636
00:26:42.380 --> 00:26:46.160
We've got two redirects here,
and then here's the main

637
00:26:46.160 --> 00:26:49.280
pageload, and then all these
resources loading.

638
00:26:49.280 --> 00:26:51.810
And here's the rest of
the waterfall chart.

639
00:26:51.810 --> 00:26:54.390
So right away, we can see
exactly how much time we could

640
00:26:54.390 --> 00:26:56.470
save the users by optimizing
different

641
00:26:56.470 --> 00:26:58.140
parts of this process.

642
00:26:58.140 --> 00:26:59.830
For example, why do we
need two redirects?

643
00:26:59.830 --> 00:27:02.930
We can just get rid of one of
these redirects, and we would

644
00:27:02.930 --> 00:27:07.330
automatically save 100
milliseconds right there.

645
00:27:07.330 --> 00:27:09.710
But it looks like the biggest
performance improvements we

646
00:27:09.710 --> 00:27:11.740
could make here are
on this pageload.

647
00:27:11.740 --> 00:27:16.550
It's taking over 1.7 seconds
to download this page.

648
00:27:16.550 --> 00:27:19.640
That's pretty terrible.

649
00:27:19.640 --> 00:27:23.730
Also, interestingly, is that
these browsers and the browser

650
00:27:23.730 --> 00:27:25.930
farm are all on a strong
Wi-Fi connection.

651
00:27:25.930 --> 00:27:27.930
So it's not like this is
downloading over an Edge

652
00:27:27.930 --> 00:27:30.670
network and taking
a long time.

653
00:27:30.670 --> 00:27:34.160
This is probably taking over
a second just in server

654
00:27:34.160 --> 00:27:35.970
processing time.

655
00:27:35.970 --> 00:27:38.760
So if we really want to make a
difference for our users, we

656
00:27:38.760 --> 00:27:42.650
would look at this information
and dig into our server

657
00:27:42.650 --> 00:27:45.310
infrastructure and figure out
why it's taking over a second

658
00:27:45.310 --> 00:27:47.790
to process requests and
start sending the

659
00:27:47.790 --> 00:27:49.040
first byte to the browser.

660
00:27:49.040 --> 00:27:52.610
661
00:27:52.610 --> 00:27:54.220
And here's the green line--
this is the load event.

662
00:27:54.220 --> 00:27:55.580
And you can see there's
a bunch of

663
00:27:55.580 --> 00:27:57.330
JavaScript files loading.

664
00:27:57.330 --> 00:27:59.910
This is what we've pushed over
onto the other side of the

665
00:27:59.910 --> 00:28:01.380
Ready event.

666
00:28:01.380 --> 00:28:06.030
And remember that we saved 600
milliseconds, which is maybe

667
00:28:06.030 --> 00:28:09.450
about like this much.

668
00:28:09.450 --> 00:28:12.150
And we said that the only
further improvements we can

669
00:28:12.150 --> 00:28:14.110
make there are pretty
marginal.

670
00:28:14.110 --> 00:28:17.330
So definitely, looking at this
huge chunk here, this is what

671
00:28:17.330 --> 00:28:22.270
we would want to focus on if we
want to help our users out.

672
00:28:22.270 --> 00:28:22.490
OK.

673
00:28:22.490 --> 00:28:25.120
So what if we decide improving
the server is hard?

674
00:28:25.120 --> 00:28:26.850
I want to do this
from the client.

675
00:28:26.850 --> 00:28:29.260
We actually can do that
by using AppCache.

676
00:28:29.260 --> 00:28:31.810
And using AppCache, we can
entirely get rid of the

677
00:28:31.810 --> 00:28:34.060
network time and bring that
to zero, because all the

678
00:28:34.060 --> 00:28:35.920
resources will be
cached locally,

679
00:28:35.920 --> 00:28:38.460
including the HTML file.

680
00:28:38.460 --> 00:28:41.360
To set this up, you just need to
create a manifest file and

681
00:28:41.360 --> 00:28:45.230
link it to your HTML
attribute here.

682
00:28:45.230 --> 00:28:48.020
You host this manifest file
on your web server.

683
00:28:48.020 --> 00:28:50.520
And in this manifest file, you
describe all the resources

684
00:28:50.520 --> 00:28:51.770
that you want to be cached.

685
00:28:51.770 --> 00:28:55.110
686
00:28:55.110 --> 00:28:57.080
So when we add that to the
page and rerun the

687
00:28:57.080 --> 00:28:59.640
experiments, we see that
we've actually

688
00:28:59.640 --> 00:29:01.820
taken a rendering hit.

689
00:29:01.820 --> 00:29:04.050
And so this was important
and a little bit of

690
00:29:04.050 --> 00:29:05.690
a surprise to me.

691
00:29:05.690 --> 00:29:09.180
Upon investigation, I realized
that what was happening was,

692
00:29:09.180 --> 00:29:11.860
the manifest file was
downloading every pageload.

693
00:29:11.860 --> 00:29:14.960
Even if all the resources are
cached, the browser has to

694
00:29:14.960 --> 00:29:18.560
re-download this manifest file
every time it opens the page,

695
00:29:18.560 --> 00:29:21.480
and that's because the manifest
serves as the

696
00:29:21.480 --> 00:29:24.640
indication to the browser as to
when it needs to update the

697
00:29:24.640 --> 00:29:27.240
resources because the
application's out of date.

698
00:29:27.240 --> 00:29:29.570
So when the developer changes
the manifest file, that means

699
00:29:29.570 --> 00:29:31.250
the app needs to be updated and

700
00:29:31.250 --> 00:29:33.280
re-download all the resources.

701
00:29:33.280 --> 00:29:36.290
But what it means for a normal
pageload sequence is that

702
00:29:36.290 --> 00:29:38.810
we've downloaded the page and
the first thing the browser

703
00:29:38.810 --> 00:29:41.340
processes is the HTML node.

704
00:29:41.340 --> 00:29:43.510
And it sees the manifest
attribute, and then right then

705
00:29:43.510 --> 00:29:44.750
and there, it starts
downloading

706
00:29:44.750 --> 00:29:46.330
this AppCache file.

707
00:29:46.330 --> 00:29:48.920
So that means while you're on
the critical path of trying to

708
00:29:48.920 --> 00:29:52.370
render your content, you've
initiated a new download

709
00:29:52.370 --> 00:29:53.550
happening in parallel.

710
00:29:53.550 --> 00:29:55.440
So you're creating resource
contention, and that's why we

711
00:29:55.440 --> 00:29:56.690
see the rendering hit.

712
00:29:56.690 --> 00:29:58.920
However, this is pretty
acceptable, given that we're

713
00:29:58.920 --> 00:30:03.730
saving, as we saw, almost two
seconds in network load time.

714
00:30:03.730 --> 00:30:06.710
So that pretty far offsets the
tens of milliseconds that

715
00:30:06.710 --> 00:30:09.850
we're losing here.

716
00:30:09.850 --> 00:30:11.570
So AppCache sounds
pretty easy.

717
00:30:11.570 --> 00:30:13.870
I'm making it sound like a
silver bullet to improving

718
00:30:13.870 --> 00:30:15.140
your network time.

719
00:30:15.140 --> 00:30:17.550
But that's not actually
the case.

720
00:30:17.550 --> 00:30:18.500
It can be a real challenge.

721
00:30:18.500 --> 00:30:20.500
It can be a real nuisance, and
there's lots of things that

722
00:30:20.500 --> 00:30:23.000
can go wrong.

723
00:30:23.000 --> 00:30:24.050
Let's talk about why.

724
00:30:24.050 --> 00:30:26.970
And it requires a little bit
deeper understanding of how

725
00:30:26.970 --> 00:30:28.240
AppCache works.

726
00:30:28.240 --> 00:30:30.930
So what we're doing here is
looking at the Resources tab.

727
00:30:30.930 --> 00:30:33.670
This is showing us the AppCache
entry for the site on

728
00:30:33.670 --> 00:30:35.860
the local version that
I've created.

729
00:30:35.860 --> 00:30:38.000
These are all the files that
have been added to this

730
00:30:38.000 --> 00:30:40.100
AppCache entry.

731
00:30:40.100 --> 00:30:44.510
The manifest file is the key to
the AppCache entry the maps

732
00:30:44.510 --> 00:30:47.810
all the resources that are
cached in this entry.

733
00:30:47.810 --> 00:30:51.400
So all the resources that you
list in the manifest file--

734
00:30:51.400 --> 00:30:52.630
you can find them all here.

735
00:30:52.630 --> 00:30:55.000
These are the explicit
entries here.

736
00:30:55.000 --> 00:30:59.590
All of the HTML files that point
to this manifest file

737
00:30:59.590 --> 00:31:01.880
end up in here as
master entries.

738
00:31:01.880 --> 00:31:04.190
So if you have 10 pages on your
site, all pointing to the

739
00:31:04.190 --> 00:31:07.150
same manifest file, they'll
all appear here as master

740
00:31:07.150 --> 00:31:10.820
entries in your AppCache
entry.

741
00:31:10.820 --> 00:31:13.400
And then remember, when the
manifest file changes, that's

742
00:31:13.400 --> 00:31:16.800
the signal to the browser to
re-download the resources

743
00:31:16.800 --> 00:31:19.590
because the developer has
published an update to this

744
00:31:19.590 --> 00:31:22.240
application.

745
00:31:22.240 --> 00:31:26.360
So when that happens, you can
see how the browser behaves by

746
00:31:26.360 --> 00:31:29.390
looking at the developer
console when you're

747
00:31:29.390 --> 00:31:31.230
refreshing the page.

748
00:31:31.230 --> 00:31:35.340
So what happens is the browser
sees the manifest file has

749
00:31:35.340 --> 00:31:38.140
changed and then initiates
an AppCache update and

750
00:31:38.140 --> 00:31:40.840
re-downloads all these
resources.

751
00:31:40.840 --> 00:31:42.480
And what we see here is that
it's downloading these two

752
00:31:42.480 --> 00:31:46.360
HTML files at the same time.

753
00:31:46.360 --> 00:31:49.270
Let's look at an example of
why this can be so bad.

754
00:31:49.270 --> 00:31:51.820
Number one, user opens
a single page with

755
00:31:51.820 --> 00:31:53.320
five external resources.

756
00:31:53.320 --> 00:31:56.970
Let's say that totals 350
kilobytes of downloaded stuff.

757
00:31:56.970 --> 00:31:59.720
That goes into the
AppCache entry.

758
00:31:59.720 --> 00:32:02.850
The user then opens 10 more
pages on the site.

759
00:32:02.850 --> 00:32:04.430
Each of them are
200 kilobytes.

760
00:32:04.430 --> 00:32:07.920
All of these go into
the AppCache entry.

761
00:32:07.920 --> 00:32:10.850
Now we've published an update to
the web app by changing the

762
00:32:10.850 --> 00:32:12.570
manifest file.

763
00:32:12.570 --> 00:32:15.960
The user visits just one
of these 11 pages.

764
00:32:15.960 --> 00:32:18.480
The browser checks the manifest
file, sees a change,

765
00:32:18.480 --> 00:32:21.590
and initiates an AppCache
update.

766
00:32:21.590 --> 00:32:23.570
Now, what happens is the browser
downloads over 2

767
00:32:23.570 --> 00:32:27.880
megabytes of data in the
background, just by navigating

768
00:32:27.880 --> 00:32:30.010
to this one page.

769
00:32:30.010 --> 00:32:32.500
Say you had 10,000
users that day.

770
00:32:32.500 --> 00:32:35.830
You're serving up over 20
gigabytes of data versus what

771
00:32:35.830 --> 00:32:38.010
should have been only 20
megabytes of data if they were

772
00:32:38.010 --> 00:32:40.380
just loading those HTML
files by themselves.

773
00:32:40.380 --> 00:32:41.930
So not only could this be really
expensive for your

774
00:32:41.930 --> 00:32:45.700
users, but it can be really
expensive to you, depending on

775
00:32:45.700 --> 00:32:46.950
your server infrastructure.

776
00:32:46.950 --> 00:32:49.700
777
00:32:49.700 --> 00:32:49.860
OK.

778
00:32:49.860 --> 00:32:50.940
So how can we get around this?

779
00:32:50.940 --> 00:32:53.660
The obvious solution seems to
be, let's include one manifest

780
00:32:53.660 --> 00:32:56.060
file per HTML page.

781
00:32:56.060 --> 00:32:58.090
So for every page we're serving
up, it's going to have

782
00:32:58.090 --> 00:33:01.430
its own manifest file, it'll
have its own AppCache entry,

783
00:33:01.430 --> 00:33:03.060
and everything will be good.

784
00:33:03.060 --> 00:33:05.690
That's not actually
the case either.

785
00:33:05.690 --> 00:33:09.320
When you create several AppCache
entries, you can use

786
00:33:09.320 --> 00:33:12.830
Chrome, go into AppCache
Internals, and see how you're

787
00:33:12.830 --> 00:33:14.950
kind of affecting the
various AppCache

788
00:33:14.950 --> 00:33:17.280
entries in the system.

789
00:33:17.280 --> 00:33:19.570
So what I've done is I've
modified the local version to

790
00:33:19.570 --> 00:33:22.400
have several AppCache files for
those two HTML files that

791
00:33:22.400 --> 00:33:25.130
we were previously loading
in a single entry.

792
00:33:25.130 --> 00:33:28.610
What we see here is this one
here is over 350 kilobytes in

793
00:33:28.610 --> 00:33:32.885
size, and this one is also
very large, over 260.

794
00:33:32.885 --> 00:33:35.260
And what's happening is that all
of the external resources

795
00:33:35.260 --> 00:33:38.660
that our manifest files are
pointing to are being cached

796
00:33:38.660 --> 00:33:40.630
in both of these AppCache
entries.

797
00:33:40.630 --> 00:33:44.280
So the AppCache entries can't
share external resources

798
00:33:44.280 --> 00:33:45.630
amongst themselves.

799
00:33:45.630 --> 00:33:46.680
They need to cache
all the files

800
00:33:46.680 --> 00:33:48.480
explicitly in each entry.

801
00:33:48.480 --> 00:33:51.330
And so the sizes of these
are adding up quickly.

802
00:33:51.330 --> 00:33:53.680
And the reason that's a problem
is because the browser

803
00:33:53.680 --> 00:33:57.860
has a hard limit of 5 megabytes
per domain quota for

804
00:33:57.860 --> 00:34:00.650
your AppCache space.

805
00:34:00.650 --> 00:34:03.470
So just based on the pace that
we're going here, for

806
00:34:03.470 --> 00:34:09.949
html5rocks.com, by only adding
10 pages to this AppCache

807
00:34:09.949 --> 00:34:13.000
setup, we would exceed
that limit already.

808
00:34:13.000 --> 00:34:14.909
And what happens when you
exceed the limit is, the

809
00:34:14.909 --> 00:34:18.080
browser tries to download the
updates, and when it gets the

810
00:34:18.080 --> 00:34:20.449
update it tries to push
it into the cache.

811
00:34:20.449 --> 00:34:22.120
But when you've exceeded
your quota, that

812
00:34:22.120 --> 00:34:23.520
push will just fail.

813
00:34:23.520 --> 00:34:25.070
And there's nothing that you
can really do about it

814
00:34:25.070 --> 00:34:27.860
programmatically
in JavaScript.

815
00:34:27.860 --> 00:34:29.840
If your users get into this
situation, they can actually

816
00:34:29.840 --> 00:34:32.310
get stuck on a really stale
version of their site, because

817
00:34:32.310 --> 00:34:34.420
they can't actually update
to the new version.

818
00:34:34.420 --> 00:34:37.030
So this is a pretty big
problem that you

819
00:34:37.030 --> 00:34:37.790
should try to avoid.

820
00:34:37.790 --> 00:34:39.080
And if you get into this
problem, you're kind of

821
00:34:39.080 --> 00:34:41.389
screwed, because you can't
fix it after the fact.

822
00:34:41.389 --> 00:34:44.980
The only thing that you can do
is serve 404s on your AppCache

823
00:34:44.980 --> 00:34:48.380
requests, and this invalidates
the AppCache in the browser.

824
00:34:48.380 --> 00:34:52.060
825
00:34:52.060 --> 00:34:53.210
So it used to seem
really easy.

826
00:34:53.210 --> 00:34:54.100
Now it seems really hard.

827
00:34:54.100 --> 00:34:55.420
How can we actually
make this work?

828
00:34:55.420 --> 00:34:57.370
You have three options,
basically.

829
00:34:57.370 --> 00:35:00.560
You can decide to only include
a manifest file on

830
00:35:00.560 --> 00:35:01.530
a select few pages.

831
00:35:01.530 --> 00:35:04.300
So this means, maybe, your home
page or just a few really

832
00:35:04.300 --> 00:35:06.680
important pages include
a manifest

833
00:35:06.680 --> 00:35:08.270
file and use AppCache.

834
00:35:08.270 --> 00:35:11.240
So this is acceptable, maybe,
depending on your product

835
00:35:11.240 --> 00:35:12.280
requirements.

836
00:35:12.280 --> 00:35:15.130
But what this does is basically
limit the scope on

837
00:35:15.130 --> 00:35:17.890
how big your AppCache
entry can get.

838
00:35:17.890 --> 00:35:20.260
The next thing that you can
try is to implement your

839
00:35:20.260 --> 00:35:23.330
entire site as a single page.

840
00:35:23.330 --> 00:35:27.920
So this is more what those like,
webapps apps do, where

841
00:35:27.920 --> 00:35:32.590
it's just a single
HTML/JavaScript/CSS bundle

842
00:35:32.590 --> 00:35:34.100
sent to the client.

843
00:35:34.100 --> 00:35:37.180
Gmail and Twitter are both good
examples of single-page

844
00:35:37.180 --> 00:35:39.310
sites that use AppCache.

845
00:35:39.310 --> 00:35:41.390
And when you're doing this, you
don't run into the problem

846
00:35:41.390 --> 00:35:44.510
of many pages, because you
only have one page.

847
00:35:44.510 --> 00:35:49.410
And the other option is to just
not use AppCache at all.

848
00:35:49.410 --> 00:35:53.720
Google Search uses a really cool
technique where they want

849
00:35:53.720 --> 00:35:56.410
to cache lots of resources,
but they want those to be

850
00:35:56.410 --> 00:35:58.670
cached across all their URLs,
because when you do a search,

851
00:35:58.670 --> 00:36:02.430
it modifies the URL so that's
shareable and things.

852
00:36:02.430 --> 00:36:05.650
And so they're saving a lot of
stuff in localStorage and

853
00:36:05.650 --> 00:36:07.410
caching their resources that
way, such that they're

854
00:36:07.410 --> 00:36:08.870
available across all pages.

855
00:36:08.870 --> 00:36:12.660
856
00:36:12.660 --> 00:36:13.900
OK, so let's change
gears a bit.

857
00:36:13.900 --> 00:36:17.520
So far we've only talked,
really, about page load and

858
00:36:17.520 --> 00:36:18.882
rendering time.

859
00:36:18.882 --> 00:36:22.120
The next really important
thing on mobile is event

860
00:36:22.120 --> 00:36:23.520
handling time.

861
00:36:23.520 --> 00:36:25.850
Basically, everything that
happens after your page is

862
00:36:25.850 --> 00:36:29.070
loaded is an event handler
of some sort.

863
00:36:29.070 --> 00:36:31.600
And so what I really want to
focus on here is the user does

864
00:36:31.600 --> 00:36:34.470
some kind of interaction on the
page, and then we execute

865
00:36:34.470 --> 00:36:38.230
some JavaScript and publish an
update to the applications and

866
00:36:38.230 --> 00:36:40.730
we change the DOM so the user
sees something happen.

867
00:36:40.730 --> 00:36:44.740
868
00:36:44.740 --> 00:36:46.750
So there's a couple of
high-level guidelines here.

869
00:36:46.750 --> 00:36:50.250
First of all, everything on the
DOM is slow, so touch it

870
00:36:50.250 --> 00:36:52.120
as little as possible.

871
00:36:52.120 --> 00:36:55.350
And when you do touch it, we
want to batch all of the DOM

872
00:36:55.350 --> 00:36:56.510
changes together.

873
00:36:56.510 --> 00:36:58.570
If you were at the Jank
Busting talk that just

874
00:36:58.570 --> 00:37:02.560
happened an hour ago, they
showed a couple of really cool

875
00:37:02.560 --> 00:37:05.610
ways that you could debug
these kind of issues.

876
00:37:05.610 --> 00:37:06.980
And this is a little
bit of the same

877
00:37:06.980 --> 00:37:10.130
thing, but kind of different.

878
00:37:10.130 --> 00:37:14.110
So here's an example of a really
bad event handler.

879
00:37:14.110 --> 00:37:16.820
And this is how you can debug
it and see what's going on.

880
00:37:16.820 --> 00:37:19.950
So using the Events timeline,
we see, here

881
00:37:19.950 --> 00:37:21.040
is the event handler.

882
00:37:21.040 --> 00:37:22.780
And I've expanded this, and
now we can see what's

883
00:37:22.780 --> 00:37:24.450
happening in this
event handler.

884
00:37:24.450 --> 00:37:25.950
And what we see here--

885
00:37:25.950 --> 00:37:30.630
these are Recalculate
Style events.

886
00:37:30.630 --> 00:37:34.120
What we see here is we executed
some JavaScript and

887
00:37:34.120 --> 00:37:35.265
then we have a style
recalculation.

888
00:37:35.265 --> 00:37:38.450
Then we execute some more, and
we have a style recalculation.

889
00:37:38.450 --> 00:37:40.660
And every time there's a style
recalculation, this is what's

890
00:37:40.660 --> 00:37:43.080
really expensive, especially
on mobile.

891
00:37:43.080 --> 00:37:44.910
This is where the browser
says hey, wait, I

892
00:37:44.910 --> 00:37:46.240
gotta update stuff.

893
00:37:46.240 --> 00:37:50.480
And it basically does a reflow
of the entire document to

894
00:37:50.480 --> 00:37:54.140
calculate how large all the
blocks on the page are.

895
00:37:54.140 --> 00:37:56.120
And that's why we see this
big time gap here.

896
00:37:56.120 --> 00:37:58.760
This time here is the browser
just taking time to

897
00:37:58.760 --> 00:38:00.670
lay itself out again.

898
00:38:00.670 --> 00:38:03.000
And then we have another reflow
here, and another one.

899
00:38:03.000 --> 00:38:06.670
And then here's the
Paint event here.

900
00:38:06.670 --> 00:38:09.320
And this is the real goal of
the event handler, is to

901
00:38:09.320 --> 00:38:12.120
respond to the user's event and
Paint as soon as possible.

902
00:38:12.120 --> 00:38:15.310
903
00:38:15.310 --> 00:38:18.930
Here's the code that is the
implementation of this really

904
00:38:18.930 --> 00:38:20.610
bad event handler.

905
00:38:20.610 --> 00:38:24.410
So what we have here is a
bunch of DOM mutations

906
00:38:24.410 --> 00:38:25.790
sprinkled throughout
the event handler.

907
00:38:25.790 --> 00:38:28.460
And this is exactly what
we want to avoid.

908
00:38:28.460 --> 00:38:32.540
And then what we have is, we're
looking at offsetWidth

909
00:38:32.540 --> 00:38:34.160
on one of these divs.

910
00:38:34.160 --> 00:38:37.950
And using offsetWidth is
something that requires the

911
00:38:37.950 --> 00:38:40.540
browser to know how large
things are on the page.

912
00:38:40.540 --> 00:38:42.860
So it needs to do a style
recalculation.

913
00:38:42.860 --> 00:38:47.430
So each one of these offsetWidth
statements here is

914
00:38:47.430 --> 00:38:49.600
what causes the style
recalculation and is what's

915
00:38:49.600 --> 00:38:53.170
making this event
handler so slow.

916
00:38:53.170 --> 00:38:55.800
Here's a reimplementation just
simply rearranging this

917
00:38:55.800 --> 00:38:58.950
function so that it performs
significantly better.

918
00:38:58.950 --> 00:39:01.700
All of the DOM mutations
are batched together.

919
00:39:01.700 --> 00:39:03.690
And then based on these
statements here, we'll only

920
00:39:03.690 --> 00:39:06.250
end up with one style
recalculation.

921
00:39:06.250 --> 00:39:08.610
So here's what it
looks like now.

922
00:39:08.610 --> 00:39:12.320
The event handler fires, we
execute a bunch of JavaScript,

923
00:39:12.320 --> 00:39:14.320
we have one style recalculation,
and

924
00:39:14.320 --> 00:39:15.880
then we do our Paint.

925
00:39:15.880 --> 00:39:19.880
And so this is significantly
faster and will end up being

926
00:39:19.880 --> 00:39:22.390
much more responsive feedback to
our user, because the Paint

927
00:39:22.390 --> 00:39:24.570
happened so much closer
as to when they

928
00:39:24.570 --> 00:39:25.820
interacted with the page.

929
00:39:25.820 --> 00:39:29.340
930
00:39:29.340 --> 00:39:31.530
Here's the performance impact
this can actually have.

931
00:39:31.530 --> 00:39:35.500
So I ran just this simple bad
code snippet on desktop Chrome

932
00:39:35.500 --> 00:39:37.150
1,000 times.

933
00:39:37.150 --> 00:39:41.150
And it took nine seconds for the
bad case and 2.5 seconds

934
00:39:41.150 --> 00:39:42.800
for the good implementation.

935
00:39:42.800 --> 00:39:46.580
This is a 72% improvement in
the processing time of this

936
00:39:46.580 --> 00:39:47.150
event handler.

937
00:39:47.150 --> 00:39:48.160
So that's really significant.

938
00:39:48.160 --> 00:39:50.810
And then on mobile, I ran it
100 times on Chrome for

939
00:39:50.810 --> 00:39:54.220
Android, and similarly, I saw
66% improvement in the

940
00:39:54.220 --> 00:39:55.840
handling time.

941
00:39:55.840 --> 00:39:58.430
So this is really
important to do.

942
00:39:58.430 --> 00:40:02.260
For any time that your user on
your touch-based mobile web

943
00:40:02.260 --> 00:40:02.930
application--

944
00:40:02.930 --> 00:40:05.180
when they touch something, they
want to see an update as

945
00:40:05.180 --> 00:40:05.880
soon as possible.

946
00:40:05.880 --> 00:40:10.530
Because they a), want things to
be fast, but b), when they

947
00:40:10.530 --> 00:40:14.280
touch it, they need that kind
of tactile feedback in order

948
00:40:14.280 --> 00:40:17.460
to feel like the application is
really performing properly.

949
00:40:17.460 --> 00:40:21.150
950
00:40:21.150 --> 00:40:23.580
So the next thing that can
really hurt your interaction

951
00:40:23.580 --> 00:40:27.780
speed is the 300 millisecond
problem.

952
00:40:27.780 --> 00:40:30.290
This is the problem where all
click events on mobile

953
00:40:30.290 --> 00:40:33.900
browsers come 300 milliseconds
after the user actually taps

954
00:40:33.900 --> 00:40:35.420
the screen.

955
00:40:35.420 --> 00:40:37.190
And the reason that browsers
do this is because they're

956
00:40:37.190 --> 00:40:40.170
waiting to see if the user taps
the screen again, which

957
00:40:40.170 --> 00:40:42.120
would indicate a double-tap.

958
00:40:42.120 --> 00:40:44.650
And so a double-tap on mobile
browsers will perform a

959
00:40:44.650 --> 00:40:47.420
zoom-in operation, and so that's
why they introduced

960
00:40:47.420 --> 00:40:50.370
this delay.

961
00:40:50.370 --> 00:40:54.030
For us, if we're creating an app
and we have a button, we

962
00:40:54.030 --> 00:40:55.970
don't really want to have
to support the user

963
00:40:55.970 --> 00:40:57.170
zooming in on a button.

964
00:40:57.170 --> 00:40:59.880
We just want that button to
respond as fast as possible.

965
00:40:59.880 --> 00:41:02.430
And by the time 300 milliseconds
executes, we're

966
00:41:02.430 --> 00:41:03.730
way too late already.

967
00:41:03.730 --> 00:41:04.610
There's nothing we can do.

968
00:41:04.610 --> 00:41:07.370
No matter how efficient our
event handler is, it's going

969
00:41:07.370 --> 00:41:08.620
to be too slow.

970
00:41:08.620 --> 00:41:10.770
971
00:41:10.770 --> 00:41:14.210
So the way we fix this is
actually really hackey.

972
00:41:14.210 --> 00:41:16.980
I've got a code snippet here
that kind of illustrates how

973
00:41:16.980 --> 00:41:18.320
we can do this.

974
00:41:18.320 --> 00:41:21.220
This overrides the default
functionality of the click

975
00:41:21.220 --> 00:41:25.440
event, sets up touchend event
listeners on the button, and

976
00:41:25.440 --> 00:41:28.790
then on the touchend we'll do
whatever click behavior we

977
00:41:28.790 --> 00:41:31.320
wanted the button to do
in the first place.

978
00:41:31.320 --> 00:41:34.920
And then you can get a handle on
your buttons throughout the

979
00:41:34.920 --> 00:41:36.950
application in JavaScript
and decorate

980
00:41:36.950 --> 00:41:39.200
them with this behavior.

981
00:41:39.200 --> 00:41:40.240
And all of a sudden,
your buttons will

982
00:41:40.240 --> 00:41:42.630
be magically fast.

983
00:41:42.630 --> 00:41:46.210
So I make this code seem really
simple, but there's

984
00:41:46.210 --> 00:41:49.480
actually a lot of problems and
glitches that it introduces,

985
00:41:49.480 --> 00:41:50.910
and considerations.

986
00:41:50.910 --> 00:41:53.440
So for more details, check out
this article that I wrote a

987
00:41:53.440 --> 00:41:56.380
while ago on creating fast
buttons for mobile web

988
00:41:56.380 --> 00:41:57.100
applications.

989
00:41:57.100 --> 00:42:00.750
It explains all of the things
that you need to keep in mind

990
00:42:00.750 --> 00:42:02.890
while you're working
with this approach.

991
00:42:02.890 --> 00:42:05.300
And if you don't want to have
to write code yourself,

992
00:42:05.300 --> 00:42:09.170
because developers are lazy,
which is good, you can pull up

993
00:42:09.170 --> 00:42:13.340
this implementation here on
html5boilerplate.com/mobile

994
00:42:13.340 --> 00:42:15.010
and you can just drop
this into your app

995
00:42:15.010 --> 00:42:16.260
and start using it.

996
00:42:16.260 --> 00:42:18.680
997
00:42:18.680 --> 00:42:18.910
OK.

998
00:42:18.910 --> 00:42:22.890
So the next thing that we want
to be able to do when we're

999
00:42:22.890 --> 00:42:25.950
providing user with DOM updates
is to make sure, if

1000
00:42:25.950 --> 00:42:28.570
we're doing animations and
things like that, that they're

1001
00:42:28.570 --> 00:42:30.110
as smooth as possible.

1002
00:42:30.110 --> 00:42:32.920
Which will make the user
happy, hopefully.

1003
00:42:32.920 --> 00:42:34.970
And so the way that we need to
do that is make sure that all

1004
00:42:34.970 --> 00:42:38.180
of our animations and
document updates are

1005
00:42:38.180 --> 00:42:41.930
hardware-accelerated
when necessary.

1006
00:42:41.930 --> 00:42:46.200
So hardware-accelerated means
that you're going to take an

1007
00:42:46.200 --> 00:42:48.470
element, and it's going to be
turned into a layer that will

1008
00:42:48.470 --> 00:42:51.070
be uploaded to the GPU
for processing

1009
00:42:51.070 --> 00:42:52.360
off the main thread.

1010
00:42:52.360 --> 00:42:53.650
And this is what allows
it to be really

1011
00:42:53.650 --> 00:42:56.260
smooth and really fast.

1012
00:42:56.260 --> 00:42:58.310
Making something
hardware-accelerated in your

1013
00:42:58.310 --> 00:43:01.090
document is kind of
magical today.

1014
00:43:01.090 --> 00:43:06.070
You just have to do something to
put it into some 3D space,

1015
00:43:06.070 --> 00:43:09.470
and that will hopefully make
it hardware-accelerated.

1016
00:43:09.470 --> 00:43:12.640
So you can create a class
like this in your CSS

1017
00:43:12.640 --> 00:43:14.550
rules called .hwaccel.

1018
00:43:14.550 --> 00:43:17.210
Webkit-transform is the
identity transform.

1019
00:43:17.210 --> 00:43:18.570
And you can apply this
to elements.

1020
00:43:18.570 --> 00:43:21.460
It won't move it anywhere on the
page, but now updates to

1021
00:43:21.460 --> 00:43:25.130
this element will be
hardware-accelerated.

1022
00:43:25.130 --> 00:43:26.910
Now if you're moving
elements, you can

1023
00:43:26.910 --> 00:43:29.040
create a different class.

1024
00:43:29.040 --> 00:43:32.480
You can move elements using the
positioning attributes,

1025
00:43:32.480 --> 00:43:33.910
like left or top.

1026
00:43:33.910 --> 00:43:36.540
But it's actually much faster to
use the transform property

1027
00:43:36.540 --> 00:43:38.090
to move elements.

1028
00:43:38.090 --> 00:43:40.050
So this will ensure
the best hardware

1029
00:43:40.050 --> 00:43:41.660
acceleration possible.

1030
00:43:41.660 --> 00:43:44.340
So what we have here is a
little CSS rule to make

1031
00:43:44.340 --> 00:43:45.770
something transitionable.

1032
00:43:45.770 --> 00:43:48.460
We've applied transition,
which will be on

1033
00:43:48.460 --> 00:43:49.870
the transform property.

1034
00:43:49.870 --> 00:43:52.520
This transition will take 200
milliseconds to execute and

1035
00:43:52.520 --> 00:43:53.770
we'll use an easing function.

1036
00:43:53.770 --> 00:43:56.460
1037
00:43:56.460 --> 00:43:56.690
OK.

1038
00:43:56.690 --> 00:43:59.890
So we're going to put these
three ideas together now.

1039
00:43:59.890 --> 00:44:03.740
The three ideas were efficient
event handling, solving the

1040
00:44:03.740 --> 00:44:08.780
300-millisecond problem, and
smooth updating of elements

1041
00:44:08.780 --> 00:44:10.290
using hardware acceleration.

1042
00:44:10.290 --> 00:44:11.870
So consider a scenario.

1043
00:44:11.870 --> 00:44:14.320
In your mobile web app, you've
got a button, and when the

1044
00:44:14.320 --> 00:44:16.930
user taps that button, you
want to do a view slide

1045
00:44:16.930 --> 00:44:18.950
transition to the next page.

1046
00:44:18.950 --> 00:44:21.160
And you want this to happen
as fast as possible.

1047
00:44:21.160 --> 00:44:22.720
The next page isn't
rendered yet.

1048
00:44:22.720 --> 00:44:25.970
So we need to render it when
the user taps this.

1049
00:44:25.970 --> 00:44:28.290
And the next page needs to
become interactive as well.

1050
00:44:28.290 --> 00:44:30.360
So not only do we need to render
it, but we need to add

1051
00:44:30.360 --> 00:44:33.460
a bunch of event listeners to
it, and maybe load in some

1052
00:44:33.460 --> 00:44:36.090
images, and stuff like that.

1053
00:44:36.090 --> 00:44:37.570
So here's a nice approach
we can take.

1054
00:44:37.570 --> 00:44:40.450
First of all, we'll set up a
couple of CSS rules for our

1055
00:44:40.450 --> 00:44:44.790
two pages that will make
them transitionable.

1056
00:44:44.790 --> 00:44:48.270
Next we'll take our button and
make it a fast button to avoid

1057
00:44:48.270 --> 00:44:50.770
the 300 millisecond problem.

1058
00:44:50.770 --> 00:44:55.050
Now when the tap event occurs,
we'll get a handle on the

1059
00:44:55.050 --> 00:44:56.920
current page and
the next page.

1060
00:44:56.920 --> 00:44:58.900
We'll render the next page,
but we're going to be very

1061
00:44:58.900 --> 00:45:02.360
careful to only do a minimal
amount of rendering possible.

1062
00:45:02.360 --> 00:45:04.310
So we don't want to render
everything, because that will

1063
00:45:04.310 --> 00:45:04.810
take too long.

1064
00:45:04.810 --> 00:45:09.010
We want to start this animation
as soon as possible.

1065
00:45:09.010 --> 00:45:11.070
We then apply our transform
properties, because using

1066
00:45:11.070 --> 00:45:15.240
transforms is the better way
to reposition an element.

1067
00:45:15.240 --> 00:45:18.080
And we're going to do it such
that the current page animates

1068
00:45:18.080 --> 00:45:23.070
off the screen and the next page
animates onto the screen.

1069
00:45:23.070 --> 00:45:25.200
Remember, we want to make the
next page interactive.

1070
00:45:25.200 --> 00:45:27.000
As soon as we apply these
transforms, the

1071
00:45:27.000 --> 00:45:29.660
animation will start.

1072
00:45:29.660 --> 00:45:31.300
But we still have to do
additional work on the next

1073
00:45:31.300 --> 00:45:34.960
page to load in those extra
resources, images, maybe, and

1074
00:45:34.960 --> 00:45:36.660
add event listeners to it.

1075
00:45:36.660 --> 00:45:39.580
So we can add an event listener
which will fire as

1076
00:45:39.580 --> 00:45:41.240
soon as the transition ends.

1077
00:45:41.240 --> 00:45:44.480
And when it does, now this is
the appropriate time to do all

1078
00:45:44.480 --> 00:45:47.610
that additional rendering
and event setup.

1079
00:45:47.610 --> 00:45:50.480
So what we have here
is probably

1080
00:45:50.480 --> 00:45:51.990
the ideal event handler.

1081
00:45:51.990 --> 00:45:53.040
It's a fast button.

1082
00:45:53.040 --> 00:45:55.070
We do a minimal amount
of DOM changes.

1083
00:45:55.070 --> 00:45:57.390
And all of our DOM changes
are batched together.

1084
00:45:57.390 --> 00:46:00.150
And then we defer all of the
expensive work until after the

1085
00:46:00.150 --> 00:46:01.070
animation starts.

1086
00:46:01.070 --> 00:46:02.600
And our animation is
hardware-accelerated.

1087
00:46:02.600 --> 00:46:06.700
1088
00:46:06.700 --> 00:46:09.820
So that's all I have
for you today.

1089
00:46:09.820 --> 00:46:11.400
Here's a summary of the various

1090
00:46:11.400 --> 00:46:13.520
optimizations that we did.

1091
00:46:13.520 --> 00:46:16.810
And some of them were a little
bit surprising, so again,

1092
00:46:16.810 --> 00:46:18.900
that's why it's really good
that we measure things.

1093
00:46:18.900 --> 00:46:20.880
So we don't just assume what's
going to happen.

1094
00:46:20.880 --> 00:46:24.320
We confirm that it behaves
as expected.

1095
00:46:24.320 --> 00:46:25.780
And these are some of the
tools that we looked at.

1096
00:46:25.780 --> 00:46:27.610
Chrome dev tools, PageSpeed,
and webpagetest.org.

1097
00:46:27.610 --> 00:46:30.540
1098
00:46:30.540 --> 00:46:32.100
And if you're going to remember
anything, please

1099
00:46:32.100 --> 00:46:33.520
remember, don't waste
your time.

1100
00:46:33.520 --> 00:46:35.750
Always measure before
and after.

1101
00:46:35.750 --> 00:46:37.740
Verify all of your
assumptions.

1102
00:46:37.740 --> 00:46:40.160
And optimize what will make a
difference, not just what's

1103
00:46:40.160 --> 00:46:42.798
interesting to work on.

1104
00:46:42.798 --> 00:46:43.260
OK.

1105
00:46:43.260 --> 00:46:45.150
Thank you very much.

1106
00:46:45.150 --> 00:46:47.341
I'll happily take some questions
if people want.

1107
00:46:47.341 --> 00:46:53.000
[APPLAUSE]

1108
00:46:53.000 --> 00:46:54.180
AUDIENCE: Hey there.

1109
00:46:54.180 --> 00:46:55.960
RYAN FIORAVANTI: I can also
stick around for a bit after,

1110
00:46:55.960 --> 00:46:57.750
if people would like
to talk in person.

1111
00:46:57.750 --> 00:46:59.430
But if you want to ask a
question in front of everyone,

1112
00:46:59.430 --> 00:47:01.250
just step up to the mic.

1113
00:47:01.250 --> 00:47:05.340
AUDIENCE: I was wondering if you
know if jQuery mobile uses

1114
00:47:05.340 --> 00:47:10.310
most of the optimizations that
you were just showing.

1115
00:47:10.310 --> 00:47:11.860
RYAN FIORAVANTI: jQuery
mobile, I know--

1116
00:47:11.860 --> 00:47:15.200
I'm pretty sure they have the
tab functionality, like making

1117
00:47:15.200 --> 00:47:16.970
buttons fast.

1118
00:47:16.970 --> 00:47:18.750
I've also seen that they've
worked a lot on view

1119
00:47:18.750 --> 00:47:21.440
transitions and things.

1120
00:47:21.440 --> 00:47:24.620
When you're using these
frameworks, they can try and

1121
00:47:24.620 --> 00:47:25.590
do a lot of stuff for you.

1122
00:47:25.590 --> 00:47:27.730
But based on all of your
integration points, it's

1123
00:47:27.730 --> 00:47:30.170
really easy to introduce
slow points.

1124
00:47:30.170 --> 00:47:32.120
So it's really important, even
if you're using all these

1125
00:47:32.120 --> 00:47:34.770
libraries, that you really dig
and understand what can make

1126
00:47:34.770 --> 00:47:35.750
your app slow.

1127
00:47:35.750 --> 00:47:37.730
And look at if it's
being slow.

1128
00:47:37.730 --> 00:47:40.240
Maybe jQuery mobile does do
all of this stuff, but you

1129
00:47:40.240 --> 00:47:42.110
have to confirm that you're
using it properly.

1130
00:47:42.110 --> 00:47:45.490
Because there's so much you
can do to screw it up.

1131
00:47:45.490 --> 00:47:46.740
So yeah.

1132
00:47:46.740 --> 00:47:48.840
1133
00:47:48.840 --> 00:47:48.986
AUDIENCE: Yeah.

1134
00:47:48.986 --> 00:47:51.460
I have a question about your
really interesting technique

1135
00:47:51.460 --> 00:47:54.320
for making the JavaScript
load later by making

1136
00:47:54.320 --> 00:47:55.320
it a different type.

1137
00:47:55.320 --> 00:47:57.280
I've seen a lot of people do the
technique where they put

1138
00:47:57.280 --> 00:47:58.740
the JavaScript at the
bottom of the page

1139
00:47:58.740 --> 00:48:00.650
instead of in the head.

1140
00:48:00.650 --> 00:48:02.550
How does that play into
the decision?

1141
00:48:02.550 --> 00:48:04.770
RYAN FIORAVANTI: Yeah, so I
tried moving the JavaScript to

1142
00:48:04.770 --> 00:48:06.020
the bottom of page.

1143
00:48:06.020 --> 00:48:09.020
1144
00:48:09.020 --> 00:48:13.580
When it's at the bottom of the
page, the browser has just

1145
00:48:13.580 --> 00:48:15.750
finished receiving the
entire document.

1146
00:48:15.750 --> 00:48:19.680
And so it's not clear whether
it's being painted or not.

1147
00:48:19.680 --> 00:48:22.130
And it then encounters the
JavaScript, which may or may

1148
00:48:22.130 --> 00:48:23.230
not be mutating the DOM.

1149
00:48:23.230 --> 00:48:25.220
So it then executes
all of that.

1150
00:48:25.220 --> 00:48:27.230
So when I did that, it didn't
actually have an impact on my

1151
00:48:27.230 --> 00:48:29.440
experiments at all.

1152
00:48:29.440 --> 00:48:31.150
And it kind of makes sense.

1153
00:48:31.150 --> 00:48:34.060
Like if your script at the
bottom is going to change

1154
00:48:34.060 --> 00:48:36.550
everything in the document, then
the browser should wait

1155
00:48:36.550 --> 00:48:42.220
for that so that you can show
the user the proper content.

1156
00:48:42.220 --> 00:48:43.370
Does that answer your question?

1157
00:48:43.370 --> 00:48:45.470
Yeah.

1158
00:48:45.470 --> 00:48:48.560
AUDIENCE: What tool
did you use to get

1159
00:48:48.560 --> 00:48:51.960
the repeated pageloads?

1160
00:48:51.960 --> 00:48:53.630
RYAN FIORAVANTI: So at first--

1161
00:48:53.630 --> 00:48:54.300
I'll be honest--

1162
00:48:54.300 --> 00:48:56.950
I was actually just refreshing
the page and looking at some

1163
00:48:56.950 --> 00:48:58.980
of the timing output
in the dev console.

1164
00:48:58.980 --> 00:49:05.070
But then I got much smarter and
I created a loop, kind of,

1165
00:49:05.070 --> 00:49:07.620
where the page would load and
then it would take my timing.

1166
00:49:07.620 --> 00:49:10.380
I would save that in
localStorage and then I would

1167
00:49:10.380 --> 00:49:12.690
call window.location.reload.

1168
00:49:12.690 --> 00:49:15.550
And also in localStorage, I
would save the number of times

1169
00:49:15.550 --> 00:49:16.840
I ran this.

1170
00:49:16.840 --> 00:49:20.340
So when that counter
got to 50--

1171
00:49:20.340 --> 00:49:22.260
because I was running
50 samples--

1172
00:49:22.260 --> 00:49:24.410
then I would stop calling
reload, and I would just stop,

1173
00:49:24.410 --> 00:49:26.460
and I would alert the
average of all the

1174
00:49:26.460 --> 00:49:27.710
times that I was tracking.

1175
00:49:27.710 --> 00:49:30.210
1176
00:49:30.210 --> 00:49:30.770
So, no tool.

1177
00:49:30.770 --> 00:49:31.910
I just wrote something
that used

1178
00:49:31.910 --> 00:49:33.160
localStorage pretty quickly.

1179
00:49:33.160 --> 00:49:38.451
1180
00:49:38.451 --> 00:49:38.950
OK.

1181
00:49:38.950 --> 00:49:40.200
Thanks everybody.

1182
00:49:40.200 --> 00:49:42.048
WEBVTT

1
00:00:00.000 --> 00:00:05.800

2
00:00:05.800 --> 00:00:07.910
BRAD ABRAMS: Good afternoon, and
thank you for coming back

3
00:00:07.910 --> 00:00:08.640
from lunch.

4
00:00:08.640 --> 00:00:11.610
You know, whenever I speak at a
big conference like this, I

5
00:00:11.610 --> 00:00:14.770
always ask them to put me
right after lunch, when

6
00:00:14.770 --> 00:00:18.230
everybody's a little bit tired,
because what I find is

7
00:00:18.230 --> 00:00:21.240
the people that come to the
session right after lunch are

8
00:00:21.240 --> 00:00:26.190
the most interesting, engaged,
smartest, best-looking

9
00:00:26.190 --> 00:00:29.040
audiences, don't you think?

10
00:00:29.040 --> 00:00:31.120
I think so.

11
00:00:31.120 --> 00:00:33.440
So we're really excited
about this talk.

12
00:00:33.440 --> 00:00:37.200
Ido and I are going to go
through how to use HTML5 and

13
00:00:37.200 --> 00:00:40.830
App Engine to build modern
web applications.

14
00:00:40.830 --> 00:00:43.260
So I'm Brad Abrams, and I'm a
product manager on the cloud

15
00:00:43.260 --> 00:00:44.520
platform team.

16
00:00:44.520 --> 00:00:45.820
IDO GREEN: And I'm Ido Green,
and I'm a developer advocate

17
00:00:45.820 --> 00:00:47.250
for Chrome.

18
00:00:47.250 --> 00:00:50.100
BRAD ABRAMS: So Ido, if we're
going to talk about HTML5 and

19
00:00:50.100 --> 00:00:53.220
App Engine and building great
modern web apps, maybe we

20
00:00:53.220 --> 00:00:55.810
should define for the audience
what a modern

21
00:00:55.810 --> 00:00:57.030
web app really is.

22
00:00:57.030 --> 00:00:57.780
IDO GREEN: Absolutely.

23
00:00:57.780 --> 00:01:01.000
So the web is changing so
quickly that it's really hard

24
00:01:01.000 --> 00:01:03.810
to keep up with all the new
capabilities and rich APIs

25
00:01:03.810 --> 00:01:07.200
that we're getting every
six weeks, actually.

26
00:01:07.200 --> 00:01:11.880
Things that we weren't able to
do, like, 6 or 12 months ago,

27
00:01:11.880 --> 00:01:13.740
we're now able to
do on the web.

28
00:01:13.740 --> 00:01:15.760
And we saw in the keynote some
really, really impressive

29
00:01:15.760 --> 00:01:17.370
demos for that.

30
00:01:17.370 --> 00:01:19.700
So when we come to define web
apps, it's actually quite

31
00:01:19.700 --> 00:01:22.910
hard, because we see lots of
fragmentation on the web.

32
00:01:22.910 --> 00:01:25.580
But however, there's a few
things that we've found that

33
00:01:25.580 --> 00:01:28.810
are quite common in all of the
great web apps that are out

34
00:01:28.810 --> 00:01:30.090
there today.

35
00:01:30.090 --> 00:01:34.070
One, and foremost, the first
goal for all those web apps is

36
00:01:34.070 --> 00:01:37.950
to be as easy as possible
for the user to use.

37
00:01:37.950 --> 00:01:41.440
They want to let the user
achieve their goals with as

38
00:01:41.440 --> 00:01:43.700
much efficiency as possible.

39
00:01:43.700 --> 00:01:46.460
Some of them are built in
offline first methodology.

40
00:01:46.460 --> 00:01:48.520
And what that means is that
you're thinking from the

41
00:01:48.520 --> 00:01:51.930
ground up how the app will look
like and how the app will

42
00:01:51.930 --> 00:01:54.060
react when there's no
connection, and then building

43
00:01:54.060 --> 00:01:54.820
on top of it.

44
00:01:54.820 --> 00:01:57.720
So it's not like any other edit
feature that you want to

45
00:01:57.720 --> 00:01:58.920
add to an existing app.

46
00:01:58.920 --> 00:02:02.320
It's more of, let's think how
this app will work when

47
00:02:02.320 --> 00:02:05.210
there's no connection, and
build on top of it.

48
00:02:05.210 --> 00:02:08.180
When we're moving more and more
logic to the client side,

49
00:02:08.180 --> 00:02:09.900
we're dealing with more code.

50
00:02:09.900 --> 00:02:10.639
And that's--

51
00:02:10.639 --> 00:02:12.840
I'm sure some of you
are smiling--

52
00:02:12.840 --> 00:02:14.570
causing lots of spaghetti
code.

53
00:02:14.570 --> 00:02:17.800
And I think that's one of the
main reasons why we see a huge

54
00:02:17.800 --> 00:02:21.000
movement and flourishing in MVC,
or actually I should say

55
00:02:21.000 --> 00:02:25.920
MV*, because we have MVP and
VVM, and lots of others, that

56
00:02:25.920 --> 00:02:28.630
are basically coming to make a
clear separation between our

57
00:02:28.630 --> 00:02:33.000
data models and our UI, and
make our code much more

58
00:02:33.000 --> 00:02:35.020
readable and maintainable.

59
00:02:35.020 --> 00:02:38.770
The last part is that we want
those web apps to feel as

60
00:02:38.770 --> 00:02:42.050
native as possible, and we have
today with HTML5 all the

61
00:02:42.050 --> 00:02:46.390
great APIs to do drag and drop
transition, 3D, and others.

62
00:02:46.390 --> 00:02:48.740
We want to reach 60
frames per second.

63
00:02:48.740 --> 00:02:49.040
Why?

64
00:02:49.040 --> 00:02:51.660
Because above it, the
eye couldn't tell.

65
00:02:51.660 --> 00:02:55.650
And we want to save some CPU
cycles, and make ourselves,

66
00:02:55.650 --> 00:02:57.380
our users, and Al Gore happy.

67
00:02:57.380 --> 00:03:00.370
So those two parts are extremely
important when

68
00:03:00.370 --> 00:03:03.510
you're thinking about
your great web app.

69
00:03:03.510 --> 00:03:05.930
Here is a great example,
Hipmunk.

70
00:03:05.930 --> 00:03:09.120
They are basically letting you
do one thing and one thing

71
00:03:09.120 --> 00:03:11.410
only, find the best flight
for your needs.

72
00:03:11.410 --> 00:03:14.730
You could see how immersive it
is, how functional it is, and

73
00:03:14.730 --> 00:03:17.400
if you're setting new
parameters, or you just want

74
00:03:17.400 --> 00:03:19.790
to start a new search, you don't
need to shift focus.

75
00:03:19.790 --> 00:03:22.060
You are all in that app.

76
00:03:22.060 --> 00:03:25.100
Another great app that I had the
pleasure to work with is

77
00:03:25.100 --> 00:03:26.250
My Chrome Theme.

78
00:03:26.250 --> 00:03:28.570
It's basically letting you
create your own personal

79
00:03:28.570 --> 00:03:31.930
Chrome theme and share with
friends and family, and I

80
00:03:31.930 --> 00:03:33.800
highly encourage you
to check it out.

81
00:03:33.800 --> 00:03:36.860
It's using all the best
technology, CSS3 and HTML5 in

82
00:03:36.860 --> 00:03:39.440
order to achieve this goal.

83
00:03:39.440 --> 00:03:42.750
When we're coming to speak about
client-side architecture

84
00:03:42.750 --> 00:03:45.160
and technology, there's
a huge amount of

85
00:03:45.160 --> 00:03:47.020
different options out there.

86
00:03:47.020 --> 00:03:49.800
And since we don't have time to
get deeper, we just choose

87
00:03:49.800 --> 00:03:52.320
here three great examples
to choose from.

88
00:03:52.320 --> 00:03:55.920
And if you have a bit more time,
my colleague and great

89
00:03:55.920 --> 00:03:56.740
mentor [INAUDIBLE]

90
00:03:56.740 --> 00:03:59.700
did a great job in terms of
letting you know how all the

91
00:03:59.700 --> 00:04:04.000
different MV* framework will
work in different use cases on

92
00:04:04.000 --> 00:04:06.560
a Hello World of the MVC
framework, which

93
00:04:06.560 --> 00:04:08.940
is the to-do list.

94
00:04:08.940 --> 00:04:10.170
Why we do we need offline?

95
00:04:10.170 --> 00:04:13.440
It's a question that's coming
again and again, and I would

96
00:04:13.440 --> 00:04:16.769
just point out that I think the
best answer for that would

97
00:04:16.769 --> 00:04:21.870
be faster is better, and it's
making your app much smoother,

98
00:04:21.870 --> 00:04:22.790
much snappier.

99
00:04:22.790 --> 00:04:24.810
Users will enjoy it
and appreciate it.

100
00:04:24.810 --> 00:04:27.300
And of course, you get the
benefit that your app will

101
00:04:27.300 --> 00:04:30.140
work perfectly when there's no
connection or when there is a

102
00:04:30.140 --> 00:04:31.660
flaky connection.

103
00:04:31.660 --> 00:04:34.400
In our demo later, we'll use
Lawnchair, which is a library

104
00:04:34.400 --> 00:04:37.560
that lets us actually work in
an API that is above the

105
00:04:37.560 --> 00:04:39.620
normal APIs that
HTML5 lets us.

106
00:04:39.620 --> 00:04:41.970
And that's another benefit that
we wanted to show you,

107
00:04:41.970 --> 00:04:44.690
because then later on if you
want to move from, let's say,

108
00:04:44.690 --> 00:04:47.150
local storage or web storage
to IndexedDB,

109
00:04:47.150 --> 00:04:49.144
it's very, very smoothly.

110
00:04:49.144 --> 00:04:53.575
Other APIs that are under our
hands today, and actually in

111
00:04:53.575 --> 00:04:55.450
our toolbox, it's of
course AppCache.

112
00:04:55.450 --> 00:04:58.460
AppCache is letting you save
all the static information

113
00:04:58.460 --> 00:04:59.230
that you need.

114
00:04:59.230 --> 00:05:02.320
So first of all, and foremost,
it would be the HTML,

115
00:05:02.320 --> 00:05:04.350
JavaScript and CSS file
that we need.

116
00:05:04.350 --> 00:05:06.340
Usually it will be one
single-page app.

117
00:05:06.340 --> 00:05:09.890
So it's one HTML file, and
then a bunch of CSS and

118
00:05:09.890 --> 00:05:12.880
JavaScript, but also sound
files and images.

119
00:05:12.880 --> 00:05:16.400
And then for saving our
persistent [? end ?] data, we

120
00:05:16.400 --> 00:05:18.430
could use local storage,
which is a simple key

121
00:05:18.430 --> 00:05:21.470
value API, or IndexedDB.

122
00:05:21.470 --> 00:05:24.210
And today with HTML5 file
API, we could save

123
00:05:24.210 --> 00:05:26.210
binary does as well.

124
00:05:26.210 --> 00:05:28.200
So offline, we touch about it.

125
00:05:28.200 --> 00:05:30.580
I think the main challenge with
offline is to write the

126
00:05:30.580 --> 00:05:31.960
right sync layer.

127
00:05:31.960 --> 00:05:34.200
Because to save the data, we'll
show you it's quite easy

128
00:05:34.200 --> 00:05:35.200
and inefficient.

129
00:05:35.200 --> 00:05:37.250
The sync is the most
problematic way.

130
00:05:37.250 --> 00:05:40.400
How it will work best in your
use case, and how your user

131
00:05:40.400 --> 00:05:43.250
will appreciate the fact, like
we saw in the demo today of

132
00:05:43.250 --> 00:05:46.110
Google Docs, how easy is it to
just notify the user slightly.

133
00:05:46.110 --> 00:05:48.090
They could still be productive,
they could still

134
00:05:48.090 --> 00:05:51.820
work and write their manifesto,
but then when we

135
00:05:51.820 --> 00:05:54.080
have the connection, we're doing
the right thing in terms

136
00:05:54.080 --> 00:05:56.760
of syncing it immediately
to the cloud.

137
00:05:56.760 --> 00:06:00.260
I choose here to show you with
one line of code we could

138
00:06:00.260 --> 00:06:01.860
check exactly, what
is the status?

139
00:06:01.860 --> 00:06:03.260
Do we have connection or not?

140
00:06:03.260 --> 00:06:05.250
And based on that information,
we could

141
00:06:05.250 --> 00:06:07.500
make the right decision.

142
00:06:07.500 --> 00:06:10.340
Another great feature that
[? Paul Kelly and I ?]

143
00:06:10.340 --> 00:06:11.940
work on is Web Intents.

144
00:06:11.940 --> 00:06:15.420
Web Intents basically lets you
have the Intents system that

145
00:06:15.420 --> 00:06:17.910
we saw in Android, and
have it on the web.

146
00:06:17.910 --> 00:06:20.180
And that's, in my humble
opinion, going to change the

147
00:06:20.180 --> 00:06:22.810
world of web apps, and we're
going to see more and more web

148
00:06:22.810 --> 00:06:25.800
apps harnessing their users
with more functionality

149
00:06:25.800 --> 00:06:29.530
without the pain on you, the
developers, to code it against

150
00:06:29.530 --> 00:06:32.560
the vast majority of API that
we see on the web today.

151
00:06:32.560 --> 00:06:36.810
Just imagine the power of
allowing your users to share

152
00:06:36.810 --> 00:06:41.390
anything on their favorite
social networks.

153
00:06:41.390 --> 00:06:43.190
I know that some of you are
thinking, OK Ido, you're

154
00:06:43.190 --> 00:06:47.860
speaking about things 3,000 feet
above, but we have lots

155
00:06:47.860 --> 00:06:51.370
of users that are still using
older browsers that don't have

156
00:06:51.370 --> 00:06:52.880
all the capabilities
and features that

157
00:06:52.880 --> 00:06:54.210
you are talking about.

158
00:06:54.210 --> 00:06:56.550
And just to mention here,
because I know that some of

159
00:06:56.550 --> 00:06:58.830
the guys are more through the
app engine side, and are

160
00:06:58.830 --> 00:07:01.220
working in big organizations
and big enterprises,

161
00:07:01.220 --> 00:07:06.370
organizations, for people that
still have older browsers

162
00:07:06.370 --> 00:07:09.300
under their hands and heads,
they could use

163
00:07:09.300 --> 00:07:10.290
Google Chrome Frame.

164
00:07:10.290 --> 00:07:12.630
It doesn't need any
administrative rights, and

165
00:07:12.630 --> 00:07:15.590
once you install it, you get
every six weeks the greatest

166
00:07:15.590 --> 00:07:18.380
and latest of Chrome, meaning
security, speed, and

167
00:07:18.380 --> 00:07:20.482
simplicity inside IE.

168
00:07:20.482 --> 00:07:25.140
So CSS transition, WebGL, drag
and drop, all the great things

169
00:07:25.140 --> 00:07:28.330
that you want to accomplish in
your web app are there, and

170
00:07:28.330 --> 00:07:29.250
they will stay there.

171
00:07:29.250 --> 00:07:32.360
All you need is one line of
code, one line of meta header,

172
00:07:32.360 --> 00:07:33.280
like it is here.

173
00:07:33.280 --> 00:07:36.970
Or even better, if you have
control of your server, just

174
00:07:36.970 --> 00:07:38.490
change the HTTP header.

175
00:07:38.490 --> 00:07:41.170
And you can choose and play
and tune it to your needs.

176
00:07:41.170 --> 00:07:43.090
If you want just certain
versions of IE,

177
00:07:43.090 --> 00:07:44.600
it will work perfectly.

178
00:07:44.600 --> 00:07:47.960
Now any modern web app--
great web app-- needs

179
00:07:47.960 --> 00:07:49.280
a very strong server.

180
00:07:49.280 --> 00:07:51.840
I guess it's just the right time
to ask Brad what's new in

181
00:07:51.840 --> 00:07:52.620
that kingdom.

182
00:07:52.620 --> 00:07:53.960
BRAD ABRAMS: Absolutely,
thanks Ido.

183
00:07:53.960 --> 00:07:57.490
When I talk to web developers,
most of them are very

184
00:07:57.490 --> 00:07:59.900
interested in a lot of the
client-side functionality that

185
00:07:59.900 --> 00:08:01.270
Ido just talked about.

186
00:08:01.270 --> 00:08:05.400
Building rich, interactive
experiences on the client is

187
00:08:05.400 --> 00:08:07.950
the way to sort of focus on your
users and make sure those

188
00:08:07.950 --> 00:08:09.640
needs are met.

189
00:08:09.640 --> 00:08:11.900
And so the last thing you want
to have to worry about is

190
00:08:11.900 --> 00:08:13.930
complexities related
to the server.

191
00:08:13.930 --> 00:08:17.250
You'd like to just have that
taken care for you, but we do

192
00:08:17.250 --> 00:08:18.450
need server environments.

193
00:08:18.450 --> 00:08:21.630
You have to serve the HTML,
CSS and JavaScript.

194
00:08:21.630 --> 00:08:25.350
You, a lot of times, can offload
expensive computations

195
00:08:25.350 --> 00:08:27.390
to the server and
do those there.

196
00:08:27.390 --> 00:08:30.440
You can do sharing and
collaboration on the server.

197
00:08:30.440 --> 00:08:32.929
But then there's a bunch of
problems that you have as a

198
00:08:32.929 --> 00:08:35.080
web developer when you're
dealing with the server

199
00:08:35.080 --> 00:08:35.850
environment.

200
00:08:35.850 --> 00:08:37.789
Where are you going
to host that?

201
00:08:37.789 --> 00:08:41.010
Are you going to maintain
your own machine images?

202
00:08:41.010 --> 00:08:43.450
What if Linux has
a security hole?

203
00:08:43.450 --> 00:08:44.540
Are you going to patch that?

204
00:08:44.540 --> 00:08:46.460
Are you going to keep up with
all that infrastructure that

205
00:08:46.460 --> 00:08:48.220
needs to be done?

206
00:08:48.220 --> 00:08:50.830
And then specifically, when
you're talking about the new

207
00:08:50.830 --> 00:08:53.670
sort of architecture, when using
an MVC pattern on the

208
00:08:53.670 --> 00:08:57.240
client, communicating to the
server via rest APIs, well,

209
00:08:57.240 --> 00:08:59.510
how are you going to do
that serialization?

210
00:08:59.510 --> 00:09:01.620
How are you going to
do authentication?

211
00:09:01.620 --> 00:09:04.700
How are you going to do the
things we call the OAuth dance

212
00:09:04.700 --> 00:09:08.300
to get users' credentials
and permissions?

213
00:09:08.300 --> 00:09:12.790
So as you might guess, I have an
answer for you, and that's

214
00:09:12.790 --> 00:09:13.460
App Engine.

215
00:09:13.460 --> 00:09:15.660
So App Engine's been around
for several years now.

216
00:09:15.660 --> 00:09:19.280
It's a proven technology for
building web apps and these

217
00:09:19.280 --> 00:09:20.650
modern web apps.

218
00:09:20.650 --> 00:09:23.250
With App Engine, it's very easy
to build and manage and

219
00:09:23.250 --> 00:09:24.780
run your applications.

220
00:09:24.780 --> 00:09:28.550
You write code in Java or Python
or Go and upload it

221
00:09:28.550 --> 00:09:31.340
into our data centers, and
Google runs it in our large

222
00:09:31.340 --> 00:09:33.630
distributed data centers
all over the world.

223
00:09:33.630 --> 00:09:39.320
Our SRE team keeps your
applications up.

224
00:09:39.320 --> 00:09:43.500
Earlier today, we launched
Google Cloud Endpoints.

225
00:09:43.500 --> 00:09:47.130
And Google Cloud Endpoints makes
it significantly easier

226
00:09:47.130 --> 00:09:51.860
to build web APIs, to build
REST-based endpoints that you

227
00:09:51.860 --> 00:09:54.230
expose from your App
Engine app and

228
00:09:54.230 --> 00:09:56.580
consume that in clients.

229
00:09:56.580 --> 00:10:00.980
So you can write your
application in App Engine,

230
00:10:00.980 --> 00:10:04.780
expose these endpoints via
standard REST-based

231
00:10:04.780 --> 00:10:05.700
interfaces.

232
00:10:05.700 --> 00:10:09.350
We handle the serialization and
the authentication, and we

233
00:10:09.350 --> 00:10:14.180
give you strongly typed clients
for Java, for Android,

234
00:10:14.180 --> 00:10:18.430
Objective C, for iOS, and what
we'll be talking about here is

235
00:10:18.430 --> 00:10:22.230
a modern JavaScript client
library that you can go use.

236
00:10:22.230 --> 00:10:24.830
And what's great is that all
this technology that we're

237
00:10:24.830 --> 00:10:28.290
using here with for cloud
endpoints is built on the same

238
00:10:28.290 --> 00:10:29.070
technology.

239
00:10:29.070 --> 00:10:32.910
It's the same stack that Google
uses to do billions of

240
00:10:32.910 --> 00:10:38.010
transactions with our Google
APIs, like the Google+ APIs or

241
00:10:38.010 --> 00:10:40.870
many of the other Google APIs
that are out there.

242
00:10:40.870 --> 00:10:42.990
So you're using the exact
same infrastructure and

243
00:10:42.990 --> 00:10:44.240
tools, as we'll see.

244
00:10:44.240 --> 00:10:46.510
245
00:10:46.510 --> 00:10:50.210
Ido and I were sort of
thinking about what--

246
00:10:50.210 --> 00:10:51.040
I don't want to give it away.

247
00:10:51.040 --> 00:10:54.800
We were thinking about what we
had in common, what sort of

248
00:10:54.800 --> 00:10:55.860
demo we should do.

249
00:10:55.860 --> 00:10:57.490
We thought the best way to
explain this to you would be

250
00:10:57.490 --> 00:10:58.140
to do a demo.

251
00:10:58.140 --> 00:10:59.995
So we thought about what we
would have in common, and we

252
00:10:59.995 --> 00:11:02.770
thought what you in the audience
might appreciate.

253
00:11:02.770 --> 00:11:05.650
So we sort of look at the
demographics of I/O, and we

254
00:11:05.650 --> 00:11:06.540
came up with a plan.

255
00:11:06.540 --> 00:11:08.790
And we decided we would
write an app to

256
00:11:08.790 --> 00:11:10.870
rate and review beers.

257
00:11:10.870 --> 00:11:15.470
So this is the Birra
sample application.

258
00:11:15.470 --> 00:11:17.370
Actually, if it takes off,
you won't Ido and

259
00:11:17.370 --> 00:11:18.930
I at I/O next year.

260
00:11:18.930 --> 00:11:20.750
So we'll do our own little
start up for

261
00:11:20.750 --> 00:11:23.370
beer rating and reviewing.

262
00:11:23.370 --> 00:11:26.910
So it lets you enter beers
from all over the world.

263
00:11:26.910 --> 00:11:29.290
You can review those beers,
you can comment on them.

264
00:11:29.290 --> 00:11:32.000
And what we're going to for the
next, say, 45 minutes or

265
00:11:32.000 --> 00:11:35.520
so is build out this application
right here in

266
00:11:35.520 --> 00:11:37.120
front of you, so you can
see how it goes.

267
00:11:37.120 --> 00:11:40.820
So let's make sure we
understand, before we get

268
00:11:40.820 --> 00:11:43.130
started, the architecture
of this app.

269
00:11:43.130 --> 00:11:46.710
So the beer application,
start with beer.

270
00:11:46.710 --> 00:11:49.310
We're going to store the
beers, or at least the

271
00:11:49.310 --> 00:11:53.480
metadata about the beers, in the
largest NoSQL data store

272
00:11:53.480 --> 00:11:56.850
in production in the world,
and that's in App Engine's

273
00:11:56.850 --> 00:11:59.140
NoSQL data store.

274
00:11:59.140 --> 00:12:02.720
And then we're going to do some
application logic in App

275
00:12:02.720 --> 00:12:05.930
Engine to do things like
sorting, filtering of those

276
00:12:05.930 --> 00:12:08.600
beers, and we'll show you
about how that works.

277
00:12:08.600 --> 00:12:11.640
And then we're going to expose
that over endpoints so that

278
00:12:11.640 --> 00:12:14.340
there's a REST-based
interface for that.

279
00:12:14.340 --> 00:12:18.330
And then Ido's going to consume
that in a modern

280
00:12:18.330 --> 00:12:20.550
JavaScript client
using offline,

281
00:12:20.550 --> 00:12:22.790
using the MVC framework.

282
00:12:22.790 --> 00:12:23.860
OK so it sounds good?

283
00:12:23.860 --> 00:12:25.410
Should we get started?

284
00:12:25.410 --> 00:12:28.090
OK, so let's get started here.

285
00:12:28.090 --> 00:12:30.130
I'm going to start by building
out the server side of the

286
00:12:30.130 --> 00:12:32.090
application.

287
00:12:32.090 --> 00:12:35.170
And what I have installed on
my Mac here is the standard

288
00:12:35.170 --> 00:12:38.470
version of Eclipse, and then I
have the version of Google

289
00:12:38.470 --> 00:12:42.040
Plug-in for Eclipse that just
shipped yesterday, so brand

290
00:12:42.040 --> 00:12:44.840
new bits, and we're going to
use that to start out.

291
00:12:44.840 --> 00:12:47.680
So I'll just say New
Application.

292
00:12:47.680 --> 00:12:49.730
We're going to call
this Birra.

293
00:12:49.730 --> 00:12:51.600
Anybody know why it's
called Birra?

294
00:12:51.600 --> 00:12:52.360
AUDIENCE: It's Hebrew.

295
00:12:52.360 --> 00:12:53.620
BRAD ABRAMS: Hebrew.

296
00:12:53.620 --> 00:12:55.490
Hebrew for beer, yep.

297
00:12:55.490 --> 00:12:58.180
And we're not to use GWT for
this, but we are going to use

298
00:12:58.180 --> 00:12:59.880
App Engine.

299
00:12:59.880 --> 00:13:03.450
And this will create a
scaffolding application for us

300
00:13:03.450 --> 00:13:06.060
to have us get started.

301
00:13:06.060 --> 00:13:06.680
And here it is.

302
00:13:06.680 --> 00:13:09.120
Again, this is the server
side of the code.

303
00:13:09.120 --> 00:13:11.020
And what we're going to
do is come in here

304
00:13:11.020 --> 00:13:12.940
and add a new class.

305
00:13:12.940 --> 00:13:15.900
And as I mentioned, whenever you
start with a beer review

306
00:13:15.900 --> 00:13:18.690
class application, you've
gotta start with beer.

307
00:13:18.690 --> 00:13:21.730
It's central to our application,
and it was

308
00:13:21.730 --> 00:13:25.180
central to the development
of this demo as well.

309
00:13:25.180 --> 00:13:27.530
So we have this beer class,
and this is a

310
00:13:27.530 --> 00:13:29.580
plain old Java object.

311
00:13:29.580 --> 00:13:31.950
Now we need to think, what
is the data about

312
00:13:31.950 --> 00:13:33.960
beer we want to store?

313
00:13:33.960 --> 00:13:36.640
So what do you want to
store about beer?

314
00:13:36.640 --> 00:13:38.020
Any thoughts from the
audience here?

315
00:13:38.020 --> 00:13:39.361
AUDIENCE: [INAUDIBLE].

316
00:13:39.361 --> 00:13:41.370
BRAD ABRAMS: Oh, the
alcohol content.

317
00:13:41.370 --> 00:13:42.620
That's good.

318
00:13:42.620 --> 00:13:44.510
319
00:13:44.510 --> 00:13:45.990
Alcohol content.

320
00:13:45.990 --> 00:13:46.980
IDO GREEN: Maybe name.

321
00:13:46.980 --> 00:13:48.560
BRAD ABRAMS: The name.

322
00:13:48.560 --> 00:13:49.320
That's good.

323
00:13:49.320 --> 00:13:50.110
AUDIENCE: Color.

324
00:13:50.110 --> 00:13:53.020
BRAD ABRAMS: The color
of the beer.

325
00:13:53.020 --> 00:13:54.802
That's pretty good.

326
00:13:54.802 --> 00:13:55.634
AUDIENCE: [INAUDIBLE].

327
00:13:55.634 --> 00:14:01.130
BRAD ABRAMS: OK, yeah, we need
a double for the price.

328
00:14:01.130 --> 00:14:05.290
So I cheated, and ahead of time,
I had a version of the

329
00:14:05.290 --> 00:14:07.790
beer that actually works
with the rest the demo.

330
00:14:07.790 --> 00:14:10.580
331
00:14:10.580 --> 00:14:14.240
But it is still a plain
old Java object.

332
00:14:14.240 --> 00:14:18.340
So what I've defined is just
a set of properties that we

333
00:14:18.340 --> 00:14:21.760
have, a set of regular fields,
and then just getters and

334
00:14:21.760 --> 00:14:22.470
setters for that.

335
00:14:22.470 --> 00:14:25.650
So there's nothing funny here.

336
00:14:25.650 --> 00:14:28.560
Now what we need to do is teach
App Engine how to store

337
00:14:28.560 --> 00:14:29.230
this object.

338
00:14:29.230 --> 00:14:31.220
Right now, it's just a
plain Java object.

339
00:14:31.220 --> 00:14:33.910
We need to teach App Engine how
to store that, and to do

340
00:14:33.910 --> 00:14:39.730
that we're going to use the
old tried and true JDO.

341
00:14:39.730 --> 00:14:42.810
It's been around forever,
but it's effective.

342
00:14:42.810 --> 00:14:44.910
Everything I'm going to show
you, though, works with any

343
00:14:44.910 --> 00:14:46.550
persistence layer you'd
like to use.

344
00:14:46.550 --> 00:14:48.920
You can use cloud endpoints,
however you want.

345
00:14:48.920 --> 00:14:53.090
This just happens to work
well for the tool.

346
00:14:53.090 --> 00:14:56.310
So we've made it available
with JDO, and

347
00:14:56.310 --> 00:14:57.960
now we have our object.

348
00:14:57.960 --> 00:15:01.540
Now what we need to do is expose
this in a way that Ido

349
00:15:01.540 --> 00:15:03.880
can consume from his client.

350
00:15:03.880 --> 00:15:06.980
So to do that, we'll show off
our first new feature of this,

351
00:15:06.980 --> 00:15:10.310
which is Generate Cloud
Endpoint Class.

352
00:15:10.310 --> 00:15:13.030
So we'll click on that,
and hopefully--

353
00:15:13.030 --> 00:15:13.650
yeah, there it goes--

354
00:15:13.650 --> 00:15:18.420
we'll generate a beer
endpoints class.

355
00:15:18.420 --> 00:15:22.620
And in this class, we have this
@API attribute on it.

356
00:15:22.620 --> 00:15:26.830
The @API attribute indicates
that all the public methods on

357
00:15:26.830 --> 00:15:30.220
this class will be exposed
as REST endpoints.

358
00:15:30.220 --> 00:15:33.600
And we'll see how the URL for
that looks in a second.

359
00:15:33.600 --> 00:15:35.850
And we can change the name of
that, which will show up on

360
00:15:35.850 --> 00:15:38.250
the URL, to Birra,
so it matches.

361
00:15:38.250 --> 00:15:41.690
And let's just take a brief
look at what we have here.

362
00:15:41.690 --> 00:15:44.090
We have a method to list
all the beers that

363
00:15:44.090 --> 00:15:45.260
are in the data store.

364
00:15:45.260 --> 00:15:47.840
Now we've given you some
scaffolding code just to get

365
00:15:47.840 --> 00:15:49.210
started with that.

366
00:15:49.210 --> 00:15:51.410
And over the course of this
demo, we'll go through and

367
00:15:51.410 --> 00:15:52.250
modify that.

368
00:15:52.250 --> 00:15:55.360
And then when you write your
real apps later tonight, or

369
00:15:55.360 --> 00:15:59.240
maybe next week, you'll be
modifying it even more.

370
00:15:59.240 --> 00:16:01.795
So it basically just iterates
through the data store and

371
00:16:01.795 --> 00:16:03.110
returns all the results.

372
00:16:03.110 --> 00:16:05.600
Notice I don't have to deal with
any serialization logic

373
00:16:05.600 --> 00:16:06.730
or authentication logic.

374
00:16:06.730 --> 00:16:08.210
All of that is going
to be taken care of

375
00:16:08.210 --> 00:16:10.580
for us by the framework.

376
00:16:10.580 --> 00:16:14.920
Then, same thing, I can get a
particular beer by its ID.

377
00:16:14.920 --> 00:16:16.630
That code is generated for us.

378
00:16:16.630 --> 00:16:18.310
I can insert a beer.

379
00:16:18.310 --> 00:16:21.160
And notice this is an
HTTP POST method.

380
00:16:21.160 --> 00:16:24.130
For you people that are REST
heads, and you're kind of into

381
00:16:24.130 --> 00:16:27.100
the REST pattern and making sure
that works, we've tried

382
00:16:27.100 --> 00:16:30.030
to adhere to it nicely here, and
you'll see you have a lot

383
00:16:30.030 --> 00:16:31.430
of control as we go through.

384
00:16:31.430 --> 00:16:33.760
But one of the things we've done
is expose this as a POST

385
00:16:33.760 --> 00:16:35.530
method because it's insert.

386
00:16:35.530 --> 00:16:38.310
And then UPDATE is a put,
same sort of thing.

387
00:16:38.310 --> 00:16:41.170
And then of course we have
this DELETE method here.

388
00:16:41.170 --> 00:16:42.010
IDO GREEN: Remove.

389
00:16:42.010 --> 00:16:43.450
BRAD ABRAMS: Remove, ah, yes.

390
00:16:43.450 --> 00:16:45.190
IDO GREEN: I would really,
really encourage you to put it

391
00:16:45.190 --> 00:16:47.350
as a DELETE, because it's not
only me, but the community

392
00:16:47.350 --> 00:16:49.350
would love to have
DELETE here.

393
00:16:49.350 --> 00:16:50.780
It will fit perfectly.

394
00:16:50.780 --> 00:16:53.640
BRAD ABRAMS: Yes, so the problem
is this looks so nice

395
00:16:53.640 --> 00:16:56.250
in my Java code, I don't want
to mess with my Java code.

396
00:16:56.250 --> 00:16:59.180
But I want to change what it
looks like for him on the

397
00:16:59.180 --> 00:17:00.440
JavaScript side.

398
00:17:00.440 --> 00:17:03.370
And so what we have, I'm going
to introduce you to this

399
00:17:03.370 --> 00:17:05.079
attribute we'll become
very familiar

400
00:17:05.079 --> 00:17:07.460
with, the @API attribute.

401
00:17:07.460 --> 00:17:11.690
And what it does is it gives us
a way to customize the REST

402
00:17:11.690 --> 00:17:13.990
endpoint that's generated
from this method.

403
00:17:13.990 --> 00:17:18.119
So in this case, I can change
the name to be beers.delete,

404
00:17:18.119 --> 00:17:22.339
and that'll give us a nice
experience in the Java, IOS,

405
00:17:22.339 --> 00:17:25.520
or in our case, JavaScript
client that this generates.

406
00:17:25.520 --> 00:17:28.060
OK, so I think we have a
basic interface here.

407
00:17:28.060 --> 00:17:30.210
Let's just do some
testing of it.

408
00:17:30.210 --> 00:17:33.380
So I spun up the local
development time server, so

409
00:17:33.380 --> 00:17:35.650
it's essentially a baby version
of App Engine running

410
00:17:35.650 --> 00:17:37.550
on my laptop here.

411
00:17:37.550 --> 00:17:41.500
And then what I'm going to do
is use every web developer's

412
00:17:41.500 --> 00:17:44.220
favorite tool, Curl.

413
00:17:44.220 --> 00:17:46.640
We're going to test this with
plain old Curl, just to make

414
00:17:46.640 --> 00:17:49.100
sure everything is working
nicely before we

415
00:17:49.100 --> 00:17:50.760
hand it off to Ido.

416
00:17:50.760 --> 00:17:53.060
So the first thing you'll
notice, if you're an App

417
00:17:53.060 --> 00:17:57.320
Engine geek, you'll notice that
_ah, that's the reserve

418
00:17:57.320 --> 00:17:58.930
namespace in App Engine.

419
00:17:58.930 --> 00:18:02.020
So none of the APIs you're
defining here will interfere

420
00:18:02.020 --> 00:18:04.110
with the rest of your web
applications, because we've

421
00:18:04.110 --> 00:18:06.360
put them in the reserve
namespace.

422
00:18:06.360 --> 00:18:08.790
Then we put them in
APIs and Birra.

423
00:18:08.790 --> 00:18:11.990
If you recall, Birra was the
attribute that I put on

424
00:18:11.990 --> 00:18:13.240
earlier, was there.

425
00:18:13.240 --> 00:18:16.310
And then the name of
the object is beer.

426
00:18:16.310 --> 00:18:19.630
And we just do an HTTP get to
it, and it returns all the

427
00:18:19.630 --> 00:18:22.250
beers in the data store,
which is none.

428
00:18:22.250 --> 00:18:25.370
And notice that the return
is a nicely formatted

429
00:18:25.370 --> 00:18:27.260
JSON object for us.

430
00:18:27.260 --> 00:18:31.800
So let's look at what it would
take to add something to that.

431
00:18:31.800 --> 00:18:36.280
So let me grab this Curl.

432
00:18:36.280 --> 00:18:40.220
So we'll do HTTP post, and
put a new beer in here.

433
00:18:40.220 --> 00:18:41.950
And the beer name will be Bud.

434
00:18:41.950 --> 00:18:44.320
That's my brother's favorite
beer, so I'm trying not to

435
00:18:44.320 --> 00:18:45.010
give him a hard time.

436
00:18:45.010 --> 00:18:46.020
IDO GREEN: Be patient.

437
00:18:46.020 --> 00:18:47.560
BRAD ABRAMS: Patient
with him, yes.

438
00:18:47.560 --> 00:18:51.860
So what we've seen now is we did
a put, HTTP put, got that

439
00:18:51.860 --> 00:18:53.100
beer in the database.

440
00:18:53.100 --> 00:18:56.880
We got an ID for it, ID 1, and
of course all the other fields

441
00:18:56.880 --> 00:18:58.150
are null, but we get a

442
00:18:58.150 --> 00:19:00.650
well-formatted JSON object here.

443
00:19:00.650 --> 00:19:04.820
Now what we can do is go back
and look, and the data story

444
00:19:04.820 --> 00:19:07.050
isn't quite refreshed yet,
but there it is.

445
00:19:07.050 --> 00:19:09.910
446
00:19:09.910 --> 00:19:13.800
It returns as a list, and then
in true REST style, I can just

447
00:19:13.800 --> 00:19:17.690
put a URL parameter passing the
beer ID, and of course,

448
00:19:17.690 --> 00:19:18.320
there it is.

449
00:19:18.320 --> 00:19:19.830
So no surprises there.

450
00:19:19.830 --> 00:19:22.800
So that looks pretty good, I
think we're almost ready to

451
00:19:22.800 --> 00:19:23.490
hand it off.

452
00:19:23.490 --> 00:19:27.400
But I thought what I'd show
is a little bit more--

453
00:19:27.400 --> 00:19:30.970
right before this talk, I went
and deployed one of these to

454
00:19:30.970 --> 00:19:32.560
an endpoint.

455
00:19:32.560 --> 00:19:34.720
And I just wanted to show you a
little bit about some of the

456
00:19:34.720 --> 00:19:36.420
infrastructure that's
there for you.

457
00:19:36.420 --> 00:19:42.380
So if you go to _ah API, and
then hit the discovery point,

458
00:19:42.380 --> 00:19:46.200
for any of your App Engine apps
that are using endpoints,

459
00:19:46.200 --> 00:19:48.920
we provide a discovery
endpoint for that.

460
00:19:48.920 --> 00:19:52.350
And that discovery endpoint
gives you metadata about, in

461
00:19:52.350 --> 00:19:55.180
this case, all of the APIs that
are available on that App

462
00:19:55.180 --> 00:19:56.310
Engine app.

463
00:19:56.310 --> 00:19:57.660
So we have two.

464
00:19:57.660 --> 00:20:00.130
We have the discovery one, and
of course we ate our own dog

465
00:20:00.130 --> 00:20:03.050
food and used cloud endpoints
to serve the discovery.

466
00:20:03.050 --> 00:20:04.820
And then we have
our Birra one.

467
00:20:04.820 --> 00:20:07.640
So let's take a look at Birra,
and we bring that up.

468
00:20:07.640 --> 00:20:12.726
And if you look at this
endpoint, you'll see a full

469
00:20:12.726 --> 00:20:16.780
description of all the types,
of all the methods and

470
00:20:16.780 --> 00:20:19.070
operations that are
part of this.

471
00:20:19.070 --> 00:20:24.190
So this is a handy tool to debug
and use, but it's also

472
00:20:24.190 --> 00:20:26.460
what we use to create the
strongly typed client

473
00:20:26.460 --> 00:20:29.380
libraries in all the different
languages.

474
00:20:29.380 --> 00:20:33.620
In fact, as I mentioned, this
uses the same infrastructure

475
00:20:33.620 --> 00:20:37.110
that the rest of Google's
APIs use.

476
00:20:37.110 --> 00:20:39.830
And because we use that same
infrastructure, we're able to

477
00:20:39.830 --> 00:20:42.020
use tools like API Explorer.

478
00:20:42.020 --> 00:20:45.720
So if you do slash APIs
Explorer, it'll give you a

479
00:20:45.720 --> 00:20:48.030
nice interactive view
of your API.

480
00:20:48.030 --> 00:20:51.350
So those are all the
APIs, nicely named.

481
00:20:51.350 --> 00:20:54.390
And then I can click on them,
and I can execute that API

482
00:20:54.390 --> 00:20:56.600
right here from this interactive
experience right

483
00:20:56.600 --> 00:20:58.930
in the browser, without having
to write a client.

484
00:20:58.930 --> 00:21:01.815
So in this case, this App Engine
app has to spin up.

485
00:21:01.815 --> 00:21:03.400
But there it is.

486
00:21:03.400 --> 00:21:07.140
And you see a well-formatted get
request and exactly what

487
00:21:07.140 --> 00:21:09.250
the response is supposed
to be.

488
00:21:09.250 --> 00:21:12.030
So as Ido and I were building
out this application, we found

489
00:21:12.030 --> 00:21:15.550
this invaluable tool
we could use.

490
00:21:15.550 --> 00:21:18.240
Because I could deploy an
application, I could test it

491
00:21:18.240 --> 00:21:20.190
independent of his client.

492
00:21:20.190 --> 00:21:20.840
He could work.

493
00:21:20.840 --> 00:21:23.590
When he built his client, he
could play with it, figure out

494
00:21:23.590 --> 00:21:26.550
what exactly the payloads were
supposed to be, and it was

495
00:21:26.550 --> 00:21:27.210
really nice.

496
00:21:27.210 --> 00:21:30.760
It was also nice-- so we could
shift blame between us.

497
00:21:30.760 --> 00:21:33.660
He would often claim it to be
a bug, and I would show that

498
00:21:33.660 --> 00:21:36.470
it works nicely in Explorer,
so we knew

499
00:21:36.470 --> 00:21:37.830
where to put the problem.

500
00:21:37.830 --> 00:21:40.950
And it was equally the other
way, I'll mention.

501
00:21:40.950 --> 00:21:43.200
OK, so that's the
basic Explorer.

502
00:21:43.200 --> 00:21:45.180
I think we're ready for you to
start building our client.

503
00:21:45.180 --> 00:21:48.160
IDO GREEN: Absolutely so as
we all know, in software

504
00:21:48.160 --> 00:21:50.830
development we want to take
small steps and see that we

505
00:21:50.830 --> 00:21:53.430
are on a good path.

506
00:21:53.430 --> 00:21:56.700
So first, there's a very, very
simple, just plain vanilla

507
00:21:56.700 --> 00:21:57.670
JavaScript example.

508
00:21:57.670 --> 00:22:01.270
So as you can see here, I'm
having this URL, and as Brad

509
00:22:01.270 --> 00:22:06.400
mentioned, on our new service,
I want a certain version.

510
00:22:06.400 --> 00:22:10.310
And here, this simple AJAX, you
see, I just get a payload

511
00:22:10.310 --> 00:22:11.870
of the list of beers.

512
00:22:11.870 --> 00:22:14.550
Let's see how does it look.

513
00:22:14.550 --> 00:22:15.160
Oops.

514
00:22:15.160 --> 00:22:16.250
BRAD ABRAMS: Oh, did
I not switch you?

515
00:22:16.250 --> 00:22:17.460
I'm sorry.

516
00:22:17.460 --> 00:22:18.970
Failing on my Java already.

517
00:22:18.970 --> 00:22:22.760
IDO GREEN: Let's see again,
how does it look?

518
00:22:22.760 --> 00:22:24.320
Yeah, so we got the
list of beers.

519
00:22:24.320 --> 00:22:27.250
What I said before, and you
couldn't see, this is the

520
00:22:27.250 --> 00:22:29.120
simple endpoint that I'm
calling, and it's plain

521
00:22:29.120 --> 00:22:33.410
vanilla JavaScript, so it's
simple AJAX code.

522
00:22:33.410 --> 00:22:36.420
So as you can see and imagine,
you could consume it and walk

523
00:22:36.420 --> 00:22:38.480
with it, and it's
good and simple.

524
00:22:38.480 --> 00:22:41.870
However, we have another, even
better thing, and that's

525
00:22:41.870 --> 00:22:45.080
Google API JavaScript library,
which actually takes some of

526
00:22:45.080 --> 00:22:47.830
the load and gives you a better
API to work with when

527
00:22:47.830 --> 00:22:49.350
you're working in the client.

528
00:22:49.350 --> 00:22:52.090
And here all we need to do, as
you can see, is put the script

529
00:22:52.090 --> 00:22:54.790
tag and load it asynchronously,
and of course

530
00:22:54.790 --> 00:22:57.530
giving it a call back, so when
it will be loaded, it will run

531
00:22:57.530 --> 00:23:00.890
our case of load API.

532
00:23:00.890 --> 00:23:05.040
We could set client ID, API
ID, et cetera, and load

533
00:23:05.040 --> 00:23:05.950
several APIs.

534
00:23:05.950 --> 00:23:08.250
In our case, we'll keep it
simple, but you can imagine

535
00:23:08.250 --> 00:23:10.520
how you could extend
it and build a big

536
00:23:10.520 --> 00:23:11.720
application with it.

537
00:23:11.720 --> 00:23:14.650
When we're getting the beers, we
have this nice API, and if

538
00:23:14.650 --> 00:23:17.820
you remember before, when Brad
was making those little

539
00:23:17.820 --> 00:23:21.070
changes that make our life
easier and more readable, here

540
00:23:21.070 --> 00:23:23.300
we're just calling the
exact same endpoints.

541
00:23:23.300 --> 00:23:26.070
And we're getting the
same results.

542
00:23:26.070 --> 00:23:30.180
Now, we've built this small test
page just so you'll have

543
00:23:30.180 --> 00:23:32.100
a sense of how the code
looks like, and you

544
00:23:32.100 --> 00:23:33.040
can play with it.

545
00:23:33.040 --> 00:23:35.480
I will just mention that all the
code and all the examples

546
00:23:35.480 --> 00:23:38.020
that we're showing you are on
GitHub, and we'll put the

547
00:23:38.020 --> 00:23:41.000
links after the talk so you
could take it, fork it, work

548
00:23:41.000 --> 00:23:44.050
with it, and join our startup
later, right?

549
00:23:44.050 --> 00:23:46.170
So just feel free, if we're
running really fast on

550
00:23:46.170 --> 00:23:49.210
examples, you'll be able to tap
into them later and just

551
00:23:49.210 --> 00:23:52.100
work with them more
thoroughly.

552
00:23:52.100 --> 00:23:55.230
So let's see the example of
just showing the list of

553
00:23:55.230 --> 00:23:57.210
beers, so let's work
here as well.

554
00:23:57.210 --> 00:24:00.040
The code of it is extremely
simple.

555
00:24:00.040 --> 00:24:05.980
As we saw before, we we're just
running this entry point,

556
00:24:05.980 --> 00:24:07.590
and we're showing the
list of beer.

557
00:24:07.590 --> 00:24:09.290
Let's see how we could--

558
00:24:09.290 --> 00:24:12.980
559
00:24:12.980 --> 00:24:14.640
What we're doing when we're
saving, when we're adding a

560
00:24:14.640 --> 00:24:17.910
new beer, Basically it's just
boilerplate code to fetch the

561
00:24:17.910 --> 00:24:20.210
information from the dialog
that will pop up

562
00:24:20.210 --> 00:24:21.710
and call the insert.

563
00:24:21.710 --> 00:24:24.760
In our case, we know it's an
insert when we don't have any

564
00:24:24.760 --> 00:24:27.300
beer ID, because we want the
server to make a unique ID for

565
00:24:27.300 --> 00:24:28.390
each and every beer.

566
00:24:28.390 --> 00:24:31.420
If we got a beer ID, we're just
calling it an update.

567
00:24:31.420 --> 00:24:34.585
Let's see how does it look like
on the amazing test page

568
00:24:34.585 --> 00:24:35.830
that we did.

569
00:24:35.830 --> 00:24:39.200
We'll close it so we'll have
a bit of real estate.

570
00:24:39.200 --> 00:24:42.990
Let's try to add the new beer,
maybe because I have a good

571
00:24:42.990 --> 00:24:44.240
friend from Australia.

572
00:24:44.240 --> 00:24:46.940
573
00:24:46.940 --> 00:24:49.510
And another nice functionality
that we'll look at in the code

574
00:24:49.510 --> 00:24:58.820
in a second is the ability to
take the little image here and

575
00:24:58.820 --> 00:25:00.480
just drag and drop it.

576
00:25:00.480 --> 00:25:03.090
And of course you can see the
geo information that we just

577
00:25:03.090 --> 00:25:06.000
got the information
from our browser.

578
00:25:06.000 --> 00:25:07.065
Let's save it.

579
00:25:07.065 --> 00:25:08.890
We got the confirmation.

580
00:25:08.890 --> 00:25:12.940
Now we could take this just to
make sure it's been saved in

581
00:25:12.940 --> 00:25:14.820
our production.

582
00:25:14.820 --> 00:25:16.920
And sure enough, it is.

583
00:25:16.920 --> 00:25:20.020
And of course, we
could remove it.

584
00:25:20.020 --> 00:25:22.340
We're getting the answer that is
was removed, and now if we

585
00:25:22.340 --> 00:25:24.620
try to fetch it, we're
getting nothing.

586
00:25:24.620 --> 00:25:29.060
So we saw, basically, the crude
operations that any app

587
00:25:29.060 --> 00:25:30.990
will have to deal with.

588
00:25:30.990 --> 00:25:33.810
It's very, very simple and
very easy to achieve.

589
00:25:33.810 --> 00:25:39.200
I will just show you
real quick how.

590
00:25:39.200 --> 00:25:42.300
So we saw the insert, we saw the
update, and this is what

591
00:25:42.300 --> 00:25:44.790
we're doing when we get
the response back.

592
00:25:44.790 --> 00:25:47.300
We'll get the response back in
a JSON format, so if we'll

593
00:25:47.300 --> 00:25:49.410
have arrows, we'll know how to
handle them and notify the

594
00:25:49.410 --> 00:25:52.690
user what we need to
do in that case.

595
00:25:52.690 --> 00:25:55.600
I think that we have the basic
operations, but with all these

596
00:25:55.600 --> 00:25:58.100
social movements, maybe we'll
let our friends have some

597
00:25:58.100 --> 00:25:59.140
comments on the Birra ranking.

598
00:25:59.140 --> 00:26:00.990
BRAD ABRAMS: Yes, comments.

599
00:26:00.990 --> 00:26:01.590
Awesome.

600
00:26:01.590 --> 00:26:03.980
You know, client guys always
want more features.

601
00:26:03.980 --> 00:26:04.920
Have you noticed that?

602
00:26:04.920 --> 00:26:06.480
IDO GREEN: Trying.

603
00:26:06.480 --> 00:26:07.240
BRAD ABRAMS: OK, I'm up.

604
00:26:07.240 --> 00:26:10.850
So let's go through and
see how you would add

605
00:26:10.850 --> 00:26:12.050
comments to this app.

606
00:26:12.050 --> 00:26:13.390
So we've got beers.

607
00:26:13.390 --> 00:26:15.670
I think we should start with
comments exactly where we did

608
00:26:15.670 --> 00:26:16.550
with beers.

609
00:26:16.550 --> 00:26:20.540
We'll just add a new class
called comment, and then it's

610
00:26:20.540 --> 00:26:23.140
the same story we saw before.

611
00:26:23.140 --> 00:26:27.500
We'll go ahead and define a
plain old Java object and then

612
00:26:27.500 --> 00:26:29.790
annotate it with the
JDO attributes.

613
00:26:29.790 --> 00:26:32.620
And here I just have an ID for
this, the user that made the

614
00:26:32.620 --> 00:26:36.250
comment, when they made it,
the comment itself.

615
00:26:36.250 --> 00:26:39.530
And I'm using the beer ID.

616
00:26:39.530 --> 00:26:41.450
So this is effectively
a foreign key.

617
00:26:41.450 --> 00:26:44.140
It's which beer is
this comment for?

618
00:26:44.140 --> 00:26:46.270
And we'll look at that
a little bit later.

619
00:26:46.270 --> 00:26:49.880
OK, so I take this comment,
and I do the same thing.

620
00:26:49.880 --> 00:26:51.410
I generate a cloud
endpoint for it.

621
00:26:51.410 --> 00:26:53.990
So we're going to expose the
same sort of rest interface

622
00:26:53.990 --> 00:26:55.510
here for comments.

623
00:26:55.510 --> 00:26:56.780
So there it is.

624
00:26:56.780 --> 00:26:59.980
And now we're going to change
the name of that to be Birra

625
00:26:59.980 --> 00:27:03.610
so that these sort of are merged
into the same API.

626
00:27:03.610 --> 00:27:06.620
And now, when we look at this
list comments method, well

627
00:27:06.620 --> 00:27:10.210
it's going to list all the
comments in the data store.

628
00:27:10.210 --> 00:27:12.600
But that may not be
what Ido wants.

629
00:27:12.600 --> 00:27:14.790
Ido's probably going to
want a comment for a

630
00:27:14.790 --> 00:27:16.640
particular beer ID, right?

631
00:27:16.640 --> 00:27:21.450
So what we probably want to do
is pass in a beer ID here and

632
00:27:21.450 --> 00:27:24.380
have that beer ID return
the comments only

633
00:27:24.380 --> 00:27:25.720
associated with that.

634
00:27:25.720 --> 00:27:28.040
But we have to figure out how
to make that work for us in

635
00:27:28.040 --> 00:27:29.030
the REST world.

636
00:27:29.030 --> 00:27:33.210
So again, our API method
attribute is

637
00:27:33.210 --> 00:27:33.990
going to be our friend.

638
00:27:33.990 --> 00:27:38.945
So let me just import that
and grab this code.

639
00:27:38.945 --> 00:27:42.640
640
00:27:42.640 --> 00:27:45.660
So what we're going to do here
is we change list comments to

641
00:27:45.660 --> 00:27:47.840
have a parameter
called beer ID.

642
00:27:47.840 --> 00:27:50.220
And notice we customize
the path here.

643
00:27:50.220 --> 00:27:52.850
So I imagine a few of you saw
the path earlier and thought,

644
00:27:52.850 --> 00:27:56.720
oh, no, I hope they're not auto
generating that path.

645
00:27:56.720 --> 00:27:59.940
You have a lot of control over
exactly what the REST

646
00:27:59.940 --> 00:28:02.240
interface looks like, so you can
make it look like the way

647
00:28:02.240 --> 00:28:03.200
you need to.

648
00:28:03.200 --> 00:28:06.060
So in this case, I thought it
made more sense to put the

649
00:28:06.060 --> 00:28:08.590
comments logically
underneath beers.

650
00:28:08.590 --> 00:28:12.080
So beers, the beer ID, and
then show me all the

651
00:28:12.080 --> 00:28:12.900
comments for that.

652
00:28:12.900 --> 00:28:14.960
So that's what I've modeled
for you there.

653
00:28:14.960 --> 00:28:16.970
So we've done that for list.

654
00:28:16.970 --> 00:28:20.060
And then, of course, we need to
change the data store code.

655
00:28:20.060 --> 00:28:21.390
So luckily it's very easy.

656
00:28:21.390 --> 00:28:25.350
We just say beer ID equals and
then the beer ID, and that

657
00:28:25.350 --> 00:28:26.760
will do the filtering for us.

658
00:28:26.760 --> 00:28:29.890
You could imagine lots more rich
logic you could do here.

659
00:28:29.890 --> 00:28:33.770
We need to do a similar thing
for get, so let's go

660
00:28:33.770 --> 00:28:37.670
ahead and do that.

661
00:28:37.670 --> 00:28:40.300
And notice here we're passing
beer ID and the

662
00:28:40.300 --> 00:28:44.830
ID on the REST call.

663
00:28:44.830 --> 00:28:48.470
And then we need to do something
for insert as well.

664
00:28:48.470 --> 00:28:52.970
And then I'll leave the others
to do offline, but there's

665
00:28:52.970 --> 00:28:55.900
just a few just to show you
what it looks like.

666
00:28:55.900 --> 00:28:58.900
So now we'll run it in the debug
server, and we'll take a

667
00:28:58.900 --> 00:29:01.140
look at how we test this.

668
00:29:01.140 --> 00:29:06.400
So I will test it in Curl
as we saw before.

669
00:29:06.400 --> 00:29:08.360
Go ahead and try that, and
again, the data store has to

670
00:29:08.360 --> 00:29:10.110
spin up, so it takes
just a second.

671
00:29:10.110 --> 00:29:12.800
OK, so there are no items,
no comments.

672
00:29:12.800 --> 00:29:14.510
That's what we expected.

673
00:29:14.510 --> 00:29:19.300
And then what I'm going to do
now is add a new comment here

674
00:29:19.300 --> 00:29:20.780
for that beer.

675
00:29:20.780 --> 00:29:25.860
And then we can go back and look
at comments for beer one

676
00:29:25.860 --> 00:29:27.000
and see if there's
any comments.

677
00:29:27.000 --> 00:29:27.920
And there, there is.

678
00:29:27.920 --> 00:29:30.720
And then again in the
REST style I can

679
00:29:30.720 --> 00:29:32.270
do for comment two.

680
00:29:32.270 --> 00:29:33.560
So that looks pretty
good, Ido.

681
00:29:33.560 --> 00:29:34.790
I think you're ready
add comments.

682
00:29:34.790 --> 00:29:37.550
IDO GREEN: Oh yeah, beautiful.

683
00:29:37.550 --> 00:29:40.300
So first, let's see how it looks
when we're trying just

684
00:29:40.300 --> 00:29:48.150
to add a simple comment to a
beer for I/O. And then we're

685
00:29:48.150 --> 00:29:49.720
doing a simple get.

686
00:29:49.720 --> 00:29:51.730
We see all the comments
that we had.

687
00:29:51.730 --> 00:29:54.070
Let's look at the simple
code that does it.

688
00:29:54.070 --> 00:30:03.120
689
00:30:03.120 --> 00:30:05.020
So basically, you could see here
when I'm clicking on the

690
00:30:05.020 --> 00:30:07.630
Save button of the dialog that
I just showed you, I'm

691
00:30:07.630 --> 00:30:10.250
gathering some information from
the user, and I'm getting

692
00:30:10.250 --> 00:30:12.980
some information behind the
scene, like in the case of the

693
00:30:12.980 --> 00:30:14.510
beers, I got the geolocation
here.

694
00:30:14.510 --> 00:30:17.950
I just want to take the exact
time that the user entered,

695
00:30:17.950 --> 00:30:20.470
and you could think about
lots of other use cases.

696
00:30:20.470 --> 00:30:22.040
And then I'm just calling
the endpoint.

697
00:30:22.040 --> 00:30:25.100
Before that, I'm making sure
that I have some nice spinner

698
00:30:25.100 --> 00:30:28.660
to show the users that some
work is being done.

699
00:30:28.660 --> 00:30:32.510
And I'm inserting the beer into
the App Engine, and when

700
00:30:32.510 --> 00:30:35.510
I'm returning the call, I'll
just show, in case of an

701
00:30:35.510 --> 00:30:36.555
error, some alert.

702
00:30:36.555 --> 00:30:38.020
And if everything is
fine, I'm just

703
00:30:38.020 --> 00:30:39.870
showing the list of comments.

704
00:30:39.870 --> 00:30:41.600
So we have comments,
and it's pretty

705
00:30:41.600 --> 00:30:42.840
straightforward, of the beers.

706
00:30:42.840 --> 00:30:46.650
All the heavy handling has been
done for us for free in

707
00:30:46.650 --> 00:30:48.020
the server side.

708
00:30:48.020 --> 00:30:50.430
One thing that I want to show
you, we spoke about offline

709
00:30:50.430 --> 00:30:51.120
capabilities.

710
00:30:51.120 --> 00:30:53.720
How easy is it to achieve,
today, an offline capability

711
00:30:53.720 --> 00:30:57.570
in terms of doing the initial
loading of, let's say, the top

712
00:30:57.570 --> 00:31:01.860
15 beers, and saving them
locally in our browser?

713
00:31:01.860 --> 00:31:04.430
So you can see here that when
I'm loading the API, I had

714
00:31:04.430 --> 00:31:08.650
this commented.

715
00:31:08.650 --> 00:31:10.000
Now I've uncommented it.

716
00:31:10.000 --> 00:31:13.010
Let's try and go over
it real quickly.

717
00:31:13.010 --> 00:31:14.480
Basically, I'm getting
a payload of data,

718
00:31:14.480 --> 00:31:15.980
of items, of beers.

719
00:31:15.980 --> 00:31:18.670
And I'm going on each and every
one of them, and I'm

720
00:31:18.670 --> 00:31:23.670
calling this object that
I defined Birra.db.

721
00:31:23.670 --> 00:31:27.510
What it basically does, it's
extending Lawnchair and giving

722
00:31:27.510 --> 00:31:31.060
us the basic operation that you
will expect any layer, any

723
00:31:31.060 --> 00:31:32.180
DB layer to do.

724
00:31:32.180 --> 00:31:34.180
In our case, it saves beer.

725
00:31:34.180 --> 00:31:39.580
Let's try now to run this
code from scratch.

726
00:31:39.580 --> 00:31:42.770
727
00:31:42.770 --> 00:31:45.230
We'll open the Dev Tools just
to see what's going on,

728
00:31:45.230 --> 00:31:47.340
because there are some really
nice capabilities in Dev Tools

729
00:31:47.340 --> 00:31:51.910
that let you see what's going
on with your app.

730
00:31:51.910 --> 00:31:53.160
Let's load it again.

731
00:31:53.160 --> 00:31:56.480
732
00:31:56.480 --> 00:31:57.920
OK, we've got the beers.

733
00:31:57.920 --> 00:32:00.890
Now what you could do in Dev
Tools, which is pretty cool,

734
00:32:00.890 --> 00:32:02.110
is go to Resources.

735
00:32:02.110 --> 00:32:05.240
And in Resources, you can go to
Local Host, and basically

736
00:32:05.240 --> 00:32:08.790
you can see here that I got all
the beers with the keys.

737
00:32:08.790 --> 00:32:11.390
And Lawnchair actually did the
extra work for me and made

738
00:32:11.390 --> 00:32:13.170
sure that I'll have
indexes here.

739
00:32:13.170 --> 00:32:15.780
So if I want to fetch
a range of beers, it

740
00:32:15.780 --> 00:32:17.490
will be quite quickly.

741
00:32:17.490 --> 00:32:19.580
Another nice thing that you
could see here is that I'm

742
00:32:19.580 --> 00:32:22.060
having a global beer ID in
my test page, and that's

743
00:32:22.060 --> 00:32:24.390
something really useful when
you're doing-- because even

744
00:32:24.390 --> 00:32:26.450
when I'm loading and I'm
wanting to work with a

745
00:32:26.450 --> 00:32:28.910
specific beer, I could do it
quite efficiently, and I don't

746
00:32:28.910 --> 00:32:31.950
need to remember what was the
last ID that I worked with.

747
00:32:31.950 --> 00:32:35.120
So we have the offline
capabilities.

748
00:32:35.120 --> 00:32:37.820
The sync layer will be in the
GitHub repository, so you

749
00:32:37.820 --> 00:32:39.930
could check it out later.

750
00:32:39.930 --> 00:32:43.060
And let's have a quick look
about how the simple code of

751
00:32:43.060 --> 00:32:44.740
Lawnchair looks like.

752
00:32:44.740 --> 00:32:47.610
Basically, we're extending it,
giving it to our own name.

753
00:32:47.610 --> 00:32:50.540
And now you can see that, for
instance, saving, all we need

754
00:32:50.540 --> 00:32:54.740
to do is take the object,
stringify it, because local

755
00:32:54.740 --> 00:32:58.320
search will work with key
value of strings.

756
00:32:58.320 --> 00:33:04.740
And then just run it, and have
in the call back the response

757
00:33:04.740 --> 00:33:05.590
that everything is OK.

758
00:33:05.590 --> 00:33:09.080
If not, of course, we need
to inform it to the user.

759
00:33:09.080 --> 00:33:12.660
What we did with that is that
you all know that the best

760
00:33:12.660 --> 00:33:15.740
practices of software
development told us to have

761
00:33:15.740 --> 00:33:18.460
continuous integration
and unit testing.

762
00:33:18.460 --> 00:33:21.860
And I want to show you a small
example of how we did it in

763
00:33:21.860 --> 00:33:25.510
our small use case of saving
locally the beers.

764
00:33:25.510 --> 00:33:26.600
We created a [? Qedit ?]

765
00:33:26.600 --> 00:33:27.450
page.

766
00:33:27.450 --> 00:33:28.980
It is done for you.

767
00:33:28.980 --> 00:33:31.090
It's letting us know that for
each and every change that

768
00:33:31.090 --> 00:33:34.960
we're doing, which tests are
passing and which are failing.

769
00:33:34.960 --> 00:33:36.750
You'll have it in the GitHub
repository to look at it

770
00:33:36.750 --> 00:33:39.490
later, more thoroughly, but it's
just one of those things

771
00:33:39.490 --> 00:33:42.130
that, up to now, we didn't have
on the client, and now we

772
00:33:42.130 --> 00:33:45.430
could run with all the best
practices on the client, as

773
00:33:45.430 --> 00:33:47.780
well as on the server.

774
00:33:47.780 --> 00:33:49.110
We have offline capabilities.

775
00:33:49.110 --> 00:33:50.780
We spoke about syncing.

776
00:33:50.780 --> 00:33:54.470
In that example I gave-- and I
spoke about 15, 20 beers--

777
00:33:54.470 --> 00:33:56.590
I have a good friend that
drinks quite a bit.

778
00:33:56.590 --> 00:33:59.290
I think if we'll have maybe
pagination, it will be--

779
00:33:59.290 --> 00:34:00.030
BRAD ABRAMS: Yes.

780
00:34:00.030 --> 00:34:00.530
Yes.

781
00:34:00.530 --> 00:34:04.140
See again, these client guys
with their features.

782
00:34:04.140 --> 00:34:06.590
Yeah, so what I showed you
before with the beers.

783
00:34:06.590 --> 00:34:08.780
So we're back on the
server, looking at

784
00:34:08.780 --> 00:34:10.929
the list beers method.

785
00:34:10.929 --> 00:34:14.040
It returns all the beers
in our data store.

786
00:34:14.040 --> 00:34:15.966
Well that might work fine for
this demo, but we're going to

787
00:34:15.966 --> 00:34:17.880
have a wildly successful
startup, right?

788
00:34:17.880 --> 00:34:20.590
So we're going to have hundreds,
thousands, millions

789
00:34:20.590 --> 00:34:22.150
of beers in data store.

790
00:34:22.150 --> 00:34:24.540
So we want to support
paging of that.

791
00:34:24.540 --> 00:34:27.610
And to do that, I also want to
show you a few of the other

792
00:34:27.610 --> 00:34:30.460
cool capabilities
of endpoints.

793
00:34:30.460 --> 00:34:34.460
So what I've done is, off stage,
while Ido was working

794
00:34:34.460 --> 00:34:36.880
there, I wrote this
list beers method.

795
00:34:36.880 --> 00:34:39.000
I updated it a little bit.

796
00:34:39.000 --> 00:34:41.360
And I added a couple of
nullable parameters.

797
00:34:41.360 --> 00:34:45.969
So in endpoints, nullable
parameters are optional, so

798
00:34:45.969 --> 00:34:47.790
you don't have to
pass those in.

799
00:34:47.790 --> 00:34:50.920
And so they show up as query
string parameters on the URL,

800
00:34:50.920 --> 00:34:52.850
so anything you mark
nullable will be a

801
00:34:52.850 --> 00:34:53.940
query string parameter.

802
00:34:53.940 --> 00:34:56.046
You can have any combination
of nullable and required as

803
00:34:56.046 --> 00:34:56.989
you'd like.

804
00:34:56.989 --> 00:34:59.700
So in this case, I'm going to
take two nullable parameters.

805
00:34:59.700 --> 00:35:01.080
One is going to be the limit.

806
00:35:01.080 --> 00:35:05.050
That is, how many beers do you
want to return at this time?

807
00:35:05.050 --> 00:35:08.860
And the other is the cursor
string, or the cursor.

808
00:35:08.860 --> 00:35:12.380
That is, where were you
last time you asked?

809
00:35:12.380 --> 00:35:14.050
So the first time, obviously
you don't pass

810
00:35:14.050 --> 00:35:15.040
anything in for that.

811
00:35:15.040 --> 00:35:17.490
The second time, you pass
in the result I

812
00:35:17.490 --> 00:35:18.930
passed you last time.

813
00:35:18.930 --> 00:35:23.270
And so luckily for us, App
Engine's data store has some

814
00:35:23.270 --> 00:35:26.360
very nice support for that,
which we'll see.

815
00:35:26.360 --> 00:35:29.000
So that's the declaration.

816
00:35:29.000 --> 00:35:32.610
And then you can see if they
pass in a cursor string, then

817
00:35:32.610 --> 00:35:35.730
we go ahead and set
that in the query.

818
00:35:35.730 --> 00:35:37.950
We set the cursor
they passed in.

819
00:35:37.950 --> 00:35:42.380
If they passed in a limit,
we set that as a range.

820
00:35:42.380 --> 00:35:46.820
And then what we do is we go
ahead and do our execute and

821
00:35:46.820 --> 00:35:49.200
get all the results back
from data store.

822
00:35:49.200 --> 00:35:51.060
And then we save
off the cursor.

823
00:35:51.060 --> 00:35:54.160
So wherever you were, give
me a cursor for that.

824
00:35:54.160 --> 00:35:57.290
And then we get a web save
string, so that's effectively

825
00:35:57.290 --> 00:36:01.790
a base 64 encoded string that's
unique for where this

826
00:36:01.790 --> 00:36:05.670
user was, so that you can pass
it back at any time and get

827
00:36:05.670 --> 00:36:07.230
back the next set of results.

828
00:36:07.230 --> 00:36:09.290
So that's really
handy to have.

829
00:36:09.290 --> 00:36:12.400
And then what we do is we return
that, and notice we're

830
00:36:12.400 --> 00:36:14.670
returning a complex
object this time.

831
00:36:14.670 --> 00:36:17.610
We're returning all of those
elements as we were before,

832
00:36:17.610 --> 00:36:21.640
but we're also returning
that cursor string.

833
00:36:21.640 --> 00:36:23.070
Yep, so we go ahead
and save that.

834
00:36:23.070 --> 00:36:26.640
We want to run this in our local
development time server.

835
00:36:26.640 --> 00:36:30.160
And then to do a test of paging,
we need to go ahead

836
00:36:30.160 --> 00:36:33.670
and add a couple of items
to our data store.

837
00:36:33.670 --> 00:36:38.250
So I'll add Mom's Home Brew and
Bob's Indian Pale Ale so

838
00:36:38.250 --> 00:36:41.690
you can see all those
are there.

839
00:36:41.690 --> 00:36:46.070
And then let's look at all the
items in our data store.

840
00:36:46.070 --> 00:36:50.560
841
00:36:50.560 --> 00:36:52.210
OK, so there we go.

842
00:36:52.210 --> 00:36:55.780
That's two of them, so
that's pretty good.

843
00:36:55.780 --> 00:36:58.510
Maybe it'll wake
up in a second.

844
00:36:58.510 --> 00:36:59.330
OK, so [? great. ?]

845
00:36:59.330 --> 00:37:00.050
We have all three of them.

846
00:37:00.050 --> 00:37:02.510
We have ID 1, ID 3, and ID 4.

847
00:37:02.510 --> 00:37:05.830
For those playing at home,
where was ID 2?

848
00:37:05.830 --> 00:37:06.190
Where was ID 2?

849
00:37:06.190 --> 00:37:07.482
AUDIENCE: [INAUDIBLE]

850
00:37:07.482 --> 00:37:10.010
BRAD ABRAMS: No, it was the
comment that we did.

851
00:37:10.010 --> 00:37:11.230
The comment we put in.

852
00:37:11.230 --> 00:37:12.150
Anyway, OK.

853
00:37:12.150 --> 00:37:14.530
Data store trivia for you.

854
00:37:14.530 --> 00:37:19.850
OK, so there's all those, and
now let's test out limit.

855
00:37:19.850 --> 00:37:21.910
So we'll do that.

856
00:37:21.910 --> 00:37:26.910
We'll pass a query string
parameter for limit, and you

857
00:37:26.910 --> 00:37:28.670
see we just use the
query string.

858
00:37:28.670 --> 00:37:31.510
And notice now we're getting
this next page token.

859
00:37:31.510 --> 00:37:36.290
That tells us what to pass in
to get the next one, and I

860
00:37:36.290 --> 00:37:41.330
have already got one of those as
well, just to save you from

861
00:37:41.330 --> 00:37:43.720
watching me try to type that.

862
00:37:43.720 --> 00:37:48.530
And so we pass in the limit and
the cursor string, and we

863
00:37:48.530 --> 00:37:49.660
get the next one.

864
00:37:49.660 --> 00:37:51.500
So Ido, you want to add paging
to the app there?

865
00:37:51.500 --> 00:37:54.130
IDO GREEN: Yeah, it's
looking good.

866
00:37:54.130 --> 00:37:56.060
The client life is good.

867
00:37:56.060 --> 00:37:58.300
Now all we need to do is
to take these two extra

868
00:37:58.300 --> 00:38:01.180
parameters that Brad just
mentioned, limit and cursor,

869
00:38:01.180 --> 00:38:01.860
and just use them.

870
00:38:01.860 --> 00:38:04.290
So if you remember at the
beginning when I was calling

871
00:38:04.290 --> 00:38:08.130
this endpoint, I was calling
just list with none of the

872
00:38:08.130 --> 00:38:08.780
parameters.

873
00:38:08.780 --> 00:38:10.310
Now I'll use both of them.

874
00:38:10.310 --> 00:38:12.050
And basically what we'll
do, we'll save the

875
00:38:12.050 --> 00:38:14.260
cursor as our pointer.

876
00:38:14.260 --> 00:38:17.590
And if we want, we'll know to
call it later and just make

877
00:38:17.590 --> 00:38:20.380
sure that we're fetching the
extra amount of beers.

878
00:38:20.380 --> 00:38:23.330
Let's see how it looks like.

879
00:38:23.330 --> 00:38:27.140
Let's try to fetch one by one.

880
00:38:27.140 --> 00:38:29.560
So we're getting the beer, and
then we get the button More,

881
00:38:29.560 --> 00:38:31.830
because we know that now we've
got the cursor back, the next

882
00:38:31.830 --> 00:38:36.550
token, and if we click, you see
here that it's Bud, it's

883
00:38:36.550 --> 00:38:37.350
[? VB Gold, ?]

884
00:38:37.350 --> 00:38:38.780
and we have more and more.

885
00:38:38.780 --> 00:38:41.790
So pagination is working
quite perfectly.

886
00:38:41.790 --> 00:38:43.960
What I'm thinking is that, after
all, we are a search

887
00:38:43.960 --> 00:38:47.020
company, and maybe we'll
have search in our app.

888
00:38:47.020 --> 00:38:47.990
BRAD ABRAMS: Search, search.

889
00:38:47.990 --> 00:38:50.040
Do you see these features?

890
00:38:50.040 --> 00:38:52.050
Yes, let's switch over
and see how we would

891
00:38:52.050 --> 00:38:53.170
add search to this.

892
00:38:53.170 --> 00:38:54.770
And in the process, we'll learn

893
00:38:54.770 --> 00:38:56.480
more about cloud endpoints.

894
00:38:56.480 --> 00:38:59.410
So App Engine, as you might be
aware, recently launched

895
00:38:59.410 --> 00:39:00.280
support for search.

896
00:39:00.280 --> 00:39:02.990
It actually uses some of the
same underlying infrastructure

897
00:39:02.990 --> 00:39:05.250
that we use for Google search.

898
00:39:05.250 --> 00:39:09.350
And so if you've studied the
search problem, the way search

899
00:39:09.350 --> 00:39:11.670
starts is with an index.

900
00:39:11.670 --> 00:39:15.630
So we want to create an index of
all the items that we want

901
00:39:15.630 --> 00:39:16.480
searchable.

902
00:39:16.480 --> 00:39:20.100
So here's the basic code
to do that index.

903
00:39:20.100 --> 00:39:21.940
And we're going to call
it beerindex.

904
00:39:21.940 --> 00:39:25.710
We can set some constraints on
it that controls how fast

905
00:39:25.710 --> 00:39:28.360
queries go based
on consistency,

906
00:39:28.360 --> 00:39:30.040
guarantees, and whatnot.

907
00:39:30.040 --> 00:39:33.070
But we've done that
initialization.

908
00:39:33.070 --> 00:39:36.970
Now what we need to do is
populate our index.

909
00:39:36.970 --> 00:39:40.860
So what we'll do is add a new
method here, and we want to

910
00:39:40.860 --> 00:39:42.880
customize what goes
in the index.

911
00:39:42.880 --> 00:39:46.150
For example, we may not want to
put the image in the index.

912
00:39:46.150 --> 00:39:47.930
That'll just bloat
up our index.

913
00:39:47.930 --> 00:39:51.780
So we want to have a little bit
of customization, which I

914
00:39:51.780 --> 00:39:53.785
have written for you
ahead of time.

915
00:39:53.785 --> 00:39:56.950
916
00:39:56.950 --> 00:39:58.630
So there we are.

917
00:39:58.630 --> 00:40:01.870
This is an add to search index
method, and what we're doing

918
00:40:01.870 --> 00:40:04.700
is just creating a new
search document.

919
00:40:04.700 --> 00:40:06.820
We're Google, so everything's
a document, even if you're

920
00:40:06.820 --> 00:40:08.650
talking about beers.

921
00:40:08.650 --> 00:40:13.360
So we add a document,
and we set its name.

922
00:40:13.360 --> 00:40:17.470
And notice we're just pulling
these properties right out of

923
00:40:17.470 --> 00:40:18.990
the beer objects.

924
00:40:18.990 --> 00:40:21.790
And notice sometimes, like
name, we're using text.

925
00:40:21.790 --> 00:40:24.290
And other times, when
we do score, we're

926
00:40:24.290 --> 00:40:25.780
setting it as a number.

927
00:40:25.780 --> 00:40:28.780
So we're actually telling our
search index which things are

928
00:40:28.780 --> 00:40:30.890
text, which things
are numbers.

929
00:40:30.890 --> 00:40:33.480
And that's going to give
us some strong query

930
00:40:33.480 --> 00:40:35.770
capabilities, which we'll
see in just a minute.

931
00:40:35.770 --> 00:40:38.030
OK, so that's that
basic thing.

932
00:40:38.030 --> 00:40:40.890
Now all we need to do is
actually add the beers to the

933
00:40:40.890 --> 00:40:41.840
data store.

934
00:40:41.840 --> 00:40:43.610
So we need to call
this method.

935
00:40:43.610 --> 00:40:47.330
So let's start up
here at the top.

936
00:40:47.330 --> 00:40:50.930
Let's see, list is fine,
get is fine.

937
00:40:50.930 --> 00:40:54.750
Insert, when they add a new
item to the data store, we

938
00:40:54.750 --> 00:40:58.390
need to go ahead and add that
to our search index.

939
00:40:58.390 --> 00:41:01.780
Update, when they update that
beer, we're just going to add

940
00:41:01.780 --> 00:41:05.010
it to the data store, and as
long as the IDs match--

941
00:41:05.010 --> 00:41:06.640
we need to add it
to our index--

942
00:41:06.640 --> 00:41:09.350
and as long as the IDs
match, we'll be OK.

943
00:41:09.350 --> 00:41:10.980
It'll update.

944
00:41:10.980 --> 00:41:15.730
So that way our index will stay
fresh, and then in remove

945
00:41:15.730 --> 00:41:19.170
we had a bug earlier that Ido
so skillfully found at the

946
00:41:19.170 --> 00:41:20.310
last minute.

947
00:41:20.310 --> 00:41:23.240
And in remove we need to go
ahead and make sure we remove

948
00:41:23.240 --> 00:41:26.500
that beer from our
index as well.

949
00:41:26.500 --> 00:41:28.670
So that's that basic thing.

950
00:41:28.670 --> 00:41:31.140
I think we're ready to test
that, so I'll just spin up the

951
00:41:31.140 --> 00:41:34.930
development time server again
as our pattern is,

952
00:41:34.930 --> 00:41:36.340
and then do a search.

953
00:41:36.340 --> 00:41:39.590
So we actually need to add a new
beer to the data store so

954
00:41:39.590 --> 00:41:41.570
that it actually gets indexed.

955
00:41:41.570 --> 00:41:44.080
And notice when I add this, look
down here at the bottom

956
00:41:44.080 --> 00:41:47.820
of the console, you'll see the
search engine actually spin up

957
00:41:47.820 --> 00:41:51.150
because now we're adding it to
an index, so we have to have

958
00:41:51.150 --> 00:41:53.140
that service up and
running as well.

959
00:41:53.140 --> 00:41:56.530
So that search started, so
hopefully that means we should

960
00:41:56.530 --> 00:41:59.670
be able to query for
this and find it.

961
00:41:59.670 --> 00:42:03.080
Oh, actually, we can't query
for it because I didn't add

962
00:42:03.080 --> 00:42:05.940
the query method.

963
00:42:05.940 --> 00:42:07.190
Let's go back.

964
00:42:07.190 --> 00:42:09.560
965
00:42:09.560 --> 00:42:14.960
The whole point of that bit was
to add this search method,

966
00:42:14.960 --> 00:42:20.770
to show you doing custom
methods in endpoints.

967
00:42:20.770 --> 00:42:24.570
So we'll add this, and notice
this is a list method that's

968
00:42:24.570 --> 00:42:27.840
similar, but we're exposing
it as an HTTP get.

969
00:42:27.840 --> 00:42:30.220
So you get to customize the
verb, just like you get to

970
00:42:30.220 --> 00:42:32.290
customize the path.

971
00:42:32.290 --> 00:42:36.010
We pass in a required argument
for the query string, and then

972
00:42:36.010 --> 00:42:38.400
all we're doing, really, is
passing that query string to

973
00:42:38.400 --> 00:42:39.980
our search index.

974
00:42:39.980 --> 00:42:41.950
The search results come back.

975
00:42:41.950 --> 00:42:46.820
And we pull out the index from
the search results and call

976
00:42:46.820 --> 00:42:49.800
that getBeer method that we
defined before, that will call

977
00:42:49.800 --> 00:42:51.490
data store, get our beer.

978
00:42:51.490 --> 00:42:54.310
And then we return the
whole list of those.

979
00:42:54.310 --> 00:42:58.920
OK, so with that we should
be able to--

980
00:42:58.920 --> 00:43:01.950
so we've added that item
to the data store.

981
00:43:01.950 --> 00:43:06.370
Now we need to search for it.

982
00:43:06.370 --> 00:43:10.160
So we'll search for that cool
beer, and search engine will

983
00:43:10.160 --> 00:43:11.860
start again.

984
00:43:11.860 --> 00:43:12.850
Oh, yeah.

985
00:43:12.850 --> 00:43:14.100
OK, tell you what.

986
00:43:14.100 --> 00:43:16.460
987
00:43:16.460 --> 00:43:19.520
Because I had to start and
re-stop, let's skip

988
00:43:19.520 --> 00:43:22.000
ahead to this part.

989
00:43:22.000 --> 00:43:24.640
So we added a couple of
different beers with score ID

990
00:43:24.640 --> 00:43:31.340
11, with a score of 9, so with
various different scores.

991
00:43:31.340 --> 00:43:35.020
And I'll show you searching
for those.

992
00:43:35.020 --> 00:43:38.750
So notice that the search can
be pretty powerful here.

993
00:43:38.750 --> 00:43:41.510
We can say the score
equals something.

994
00:43:41.510 --> 00:43:43.810
So we actually can
do math here.

995
00:43:43.810 --> 00:43:47.030
So I could actually say where
the score is less than this.

996
00:43:47.030 --> 00:43:50.000
So you see this, coupled with
the fact that it actually does

997
00:43:50.000 --> 00:43:53.170
Boolean operators as well, gives
you some really powerful

998
00:43:53.170 --> 00:43:55.890
query capability for
the service.

999
00:43:55.890 --> 00:43:58.080
So with this done, Ido, I think
we're ready for you to

1000
00:43:58.080 --> 00:43:59.170
take it off.

1001
00:43:59.170 --> 00:44:01.150
IDO GREEN: Perfect.

1002
00:44:01.150 --> 00:44:02.140
Excellent.

1003
00:44:02.140 --> 00:44:05.860
So they say that simplicity is
the ultimate sophistication.

1004
00:44:05.860 --> 00:44:08.450
And I think in that case, you
must agree with me that it's

1005
00:44:08.450 --> 00:44:10.405
pretty simple, that
piece of code that

1006
00:44:10.405 --> 00:44:11.580
we have in the client.

1007
00:44:11.580 --> 00:44:14.380
Basically what we're doing here,
you can all see it good?

1008
00:44:14.380 --> 00:44:15.840
I could make it larger.

1009
00:44:15.840 --> 00:44:18.580
You see it well?

1010
00:44:18.580 --> 00:44:20.910
Maybe even larger.

1011
00:44:20.910 --> 00:44:23.030
Basically, we're listening
to the keydown event.

1012
00:44:23.030 --> 00:44:25.890
In our case, we want to catch
the Enter when the user is

1013
00:44:25.890 --> 00:44:28.220
finishing to click
the term in.

1014
00:44:28.220 --> 00:44:31.040
And then we're just taking the
payload, the search term,

1015
00:44:31.040 --> 00:44:34.290
passing it to the search
endpoint, and let's see what's

1016
00:44:34.290 --> 00:44:37.090
going on here when we are
doing it for real.

1017
00:44:37.090 --> 00:44:42.820
So you saw here that
I just put a break

1018
00:44:42.820 --> 00:44:43.700
point in Dev Tools.

1019
00:44:43.700 --> 00:44:46.955
That allows it to now inspect
and see what's going on and

1020
00:44:46.955 --> 00:44:49.420
what we got back from
the server.

1021
00:44:49.420 --> 00:44:52.530
If you hover, you'll see that
we got an array of items.

1022
00:44:52.530 --> 00:44:55.840
We could dive into them, see
exactly what's going on.

1023
00:44:55.840 --> 00:44:58.240
And when we are happy, we could
just release it and see

1024
00:44:58.240 --> 00:45:00.680
that we got the list of
beers that we wanted.

1025
00:45:00.680 --> 00:45:03.560
As Brad mentioned, it's much
more powerful than just that.

1026
00:45:03.560 --> 00:45:06.440
You could do things like that,
and then let's leave it so we

1027
00:45:06.440 --> 00:45:09.630
could run properly, and get all
the beers that are from

1028
00:45:09.630 --> 00:45:12.770
score 3 and above.

1029
00:45:12.770 --> 00:45:16.950
We could do even better than
that and go and play with some

1030
00:45:16.950 --> 00:45:22.210
geo queries, like this one,
which basically will give us a

1031
00:45:22.210 --> 00:45:28.030
view of beers around us, so
around the user of our app.

1032
00:45:28.030 --> 00:45:31.870
Here I cheated a bit, and I just
gave a map that mimics

1033
00:45:31.870 --> 00:45:33.660
what the functionality
will be like.

1034
00:45:33.660 --> 00:45:37.320
But you can how easy it is to
use the search from the client

1035
00:45:37.320 --> 00:45:39.770
and get some sophisticated
queries that you don't need to

1036
00:45:39.770 --> 00:45:42.360
code anything in order to
achieve them, and slice and

1037
00:45:42.360 --> 00:45:46.170
dice the data that you have in
your app in some clever ways,

1038
00:45:46.170 --> 00:45:49.140
thanks to the search
capabilities.

1039
00:45:49.140 --> 00:45:53.590
Now I don't know, I have a few
more requests, but I think

1040
00:45:53.590 --> 00:45:55.360
it's maybe time for
production.

1041
00:45:55.360 --> 00:45:56.460
Maybe we could deploy it.

1042
00:45:56.460 --> 00:45:57.890
BRAD ABRAMS: OK, ready to
deploy to production.

1043
00:45:57.890 --> 00:45:59.270
OK, great.

1044
00:45:59.270 --> 00:46:01.590
So it's very easy to do this.

1045
00:46:01.590 --> 00:46:03.480
We have a set of command line
tools and stuff so you can

1046
00:46:03.480 --> 00:46:04.280
script them.

1047
00:46:04.280 --> 00:46:07.180
But as a developer, it's nice
that right from Eclipse, you

1048
00:46:07.180 --> 00:46:09.330
can go ahead and deploy this.

1049
00:46:09.330 --> 00:46:12.960
So while Ido was talking, I went
and set the application

1050
00:46:12.960 --> 00:46:14.510
ID for this.

1051
00:46:14.510 --> 00:46:17.570
So if you just go to
appengine.com, everybody can

1052
00:46:17.570 --> 00:46:21.405
get 10 free apps that have a
pretty generous free quota,

1053
00:46:21.405 --> 00:46:24.990
and it's free and always
free for that tier.

1054
00:46:24.990 --> 00:46:26.330
So you can go get your ID.

1055
00:46:26.330 --> 00:46:29.570
I got Birra I/O 2012.

1056
00:46:29.570 --> 00:46:31.870
And then you just
click Deploy.

1057
00:46:31.870 --> 00:46:34.230
And what's going to happen
now is it packages your

1058
00:46:34.230 --> 00:46:38.270
application locally and sends
it up to the server for

1059
00:46:38.270 --> 00:46:38.770
deployment.

1060
00:46:38.770 --> 00:46:42.020
And this only takes a max of
two or three minutes over

1061
00:46:42.020 --> 00:46:43.270
normal Wi-Fi.

1062
00:46:43.270 --> 00:46:45.650
1063
00:46:45.650 --> 00:46:46.540
Let's let that go.

1064
00:46:46.540 --> 00:46:47.880
IDO GREEN: Maybe I'll just
show them the Web

1065
00:46:47.880 --> 00:46:48.890
Intents that I forgot.

1066
00:46:48.890 --> 00:46:49.860
BRAD ABRAMS: Oh, sure,
you want to

1067
00:46:49.860 --> 00:46:50.860
switch back to Web Intents?

1068
00:46:50.860 --> 00:46:51.300
OK.

1069
00:46:51.300 --> 00:46:52.580
And by then, this
will be done.

1070
00:46:52.580 --> 00:46:54.460
IDO GREEN: I'm really passionate
about this small

1071
00:46:54.460 --> 00:46:57.935
operation, and I just wanted to
show you how easy it is to

1072
00:46:57.935 --> 00:46:59.130
hook it up to your apps.

1073
00:46:59.130 --> 00:47:02.620
So basically with Web Intent,
we're letting the user choose

1074
00:47:02.620 --> 00:47:05.340
how they want to achieve
an intent in action.

1075
00:47:05.340 --> 00:47:07.720
In our case, let's try
and share our beer.

1076
00:47:07.720 --> 00:47:10.450
So as you can see here, from
Chrome 19 and above it's

1077
00:47:10.450 --> 00:47:12.220
natively in the browser.

1078
00:47:12.220 --> 00:47:16.340
When I'm clicking Share Beer,
I'm getting a few options here

1079
00:47:16.340 --> 00:47:19.560
that I found myself using a lot,
but you could add, and

1080
00:47:19.560 --> 00:47:21.340
there's plenty more
in the Chrome Web

1081
00:47:21.340 --> 00:47:23.000
Store to check around.

1082
00:47:23.000 --> 00:47:26.890
And in my case, let's
see how it's done.

1083
00:47:26.890 --> 00:47:30.460
I just want to send
it through Gmail.

1084
00:47:30.460 --> 00:47:32.490
So you can see the payload, in
my case, it's just the beer

1085
00:47:32.490 --> 00:47:35.910
name, the score, and maybe some
link back to the app.

1086
00:47:35.910 --> 00:47:36.890
Very simple.

1087
00:47:36.890 --> 00:47:41.510
And the power of it is that,
check this set of lines that

1088
00:47:41.510 --> 00:47:43.950
makes our life so much easier.

1089
00:47:43.950 --> 00:47:46.850
So we're gathering in beer
details there, payload that we

1090
00:47:46.850 --> 00:47:48.840
want to send the intent.

1091
00:47:48.840 --> 00:47:52.670
Then we're constructing a new
intent, and it could be share,

1092
00:47:52.670 --> 00:47:53.800
it could be edit a photo.

1093
00:47:53.800 --> 00:47:57.260
So let's say that you want to
let your users edit a photo.

1094
00:47:57.260 --> 00:47:59.060
You don't need to code this
again and again and

1095
00:47:59.060 --> 00:48:00.160
reinvent the wheel.

1096
00:48:00.160 --> 00:48:03.400
You could use other services out
there that are focusing on

1097
00:48:03.400 --> 00:48:06.780
doing this work and excel in
it, and just let the users

1098
00:48:06.780 --> 00:48:07.650
talk to them.

1099
00:48:07.650 --> 00:48:09.410
And then we passing
the beer details.

1100
00:48:09.410 --> 00:48:13.730
And when we're starting the
window.navigator object, we're

1101
00:48:13.730 --> 00:48:16.750
passing the intent, starting the
activity, and the user is

1102
00:48:16.750 --> 00:48:18.580
taking it from there.

1103
00:48:18.580 --> 00:48:22.180
Very simple, very smooth, and of
course, we have JavaScript

1104
00:48:22.180 --> 00:48:23.560
chains to all the
other browsers.

1105
00:48:23.560 --> 00:48:25.490
So in Chrome, it's
coming natively.

1106
00:48:25.490 --> 00:48:27.820
In other browsers, the user
could achieve it with the

1107
00:48:27.820 --> 00:48:29.890
JavaScript chains
that we have.

1108
00:48:29.890 --> 00:48:30.340
BRAD ABRAMS: All right.

1109
00:48:30.340 --> 00:48:31.110
Awesome.

1110
00:48:31.110 --> 00:48:34.680
So that gave me plenty of time
to deploy the application to

1111
00:48:34.680 --> 00:48:37.270
production, just to give you a
sense of what it does, some

1112
00:48:37.270 --> 00:48:38.550
client-side stuff.

1113
00:48:38.550 --> 00:48:41.840
It uploads all the files and
then verifies that it's

1114
00:48:41.840 --> 00:48:45.870
available, updates all the
index, and it's deployed.

1115
00:48:45.870 --> 00:48:48.420
So as soon as it's deployed, the
next thing we wanted to do

1116
00:48:48.420 --> 00:48:49.985
is actually go do some
scalability--

1117
00:48:49.985 --> 00:48:52.780
IDO GREEN: Whoa, don't
do it yet.

1118
00:48:52.780 --> 00:48:53.550
BRAD ABRAMS: Well, whatever.

1119
00:48:53.550 --> 00:48:54.610
What we wanted to do is do some

1120
00:48:54.610 --> 00:48:56.500
scalability testing of it.

1121
00:48:56.500 --> 00:49:00.820
So we used ApacheBench, and this
is just very basic, off

1122
00:49:00.820 --> 00:49:04.560
the cuff scalability to give you
a sense of how this works.

1123
00:49:04.560 --> 00:49:07.710
ApacheBench is a widely
used open source

1124
00:49:07.710 --> 00:49:08.800
tool for doing this.

1125
00:49:08.800 --> 00:49:10.140
So we did 9,000.

1126
00:49:10.140 --> 00:49:16.610
This was on my laptop on our
Wi-Fi network at work, so we

1127
00:49:16.610 --> 00:49:21.610
did 9,000 connections,
100 at a time.

1128
00:49:21.610 --> 00:49:24.720
And you see the results we
got in percentile here.

1129
00:49:24.720 --> 00:49:27.500
So 90% of the requests
came back in

1130
00:49:27.500 --> 00:49:28.590
less than half a second.

1131
00:49:28.590 --> 00:49:29.580
IDO GREEN: It's not showing.

1132
00:49:29.580 --> 00:49:30.080
BRAD ABRAMS: Oh, it's not?

1133
00:49:30.080 --> 00:49:32.010
I'm sorry.

1134
00:49:32.010 --> 00:49:33.230
Great, thank you.

1135
00:49:33.230 --> 00:49:36.840
So now you see that we
used ApacheBench.

1136
00:49:36.840 --> 00:49:40.170
We got 90% of the requests came
back in half a second.

1137
00:49:40.170 --> 00:49:41.830
So that's pretty decent.

1138
00:49:41.830 --> 00:49:44.930
That's pretty good for a sort
of in-the-wild deployment.

1139
00:49:44.930 --> 00:49:47.450
And again, we didn't have to
do anything to make our app

1140
00:49:47.450 --> 00:49:49.000
actually scale that way.

1141
00:49:49.000 --> 00:49:50.910
So the next thing to do, I don't
know if you caught in

1142
00:49:50.910 --> 00:49:54.170
the keynote, we launched a new
sister project to App Engine.

1143
00:49:54.170 --> 00:49:56.180
Does anybody remember
what that's called?

1144
00:49:56.180 --> 00:49:57.180
Compute Engine?

1145
00:49:57.180 --> 00:49:59.260
I don't know if anybody
knows anything

1146
00:49:59.260 --> 00:50:00.630
about our data centers.

1147
00:50:00.630 --> 00:50:02.960
One of the things Google does
pretty well with the data

1148
00:50:02.960 --> 00:50:05.000
centers is networking logic.

1149
00:50:05.000 --> 00:50:07.340
So I thought it would be fun to
get a Compute Engine into

1150
00:50:07.340 --> 00:50:11.080
this and just see how quick that
would be to hit the App

1151
00:50:11.080 --> 00:50:14.750
Engine app from a Compute
Engine instance.

1152
00:50:14.750 --> 00:50:18.300
It turns out they're actually
in different data centers.

1153
00:50:18.300 --> 00:50:20.950
The App Engine app was running
in one data center, and the

1154
00:50:20.950 --> 00:50:22.910
Compute Engine was running
in another one.

1155
00:50:22.910 --> 00:50:26.690
But anyway, it's fun,
nonetheless, to see that 95%

1156
00:50:26.690 --> 00:50:30.860
of the requests came back in
less than seven milliseconds.

1157
00:50:30.860 --> 00:50:32.730
So it's actually pretty fast.

1158
00:50:32.730 --> 00:50:36.270
So if you're doing something,
you want to access your App

1159
00:50:36.270 --> 00:50:38.350
Engine app quickly, this
is the way to do it.

1160
00:50:38.350 --> 00:50:40.435
IDO GREEN: Rank a
lot of beers.

1161
00:50:40.435 --> 00:50:43.370
BRAD ABRAMS: It turns out that
the way this actually works

1162
00:50:43.370 --> 00:50:47.020
with App Engine is a lot of this
is static content coming

1163
00:50:47.020 --> 00:50:51.700
from the HTML app, and that
gets stored in Google's

1164
00:50:51.700 --> 00:50:53.480
distributed cache.

1165
00:50:53.480 --> 00:50:56.110
So it turns out it wasn't
actually hitting my App Engine

1166
00:50:56.110 --> 00:50:57.020
app at all.

1167
00:50:57.020 --> 00:51:00.340
It hits it one time to get the
HTML, and then after that, it

1168
00:51:00.340 --> 00:51:02.380
serves it out of the cache,
and those caches are

1169
00:51:02.380 --> 00:51:04.140
distributed globally.

1170
00:51:04.140 --> 00:51:06.480
And that's available for
all App Engine Apps.

1171
00:51:06.480 --> 00:51:08.170
You sort of get that for free.

1172
00:51:08.170 --> 00:51:10.590
So once we've figured that out,
we were actually playing

1173
00:51:10.590 --> 00:51:12.540
around with this, with different
arguments, had a

1174
00:51:12.540 --> 00:51:14.790
couple of machines playing
around with it just to see

1175
00:51:14.790 --> 00:51:19.440
sort of where we could get
the queries per second.

1176
00:51:19.440 --> 00:51:21.000
Have you seen the App
Engine graphs?

1177
00:51:21.000 --> 00:51:23.460
Like how many simultaneous
requests could we get?

1178
00:51:23.460 --> 00:51:27.950
We got a little crazy with the
ApacheBench tool, and we got

1179
00:51:27.950 --> 00:51:31.670
to 6,000 QPS just
playing around

1180
00:51:31.670 --> 00:51:33.630
with a couple of machines.

1181
00:51:33.630 --> 00:51:36.050
So that's pretty good, and
it's literally the

1182
00:51:36.050 --> 00:51:38.020
code you saw today.

1183
00:51:38.020 --> 00:51:40.980
Again, a lot of the QPS is
actually hitting the HTML

1184
00:51:40.980 --> 00:51:44.840
page, but it's really nice to
be able to know that you're

1185
00:51:44.840 --> 00:51:47.880
working on infrastructure that
you can just play around with

1186
00:51:47.880 --> 00:51:49.920
and get to 6,000 QPS.

1187
00:51:49.920 --> 00:51:53.660
To give you an idea, 6,000 QPS
is like a quarter of a million

1188
00:51:53.660 --> 00:51:55.570
requests a minute.

1189
00:51:55.570 --> 00:51:58.200
So what is that, maybe
a few hundred

1190
00:51:58.200 --> 00:52:00.010
thousand concurrent users?

1191
00:52:00.010 --> 00:52:02.060
So just think about if you're
going to stand up your own

1192
00:52:02.060 --> 00:52:07.550
machine to go serve 100,000
concurrent users, that might

1193
00:52:07.550 --> 00:52:08.190
take you a little while.

1194
00:52:08.190 --> 00:52:10.420
You might have to think about
some sharding and whatever,

1195
00:52:10.420 --> 00:52:14.175
and we've done all that work
for you with App Engine.

1196
00:52:14.175 --> 00:52:15.340
IDO GREEN: So main take aways.

1197
00:52:15.340 --> 00:52:18.935
I think we saw that it's pretty
nice today to be a

1198
00:52:18.935 --> 00:52:21.400
developer in terms of the
development experience.

1199
00:52:21.400 --> 00:52:24.600
With Google App Engine, you can
leverage and tap into the

1200
00:52:24.600 --> 00:52:29.050
infrastructure and write your
own RESTful APIs quite easily.

1201
00:52:29.050 --> 00:52:31.580
One of the nice things is that
not only do you not need to

1202
00:52:31.580 --> 00:52:34.920
think about scalability, you
could focus really on the API.

1203
00:52:34.920 --> 00:52:37.480
The API is, in most of the
cases, the most challenging

1204
00:52:37.480 --> 00:52:39.540
aspect of the system itself.

1205
00:52:39.540 --> 00:52:41.930
So now you could just devote the
vast majority of your time

1206
00:52:41.930 --> 00:52:45.400
to that critical section, and
of course, code it from the

1207
00:52:45.400 --> 00:52:48.730
client side with all the best
practices of HTML5 and the

1208
00:52:48.730 --> 00:52:52.190
newest APIs that are
under your hands.

1209
00:52:52.190 --> 00:52:54.910
And I think we mentioned a few
very important points that I

1210
00:52:54.910 --> 00:52:57.670
would ask people just to keep in
mind when they're building

1211
00:52:57.670 --> 00:53:01.700
their next modern web apps,
mobile or desktop.

1212
00:53:01.700 --> 00:53:03.970
One of the most important
features is, of course, the 60

1213
00:53:03.970 --> 00:53:06.480
frames per second and the
smoothness, and that's coming

1214
00:53:06.480 --> 00:53:09.970
with the option to make
the app work offline.

1215
00:53:09.970 --> 00:53:13.580
And lots of users and lots of
great apps like the Financial

1216
00:53:13.580 --> 00:53:16.770
Times, the New York Times,
Google Docs, Gmail, and so on

1217
00:53:16.770 --> 00:53:18.600
are enjoying it today.

1218
00:53:18.600 --> 00:53:20.740
And in the near future, we'll
see more and more users

1219
00:53:20.740 --> 00:53:21.840
expecting it.

1220
00:53:21.840 --> 00:53:23.540
So that's something
to keep in mind.

1221
00:53:23.540 --> 00:53:25.160
Web Intents, we showed you.

1222
00:53:25.160 --> 00:53:26.570
You have no excuse
not to use it.

1223
00:53:26.570 --> 00:53:28.190
It's so simple and trivial.

1224
00:53:28.190 --> 00:53:31.870
And I would really like to thank
you for coming to hear

1225
00:53:31.870 --> 00:53:35.030
us after the heavy lunch
that we had.

1226
00:53:35.030 --> 00:53:39.810
Both Brad and I will be in the
Sandbox if anyone has more

1227
00:53:39.810 --> 00:53:41.230
questions after we
have, of course,

1228
00:53:41.230 --> 00:53:43.030
the section for questions.

1229
00:53:43.030 --> 00:53:46.590
And as I mentioned before, you
could have all the source code

1230
00:53:46.590 --> 00:53:49.070
of all the examples, just to
play with them and see exactly

1231
00:53:49.070 --> 00:53:53.570
how it's working for you in
this GitHub repository.

1232
00:53:53.570 --> 00:53:55.440
We'll put the slides once--

1233
00:53:55.440 --> 00:53:56.020
BRAD ABRAMS: Oh, goodness.

1234
00:53:56.020 --> 00:53:56.470
I'm sorry.

1235
00:53:56.470 --> 00:53:59.260
You guys gotta help
me with this.

1236
00:53:59.260 --> 00:53:59.570
IDO GREEN: Yeah.

1237
00:53:59.570 --> 00:54:02.090
So you have the link to
the GitHub repository.

1238
00:54:02.090 --> 00:54:03.340
The code is actually there.

1239
00:54:03.340 --> 00:54:07.140
1240
00:54:07.140 --> 00:54:09.710
We'll have all the slides
and the other

1241
00:54:09.710 --> 00:54:12.240
documentation below it.

1242
00:54:12.240 --> 00:54:15.250
And of course, you could try
and test the app itself and

1243
00:54:15.250 --> 00:54:19.930
the endpoint itself
in birra-io2012.

1244
00:54:19.930 --> 00:54:21.590
Hit it as hard as you want.

1245
00:54:21.590 --> 00:54:24.905
We would love to see some
nice graphs on it.

1246
00:54:24.905 --> 00:54:28.550
And of course, check out
the new Endpoint API.

1247
00:54:28.550 --> 00:54:30.210
It's pretty powerful.

1248
00:54:30.210 --> 00:54:33.930
If, by any chance, you didn't
reach to Brad or myself after

1249
00:54:33.930 --> 00:54:36.130
the talk or in the Sandbox,
please feel

1250
00:54:36.130 --> 00:54:38.350
free to use our G+.

1251
00:54:38.350 --> 00:54:40.700
We both would be happy to answer
any questions that you

1252
00:54:40.700 --> 00:54:44.070
might have, or challenges or
problems that you might have

1253
00:54:44.070 --> 00:54:45.220
in the near future.

1254
00:54:45.220 --> 00:54:47.610
So thank you very much, and if
we have questions, we'd be

1255
00:54:47.610 --> 00:54:49.630
happy to take them.

1256
00:54:49.630 --> 00:54:52.240
BRAD ABRAMS: If you enjoyed the
show, we'd love for you to

1257
00:54:52.240 --> 00:54:54.210
vote with your little +1s.

1258
00:54:54.210 --> 00:54:56.050
Ido and I are always looking to
get better, so if you have

1259
00:54:56.050 --> 00:54:58.400
comments, there's the
URL on the back.

1260
00:54:58.400 --> 00:54:58.920
IDO GREEN: Absolutely.

1261
00:54:58.920 --> 00:55:00.010
BRAD ABRAMS: Thank
you very much.

1262
00:55:00.010 --> 00:55:01.260
IDO GREEN: Thank you.

1263
00:55:01.260 --> 00:55:05.050
1264
00:55:05.050 --> 00:55:08.070
BRAD ABRAMS: Should we just
do questions here?

1265
00:55:08.070 --> 00:55:10.460
Any questions?

1266
00:55:10.460 --> 00:55:11.670
IDO GREEN: If you ask
an easy question,

1267
00:55:11.670 --> 00:55:12.480
you're getting a sticker.

1268
00:55:12.480 --> 00:55:14.840
If it's a hard one,
no sticker.

1269
00:55:14.840 --> 00:55:17.410
AUDIENCE: I was wondering if
there's any plans on bringing

1270
00:55:17.410 --> 00:55:21.500
client-side adaptive images
into App Engine?

1271
00:55:21.500 --> 00:55:23.490
IDO GREEN: Do you
want to take it?

1272
00:55:23.490 --> 00:55:25.770
BRAD ABRAMS: What do you mean
by adaptive images?

1273
00:55:25.770 --> 00:55:29.060
AUDIENCE: Serving up different
resolutions for the multitude

1274
00:55:29.060 --> 00:55:30.830
of devices we have.

1275
00:55:30.830 --> 00:55:31.180
BRAD ABRAMS: Yep.

1276
00:55:31.180 --> 00:55:31.510
Yep.

1277
00:55:31.510 --> 00:55:32.690
We have heard that.

1278
00:55:32.690 --> 00:55:34.810
There's nothing that I have
right now for you.

1279
00:55:34.810 --> 00:55:38.370
IDO GREEN: What you can
use today is just--

1280
00:55:38.370 --> 00:55:41.210
you need to do the leg work,
but we have, of course, the

1281
00:55:41.210 --> 00:55:44.165
API to use it, but you need
to do the leg work for it.

1282
00:55:44.165 --> 00:55:44.640
AUDIENCE: OK.

1283
00:55:44.640 --> 00:55:45.590
Thanks.

1284
00:55:45.590 --> 00:55:46.660
IDO GREEN: And now you
could get a sticker.

1285
00:55:46.660 --> 00:55:47.100
BRAD ABRAMS: Yes.

1286
00:55:47.100 --> 00:55:47.570
Please.

1287
00:55:47.570 --> 00:55:49.740
IDO GREEN: It wasn't hard.

1288
00:55:49.740 --> 00:55:50.310
Yes, please?

1289
00:55:50.310 --> 00:55:53.400
AUDIENCE: Do you guys have any
best practice recommendations?

1290
00:55:53.400 --> 00:55:55.860
I saw you get bit by it a few
times where when you're in an

1291
00:55:55.860 --> 00:56:00.370
application going page by page,
wizardy style things,

1292
00:56:00.370 --> 00:56:04.510
you have to wait until the
data store has your data

1293
00:56:04.510 --> 00:56:07.850
before you can then re-query
it back in page two.

1294
00:56:07.850 --> 00:56:09.660
And like you said, oh,
it's not there yet.

1295
00:56:09.660 --> 00:56:11.850
You have to wait a second
and try it again.

1296
00:56:11.850 --> 00:56:13.990
When you're in an application,
is there a better way or a

1297
00:56:13.990 --> 00:56:18.060
notifying way to then be told
my data's there, now I can

1298
00:56:18.060 --> 00:56:18.510
move forward?

1299
00:56:18.510 --> 00:56:19.100
IDO GREEN: Yeah, absolutely.

1300
00:56:19.100 --> 00:56:22.670
And actually, that's one of the
benefits of building your

1301
00:56:22.670 --> 00:56:25.340
app from the ground up
with offlink in mind.

1302
00:56:25.340 --> 00:56:28.875
Because then you'll know that
you have the most common data

1303
00:56:28.875 --> 00:56:31.390
that the user is using, and
you could make a nice

1304
00:56:31.390 --> 00:56:34.760
heuristic about what you will
want next and just fetch it

1305
00:56:34.760 --> 00:56:36.500
immediately from the
local storage.

1306
00:56:36.500 --> 00:56:39.200
And that's actually why we see
lots of apps that are really

1307
00:56:39.200 --> 00:56:41.820
snappy and really fast, because
they don't need to do

1308
00:56:41.820 --> 00:56:44.460
the round trip to the server and
fetch the information in

1309
00:56:44.460 --> 00:56:45.195
order to show it.

1310
00:56:45.195 --> 00:56:46.720
They already have it locally.

1311
00:56:46.720 --> 00:56:48.300
AUDIENCE: So you're saying that
you just keep it locally

1312
00:56:48.300 --> 00:56:51.560
and don't actually put it in
the data store until later?

1313
00:56:51.560 --> 00:56:51.930
IDO GREEN: Yeah.

1314
00:56:51.930 --> 00:56:54.760
So do everything locally first,
and then sync it when

1315
00:56:54.760 --> 00:56:56.340
you have time for it.

1316
00:56:56.340 --> 00:56:57.780
And when you have the right
connection, the right

1317
00:56:57.780 --> 00:56:58.320
bandwidth--

1318
00:56:58.320 --> 00:57:02.270
I saw some modern web apps
actually checking how good the

1319
00:57:02.270 --> 00:57:03.240
connection is.

1320
00:57:03.240 --> 00:57:05.540
There are a few JavaScript
libraries that let you do that

1321
00:57:05.540 --> 00:57:08.130
and then doing the syncing
just in the right time.

1322
00:57:08.130 --> 00:57:09.620
So that's one thing.

1323
00:57:09.620 --> 00:57:13.170
The other thing is that with
Google JavaScript API library,

1324
00:57:13.170 --> 00:57:15.210
you could tap and do
batch requests.

1325
00:57:15.210 --> 00:57:19.190
So you, using a leveraging one
connection with multiple

1326
00:57:19.190 --> 00:57:20.820
requests on top of it,
and that's of course

1327
00:57:20.820 --> 00:57:22.070
working much better.

1328
00:57:22.070 --> 00:57:24.360
1329
00:57:24.360 --> 00:57:26.020
You can have a sticker.

1330
00:57:26.020 --> 00:57:27.930
It was hard, but we made it.

1331
00:57:27.930 --> 00:57:31.020
AUDIENCE: How do you handle
security and privacy, in

1332
00:57:31.020 --> 00:57:33.030
particular, like in a health
care setting, if you're

1333
00:57:33.030 --> 00:57:34.695
writing a health care app,
keeping with regulations and

1334
00:57:34.695 --> 00:57:35.350
all that sort of stuff?

1335
00:57:35.350 --> 00:57:36.910
IDO GREEN: That's a great
question, so you'll definitely

1336
00:57:36.910 --> 00:57:38.310
get a sticker.

1337
00:57:38.310 --> 00:57:40.560
We haven't shown it, because
we didn't have time, but

1338
00:57:40.560 --> 00:57:42.500
authentication is coming
out of the box.

1339
00:57:42.500 --> 00:57:45.200
So it's perfect, and the
question is actually amazingly

1340
00:57:45.200 --> 00:57:48.610
good, because in other cases you
need to work pretty hard

1341
00:57:48.610 --> 00:57:50.370
to make your app secure.

1342
00:57:50.370 --> 00:57:54.950
And in our case, both the
endpoint is supporting the

1343
00:57:54.950 --> 00:57:58.770
cross-region sharing resources
and authentication

1344
00:57:58.770 --> 00:57:59.520
just out of the box.

1345
00:57:59.520 --> 00:58:02.240
So we'll have in the code,
actually, in GitHub, and you

1346
00:58:02.240 --> 00:58:06.290
could see how easy it is to
have, let's say, authenticated

1347
00:58:06.290 --> 00:58:07.720
comments or beers.

1348
00:58:07.720 --> 00:58:10.290
So only users that are
authenticated could actually

1349
00:58:10.290 --> 00:58:11.340
work with the app.

1350
00:58:11.340 --> 00:58:14.200
So in terms of security, you're
getting quite nice

1351
00:58:14.200 --> 00:58:16.020
things that have already
been done for you.

1352
00:58:16.020 --> 00:58:19.050
So you don't need to work
for them yourself.

1353
00:58:19.050 --> 00:58:20.880
BRAD ABRAMS: I can show
you an example.

1354
00:58:20.880 --> 00:58:26.670
AUDIENCE: So behind the scenes,
is Google indexing

1355
00:58:26.670 --> 00:58:29.490
patient data or whatever
information I'm storing?

1356
00:58:29.490 --> 00:58:30.090
BRAD ABRAMS: No.

1357
00:58:30.090 --> 00:58:30.550
No.

1358
00:58:30.550 --> 00:58:32.390
Let me do this one.

1359
00:58:32.390 --> 00:58:35.600
It's very clear in the App
Engine terms of service, we

1360
00:58:35.600 --> 00:58:38.180
can't even see the data that
you're putting in App Engine.

1361
00:58:38.180 --> 00:58:40.880
The only thing we can do with
the data that you're putting

1362
00:58:40.880 --> 00:58:43.620
in App Engine is serve
it back to you.

1363
00:58:43.620 --> 00:58:46.600
So we're not indexing
it in any way.

1364
00:58:46.600 --> 00:58:48.230
It is completely your data.

1365
00:58:48.230 --> 00:58:48.750
AUDIENCE: OK.

1366
00:58:48.750 --> 00:58:49.360
Thanks.

1367
00:58:49.360 --> 00:58:50.720
IDO GREEN: Sure.

1368
00:58:50.720 --> 00:58:52.170
BRAD ABRAMS:OK, one
more, probably.

1369
00:58:52.170 --> 00:58:53.300
Yeah.

1370
00:58:53.300 --> 00:58:54.720
You get to be the
last question.

1371
00:58:54.720 --> 00:58:55.110
AUDIENCE: Right on.

1372
00:58:55.110 --> 00:58:57.310
Hopefully it's an easy one,
and I'll get a sticker.

1373
00:58:57.310 --> 00:58:58.130
IDO GREEN: I hope so

1374
00:58:58.130 --> 00:59:00.660
AUDIENCE: Web sockets
on App Engine.

1375
00:59:00.660 --> 00:59:02.840
When is that gonna
be available?

1376
00:59:02.840 --> 00:59:04.980
BRAD ABRAMS: Stay tuned.

1377
00:59:04.980 --> 00:59:06.690
IDO GREEN: I'm holding
my fingers as well.

1378
00:59:06.690 --> 00:59:09.370
BRAD ABRAMS: Nothing's
due out right now.

1379
00:59:09.370 --> 00:59:10.680
That was so easy.

1380
00:59:10.680 --> 00:59:12.730
AUDIENCE: That was
a short one.

1381
00:59:12.730 --> 00:59:16.510
There are a few annotation
APIs like JAX-RS or

1382
00:59:16.510 --> 00:59:17.140
something like that.

1383
00:59:17.140 --> 00:59:22.990
I wanted to ask you what is @API
method, and what about

1384
00:59:22.990 --> 00:59:24.400
existing standards?

1385
00:59:24.400 --> 00:59:25.480
BRAD ABRAMS: So we
discussed this.

1386
00:59:25.480 --> 00:59:30.760
We decided @API, @API methods
are ones that we created for

1387
00:59:30.760 --> 00:59:33.350
our cloud endpoint, because
there's a lot of things that's

1388
00:59:33.350 --> 00:59:34.700
very custom to that.

1389
00:59:34.700 --> 00:59:37.650
We definitely think it's
possible to layer on top of

1390
00:59:37.650 --> 00:59:40.110
that a standards-based
approach.

1391
00:59:40.110 --> 00:59:42.170
If somebody's interested in
doing an open source project

1392
00:59:42.170 --> 00:59:44.640
around that or what not, I'd
be happy to discuss some of

1393
00:59:44.640 --> 00:59:46.260
the details with you.

1394
00:59:46.260 --> 00:59:47.380
AUDIENCE: Thank you.

1395
00:59:47.380 --> 00:59:48.010
IDO GREEN: Thank
you very much.

1396
00:59:48.010 --> 00:59:48.260
BRAD ABRAMS: Cool.

1397
00:59:48.260 --> 00:59:48.470
Great.

1398
00:59:48.470 --> 00:59:49.720
Thank you, guys.

1399
00:59:49.720 --> 00:59:50.230
WEBVTT

1
00:00:00.000 --> 00:00:01.872

2
00:00:01.872 --> 00:00:04.220
MIKE WEST: Good afternoon.

3
00:00:04.220 --> 00:00:05.190
I hope you all had
a good lunch.

4
00:00:05.190 --> 00:00:08.039
I hope it was as tasty
as mine was.

5
00:00:08.039 --> 00:00:10.850
I'm glad you all have shown
up for a talk like this.

6
00:00:10.850 --> 00:00:12.580
It's relatively specific.

7
00:00:12.580 --> 00:00:15.410
And I'm hoping that means that
all of you are very interested

8
00:00:15.410 --> 00:00:17.010
in the topic and will have some
really good questions

9
00:00:17.010 --> 00:00:17.980
afterwards.

10
00:00:17.980 --> 00:00:19.980
This will be about 45 minutes.

11
00:00:19.980 --> 00:00:22.300
And then I'm going to try to
leave a good amount of time at

12
00:00:22.300 --> 00:00:24.090
the end for questions, because
there are a lot of things

13
00:00:24.090 --> 00:00:26.150
going on in the extension
space.

14
00:00:26.150 --> 00:00:28.500
There are a lot of things that I
think are really interesting

15
00:00:28.500 --> 00:00:30.750
and that are going, I think,
to have a little bit of an

16
00:00:30.750 --> 00:00:32.210
impact on the way
that you develop

17
00:00:32.210 --> 00:00:34.150
extensions going forward.

18
00:00:34.150 --> 00:00:36.440
But before we get too much into
that, extensions are kind

19
00:00:36.440 --> 00:00:37.870
of awesome, aren't they?

20
00:00:37.870 --> 00:00:40.980
Extensions are great because
they allow you to customize

21
00:00:40.980 --> 00:00:45.360
the browser in ways that we
simply couldn't do when we

22
00:00:45.360 --> 00:00:47.940
distribute the browser
to a broad audience.

23
00:00:47.940 --> 00:00:50.240
Extensions give you the ability
to personalize the way

24
00:00:50.240 --> 00:00:52.320
you interact not only
with the web but

25
00:00:52.320 --> 00:00:53.990
with the browser itself.

26
00:00:53.990 --> 00:00:57.650
A good example of this is me
building this presentation.

27
00:00:57.650 --> 00:01:01.640
I used an extension called Clear
Cache by a guy named

28
00:01:01.640 --> 00:01:03.280
Benjamin Bojko.

29
00:01:03.280 --> 00:01:05.379
This is an extension that's
really quite excellent.

30
00:01:05.379 --> 00:01:07.500
And it's really, really good
for web developers because

31
00:01:07.500 --> 00:01:10.770
what it does is, you click a
button, it clears your cache,

32
00:01:10.770 --> 00:01:13.340
and then reloads the page that
you're currently looking at.

33
00:01:13.340 --> 00:01:14.920
This is really, really helpful,

34
00:01:14.920 --> 00:01:16.690
astoundingly so, actually.

35
00:01:16.690 --> 00:01:19.370
And what's really interesting
about this is that it actually

36
00:01:19.370 --> 00:01:21.390
has powers above and beyond
what we would

37
00:01:21.390 --> 00:01:22.890
give to a normal website.

38
00:01:22.890 --> 00:01:25.680
It's able to actually dive deep
down into the browser and

39
00:01:25.680 --> 00:01:28.550
use some APIs in order
to remove data.

40
00:01:28.550 --> 00:01:30.960
Or, if it was a different
extension, to change settings

41
00:01:30.960 --> 00:01:32.380
or something along
those lines.

42
00:01:32.380 --> 00:01:34.260
I think we'd all be pretty
surprised if we went to a

43
00:01:34.260 --> 00:01:36.750
website and it suddenly cleared
my browsing data.

44
00:01:36.750 --> 00:01:39.100
That would be a bit odd.

45
00:01:39.100 --> 00:01:42.200
What's interesting about these,
however, is that we see

46
00:01:42.200 --> 00:01:44.750
a little bit of bloat in
the extension space.

47
00:01:44.750 --> 00:01:47.450
We see a little bit of bloat
in a couple of ways, two

48
00:01:47.450 --> 00:01:48.200
distinct ways.

49
00:01:48.200 --> 00:01:51.320
First, we see extensions that
are actually requesting more

50
00:01:51.320 --> 00:01:54.400
permissions than they actually
need to do their job.

51
00:01:54.400 --> 00:01:57.280
If we look at Clear Cache, for
instance, we see that even

52
00:01:57.280 --> 00:01:59.970
though it's only clearing my
browsing data, it actually

53
00:01:59.970 --> 00:02:03.450
requests host permissions
to the entire internet.

54
00:02:03.450 --> 00:02:05.185
It does this for a very
good reason actually.

55
00:02:05.185 --> 00:02:08.160
It does it because it wants
to clear cookies on an

56
00:02:08.160 --> 00:02:10.100
origin-specific basis.

57
00:02:10.100 --> 00:02:12.740
We don't yet have an API that
allows you to do that, which

58
00:02:12.740 --> 00:02:15.360
means that the only mechanism
that the developer actually

59
00:02:15.360 --> 00:02:19.150
has at this point is to request
a large and dangerous

60
00:02:19.150 --> 00:02:23.100
permission in order to do a very
small and focused task.

61
00:02:23.100 --> 00:02:25.020
This is something that we
definitely want to fix.

62
00:02:25.020 --> 00:02:27.320
And there are a lot of things
in the extension system that

63
00:02:27.320 --> 00:02:30.360
we think we can fix
along these lines.

64
00:02:30.360 --> 00:02:33.350
The other area that we see
bloated with regard to

65
00:02:33.350 --> 00:02:38.710
extensions is the resource usage
that extensions actually

66
00:02:38.710 --> 00:02:42.990
use when they're active
on your computer.

67
00:02:42.990 --> 00:02:45.240
We'll talk a little bit about
how we're going to try to

68
00:02:45.240 --> 00:02:48.410
address both of these issues
in a little bit.

69
00:02:48.410 --> 00:02:53.140
One last thing we see in the
extension ecosystem is the

70
00:02:53.140 --> 00:02:56.070
fact that while extensions
themselves are quite secure--

71
00:02:56.070 --> 00:02:59.930
and we think we have a really
good handle on dealing with

72
00:02:59.930 --> 00:03:02.120
explicitly malware
extensions--

73
00:03:02.120 --> 00:03:04.750
we see problems with regard
to extensions that

74
00:03:04.750 --> 00:03:06.670
are benign but buggy.

75
00:03:06.670 --> 00:03:09.780
This means that the extension
itself is doing things that

76
00:03:09.780 --> 00:03:10.740
are quite important.

77
00:03:10.740 --> 00:03:14.330
And it's doing things in a way
that simply opens up a hole or

78
00:03:14.330 --> 00:03:18.630
two within the extension
process itself.

79
00:03:18.630 --> 00:03:21.530
This is a bit problematic
because, as we said earlier,

80
00:03:21.530 --> 00:03:24.950
extensions have permissions that
go well above and beyond

81
00:03:24.950 --> 00:03:26.800
what's available on
the open web.

82
00:03:26.800 --> 00:03:29.680
This makes extensions a
juicy target indeed.

83
00:03:29.680 --> 00:03:31.580
We'll talk a little bit about
how we're going to address

84
00:03:31.580 --> 00:03:35.200
that with the concept of
Manifest Version 2.

85
00:03:35.200 --> 00:03:37.650
Manifest Version 2 is something
that was introduced

86
00:03:37.650 --> 00:03:41.340
in Chrome 18 as the first set
of breaking changes in the

87
00:03:41.340 --> 00:03:42.830
extension system.

88
00:03:42.830 --> 00:03:45.660
Manifest Version 2 basically
is exactly the same as

89
00:03:45.660 --> 00:03:48.330
Manifest Version 1 with a little
bit of extra stuff

90
00:03:48.330 --> 00:03:50.860
layered on top, a few
restrictions but also a few

91
00:03:50.860 --> 00:03:51.980
new abilities.

92
00:03:51.980 --> 00:03:55.190
We'll talk about those now.

93
00:03:55.190 --> 00:03:57.790
The attacks that I talked
about earlier would look

94
00:03:57.790 --> 00:03:58.740
something like this.

95
00:03:58.740 --> 00:03:59.930
And these are the sorts
of things that

96
00:03:59.930 --> 00:04:01.510
we're trying to address.

97
00:04:01.510 --> 00:04:05.170
Extensions dive deep into
a web page by injecting

98
00:04:05.170 --> 00:04:06.170
JavaScript.

99
00:04:06.170 --> 00:04:08.450
This injected JavaScript might,
for instance, in a

100
00:04:08.450 --> 00:04:11.430
mapping application or a mapping
extension look for

101
00:04:11.430 --> 00:04:13.360
addresses on the page
and try to do

102
00:04:13.360 --> 00:04:14.460
something useful with them.

103
00:04:14.460 --> 00:04:15.830
It might want to
display a map.

104
00:04:15.830 --> 00:04:18.100
It might want to go out to the
Google Maps API or something

105
00:04:18.100 --> 00:04:19.640
along those lines.

106
00:04:19.640 --> 00:04:23.140
It grabs this information via
inner HTML and passes it to

107
00:04:23.140 --> 00:04:25.570
the background page
via a message.

108
00:04:25.570 --> 00:04:28.520
The background page or a pop-up
or anything along those

109
00:04:28.520 --> 00:04:31.650
lines might then try to use this
information by injecting

110
00:04:31.650 --> 00:04:33.370
it into the background
page or into a

111
00:04:33.370 --> 00:04:35.960
pop-up using inner HTML.

112
00:04:35.960 --> 00:04:38.240
The problem happens when
this information isn't

113
00:04:38.240 --> 00:04:41.470
well-processed, when you don't
really ensure that you're only

114
00:04:41.470 --> 00:04:45.210
getting information that you can
easily and safely inject

115
00:04:45.210 --> 00:04:46.630
the inner HTML.

116
00:04:46.630 --> 00:04:49.860
If, for instance, the website
injected some script tags

117
00:04:49.860 --> 00:04:52.760
inside of the thing your
extension is looking for, then

118
00:04:52.760 --> 00:04:55.880
you've got a big problem because
at this point you've

119
00:04:55.880 --> 00:04:59.650
just injected untrusted script
into a high-permission area of

120
00:04:59.650 --> 00:05:00.860
your extension.

121
00:05:00.860 --> 00:05:02.450
This is a big problem,
in fact.

122
00:05:02.450 --> 00:05:06.400
It's something that a team of
researchers at University of

123
00:05:06.400 --> 00:05:10.800
California at Berkeley have
found exists not really to a

124
00:05:10.800 --> 00:05:14.550
really wide margin within
the extension system.

125
00:05:14.550 --> 00:05:17.930
They went through about 100
extensions and found

126
00:05:17.930 --> 00:05:21.690
vulnerabilities like this
in about 40 of them.

127
00:05:21.690 --> 00:05:25.470
However, they found that 94%
of the vulnerabilities that

128
00:05:25.470 --> 00:05:28.480
they found-- which included
either loading resources over

129
00:05:28.480 --> 00:05:33.190
HTTP as opposed to HTTPS or
the sort of inline scripts

130
00:05:33.190 --> 00:05:34.540
injection issue--

131
00:05:34.540 --> 00:05:37.890
would've been solved if both of
these issues could somehow

132
00:05:37.890 --> 00:05:39.020
be removed.

133
00:05:39.020 --> 00:05:40.430
We think there's a
way to do that.

134
00:05:40.430 --> 00:05:42.780
And I'll talk about it
in just a moment.

135
00:05:42.780 --> 00:05:47.380
Manifest Version 2 introduces,
then, two large changes that

136
00:05:47.380 --> 00:05:49.790
we think are going to help make
the extension ecosystem

137
00:05:49.790 --> 00:05:53.150
more secure and a couple of
small cleanup changes.

138
00:05:53.150 --> 00:05:55.620
The two big changes are a
default content security

139
00:05:55.620 --> 00:05:59.070
policy and web accessible
resources.

140
00:05:59.070 --> 00:06:02.810
Manifest Version 1 is, as of
Chrome 18, deprecated.

141
00:06:02.810 --> 00:06:04.980
We'll talk a little bit about
the schedule that we have in

142
00:06:04.980 --> 00:06:07.210
mind later on.

143
00:06:07.210 --> 00:06:09.370
Manifest Version 2 is very
easy to opt into.

144
00:06:09.370 --> 00:06:12.430
It's simply an attribute inside
of your manifest file.

145
00:06:12.430 --> 00:06:14.650
You say, Manifest Version 2 and
then we know that you're

146
00:06:14.650 --> 00:06:16.800
opting into the new system.

147
00:06:16.800 --> 00:06:19.570
The structural changes are
very straightforward.

148
00:06:19.570 --> 00:06:22.060
First of all, we've made the
background property a little

149
00:06:22.060 --> 00:06:22.920
bit smarter.

150
00:06:22.920 --> 00:06:26.100
Instead of creating a background
.html page that

151
00:06:26.100 --> 00:06:29.420
really contains nothing except
script, you can simply inject

152
00:06:29.420 --> 00:06:32.200
scripts by using the scripts
property inside background.

153
00:06:32.200 --> 00:06:35.760
You could load a library, load
your main.js and go without

154
00:06:35.760 --> 00:06:38.250
actually creating an HTML page
that doesn't do really

155
00:06:38.250 --> 00:06:41.030
anything at all other than
load these scripts.

156
00:06:41.030 --> 00:06:44.410
And also, we've made some
cleanup within the APIs

157
00:06:44.410 --> 00:06:44.890
themselves.

158
00:06:44.890 --> 00:06:46.085
For example, we had
chrome.extension

159
00:06:46.085 --> 00:06:47.335
.getTabContentses.

160
00:06:47.335 --> 00:06:49.400
161
00:06:49.400 --> 00:06:50.440
That's not actually a typo.

162
00:06:50.440 --> 00:06:51.950
That was part of the API.

163
00:06:51.950 --> 00:06:53.180
We've removed that.

164
00:06:53.180 --> 00:06:55.210
Instead, you should use
extension get Views.

165
00:06:55.210 --> 00:06:58.660
There are a couple of other
places where we've combined or

166
00:06:58.660 --> 00:07:01.690
we've removed pluralization that
wasn't necessary, things

167
00:07:01.690 --> 00:07:02.340
along those lines.

168
00:07:02.340 --> 00:07:04.840
If you go to the extension
documentation, you can see a

169
00:07:04.840 --> 00:07:09.260
complete list of all the API
changes that happened.

170
00:07:09.260 --> 00:07:11.740
Let's talk, then, about the
first of the two big changes.

171
00:07:11.740 --> 00:07:14.430
The first one is Web Accessible
Resources.

172
00:07:14.430 --> 00:07:17.370
Web Accessible Resources gives
you a mechanism of determining

173
00:07:17.370 --> 00:07:21.010
exactly which resources inside
your extension should be

174
00:07:21.010 --> 00:07:23.890
available outside the context
of your extension.

175
00:07:23.890 --> 00:07:26.880
If you need to inject a script
file or an image or anything

176
00:07:26.880 --> 00:07:29.930
along these lines into a
website, what you'll need to

177
00:07:29.930 --> 00:07:32.730
do is actually specify
that resource within

178
00:07:32.730 --> 00:07:34.090
your manifest file.

179
00:07:34.090 --> 00:07:36.650
Here we've shown web accessible
resources

180
00:07:36.650 --> 00:07:38.740
public.png.

181
00:07:38.740 --> 00:07:42.370
public.png loads, private.png
fails.

182
00:07:42.370 --> 00:07:44.950
So at this point, you simply
have the ability to whitelist

183
00:07:44.950 --> 00:07:48.710
the specific resources within
your extension that are

184
00:07:48.710 --> 00:07:51.270
available outside the context
of your extension.

185
00:07:51.270 --> 00:07:52.510
This solves a couple
of problems.

186
00:07:52.510 --> 00:07:55.710
For instance, we've seen a lot
of extension developers using

187
00:07:55.710 --> 00:07:59.400
the query string on a options
page or a background page or

188
00:07:59.400 --> 00:08:01.470
something that gets
loaded in order to

189
00:08:01.470 --> 00:08:02.790
actually do some work.

190
00:08:02.790 --> 00:08:06.970
It was then impossible to script
that page by loading it

191
00:08:06.970 --> 00:08:09.080
outside the context
of the extension.

192
00:08:09.080 --> 00:08:12.810
This will remove that sort
of vulnerability.

193
00:08:12.810 --> 00:08:15.910
Content Security Policy, then,
is the second of these two

194
00:08:15.910 --> 00:08:18.550
large changes within
Manifest Version 2.

195
00:08:18.550 --> 00:08:20.730
This is probably the
biggest change.

196
00:08:20.730 --> 00:08:22.600
And it's something that I'm
going to spend a good amount

197
00:08:22.600 --> 00:08:26.220
of time on walking you through
because it's very important.

198
00:08:26.220 --> 00:08:29.250
Content Security Policy gives
you a mechanism of mitigating

199
00:08:29.250 --> 00:08:31.990
the risk of cross-site scripting
attacks by very

200
00:08:31.990 --> 00:08:35.169
specifically whitelisting the
origins that are allowed to

201
00:08:35.169 --> 00:08:38.429
load resources inside of
a certain context.

202
00:08:38.429 --> 00:08:41.860
In this case, we're defining a
policy for extensions that

203
00:08:41.860 --> 00:08:46.230
enables you to determine that
origin one-- so my website--

204
00:08:46.230 --> 00:08:47.750
I should be able to
load resources.

205
00:08:47.750 --> 00:08:49.840
I should be able to load script
from that website.

206
00:08:49.840 --> 00:08:52.770
I shouldn't, however, be able
to load resources from the

207
00:08:52.770 --> 00:08:54.590
evil.example.com.

208
00:08:54.590 --> 00:08:58.030
If somehow people were able to
inject code into my background

209
00:08:58.030 --> 00:09:00.320
page that tried to load
resources from an

210
00:09:00.320 --> 00:09:03.010
unwhitelisted origin, it
would simply fail.

211
00:09:03.010 --> 00:09:05.080
This gives us a good measure
of security.

212
00:09:05.080 --> 00:09:07.220
And it's something that we're
really excited about, not only

213
00:09:07.220 --> 00:09:09.700
for extensions but also
for the open web.

214
00:09:09.700 --> 00:09:11.480
There's going to be a really
good talk on Friday that I

215
00:09:11.480 --> 00:09:12.990
think you should all attend
if you're at all

216
00:09:12.990 --> 00:09:14.280
interested in security.

217
00:09:14.280 --> 00:09:17.590
And really everyone should be.

218
00:09:17.590 --> 00:09:18.960
There's a lot of
detail on this.

219
00:09:18.960 --> 00:09:21.170
I'm not going to go into a
whole lot of detail about

220
00:09:21.170 --> 00:09:24.160
Content Security Policy itself,
how it actually works,

221
00:09:24.160 --> 00:09:26.350
and how you define a Content
Security Policy.

222
00:09:26.350 --> 00:09:29.330
We've just published an article
on HTML5Rocks, which

223
00:09:29.330 --> 00:09:31.130
is an excellent website
by the way.

224
00:09:31.130 --> 00:09:33.515
If you go there, you can get
a really good overview of

225
00:09:33.515 --> 00:09:34.720
Content Security Policy.

226
00:09:34.720 --> 00:09:37.560
And I think that's probably a
good use of 10 or so minutes

227
00:09:37.560 --> 00:09:39.330
of your time.

228
00:09:39.330 --> 00:09:41.860
The default Content Security
Policy that we're defining

229
00:09:41.860 --> 00:09:46.240
within the context of Manifest
Version 2 is script src self,

230
00:09:46.240 --> 00:09:47.920
object src self.

231
00:09:47.920 --> 00:09:49.670
This has a couple of impacts.

232
00:09:49.670 --> 00:09:53.490
The basic idea is that you can
only load script from inside

233
00:09:53.490 --> 00:09:55.890
of the context of your
extensions, so inside your

234
00:09:55.890 --> 00:09:58.770
extension package coming
from the same origin.

235
00:09:58.770 --> 00:10:02.310
You can also only load Flash and
other plug-in information

236
00:10:02.310 --> 00:10:04.040
via the same mechanism.

237
00:10:04.040 --> 00:10:06.700
So these sorts of things we
would like you to bundle with

238
00:10:06.700 --> 00:10:08.530
your extension when possible.

239
00:10:08.530 --> 00:10:10.410
It has a couple of
impacts then.

240
00:10:10.410 --> 00:10:13.580
First, no JavaScript can be
loaded by default from third

241
00:10:13.580 --> 00:10:14.725
party servers.

242
00:10:14.725 --> 00:10:16.650
No objects can be loaded
by default

243
00:10:16.650 --> 00:10:18.240
from third-party servers.

244
00:10:18.240 --> 00:10:19.530
No inline JavaScript--

245
00:10:19.530 --> 00:10:20.890
this includes script tags.

246
00:10:20.890 --> 00:10:24.140
It also includes things like
inline event handlers in

247
00:10:24.140 --> 00:10:25.620
JavaScript URLs.

248
00:10:25.620 --> 00:10:29.720
It's simply impossible, you
see, to differentiate code

249
00:10:29.720 --> 00:10:34.650
that was injected maliciously
from code that was inlined in

250
00:10:34.650 --> 00:10:37.430
your web page intentionally.

251
00:10:37.430 --> 00:10:40.220
There is no difference between
the two as far as the HTML

252
00:10:40.220 --> 00:10:41.230
parser is concerned.

253
00:10:41.230 --> 00:10:43.810
It's simply impossible to
make that determination.

254
00:10:43.810 --> 00:10:46.170
And the Security Policy then
takes the safest route, which

255
00:10:46.170 --> 00:10:48.550
is banning it entirely.

256
00:10:48.550 --> 00:10:51.130
No eval, this is an
interesting topic.

257
00:10:51.130 --> 00:10:53.230
And we'll talk about it a little
bit more later on.

258
00:10:53.230 --> 00:10:57.420
But for the moment, by default,
eval is disallowed.

259
00:10:57.420 --> 00:11:00.530
This includes not only eval
itself but also things like

260
00:11:00.530 --> 00:11:04.810
new function, set timeout that
uses a string, and set

261
00:11:04.810 --> 00:11:06.050
interval that uses a string.

262
00:11:06.050 --> 00:11:08.610
So anything that takes strings
and converts them directly

263
00:11:08.610 --> 00:11:11.690
into executed JavaScript is
something that we simply can't

264
00:11:11.690 --> 00:11:16.330
allow within the protected
context of the extension.

265
00:11:16.330 --> 00:11:20.040
Ideally, this means that we'll
be free from XSS attacks

266
00:11:20.040 --> 00:11:21.950
within the context
of the extension.

267
00:11:21.950 --> 00:11:23.760
That probably isn't
completely true.

268
00:11:23.760 --> 00:11:27.190
But Content Security Policy gets
us a heck of a lot closer

269
00:11:27.190 --> 00:11:30.000
to that than we are today.

270
00:11:30.000 --> 00:11:31.700
So let's talk in a little
bit more detail

271
00:11:31.700 --> 00:11:33.470
about third-party resources.

272
00:11:33.470 --> 00:11:35.600
I said that by default you
aren't allowed to load

273
00:11:35.600 --> 00:11:37.040
third-party resources.

274
00:11:37.040 --> 00:11:38.210
This is the case.

275
00:11:38.210 --> 00:11:41.910
You can, however, loosen this
policy to include HTTPS

276
00:11:41.910 --> 00:11:44.770
sources, that is secure
HTTP sources as

277
00:11:44.770 --> 00:11:47.260
opposed to HTTP sources.

278
00:11:47.260 --> 00:11:50.350
If you go to a coffee bar and
hook up to their wi-fi, you

279
00:11:50.350 --> 00:11:54.160
really have no guarantee that
anything you load over HTTP is

280
00:11:54.160 --> 00:11:55.980
actually what the
server sent you.

281
00:11:55.980 --> 00:11:58.590
It's incredibly trivial to
go in and manipulate that

282
00:11:58.590 --> 00:12:00.780
content, injecting new content,

283
00:12:00.780 --> 00:12:02.510
or changing it entirely.

284
00:12:02.510 --> 00:12:05.310
HTTPS, however, is an entirely
different story.

285
00:12:05.310 --> 00:12:08.860
Because it's encrypted, it's
much, much more difficult to

286
00:12:08.860 --> 00:12:12.140
inject anything malicious
into an HTTPS string.

287
00:12:12.140 --> 00:12:14.800
At that point, we feel pretty
good about allowing you to

288
00:12:14.800 --> 00:12:18.260
load things like Google
Analytics over HTTPS as

289
00:12:18.260 --> 00:12:19.810
opposed to HTTP.

290
00:12:19.810 --> 00:12:22.970
So if there are third-party
JavaScripts that you need to

291
00:12:22.970 --> 00:12:25.780
load within the context of your
extension, we would ask

292
00:12:25.780 --> 00:12:29.100
you to specify within the
Content Security Policy that

293
00:12:29.100 --> 00:12:31.840
you define for your extension.

294
00:12:31.840 --> 00:12:34.130
You could write something like
this, script src self, which

295
00:12:34.130 --> 00:12:36.930
means you can load things from
your own extension's origin,

296
00:12:36.930 --> 00:12:40.310
but also https://ssl.goog
le-analytics.com.

297
00:12:40.310 --> 00:12:43.200
This will enable you then to
load Google Analytics, do the

298
00:12:43.200 --> 00:12:46.230
things you need to do with this
external library, but do

299
00:12:46.230 --> 00:12:48.230
it in a very safe way.

300
00:12:48.230 --> 00:12:50.710
We'd actually, however, be
thrilled if you locked things

301
00:12:50.710 --> 00:12:54.200
down even further than the
defaults that we've set.

302
00:12:54.200 --> 00:12:57.120
You can start with a default
source of none, and then list

303
00:12:57.120 --> 00:13:00.080
every single type of resource
that you need to load and the

304
00:13:00.080 --> 00:13:02.450
origins associated with
those resources.

305
00:13:02.450 --> 00:13:03.860
This gives you a much--

306
00:13:03.860 --> 00:13:08.330
a higher degree of security than
simply using the defaults

307
00:13:08.330 --> 00:13:09.260
that we've set.

308
00:13:09.260 --> 00:13:11.760
The defaults take care of the
most dangerous things, that is

309
00:13:11.760 --> 00:13:13.460
scripts and objects.

310
00:13:13.460 --> 00:13:16.100
But if you want to deal with
everything else as well, we'd

311
00:13:16.100 --> 00:13:18.970
be quite happy.

312
00:13:18.970 --> 00:13:21.000
Inline JavaScript, however,
is something that we

313
00:13:21.000 --> 00:13:22.230
simply can't loosen.

314
00:13:22.230 --> 00:13:25.750
This is actually the core of
Content Security Policy.

315
00:13:25.750 --> 00:13:27.750
Because you can't differentiate
between

316
00:13:27.750 --> 00:13:31.120
maliciously injected code and
non-maliciously intentional

317
00:13:31.120 --> 00:13:38.930
code, we simply can't allow this
policy to be loosened.

318
00:13:38.930 --> 00:13:41.550
If you have code that looks
something like this, it's

319
00:13:41.550 --> 00:13:43.970
actually not really best
practice anyway, right.

320
00:13:43.970 --> 00:13:46.450
We have JavaScript,
CSS, and HTML.

321
00:13:46.450 --> 00:13:48.460
But all have very different
purposes.

322
00:13:48.460 --> 00:13:49.830
HTML is there for markup.

323
00:13:49.830 --> 00:13:52.160
CSS is there for your
presentation.

324
00:13:52.160 --> 00:13:54.170
And JavaScript is there
for behavior.

325
00:13:54.170 --> 00:13:57.050
Separating those out into
separate files makes your code

326
00:13:57.050 --> 00:14:00.700
easier to understand and is
really best practice anyway.

327
00:14:00.700 --> 00:14:04.280
If you haven code like this, you
can very easily rewrite it

328
00:14:04.280 --> 00:14:05.920
into two separate files.

329
00:14:05.920 --> 00:14:09.020
So instead of having an inline
event handler on a button, you

330
00:14:09.020 --> 00:14:10.230
would have an external
JavaScript

331
00:14:10.230 --> 00:14:11.450
file that gets loaded.

332
00:14:11.450 --> 00:14:13.820
This JavaScript file would hook
up an event listener.

333
00:14:13.820 --> 00:14:15.470
And at that point, when you
click on the button,

334
00:14:15.470 --> 00:14:17.210
amazingness will still happen.

335
00:14:17.210 --> 00:14:18.670
You'll get the exact
same effect.

336
00:14:18.670 --> 00:14:20.970
But you'll get it in a way
that we can ensure safe.

337
00:14:20.970 --> 00:14:24.260
338
00:14:24.260 --> 00:14:27.370
Eval, on the other hand,
is a bit problematic.

339
00:14:27.370 --> 00:14:30.510
We can't really allow it by
default because your extension

340
00:14:30.510 --> 00:14:32.400
might be working with untrusted

341
00:14:32.400 --> 00:14:33.990
data coming from users.

342
00:14:33.990 --> 00:14:37.370
So user-generated data being
potentially turned directly

343
00:14:37.370 --> 00:14:39.880
into executed JavaScript,
that's problematic.

344
00:14:39.880 --> 00:14:42.710
And it's simply something that
we can't allow within the

345
00:14:42.710 --> 00:14:44.330
context, within this
high-permission

346
00:14:44.330 --> 00:14:46.460
context, of an extension.

347
00:14:46.460 --> 00:14:49.490
We understand, however, that
it's pretty important for a

348
00:14:49.490 --> 00:14:50.640
couple of use cases.

349
00:14:50.640 --> 00:14:53.080
There are a few of you that
really, really need to use

350
00:14:53.080 --> 00:14:56.100
eval and especially eval-like
constructs.

351
00:14:56.100 --> 00:14:59.720
New Function, for instance, is
used in a wide variety of

352
00:14:59.720 --> 00:15:00.640
templating libraries.

353
00:15:00.640 --> 00:15:01.420
And we understand.

354
00:15:01.420 --> 00:15:04.520
We've heard the feedback that
that's incredibly important to

355
00:15:04.520 --> 00:15:06.950
the way that many
of you develop.

356
00:15:06.950 --> 00:15:09.660
We think we have an alternative
or a work around

357
00:15:09.660 --> 00:15:12.370
for this that we're happy with
and that we hope you'll be

358
00:15:12.370 --> 00:15:13.780
happy with as well.

359
00:15:13.780 --> 00:15:17.680
The idea is that you create a
sandbox in which eval can

360
00:15:17.680 --> 00:15:20.320
execute in a non
dangerous way.

361
00:15:20.320 --> 00:15:23.110
Let's talk a little bit about
how that might work.

362
00:15:23.110 --> 00:15:24.200
We have your extension.

363
00:15:24.200 --> 00:15:26.930
And inside of your extension,
you create an iframe.

364
00:15:26.930 --> 00:15:29.670
This iframe is sandboxed,
meaning that it has fewer

365
00:15:29.670 --> 00:15:32.070
permissions than the
extension itself.

366
00:15:32.070 --> 00:15:35.880
We defined in the previous
page sandbox.html.

367
00:15:35.880 --> 00:15:39.310
We load sandbox.html
in an iframe.

368
00:15:39.310 --> 00:15:41.210
It's then pushed off
into a separate

369
00:15:41.210 --> 00:15:43.010
origin from your extension.

370
00:15:43.010 --> 00:15:45.600
This means it doesn't have
access to any data that your

371
00:15:45.600 --> 00:15:47.100
extension has stored.

372
00:15:47.100 --> 00:15:50.190
And it doesn't have access
to the dangerous

373
00:15:50.190 --> 00:15:52.530
chrome.star name space.

374
00:15:52.530 --> 00:15:56.400
So any of the things that your
extension can do, you'll need

375
00:15:56.400 --> 00:15:59.160
to deal with the sandbox in
much the same way that you

376
00:15:59.160 --> 00:16:01.770
deal with content scripts
and injected scripts.

377
00:16:01.770 --> 00:16:05.310
You'll pass messages into the
sandbox containing data that

378
00:16:05.310 --> 00:16:06.900
you'd like to see processed.

379
00:16:06.900 --> 00:16:10.820
Then you'll pass processed data
back out of the sandbox

380
00:16:10.820 --> 00:16:14.250
into your extension giving you
the ability to, for instance,

381
00:16:14.250 --> 00:16:17.080
pass on a context for a template
and get templated

382
00:16:17.080 --> 00:16:20.380
HTML or rendered
HTML back out.

383
00:16:20.380 --> 00:16:23.600
At that point, you can inject
that HTML into your pop-up

384
00:16:23.600 --> 00:16:26.730
page or into your background
page without worrying about

385
00:16:26.730 --> 00:16:29.880
whether it's dangerous or not
because that new HTML, that

386
00:16:29.880 --> 00:16:33.590
newly generated HTML, would
then be executed inside a

387
00:16:33.590 --> 00:16:37.030
context that's protected by
Content Security Policy.

388
00:16:37.030 --> 00:16:40.090
Even if an attacker was
completely able to hijack

389
00:16:40.090 --> 00:16:43.310
everything within your sandbox
HTML file, the worst they

390
00:16:43.310 --> 00:16:46.640
could do is present links or
something that would be useful

391
00:16:46.640 --> 00:16:49.610
for a user or that looks useful
for a user to click on.

392
00:16:49.610 --> 00:16:51.300
They couldn't actually
execute any code.

393
00:16:51.300 --> 00:16:52.890
They couldn't exfiltrate data.

394
00:16:52.890 --> 00:16:54.770
At that point, we're pretty
happy with this as a

395
00:16:54.770 --> 00:16:56.270
compromise.

396
00:16:56.270 --> 00:16:58.900
The code for this would look
relatively straightforward.

397
00:16:58.900 --> 00:17:00.990
As I said, you would inject
an iframe-- in this case,

398
00:17:00.990 --> 00:17:04.329
sandbox.html, which again was
defined in the manifest file

399
00:17:04.329 --> 00:17:06.200
as being a sandboxed file.

400
00:17:06.200 --> 00:17:10.140
When this file is loaded, you
would fill that iframe with

401
00:17:10.140 --> 00:17:10.970
templating goodness.

402
00:17:10.970 --> 00:17:13.650
So at this point, I'm using
something like Handlebars.

403
00:17:13.650 --> 00:17:15.710
Many of you are using different
frameworks.

404
00:17:15.710 --> 00:17:17.880
They would generally
work the same way.

405
00:17:17.880 --> 00:17:22.550
You want to inject or you want
to code a sandboxed page that

406
00:17:22.550 --> 00:17:25.240
contains all of this templating
information and

407
00:17:25.240 --> 00:17:29.110
then create sandbox.js,
which has--

408
00:17:29.110 --> 00:17:33.270
will basically create an API
on top of your sandbox that

409
00:17:33.270 --> 00:17:35.810
allows messages to be passed in
with a certain command and

410
00:17:35.810 --> 00:17:37.240
a certain context.

411
00:17:37.240 --> 00:17:39.420
Then you'll be able to execute
that information.

412
00:17:39.420 --> 00:17:41.440
So I create a template at
the top of the page.

413
00:17:41.440 --> 00:17:43.490
This is just the way
Handlebars works.

414
00:17:43.490 --> 00:17:45.600
And then I listen for
a message event.

415
00:17:45.600 --> 00:17:48.280
When a message event comes in
with the command of render,

416
00:17:48.280 --> 00:17:53.230
then I post a message back to
the extension containing some

417
00:17:53.230 --> 00:17:54.110
templated data.

418
00:17:54.110 --> 00:17:58.020
So I execute template with the
context that I passed in.

419
00:17:58.020 --> 00:17:59.370
This gives me new HTML.

420
00:17:59.370 --> 00:18:00.300
I pass it back out.

421
00:18:00.300 --> 00:18:01.840
And I can do whatever
I want with it in a

422
00:18:01.840 --> 00:18:03.550
relatively safe way.

423
00:18:03.550 --> 00:18:05.290
That side would look
like this.

424
00:18:05.290 --> 00:18:07.630
When I click on the browser
action, I pass information

425
00:18:07.630 --> 00:18:09.510
into the iframe content
window.

426
00:18:09.510 --> 00:18:12.440
And I get the information back
out as a message event.

427
00:18:12.440 --> 00:18:15.350
This gives me the ability then,
as I said, to sandbox

428
00:18:15.350 --> 00:18:16.640
the way that eval works.

429
00:18:16.640 --> 00:18:19.360
This means I can do the
dangerous things.

430
00:18:19.360 --> 00:18:21.890
But I do them in a context in
which those things are no

431
00:18:21.890 --> 00:18:23.140
longer dangerous.

432
00:18:23.140 --> 00:18:26.060
433
00:18:26.060 --> 00:18:28.560
The Support Schedule for
Manifest Version 1 is as

434
00:18:28.560 --> 00:18:30.780
follows at the moment.

435
00:18:30.780 --> 00:18:34.510
Chrome 21 is coming out
mid to end of August.

436
00:18:34.510 --> 00:18:37.440
At this point, no new extensions
built using

437
00:18:37.440 --> 00:18:39.570
Manifest Version 1 will
be accepted in

438
00:18:39.570 --> 00:18:41.080
the Chrome Web Store.

439
00:18:41.080 --> 00:18:43.510
It's not, however, the case that
old extensions at this

440
00:18:43.510 --> 00:18:45.280
point will have any problems
whatsoever.

441
00:18:45.280 --> 00:18:48.130
Old extensions will be
grandfathered in.

442
00:18:48.130 --> 00:18:50.290
If you currently have an
extension in the store that's

443
00:18:50.290 --> 00:18:52.240
using Manifest Version
1, you're fine

444
00:18:52.240 --> 00:18:53.030
for a little while.

445
00:18:53.030 --> 00:18:55.570
But this is our message
to you.

446
00:18:55.570 --> 00:18:57.220
Manifest Version 1
is deprecated.

447
00:18:57.220 --> 00:19:00.085
We really need to move to a
system that is more secure,

448
00:19:00.085 --> 00:19:02.820
that gives us these guarantees
in a way that we

449
00:19:02.820 --> 00:19:04.420
simply can't do now.

450
00:19:04.420 --> 00:19:06.750
We've had Content Security
Policy in the extension system

451
00:19:06.750 --> 00:19:07.600
for a while.

452
00:19:07.600 --> 00:19:10.090
And it simply hasn't gotten
enough adoption for it to be

453
00:19:10.090 --> 00:19:12.830
useful for us as a security
mechanism.

454
00:19:12.830 --> 00:19:17.890
We're going to need to migrate
extensions over to the new

455
00:19:17.890 --> 00:19:18.880
Manifest version.

456
00:19:18.880 --> 00:19:21.910
And we're doing it with
a schedule as follows.

457
00:19:21.910 --> 00:19:25.370
Chrome 23, Chrome will stop
packaging Manifest Version 1.

458
00:19:25.370 --> 00:19:28.770
This means if you want to
package a Manifest Version 1

459
00:19:28.770 --> 00:19:31.590
extension for distribution
outside the Chrome Web Store,

460
00:19:31.590 --> 00:19:33.180
you won't be able to do it
through Chrome anymore.

461
00:19:33.180 --> 00:19:35.600
You'll need to write something
on your own.

462
00:19:35.600 --> 00:19:39.660
Some time in Q1 2013, we're
looking at Manifest Version 1s

463
00:19:39.660 --> 00:19:42.010
not appearing in search
any longer.

464
00:19:42.010 --> 00:19:44.650
This is the point at which old
extensions are going to start

465
00:19:44.650 --> 00:19:46.610
seeing impacts from this.

466
00:19:46.610 --> 00:19:50.040
Some time in the middle of Q--
of 2013, Manifest Version 1

467
00:19:50.040 --> 00:19:52.640
items will simply be unpublished
from the store.

468
00:19:52.640 --> 00:19:54.480
We're going to be publishing
warnings about this.

469
00:19:54.480 --> 00:19:56.830
We're going to be sending
emails out about this.

470
00:19:56.830 --> 00:19:59.580
We're going to make it very
clear what's going on.

471
00:19:59.580 --> 00:20:02.620
And we're very much hoping that
we can get you guys to

472
00:20:02.620 --> 00:20:04.300
come along with us.

473
00:20:04.300 --> 00:20:09.810
In 2013, whenever we're happy
with the way things are going,

474
00:20:09.810 --> 00:20:12.380
we'll turn off Manifest
Version 1

475
00:20:12.380 --> 00:20:14.190
inside of Chrome, period.

476
00:20:14.190 --> 00:20:17.290
This means even extensions
that are loaded within--

477
00:20:17.290 --> 00:20:19.970
in Enterprise, for instance,
will simply not work anymore

478
00:20:19.970 --> 00:20:21.390
in new versions of Chrome.

479
00:20:21.390 --> 00:20:24.640
So we're definitely looking to
move people over relatively

480
00:20:24.640 --> 00:20:27.630
quickly for Manifest Version
1 to Manifest Version 2.

481
00:20:27.630 --> 00:20:29.400
We're really looking for
feedback about this.

482
00:20:29.400 --> 00:20:32.250
We want to know what the pain
points are so that we can make

483
00:20:32.250 --> 00:20:33.310
the system better.

484
00:20:33.310 --> 00:20:35.530
We've heard your feedback with
regard to templating.

485
00:20:35.530 --> 00:20:38.180
We think sandboxing is a
good alternative there.

486
00:20:38.180 --> 00:20:40.430
If there are other pain points
that are really causing

487
00:20:40.430 --> 00:20:43.380
problems in this migration, we
really want to hear about it

488
00:20:43.380 --> 00:20:46.020
so that we can fix it and make
it easy for you guys to

489
00:20:46.020 --> 00:20:49.370
migrate from one to the other.

490
00:20:49.370 --> 00:20:51.840
We've talked a little bit about
Manifest Version 2.

491
00:20:51.840 --> 00:20:53.400
It's a big change.

492
00:20:53.400 --> 00:20:56.150
It, however, has a lot of
benefits that we think are

493
00:20:56.150 --> 00:20:57.450
really valuable.

494
00:20:57.450 --> 00:21:01.100
And it also is going to enable
us to build new APIs that are

495
00:21:01.100 --> 00:21:02.080
more targeted.

496
00:21:02.080 --> 00:21:04.570
And these new APIs, we think,
are going to be really

497
00:21:04.570 --> 00:21:06.100
interesting for developers.

498
00:21:06.100 --> 00:21:08.270
Let's talk a little bit
about some of them.

499
00:21:08.270 --> 00:21:11.760
So, many of the APIs that we've
produced over the last

500
00:21:11.760 --> 00:21:14.760
three years in the extension
framework have been very much

501
00:21:14.760 --> 00:21:15.790
like chainsaws.

502
00:21:15.790 --> 00:21:16.500
They're large.

503
00:21:16.500 --> 00:21:17.320
They're powerful.

504
00:21:17.320 --> 00:21:19.870
But it's relatively easy to
sever a limb if you're not

505
00:21:19.870 --> 00:21:21.030
being careful.

506
00:21:21.030 --> 00:21:23.090
What we'd like to produce is
something much more like

507
00:21:23.090 --> 00:21:24.760
X-Acto knives or scalpels--

508
00:21:24.760 --> 00:21:27.760
something that's very fine in
detail that gives you the

509
00:21:27.760 --> 00:21:31.180
ability to do the things that
you need to do, but do it in a

510
00:21:31.180 --> 00:21:33.220
way that's much less dangerous,
that doesn't

511
00:21:33.220 --> 00:21:36.180
require the same permission set,
specifically with regard

512
00:21:36.180 --> 00:21:37.920
to host permission.

513
00:21:37.920 --> 00:21:40.170
What we also want to do,
however, is reduce the number

514
00:21:40.170 --> 00:21:42.250
of resources that are
used by extensions

515
00:21:42.250 --> 00:21:44.710
on an ongoing basis.

516
00:21:44.710 --> 00:21:46.210
You see here that I have--

517
00:21:46.210 --> 00:21:47.570
and I have a lot of extensions
installed.

518
00:21:47.570 --> 00:21:50.100
I've basically installed every
Google extension that I could

519
00:21:50.100 --> 00:21:53.070
find on the first couple of
pages of the Chrome Web Store.

520
00:21:53.070 --> 00:21:55.220
What we see here is, first
of all, it's relatively

521
00:21:55.220 --> 00:21:56.360
difficult to use.

522
00:21:56.360 --> 00:21:59.440
But if we look at the Task
Manager, we'll see that all of

523
00:21:59.440 --> 00:22:00.360
these extensions--

524
00:22:00.360 --> 00:22:03.100
even though they're doing
absolutely nothing right now--

525
00:22:03.100 --> 00:22:07.320
are taking up a large number of
resources, anywhere from 20

526
00:22:07.320 --> 00:22:09.510
to 30 meg, depending
on the extension.

527
00:22:09.510 --> 00:22:11.050
It isn't quite as bad
as it sounds.

528
00:22:11.050 --> 00:22:12.700
Much of this memory is
shared because of

529
00:22:12.700 --> 00:22:13.980
multi process model.

530
00:22:13.980 --> 00:22:16.650
But it's still much more than we
think extensions should be

531
00:22:16.650 --> 00:22:19.220
using when they're not doing
anything at all.

532
00:22:19.220 --> 00:22:21.250
We'd like to kill off
those processes.

533
00:22:21.250 --> 00:22:23.310
And we'd like to shrink the
amount of resource that's

534
00:22:23.310 --> 00:22:25.660
being used an ongoing basis.

535
00:22:25.660 --> 00:22:27.450
The mechanism we are looking
at for doing

536
00:22:27.450 --> 00:22:28.400
that is event pages.

537
00:22:28.400 --> 00:22:31.030
We published a blog post on
Chromium.org about this, I

538
00:22:31.030 --> 00:22:32.490
think, last week.

539
00:22:32.490 --> 00:22:35.670
The idea of event pages is that
they work very similarly

540
00:22:35.670 --> 00:22:36.810
to background pages.

541
00:22:36.810 --> 00:22:39.430
But they disappear when you're
not actually using them.

542
00:22:39.430 --> 00:22:41.700
So we can kill the
process entirely.

543
00:22:41.700 --> 00:22:43.900
This has a large number
of benefits.

544
00:22:43.900 --> 00:22:47.900
First of all, by killing the
process, we ensure that even

545
00:22:47.900 --> 00:22:50.340
if there's a leak somewhere in
your extension, by killing

546
00:22:50.340 --> 00:22:52.980
that background process, we
can also kill the leaks.

547
00:22:52.980 --> 00:22:56.270
So even if there's a leaky
extension, we reclaim all of

548
00:22:56.270 --> 00:22:59.440
those resources simply by
reaping the entire process.

549
00:22:59.440 --> 00:23:02.510
It also gives us the ability to
move to a more event-driven

550
00:23:02.510 --> 00:23:05.780
model, something that we think
is really going to be useful

551
00:23:05.780 --> 00:23:09.020
for low memory devices,
like Chrome OS.

552
00:23:09.020 --> 00:23:10.980
If you're looking at a
Chromebook, it's not going to

553
00:23:10.980 --> 00:23:13.250
be possible for you to load
hundreds and hundreds of

554
00:23:13.250 --> 00:23:15.610
extensions if each of them is
taking up memory in the

555
00:23:15.610 --> 00:23:18.320
background, regardless of
whether they're active or not.

556
00:23:18.320 --> 00:23:21.180
We want to make sure that on
these low resource devices

557
00:23:21.180 --> 00:23:23.750
that we point those resources
towards the things that you're

558
00:23:23.750 --> 00:23:26.480
actually doing as opposed to the
things you might be doing.

559
00:23:26.480 --> 00:23:29.630
560
00:23:29.630 --> 00:23:30.830
Event pages are opt-in.

561
00:23:30.830 --> 00:23:32.090
And it's very straightforward.

562
00:23:32.090 --> 00:23:34.090
When you use the new background
page syntax, you

563
00:23:34.090 --> 00:23:35.740
simply write, persistent
false.

564
00:23:35.740 --> 00:23:37.390
So you set this flag to false.

565
00:23:37.390 --> 00:23:39.770
And at that point, your
background page will simply be

566
00:23:39.770 --> 00:23:42.670
killed when it's not doing
anything useful.

567
00:23:42.670 --> 00:23:44.410
The life cycle is as follows.

568
00:23:44.410 --> 00:23:47.160
We load the background
page on installation.

569
00:23:47.160 --> 00:23:49.890
At that point, we record all
of the events that are

570
00:23:49.890 --> 00:23:51.580
registered within the
background page.

571
00:23:51.580 --> 00:23:54.160
So your background page might
look something like this.

572
00:23:54.160 --> 00:23:56.050
It might be a main.js.

573
00:23:56.050 --> 00:23:57.950
You might register for
a couple of events.

574
00:23:57.950 --> 00:24:00.860
Chrome will remember and persist
all of these events.

575
00:24:00.860 --> 00:24:04.810
Then when your background page
is killed, we can start it up

576
00:24:04.810 --> 00:24:07.890
again based upon these events,
based upon user interaction.

577
00:24:07.890 --> 00:24:10.140
So in the middle, I register
for chrome

578
00:24:10.140 --> 00:24:11.780
browser action unclicked.

579
00:24:11.780 --> 00:24:14.070
Chrome will remember this, even
when the background page

580
00:24:14.070 --> 00:24:15.090
isn't there anymore.

581
00:24:15.090 --> 00:24:17.510
If I click on the browser
action, it'll restart the

582
00:24:17.510 --> 00:24:21.225
process, spin it back up again,
and execute or pass in

583
00:24:21.225 --> 00:24:24.790
this event so that I can execute
something useful.

584
00:24:24.790 --> 00:24:27.780
You'll see two new events,
chrome runtime on installed

585
00:24:27.780 --> 00:24:29.900
and chrome runtime on suspend.

586
00:24:29.900 --> 00:24:33.770
Chrome runtime on installed is
triggered on installation but

587
00:24:33.770 --> 00:24:35.210
also on every update.

588
00:24:35.210 --> 00:24:38.250
This gives you the ability to
determine whether or not the

589
00:24:38.250 --> 00:24:40.550
extension is being installed
for the first time, which

590
00:24:40.550 --> 00:24:44.630
gives you a good opportunity to
use the Chrome storage APIs

591
00:24:44.630 --> 00:24:47.650
in order to set some values, to
do some set up, to set some

592
00:24:47.650 --> 00:24:50.760
flags or whatever it is that
your extension actually needs.

593
00:24:50.760 --> 00:24:53.370
But on update, you can also
do things like migration.

594
00:24:53.370 --> 00:24:55.370
So if you're using index to be
in the background, you could

595
00:24:55.370 --> 00:24:56.670
at this point check the version

596
00:24:56.670 --> 00:24:57.870
of the current database.

597
00:24:57.870 --> 00:25:01.000
And if it's the old database
then migrate to the new one.

598
00:25:01.000 --> 00:25:02.680
So this, we think, is going
to give you some good

599
00:25:02.680 --> 00:25:06.505
opportunities for dealing with
these sorts of events that

600
00:25:06.505 --> 00:25:08.650
were difficult to deal
with in the past.

601
00:25:08.650 --> 00:25:11.340
Chrome runtime on suspend is
called when the background

602
00:25:11.340 --> 00:25:12.810
page is about to be killed.

603
00:25:12.810 --> 00:25:15.860
So when Chrome recognizes that
the background page isn't

604
00:25:15.860 --> 00:25:18.240
doing anything-- it doesn't have
any pop-ups open, you're

605
00:25:18.240 --> 00:25:20.150
not inspecting it at the moment,
it doesn't have any

606
00:25:20.150 --> 00:25:22.770
active network requests, and
things along these lines--

607
00:25:22.770 --> 00:25:24.930
will go ahead and send an
on suspend event to the

608
00:25:24.930 --> 00:25:26.060
background page.

609
00:25:26.060 --> 00:25:28.220
You'll have a little bit of time
here to do any sort of

610
00:25:28.220 --> 00:25:29.670
last minute saving.

611
00:25:29.670 --> 00:25:32.390
This isn't a good time to start
uploading 10 megs of

612
00:25:32.390 --> 00:25:34.170
data to an external server.

613
00:25:34.170 --> 00:25:35.790
You should be saving
as you go.

614
00:25:35.790 --> 00:25:38.560
Basically, you should be ready
to die as soon as this thing

615
00:25:38.560 --> 00:25:39.450
is called--

616
00:25:39.450 --> 00:25:41.190
or your process should
be ready to die.

617
00:25:41.190 --> 00:25:43.970
You, of course, should
not be ready to die.

618
00:25:43.970 --> 00:25:45.660
Chrome runtime on suspend
will be called.

619
00:25:45.660 --> 00:25:46.480
It'll execute.

620
00:25:46.480 --> 00:25:49.440
And then some arbitrary period
of time later, your process

621
00:25:49.440 --> 00:25:50.910
will be killed entirely.

622
00:25:50.910 --> 00:25:52.700
It'll be spun back up
again when any of

623
00:25:52.700 --> 00:25:55.520
these events are triggered.

624
00:25:55.520 --> 00:25:58.000
It's not, however, the case that
you can only respond to

625
00:25:58.000 --> 00:25:59.130
user driven events.

626
00:25:59.130 --> 00:26:01.120
Some of your writing extensions
that need to go out

627
00:26:01.120 --> 00:26:04.230
to the web, pull some data,
store it locally, and then be

628
00:26:04.230 --> 00:26:06.400
ready and responsive
for your users.

629
00:26:06.400 --> 00:26:09.320
We've then created an Alarms
API that works exactly for

630
00:26:09.320 --> 00:26:10.480
this use case.

631
00:26:10.480 --> 00:26:13.420
At some point in the future,
you can wake your extension

632
00:26:13.420 --> 00:26:16.830
back up, do some processing,
and then go back to sleep.

633
00:26:16.830 --> 00:26:19.410
For example, you can create
a period in minutes, which

634
00:26:19.410 --> 00:26:21.540
simply means that your extension
will be triggered

635
00:26:21.540 --> 00:26:23.550
every 10 minutes
at this point.

636
00:26:23.550 --> 00:26:25.960
Every 10 minutes, you can go out
to the web, pull some new

637
00:26:25.960 --> 00:26:29.140
information, store it locally,
and be ready for your user's

638
00:26:29.140 --> 00:26:31.620
response whenever-- or ready
to respond to your user

639
00:26:31.620 --> 00:26:34.400
whenever they actually interact
with your extension.

640
00:26:34.400 --> 00:26:38.100
You can do this as a one off,
as a repeating, or at some

641
00:26:38.100 --> 00:26:39.210
specific point in the future.

642
00:26:39.210 --> 00:26:42.180
We give you a lot
of options here.

643
00:26:42.180 --> 00:26:45.480
Another area in which we see
extensions actually requesting

644
00:26:45.480 --> 00:26:49.370
more permissions than they need
is keyboard shortcuts.

645
00:26:49.370 --> 00:26:51.480
Key bindings, at the moment,
are a big mess

646
00:26:51.480 --> 00:26:52.920
in extension land.

647
00:26:52.920 --> 00:26:56.500
To bind to a specific keyboard
shortcut, you have to request

648
00:26:56.500 --> 00:26:59.370
host permissions to all URLs,
so the entire internet.

649
00:26:59.370 --> 00:27:00.750
Then you inject a content
script that

650
00:27:00.750 --> 00:27:02.210
listens for key presses.

651
00:27:02.210 --> 00:27:04.580
And you really, really hope
that this content script

652
00:27:04.580 --> 00:27:06.985
doesn't actually interfere in
some way with the application

653
00:27:06.985 --> 00:27:10.180
that your user is running or get
overwritten in some way by

654
00:27:10.180 --> 00:27:12.170
the application user
is running.

655
00:27:12.170 --> 00:27:14.060
We can do much better
than this.

656
00:27:14.060 --> 00:27:16.690
Our attempt at doing better is
the keybindings API, which is

657
00:27:16.690 --> 00:27:18.370
currently an experimental.

658
00:27:18.370 --> 00:27:21.070
The keybindings API is a
declarative API that allows

659
00:27:21.070 --> 00:27:22.910
you to say, I want to respond.

660
00:27:22.910 --> 00:27:24.610
Or I have a couple
of commands.

661
00:27:24.610 --> 00:27:27.090
And these commands should be
associated with specific

662
00:27:27.090 --> 00:27:29.230
suggested keyboard shortcuts.

663
00:27:29.230 --> 00:27:29.900
This is--

664
00:27:29.900 --> 00:27:31.870
should be, I think, be
relatively straightforward.

665
00:27:31.870 --> 00:27:33.140
You define a list of commands.

666
00:27:33.140 --> 00:27:34.630
Each of the commands
has a description

667
00:27:34.630 --> 00:27:35.770
associated with it.

668
00:27:35.770 --> 00:27:38.720
And each of the commands has
a list of suggested keys.

669
00:27:38.720 --> 00:27:41.280
You can set up different
suggested keys for the default

670
00:27:41.280 --> 00:27:42.860
or for a specific platform.

671
00:27:42.860 --> 00:27:45.420
We think this gives you
a lot of flexibility.

672
00:27:45.420 --> 00:27:48.080
Inside of your extension will
look a little bit like this.

673
00:27:48.080 --> 00:27:51.160
You'll hook it into the on
command event of keybindings.

674
00:27:51.160 --> 00:27:53.010
And, at that point, you'll
get a string.

675
00:27:53.010 --> 00:27:55.250
And that string is going to be
the same string you defined in

676
00:27:55.250 --> 00:27:56.530
the manifest file.

677
00:27:56.530 --> 00:27:57.370
You'll get this command.

678
00:27:57.370 --> 00:27:59.960
You can respond to it
in some useful way.

679
00:27:59.960 --> 00:28:03.020
What you might have seen is
Execute Browser Action as a

680
00:28:03.020 --> 00:28:06.330
specific command that will
allow you to execute the

681
00:28:06.330 --> 00:28:09.430
pop-up or execute the On Clicked
event of your browser

682
00:28:09.430 --> 00:28:11.780
action with a keyboard
shortcut.

683
00:28:11.780 --> 00:28:14.110
This is something that hasn't
been possible before, even by

684
00:28:14.110 --> 00:28:15.350
injecting content scripts.

685
00:28:15.350 --> 00:28:17.350
And it's going to be a big
benefit, we think, of moving

686
00:28:17.350 --> 00:28:19.000
over to the keybindings API.

687
00:28:19.000 --> 00:28:21.470
You'll be able to, for instance,
just do a pop-up by

688
00:28:21.470 --> 00:28:24.330
executing some keyboard
shortcut.

689
00:28:24.330 --> 00:28:25.440
There are a couple
of to-dos here.

690
00:28:25.440 --> 00:28:26.400
It's not done.

691
00:28:26.400 --> 00:28:28.520
As you notice, it's
an experimental.

692
00:28:28.520 --> 00:28:30.820
Mac support is simply
nonexistent at the moment.

693
00:28:30.820 --> 00:28:31.520
We're working on it.

694
00:28:31.520 --> 00:28:33.170
But it's going to take
a little time.

695
00:28:33.170 --> 00:28:36.060
And we also don't have any UI
for dealing with conflicts.

696
00:28:36.060 --> 00:28:38.430
We have some UI for assigning
shortcuts.

697
00:28:38.430 --> 00:28:39.910
But it's just not there yet.

698
00:28:39.910 --> 00:28:42.350
We actually just implemented
saving last week.

699
00:28:42.350 --> 00:28:43.810
You could look at
it beforehand.

700
00:28:43.810 --> 00:28:47.020
But this week you can actually
save new keyboard shortcuts.

701
00:28:47.020 --> 00:28:47.760
So we're getting there.

702
00:28:47.760 --> 00:28:49.900
Slowly but surely.

703
00:28:49.900 --> 00:28:51.760
Let's talk a little bit
about network APIs.

704
00:28:51.760 --> 00:28:54.010
There a couple of really
interesting APIs that we've

705
00:28:54.010 --> 00:28:55.800
released over the last year.

706
00:28:55.800 --> 00:28:59.980
And the usage of those APIs has
surprised us in some ways

707
00:28:59.980 --> 00:29:02.985
but is also, we think, pointing
towards things that

708
00:29:02.985 --> 00:29:05.060
we can do in the future
to make things better.

709
00:29:05.060 --> 00:29:06.360
That future thing
is going to be a

710
00:29:06.360 --> 00:29:08.430
declarative web request API.

711
00:29:08.430 --> 00:29:10.280
To understand why that's
important and why that's

712
00:29:10.280 --> 00:29:12.610
valuable, let's first talk a
little bit about the web

713
00:29:12.610 --> 00:29:15.390
request API that exists today.

714
00:29:15.390 --> 00:29:17.150
The web request API looks
something like this.

715
00:29:17.150 --> 00:29:19.810
In this case, I went to block
my user from going to

716
00:29:19.810 --> 00:29:20.910
malicious websites.

717
00:29:20.910 --> 00:29:25.180
As we all know, malicious
websites have an evil=1 as the

718
00:29:25.180 --> 00:29:26.770
last get parameter.

719
00:29:26.770 --> 00:29:27.650
I mean, it's great.

720
00:29:27.650 --> 00:29:29.750
It's really useful that they do
this because it allows us

721
00:29:29.750 --> 00:29:31.520
to block their requests.

722
00:29:31.520 --> 00:29:33.150
Blocking their requests looks
something like this,

723
00:29:33.150 --> 00:29:35.330
chrome.webreques
t.onbeforerequest--

724
00:29:35.330 --> 00:29:37.110
so before the request is
actually sent out of my

725
00:29:37.110 --> 00:29:39.450
computer to do something
useful.

726
00:29:39.450 --> 00:29:41.860
You see the last item here
contains a few flags, in this

727
00:29:41.860 --> 00:29:42.890
case blocking.

728
00:29:42.890 --> 00:29:45.610
This is the first synchronous
API that we've created.

729
00:29:45.610 --> 00:29:48.650
And the synchronicity of
the API is a little bit

730
00:29:48.650 --> 00:29:50.180
problematic for us.

731
00:29:50.180 --> 00:29:52.020
It's problematic for the
following reasons.

732
00:29:52.020 --> 00:29:53.880
Chrome looks more or
less like this.

733
00:29:53.880 --> 00:29:56.630
We have a browser process that
manages a wide variety of

734
00:29:56.630 --> 00:29:58.310
renderer processes.

735
00:29:58.310 --> 00:30:01.800
Each tab, more or less, has
its own renderer process.

736
00:30:01.800 --> 00:30:05.510
So, if a web page wants to load
a URL, if they're using a

737
00:30:05.510 --> 00:30:09.000
web request API, the web page
will say, OK, I'd like to load

738
00:30:09.000 --> 00:30:09.830
this image.

739
00:30:09.830 --> 00:30:11.860
That request will be sent
up to the browser.

740
00:30:11.860 --> 00:30:14.260
The browser they need to make a
decision should the web page

741
00:30:14.260 --> 00:30:15.590
load the image or not.

742
00:30:15.590 --> 00:30:19.080
To make that decision, something
it sends a message

743
00:30:19.080 --> 00:30:20.110
down to the extension.

744
00:30:20.110 --> 00:30:21.790
The extension--

745
00:30:21.790 --> 00:30:24.980
or the message then hops from
c to JavaScript in order to

746
00:30:24.980 --> 00:30:27.640
make the determination to do
something useful to execute

747
00:30:27.640 --> 00:30:30.380
this code up above and then
sends that information back to

748
00:30:30.380 --> 00:30:31.730
the browser process.

749
00:30:31.730 --> 00:30:34.500
In parallel, it's sending these
requests out to all the

750
00:30:34.500 --> 00:30:37.500
extensions that have registered
for a web request

751
00:30:37.500 --> 00:30:40.630
that filters into this
specific request.

752
00:30:40.630 --> 00:30:43.050
Sending all of this information
back and forth

753
00:30:43.050 --> 00:30:45.570
between the processes
is costly.

754
00:30:45.570 --> 00:30:47.980
It's more costly than we
actually expected it to be.

755
00:30:47.980 --> 00:30:50.140
If you go to Chrome histograms,
you can see

756
00:30:50.140 --> 00:30:52.870
exactly how costly it
is on your computer.

757
00:30:52.870 --> 00:30:54.570
I created a bit of a
torture test here.

758
00:30:54.570 --> 00:30:56.540
But, you see-- actually, you
probably can't see because

759
00:30:56.540 --> 00:30:57.700
it's really small.

760
00:30:57.700 --> 00:31:00.720
But at the bottom here, the
longest request or the longest

761
00:31:00.720 --> 00:31:04.700
wait between sending a message
from my page to the extension

762
00:31:04.700 --> 00:31:06.980
and back was over two seconds.

763
00:31:06.980 --> 00:31:08.070
Now, this isn't typical.

764
00:31:08.070 --> 00:31:10.460
Most of the requests are
happening in well under 100

765
00:31:10.460 --> 00:31:11.440
milliseconds.

766
00:31:11.440 --> 00:31:14.280
But over two seconds to
process a request is

767
00:31:14.280 --> 00:31:15.110
incredible.

768
00:31:15.110 --> 00:31:17.300
That's much longer than it
should actually take to load

769
00:31:17.300 --> 00:31:18.890
the resource in the
first place.

770
00:31:18.890 --> 00:31:20.660
We need to do better
than this.

771
00:31:20.660 --> 00:31:22.400
And we think we can.

772
00:31:22.400 --> 00:31:27.780
The declarative web request API
is a declarative mechanism

773
00:31:27.780 --> 00:31:30.620
for determining whether or not a
request should be blocked or

774
00:31:30.620 --> 00:31:33.210
redirected or anything
along these lines.

775
00:31:33.210 --> 00:31:35.660
You declare a declarative
web request permission.

776
00:31:35.660 --> 00:31:38.690
And you create a series
of rules.

777
00:31:38.690 --> 00:31:43.370
You might do this in the on
install event of your

778
00:31:43.370 --> 00:31:44.710
background page.

779
00:31:44.710 --> 00:31:45.720
You create a rule.

780
00:31:45.720 --> 00:31:48.340
Rules contain conditions
and actions.

781
00:31:48.340 --> 00:31:50.640
If the request matches
the condition--

782
00:31:50.640 --> 00:31:53.110
so if they're going to
evil.example.com--

783
00:31:53.110 --> 00:31:55.280
then we're going to
block the request.

784
00:31:55.280 --> 00:31:58.740
Once we've created this large
array of rules, we add all of

785
00:31:58.740 --> 00:32:01.310
the rules into Chrome.

786
00:32:01.310 --> 00:32:03.440
And we can do this incredibly
efficiently.

787
00:32:03.440 --> 00:32:06.250
Adding the rules to Chrome
standardizes the way that we

788
00:32:06.250 --> 00:32:09.550
deal with network requests,
giving us the ability to very

789
00:32:09.550 --> 00:32:11.870
efficiently store the
information in the browser

790
00:32:11.870 --> 00:32:14.200
process as opposed to pushing
everything down to the

791
00:32:14.200 --> 00:32:15.560
extension process.

792
00:32:15.560 --> 00:32:16.920
This has a couple
of advantages.

793
00:32:16.920 --> 00:32:18.870
First, we don't have
to do so much IPC

794
00:32:18.870 --> 00:32:20.620
messaging between processes.

795
00:32:20.620 --> 00:32:24.920
But second, because we've
defined a single mechanism for

796
00:32:24.920 --> 00:32:29.590
declaring these sorts of rules,
we can do it very, very

797
00:32:29.590 --> 00:32:32.090
efficiently indeed.

798
00:32:32.090 --> 00:32:34.430
You can set conditions
on basically every

799
00:32:34.430 --> 00:32:35.500
piece of the URL.

800
00:32:35.500 --> 00:32:36.790
So you can look for ports.

801
00:32:36.790 --> 00:32:38.280
You can look for paths.

802
00:32:38.280 --> 00:32:40.140
And you can look for
query strings.

803
00:32:40.140 --> 00:32:42.140
You can also look at the
entire URL if that

804
00:32:42.140 --> 00:32:44.326
suits your use case.

805
00:32:44.326 --> 00:32:47.280
We haven't yet added regex
for the entire URL.

806
00:32:47.280 --> 00:32:48.470
We're working on that.

807
00:32:48.470 --> 00:32:50.970
What we have added, however, is
a variety of conditions--

808
00:32:50.970 --> 00:32:53.630
or, I'm sorry, a variety
of actions.

809
00:32:53.630 --> 00:32:56.210
The actions that are associated
with these URLs

810
00:32:56.210 --> 00:32:57.810
are, for instance,
cancel requests.

811
00:32:57.810 --> 00:32:59.080
This is probably the
most common.

812
00:32:59.080 --> 00:33:00.790
You simply don't want
to make this request

813
00:33:00.790 --> 00:33:01.450
in the first place.

814
00:33:01.450 --> 00:33:03.610
You don't want to send
any information out.

815
00:33:03.610 --> 00:33:05.470
What we also all you
to do is redirect.

816
00:33:05.470 --> 00:33:08.610
And you can redirect not only to
a specific URL, but you can

817
00:33:08.610 --> 00:33:10.270
redirect using a regex.

818
00:33:10.270 --> 00:33:13.530
For instance, you could redirect
all HTTP requests to

819
00:33:13.530 --> 00:33:16.550
the exact same request
on HTTPS.

820
00:33:16.550 --> 00:33:18.800
Unfortunately, it isn't quite
that simple, which is why

821
00:33:18.800 --> 00:33:20.470
HTTPS Everywhere exists.

822
00:33:20.470 --> 00:33:23.850
But we think this is going to
give extensions like HTTPS

823
00:33:23.850 --> 00:33:27.340
Everywhere the ability to create
this really complicated

824
00:33:27.340 --> 00:33:30.520
rule set without actually
jumping into JavaScript in

825
00:33:30.520 --> 00:33:31.770
order to make that
determination.

826
00:33:31.770 --> 00:33:35.060
827
00:33:35.060 --> 00:33:37.450
We also give you the ability
to deal with the request

828
00:33:37.450 --> 00:33:39.810
headers and the response headers
that you can set and

829
00:33:39.810 --> 00:33:43.870
remove headers simply based upon
the URL that the user is

830
00:33:43.870 --> 00:33:47.010
actually going to.

831
00:33:47.010 --> 00:33:48.310
You can ignore rules.

832
00:33:48.310 --> 00:33:50.540
So if you're familiar at all
with email, you've probably

833
00:33:50.540 --> 00:33:51.640
set up a bunch of rules.

834
00:33:51.640 --> 00:33:54.940
And you have things like, if
this, then do this and ignore

835
00:33:54.940 --> 00:33:56.210
the rest of the rules.

836
00:33:56.210 --> 00:33:58.050
This allows you to set
a priority with

837
00:33:58.050 --> 00:33:59.010
each of these rules.

838
00:33:59.010 --> 00:34:01.680
So when you create really
complex rule sets, multiple

839
00:34:01.680 --> 00:34:02.620
things might match.

840
00:34:02.620 --> 00:34:04.910
And you want to make sure that
the right thing actually

841
00:34:04.910 --> 00:34:06.720
executes based upon
that action.

842
00:34:06.720 --> 00:34:08.400
So you set a priority
with the rule.

843
00:34:08.400 --> 00:34:10.820
And at the end of your actions,
you can say, ignore

844
00:34:10.820 --> 00:34:13.159
any other rules that are lower
priority than this one.

845
00:34:13.159 --> 00:34:17.659
846
00:34:17.659 --> 00:34:21.130
The act of tab permission is the
last new thing that I want

847
00:34:21.130 --> 00:34:22.500
to talk about today.

848
00:34:22.500 --> 00:34:25.219
The active tab permission is
something that we think is

849
00:34:25.219 --> 00:34:26.820
going to be really
quite powerful.

850
00:34:26.820 --> 00:34:29.340
It's something that we, I think,
are very excited about.

851
00:34:29.340 --> 00:34:33.530
What it does is allow you to
deal with specific hosts

852
00:34:33.530 --> 00:34:36.449
without requesting permission
for those hosts.

853
00:34:36.449 --> 00:34:39.790
We see a lot of extensions out
there that really only need to

854
00:34:39.790 --> 00:34:42.810
interact with the page the user
is currently viewing.

855
00:34:42.810 --> 00:34:45.440
For example, Google has a
dictionary extension, which

856
00:34:45.440 --> 00:34:48.900
allows you to grab a word out
of a page and give you a

857
00:34:48.900 --> 00:34:50.030
definition for that word.

858
00:34:50.030 --> 00:34:51.219
It's incredibly useful.

859
00:34:51.219 --> 00:34:54.120
But in order to act, it injects
content scripts into

860
00:34:54.120 --> 00:34:56.900
every page that you go
to and then listens

861
00:34:56.900 --> 00:34:58.270
for a browser action.

862
00:34:58.270 --> 00:35:01.180
When you click on the browser
action or use a context menu,

863
00:35:01.180 --> 00:35:04.810
it then grabs the thing that
you've currently selected,

864
00:35:04.810 --> 00:35:06.500
does something useful with
it, and displays

865
00:35:06.500 --> 00:35:07.820
the result to you.

866
00:35:07.820 --> 00:35:10.170
It has to request host
permissions to every website

867
00:35:10.170 --> 00:35:12.280
on the net in order
to do that.

868
00:35:12.280 --> 00:35:15.850
Active tab permission would give
it the ability to, based

869
00:35:15.850 --> 00:35:19.200
upon a user's gesture, inject
script into a page that it

870
00:35:19.200 --> 00:35:21.150
hasn't requested permissions
for.

871
00:35:21.150 --> 00:35:23.310
In this case, I would request
permission for

872
00:35:23.310 --> 00:35:25.440
active tab and tabs.

873
00:35:25.440 --> 00:35:27.130
You'll note that I'm not
requesting any host

874
00:35:27.130 --> 00:35:28.980
permissions at this point.

875
00:35:28.980 --> 00:35:31.540
I can, however, listen
for a browser action.

876
00:35:31.540 --> 00:35:34.560
I could also listen for a
context menu and act upon that

877
00:35:34.560 --> 00:35:37.340
action by injecting script
into this page.

878
00:35:37.340 --> 00:35:39.760
We're using the user's
interaction with either the

879
00:35:39.760 --> 00:35:44.040
browser action or the context
menu in order to give the

880
00:35:44.040 --> 00:35:46.970
extension the ability to inject
script into this new

881
00:35:46.970 --> 00:35:50.230
context, even though it hasn't
explicitly requested

882
00:35:50.230 --> 00:35:51.490
permission for it.

883
00:35:51.490 --> 00:35:53.240
We think this is going to be
really useful, not only for

884
00:35:53.240 --> 00:35:55.430
the Google dictionary extension
but for the wide

885
00:35:55.430 --> 00:35:58.260
variety of extensions that we
see in the Chrome Web Store

886
00:35:58.260 --> 00:36:01.160
that are looking for exactly
this sort of functionality.

887
00:36:01.160 --> 00:36:04.120
We see many extensions that
really don't need permission

888
00:36:04.120 --> 00:36:04.990
for the entire web.

889
00:36:04.990 --> 00:36:07.710
But they don't have any other
mechanism of doing it.

890
00:36:07.710 --> 00:36:09.520
We'd love to see people
experimenting with this.

891
00:36:09.520 --> 00:36:11.940
It's in canary right now.

892
00:36:11.940 --> 00:36:16.070
It'll be in dev relatively
soon.

893
00:36:16.070 --> 00:36:18.150
So we've talked about a wide
variety of things.

894
00:36:18.150 --> 00:36:20.720
What do we actually want
to see happen?

895
00:36:20.720 --> 00:36:23.460
And what do we think that we can
do together as a community

896
00:36:23.460 --> 00:36:25.950
in order to strengthen
this ecosystem?

897
00:36:25.950 --> 00:36:29.230
The first thing is to really
take a hard look at Manifest

898
00:36:29.230 --> 00:36:32.810
Version 2 and start migrating
extensions over to it.

899
00:36:32.810 --> 00:36:36.170
Manifest Version 2 gives us
really good guarantees about

900
00:36:36.170 --> 00:36:39.410
the way that the extension can
function and the security that

901
00:36:39.410 --> 00:36:40.370
comes along with that.

902
00:36:40.370 --> 00:36:44.070
If we ban inline JavaScript,
there's a huge win associated

903
00:36:44.070 --> 00:36:47.200
with that, not only for us but
also for the users that are

904
00:36:47.200 --> 00:36:49.340
using extensions at the
end of the day.

905
00:36:49.340 --> 00:36:50.640
They get a safer ecosystem.

906
00:36:50.640 --> 00:36:55.190
And they can more easily install
extensions with the

907
00:36:55.190 --> 00:36:57.560
understanding that those
extensions are safe.

908
00:36:57.560 --> 00:36:59.960
We'd love to see people start
migrating over to Manifest

909
00:36:59.960 --> 00:37:02.590
Version 2 and, as I said,
talking to us

910
00:37:02.590 --> 00:37:03.780
about the pain points.

911
00:37:03.780 --> 00:37:06.690
We've really heard what people
have said with regard to eval.

912
00:37:06.690 --> 00:37:08.400
We've created a work
around for that.

913
00:37:08.400 --> 00:37:10.540
That's the model that we'd like
to see going forward.

914
00:37:10.540 --> 00:37:13.710
We really want to understand
what the problems are that you

915
00:37:13.710 --> 00:37:15.950
guys are going to face when
you're building extensions in

916
00:37:15.950 --> 00:37:20.060
the future under these
new restrictions.

917
00:37:20.060 --> 00:37:22.930
You can report issues either
by filing a bug at

918
00:37:22.930 --> 00:37:27.530
new.crbug.com or by hopping onto
the Chromium extensions

919
00:37:27.530 --> 00:37:28.500
mailing list.

920
00:37:28.500 --> 00:37:29.550
So you can send an email
to chromium-extensi

921
00:37:29.550 --> 00:37:34.140
ons@chromium.org or subscribe
to the mailing list yourself

922
00:37:34.140 --> 00:37:35.440
if you'd like to do that.

923
00:37:35.440 --> 00:37:38.530
That's via groups.google.com.

924
00:37:38.530 --> 00:37:41.090
We'd then like for you to take
a look at the new APIs that

925
00:37:41.090 --> 00:37:41.940
are coming out.

926
00:37:41.940 --> 00:37:45.620
In the past, we've had the
concept of experimental APIs.

927
00:37:45.620 --> 00:37:48.010
We're going to start doing
away with that slowly.

928
00:37:48.010 --> 00:37:51.020
Instead, we're going to start
experimenting via channels.

929
00:37:51.020 --> 00:37:54.250
That is, an API will be
available in dev but not in

930
00:37:54.250 --> 00:37:56.850
beta or beta but not stable.

931
00:37:56.850 --> 00:37:59.760
This, I think, will give us a
much larger audience for the

932
00:37:59.760 --> 00:38:01.240
new APIs that are coming out.

933
00:38:01.240 --> 00:38:05.790
Instead of only targeting the
users that have set the

934
00:38:05.790 --> 00:38:08.190
experimental flag-- that means
they've gone into flags,

935
00:38:08.190 --> 00:38:10.650
they've set experimental and so
on, which is a very small

936
00:38:10.650 --> 00:38:12.760
number of people indeed--

937
00:38:12.760 --> 00:38:14.350
you'll be able to target
everyone who is

938
00:38:14.350 --> 00:38:15.200
on a certain channel.

939
00:38:15.200 --> 00:38:18.530
So everyone using dev can start
installing extensions

940
00:38:18.530 --> 00:38:20.870
that are using these new
privileges or the new

941
00:38:20.870 --> 00:38:22.700
extension APIs that
are coming out.

942
00:38:22.700 --> 00:38:25.920
And as soon as that moves to
beta, your audience broadens

943
00:38:25.920 --> 00:38:27.030
even further.

944
00:38:27.030 --> 00:38:29.090
We think this will give you the
ability to start playing

945
00:38:29.090 --> 00:38:32.190
around with extension APIs
earlier without forcing your

946
00:38:32.190 --> 00:38:34.150
users to do something
that they're not at

947
00:38:34.150 --> 00:38:34.830
all comfortable with.

948
00:38:34.830 --> 00:38:38.110
That is going in deep into
Chrome and setting some sort

949
00:38:38.110 --> 00:38:40.480
of flag that they don't
understand.

950
00:38:40.480 --> 00:38:44.010
Finally, again, we'd really love
to hear what the issues

951
00:38:44.010 --> 00:38:47.330
are, what the pain points are,
what we can address, and what

952
00:38:47.330 --> 00:38:50.260
we can address together, what
the things are that are really

953
00:38:50.260 --> 00:38:52.450
going to be problematic going
forward because we want to

954
00:38:52.450 --> 00:38:53.560
solve these things.

955
00:38:53.560 --> 00:38:57.060
We want people to start using
the new Manifest version and

956
00:38:57.060 --> 00:38:58.260
the new APIs.

957
00:38:58.260 --> 00:39:00.540
And that's simply not going to
happen if there are blockers.

958
00:39:00.540 --> 00:39:02.480
So we want to understand
those blockers.

959
00:39:02.480 --> 00:39:04.480
And we want to fix them to
the best of our ability.

960
00:39:04.480 --> 00:39:07.160
961
00:39:07.160 --> 00:39:09.570
You can contact me at
any of these places.

962
00:39:09.570 --> 00:39:14.600
So I'm on Twitter, I'm on G+,
that's my website on GitHub.

963
00:39:14.600 --> 00:39:16.630
Or you can send me an email
personally, mkwst@google.com.

964
00:39:16.630 --> 00:39:19.390
965
00:39:19.390 --> 00:39:20.790
I'd be happy to hear from you.

966
00:39:20.790 --> 00:39:22.830
And I'd be happy to hear from
now if you have any questions

967
00:39:22.830 --> 00:39:25.340
or comments.

968
00:39:25.340 --> 00:39:30.100
[APPLAUSE]

969
00:39:30.100 --> 00:39:30.420
Sorry.

970
00:39:30.420 --> 00:39:32.100
There are microphones
in the middle.

971
00:39:32.100 --> 00:39:33.430
So if you can walk over,
then everyone

972
00:39:33.430 --> 00:39:36.475
can hear the questions.

973
00:39:36.475 --> 00:39:38.810
AUDIENCE: So I have two
questions, if that's OK.

974
00:39:38.810 --> 00:39:39.912
MIKE WEST: Yeah, that's fine.

975
00:39:39.912 --> 00:39:40.200
AUDIENCE: Cool.

976
00:39:40.200 --> 00:39:44.820
So what's the-- but with these
background pages that die when

977
00:39:44.820 --> 00:39:45.180
they're not--

978
00:39:45.180 --> 00:39:47.000
MIKE WEST: Event pages, yes.

979
00:39:47.000 --> 00:39:48.440
AUDIENCE: What's the preferred
practice for push

980
00:39:48.440 --> 00:39:50.600
notifications to Chrome
extensions?

981
00:39:50.600 --> 00:39:52.610
MIKE WEST: Push notifications
will be events

982
00:39:52.610 --> 00:39:53.520
just like any other.

983
00:39:53.520 --> 00:39:55.280
That is, you can subscribe
to them.

984
00:39:55.280 --> 00:39:57.260
Chrome will recognize that
you've subscribed to them.

985
00:39:57.260 --> 00:40:01.110
And when one comes in, you'll
get an event notification in

986
00:40:01.110 --> 00:40:03.350
exactly the same way that
you would before.

987
00:40:03.350 --> 00:40:04.600
There really should
be very little

988
00:40:04.600 --> 00:40:06.200
difference with event pages.

989
00:40:06.200 --> 00:40:08.730
It's just subscribing to events
and dealing with that

990
00:40:08.730 --> 00:40:09.240
subscription.

991
00:40:09.240 --> 00:40:10.560
AUDIENCE: OK, cool.

992
00:40:10.560 --> 00:40:14.470
My other question is, I can't
help but notice some parallels

993
00:40:14.470 --> 00:40:18.186
between, like, malicious Chrome
applications being out

994
00:40:18.186 --> 00:40:20.020
there and malicious Android
applications.

995
00:40:20.020 --> 00:40:23.610
And the Android team at Google
has made Bouncer, which for

996
00:40:23.610 --> 00:40:26.770
those who aren't familiar, it's
a dynamic analysis tool

997
00:40:26.770 --> 00:40:28.430
that runs your Android code.

998
00:40:28.430 --> 00:40:31.475
And if it detects malicious
behavior, it

999
00:40:31.475 --> 00:40:32.540
rejects you, basically.

1000
00:40:32.540 --> 00:40:35.820
Do you see anything like this
in the future for Chrome

1001
00:40:35.820 --> 00:40:37.260
extensions?

1002
00:40:37.260 --> 00:40:38.970
MIKE WEST: As I said, I think
we're pretty happy with our

1003
00:40:38.970 --> 00:40:41.660
ability to deal with malicious
Chrome extensions, the

1004
00:40:41.660 --> 00:40:44.980
extensions that are actually
doing damage intentionally.

1005
00:40:44.980 --> 00:40:47.240
The thing that we find much more
difficult to deal with

1006
00:40:47.240 --> 00:40:50.470
are the benign extensions that
are doing really good things

1007
00:40:50.470 --> 00:40:52.450
but are doing them in
dangerous ways.

1008
00:40:52.450 --> 00:40:55.020
These sorts of things, we think,
are better addressed

1009
00:40:55.020 --> 00:40:59.150
simply by applying a policy to
the extensions that forces

1010
00:40:59.150 --> 00:41:02.160
them to do things
the right way.

1011
00:41:02.160 --> 00:41:04.010
I hope that answers
your question.

1012
00:41:04.010 --> 00:41:04.490
AUDIENCE: Sounds good.

1013
00:41:04.490 --> 00:41:05.030
Thanks.

1014
00:41:05.030 --> 00:41:06.280
MIKE WEST: Thank you.

1015
00:41:06.280 --> 00:41:08.980
1016
00:41:08.980 --> 00:41:12.960
AUDIENCE: Are there any plans
to have tighter integration

1017
00:41:12.960 --> 00:41:17.100
for having my web application
detect that you have an

1018
00:41:17.100 --> 00:41:19.070
extension installed and
be able to have

1019
00:41:19.070 --> 00:41:20.080
them communicate together?

1020
00:41:20.080 --> 00:41:22.980
Because right now, if I want
to pass information between

1021
00:41:22.980 --> 00:41:25.840
extension and my page, I have to
use an inner HTML with some

1022
00:41:25.840 --> 00:41:27.430
random element on the page.

1023
00:41:27.430 --> 00:41:29.280
MIKE WEST: I mean, if you have
an extension that should

1024
00:41:29.280 --> 00:41:32.340
interact in some way with
a page, you can have an

1025
00:41:32.340 --> 00:41:34.840
interaction point--

1026
00:41:34.840 --> 00:41:36.820
well, I mean, you can send
messages to the extension.

1027
00:41:36.820 --> 00:41:40.190
So if you have a defined API,
you can send messages over.

1028
00:41:40.190 --> 00:41:42.780
You would have to have
that endpoint as a

1029
00:41:42.780 --> 00:41:44.190
web-accessible resource.

1030
00:41:44.190 --> 00:41:47.280
So that's where the new
stuff would come in.

1031
00:41:47.280 --> 00:41:49.770
What we would also suggest is
that you use the inline

1032
00:41:49.770 --> 00:41:50.870
install mechanism.

1033
00:41:50.870 --> 00:41:54.290
That would actually enable you
to install the extension if it

1034
00:41:54.290 --> 00:41:55.870
isn't already installed
on the website.

1035
00:41:55.870 --> 00:41:58.290
So you could prompt the user and
then install it directly

1036
00:41:58.290 --> 00:42:00.530
from the page without hopping
over to the web store.

1037
00:42:00.530 --> 00:42:02.115
AUDIENCE: And one more
question is, is

1038
00:42:02.115 --> 00:42:05.070
there any plans to--

1039
00:42:05.070 --> 00:42:09.310
for example, we wrote a Chrome
extension that would let users

1040
00:42:09.310 --> 00:42:11.490
give us feedback about an
application or if they

1041
00:42:11.490 --> 00:42:14.310
experienced a bug with our
application, they could send

1042
00:42:14.310 --> 00:42:16.470
us a screen shot basically of
what they were looking at when

1043
00:42:16.470 --> 00:42:17.210
it happened.

1044
00:42:17.210 --> 00:42:20.770
We wanted to be able to get
access to the console log from

1045
00:42:20.770 --> 00:42:22.950
the extension so that we could
see what error they got.

1046
00:42:22.950 --> 00:42:25.610
Is there any plans to get that
kind of information available?

1047
00:42:25.610 --> 00:42:27.200
MIKE WEST: Within your
background page, you should be

1048
00:42:27.200 --> 00:42:30.310
able to use window.onerror in
the exact same way that you do

1049
00:42:30.310 --> 00:42:31.320
on web pages.

1050
00:42:31.320 --> 00:42:33.570
That would give you any
errors that happens.

1051
00:42:33.570 --> 00:42:36.310
And you'd be able to report
those in the same way that you

1052
00:42:36.310 --> 00:42:37.530
can on the open web.

1053
00:42:37.530 --> 00:42:40.100
AUDIENCE: But not like, for
example, informational

1054
00:42:40.100 --> 00:42:43.410
messages, debug messages
we might output.

1055
00:42:43.410 --> 00:42:45.810
MIKE WEST: No, if you're
outputting the messages, then

1056
00:42:45.810 --> 00:42:48.310
you could package those
up in some way

1057
00:42:48.310 --> 00:42:49.430
and save them locally.

1058
00:42:49.430 --> 00:42:51.400
And then if an error occurs,
you could send them.

1059
00:42:51.400 --> 00:42:54.910
But there's no mechanism that
the extension framework itself

1060
00:42:54.910 --> 00:42:56.475
gives you to make
that possible.

1061
00:42:56.475 --> 00:42:56.860
MIKE WEST: Got you.

1062
00:42:56.860 --> 00:42:57.340
Thanks.

1063
00:42:57.340 --> 00:42:57.500
MIKE WEST: Yeah.

1064
00:42:57.500 --> 00:42:58.750
No worries.

1065
00:42:58.750 --> 00:43:00.740
1066
00:43:00.740 --> 00:43:04.000
AUDIENCE: As the Android is
having the Chrome browser, do

1067
00:43:04.000 --> 00:43:05.960
you guys have any plans
for building the

1068
00:43:05.960 --> 00:43:08.300
extension for the Android?

1069
00:43:08.300 --> 00:43:10.110
MIKE WEST: There's nothing to
announce at this point.

1070
00:43:10.110 --> 00:43:11.050
It's difficult.

1071
00:43:11.050 --> 00:43:14.866
And it's difficult.

1072
00:43:14.866 --> 00:43:17.540
AUDIENCE: OK, thanks.

1073
00:43:17.540 --> 00:43:18.460
AUDIENCE: Nice talk.

1074
00:43:18.460 --> 00:43:21.480
I have a question about
the permission.

1075
00:43:21.480 --> 00:43:23.610
It's really cool to have
permissions and extensions.

1076
00:43:23.610 --> 00:43:27.000
That's very cool what
has been done.

1077
00:43:27.000 --> 00:43:30.220
But for the normal user,
everyone's saying-- you know

1078
00:43:30.220 --> 00:43:31.930
that when you have in Chrome Web
Store, you have all these

1079
00:43:31.930 --> 00:43:34.030
permissions saying, old
browser history,

1080
00:43:34.030 --> 00:43:35.120
every single thing.

1081
00:43:35.120 --> 00:43:37.750
Is that going to be taken
care of as well?

1082
00:43:37.750 --> 00:43:40.800
Like the whole point of us
putting all these permissions

1083
00:43:40.800 --> 00:43:42.490
in our extensions right now,
it's going to be more work for

1084
00:43:42.490 --> 00:43:44.020
us to figure out we need.

1085
00:43:44.020 --> 00:43:47.490
But it would be cool if the
Chrome app store says, oh,

1086
00:43:47.490 --> 00:43:48.990
this user's using web sockets.

1087
00:43:48.990 --> 00:43:54.070
Or this user's using those kind
of new HTML technologies

1088
00:43:54.070 --> 00:43:57.760
that you're exposing this
website or exposing this

1089
00:43:57.760 --> 00:43:58.870
hacker website and
stuff like that.

1090
00:43:58.870 --> 00:44:01.460
MIKE WEST: I think what I should
have made clear earlier

1091
00:44:01.460 --> 00:44:04.590
is that by not requesting host
permissions, we can actually

1092
00:44:04.590 --> 00:44:07.610
make the permission messages
much less scary.

1093
00:44:07.610 --> 00:44:09.580
Instead of requesting permission
to the entire

1094
00:44:09.580 --> 00:44:13.320
internet by having, you know,
all URLs as part of your host

1095
00:44:13.320 --> 00:44:16.370
permissions, if you only
request active tab--

1096
00:44:16.370 --> 00:44:19.080
because that always goes through
a user gesture--

1097
00:44:19.080 --> 00:44:20.650
we actually don't have
to show a permission

1098
00:44:20.650 --> 00:44:21.710
warning at that point.

1099
00:44:21.710 --> 00:44:24.990
The permission is explicitly
granted by the user when they

1100
00:44:24.990 --> 00:44:26.540
directly interact with
your extension.

1101
00:44:26.540 --> 00:44:27.800
AUDIENCE: That's
on the timeline

1102
00:44:27.800 --> 00:44:29.900
to fix up the messages.

1103
00:44:29.900 --> 00:44:31.870
MIKE WEST: It's on the timeline
in that we're going

1104
00:44:31.870 --> 00:44:34.430
to create new APIs that
are less dangerous.

1105
00:44:34.430 --> 00:44:37.700
And those new APIs will come
with less scary permission

1106
00:44:37.700 --> 00:44:39.940
messages because they simply
are less scary.

1107
00:44:39.940 --> 00:44:43.320
AUDIENCE: And my next question
is, I like the on suspend and

1108
00:44:43.320 --> 00:44:45.890
on install, because before we
used to do them version check

1109
00:44:45.890 --> 00:44:47.030
all the time.

1110
00:44:47.030 --> 00:44:49.710
And for the on install, is there
a way to know if it's

1111
00:44:49.710 --> 00:44:52.880
updated or installed without
doing a local storage check?

1112
00:44:52.880 --> 00:44:54.930
MIKE WEST: No, you would have
to set something locally.

1113
00:44:54.930 --> 00:44:56.680
AUDIENCE: How about
the on suspend?

1114
00:44:56.680 --> 00:44:59.170
Is there a way to revoke
suspension?

1115
00:44:59.170 --> 00:44:59.880
MIKE WEST: No.

1116
00:44:59.880 --> 00:45:01.420
AUDIENCE: So we can't
do event preval--

1117
00:45:01.420 --> 00:45:05.130
MIKE WEST: No, if your extension
is suspended, it's

1118
00:45:05.130 --> 00:45:07.635
going to be suspended unless the
user interacts with it in

1119
00:45:07.635 --> 00:45:10.850
some way or unless it's being
kept alive by either having a

1120
00:45:10.850 --> 00:45:11.990
long network request --

1121
00:45:11.990 --> 00:45:14.170
AUDIENCE: So there's no way to
wake it up instantly, like--

1122
00:45:14.170 --> 00:45:15.450
MIKE WEST: That would
be the alarms API.

1123
00:45:15.450 --> 00:45:17.740
So you can say that at some
point in the future, I want to

1124
00:45:17.740 --> 00:45:18.930
wake up again.

1125
00:45:18.930 --> 00:45:21.760
So inside of the on suspend
event , you could certainly

1126
00:45:21.760 --> 00:45:23.080
say, you know, in five minutes,

1127
00:45:23.080 --> 00:45:24.530
wake me up to do something.

1128
00:45:24.530 --> 00:45:27.322
But that would be
your mechanism.

1129
00:45:27.322 --> 00:45:27.920
AUDIENCE: OK, thank you.

1130
00:45:27.920 --> 00:45:29.201
MIKE WEST: Thank you.

1131
00:45:29.201 --> 00:45:29.630
AUDIENCE: Hi.

1132
00:45:29.630 --> 00:45:33.200
Are there any updates on
detecting when a user

1133
00:45:33.200 --> 00:45:35.200
uninstalls an extension?

1134
00:45:35.200 --> 00:45:37.410
MIKE WEST: None that
I know of, no.

1135
00:45:37.410 --> 00:45:39.560
That's definitely something
that we can talk about.

1136
00:45:39.560 --> 00:45:43.192
I'd suggest, if there's not
already a bug filed, file a

1137
00:45:43.192 --> 00:45:44.240
bug and send them to me.

1138
00:45:44.240 --> 00:45:44.970
AUDIENCE: It's there.

1139
00:45:44.970 --> 00:45:45.970
MIKE WEST: OK.

1140
00:45:45.970 --> 00:45:47.520
Send me the ID, if
you don't mind.

1141
00:45:47.520 --> 00:45:48.800
AUDIENCE: I can do that.

1142
00:45:48.800 --> 00:45:49.490
MIKE WEST: I'll take
a look at it.

1143
00:45:49.490 --> 00:45:49.880
Thank you.

1144
00:45:49.880 --> 00:45:50.560
AUDIENCE: Thank you.

1145
00:45:50.560 --> 00:45:51.810
MIKE WEST: Thank you.

1146
00:45:51.810 --> 00:45:55.280
1147
00:45:55.280 --> 00:45:56.890
AUDIENCE: Question about
potentially selling

1148
00:45:56.890 --> 00:45:59.890
extensions, do you-- is there a
plan in the store to extend

1149
00:45:59.890 --> 00:46:02.060
the apps, like purchase ability

1150
00:46:02.060 --> 00:46:04.620
APIs into Chrome extension?

1151
00:46:04.620 --> 00:46:06.470
MIKE WEST: There's nothing
to announce.

1152
00:46:06.470 --> 00:46:08.650
I don't know of any plans.

1153
00:46:08.650 --> 00:46:12.010
AUDIENCE: OK then, a subset to
that, what would Chrome's--

1154
00:46:12.010 --> 00:46:15.880
or, potentially, what would
the thought be on,

1155
00:46:15.880 --> 00:46:19.470
hypothetically, bundling an app
in the store and the app's

1156
00:46:19.470 --> 00:46:24.020
sole existence just be a license
file that I can sell

1157
00:46:24.020 --> 00:46:27.490
and then use the Chrome
management permissions to

1158
00:46:27.490 --> 00:46:30.080
check the existence of
installation of both and

1159
00:46:30.080 --> 00:46:33.140
thereby shoehorn some way
to sell an extension.

1160
00:46:33.140 --> 00:46:36.740
If I managed to do that, would
that somehow get me kicked out

1161
00:46:36.740 --> 00:46:37.300
of the store?

1162
00:46:37.300 --> 00:46:40.140
MIKE WEST: It sounds
interesting.

1163
00:46:40.140 --> 00:46:40.880
AUDIENCE: All right,
well, [INAUDIBLE].

1164
00:46:40.880 --> 00:46:41.500
MIKE WEST: That's the
first I've heard of

1165
00:46:41.500 --> 00:46:42.080
something like that.

1166
00:46:42.080 --> 00:46:43.330
So--

1167
00:46:43.330 --> 00:46:45.380
1168
00:46:45.380 --> 00:46:47.950
AUDIENCE: Currently, building
cross-browser extensions

1169
00:46:47.950 --> 00:46:50.850
across different browsers
is a pain.

1170
00:46:50.850 --> 00:46:54.210
The more and more we use
advanced Chrome APIs, we are

1171
00:46:54.210 --> 00:46:57.090
alienating ourselves from
Safari and Firefox.

1172
00:46:57.090 --> 00:46:59.190
I'm not even talking about IE.

1173
00:46:59.190 --> 00:47:01.850
Like browsers-- even like Safari
that chooses that kit,

1174
00:47:01.850 --> 00:47:03.840
we are alienating ourselves.

1175
00:47:03.840 --> 00:47:08.537
Are there any plans from
Chromium to prescribe a base

1176
00:47:08.537 --> 00:47:12.970
set of APIs or form a consortium
so that these are

1177
00:47:12.970 --> 00:47:14.860
some basic APIs that
should be present

1178
00:47:14.860 --> 00:47:16.860
across all the browsers.

1179
00:47:16.860 --> 00:47:19.410
[INTERPOSING VOICES]

1180
00:47:19.410 --> 00:47:21.780
MIKE WEST: Part of the issue,
I think, is that extensions

1181
00:47:21.780 --> 00:47:23.960
really enable you to dive deeply
into the way that a

1182
00:47:23.960 --> 00:47:24.820
browser works.

1183
00:47:24.820 --> 00:47:28.880
And they're really well bound
together with the way the

1184
00:47:28.880 --> 00:47:31.700
browser itself works.

1185
00:47:31.700 --> 00:47:36.080
I think there probably would be
value in figuring out some

1186
00:47:36.080 --> 00:47:41.570
way of dealing with extensions
in a cross-browser fashion.

1187
00:47:41.570 --> 00:47:44.570
What we think, however, is that
extensions are really

1188
00:47:44.570 --> 00:47:46.050
based on web technologies.

1189
00:47:46.050 --> 00:47:48.270
And to whatever extent possible,
you should be

1190
00:47:48.270 --> 00:47:51.750
building things in HTML and
CSS and JavaScript.

1191
00:47:51.750 --> 00:47:54.260
And those sorts of things,
especially the back end

1192
00:47:54.260 --> 00:47:57.070
portion, should be reusable
across browsers.

1193
00:47:57.070 --> 00:47:59.740
I think you can look at
extensions, like HTTPS

1194
00:47:59.740 --> 00:48:02.430
Everywhere, that have presence
on multiple browsers.

1195
00:48:02.430 --> 00:48:04.530
And what they've basically done
is create a library in

1196
00:48:04.530 --> 00:48:07.350
the back end and then put a
thin shell on top of that

1197
00:48:07.350 --> 00:48:10.650
library that lets them target
both Firefox and Chrome.

1198
00:48:10.650 --> 00:48:12.530
We think that's a pretty
successful model because it

1199
00:48:12.530 --> 00:48:14.980
enables them to do the things
that they do really well--

1200
00:48:14.980 --> 00:48:16.270
building this library--

1201
00:48:16.270 --> 00:48:18.990
and then allow the browsers to
do the things that they do

1202
00:48:18.990 --> 00:48:21.930
really well by having specific
APIs for each.

1203
00:48:21.930 --> 00:48:22.920
But you're entirely correct.

1204
00:48:22.920 --> 00:48:25.960
It would be nice if everything
was the same everywhere.

1205
00:48:25.960 --> 00:48:28.490
That's simply not where
we are right now.

1206
00:48:28.490 --> 00:48:30.770
AUDIENCE: I have another
question about extending on

1207
00:48:30.770 --> 00:48:32.230
the malicious extensions.

1208
00:48:32.230 --> 00:48:34.920
Say if an extension currently
requests x number of

1209
00:48:34.920 --> 00:48:38.340
permissions and on a remote
update it's going to access

1210
00:48:38.340 --> 00:48:41.220
more permissions to do
some thing that it

1211
00:48:41.220 --> 00:48:42.050
shouldn't be doing.

1212
00:48:42.050 --> 00:48:44.690
Are there any things
to prevent that?

1213
00:48:44.690 --> 00:48:46.130
Like, say, one of the--

1214
00:48:46.130 --> 00:48:47.750
it might not be intentional.

1215
00:48:47.750 --> 00:48:50.510
One of those popular extensions
are putting

1216
00:48:50.510 --> 00:48:52.580
affiliate links on
Google search.

1217
00:48:52.580 --> 00:48:54.330
Like, basically, it could put
a content script and do

1218
00:48:54.330 --> 00:48:55.270
anything it wants.

1219
00:48:55.270 --> 00:48:58.190
What are steps from those?

1220
00:48:58.190 --> 00:49:00.190
MIKE WEST: Currently, if an
extension requests more

1221
00:49:00.190 --> 00:49:03.110
permissions, then it'll be
disabled on update until the

1222
00:49:03.110 --> 00:49:04.880
user specifically enables it.

1223
00:49:04.880 --> 00:49:07.900
So, they'll get an info bar at
the top of-- or, actually,

1224
00:49:07.900 --> 00:49:08.700
it's not an info bar anymore.

1225
00:49:08.700 --> 00:49:11.110
It's a pop-up that says, this
extension requested more

1226
00:49:11.110 --> 00:49:11.900
permissions.

1227
00:49:11.900 --> 00:49:13.640
It's been disabled.

1228
00:49:13.640 --> 00:49:15.730
And you can re-enable
it from that menu.

1229
00:49:15.730 --> 00:49:17.880
So it gives you the ability to
determine that the extension

1230
00:49:17.880 --> 00:49:20.130
is now requesting more
permissions and to evaluate

1231
00:49:20.130 --> 00:49:22.980
that based on what you know
that the extension does.

1232
00:49:22.980 --> 00:49:25.020
What we'd also like to see is
people moving more towards

1233
00:49:25.020 --> 00:49:28.340
optional permissions, which we
introduced a few months ago.

1234
00:49:28.340 --> 00:49:29.960
I'm not exactly sure
when it came out.

1235
00:49:29.960 --> 00:49:31.250
But, by having optional

1236
00:49:31.250 --> 00:49:33.140
permissions, we don't actually--

1237
00:49:33.140 --> 00:49:36.310
if you request new optional
permissions in a new extension

1238
00:49:36.310 --> 00:49:38.640
update, we don't give you this
info bar because it actually

1239
00:49:38.640 --> 00:49:40.820
doesn't change the way
the extension works.

1240
00:49:40.820 --> 00:49:43.440
But it gives you the ability
then to explicitly request

1241
00:49:43.440 --> 00:49:46.320
those new things from the user
when the time is right.

1242
00:49:46.320 --> 00:49:47.050
So geolocation--

1243
00:49:47.050 --> 00:49:50.140
for instance-- if I need to
interact in some way with a

1244
00:49:50.140 --> 00:49:52.890
user's location, I can make
geolocation an optional

1245
00:49:52.890 --> 00:49:53.580
permission.

1246
00:49:53.580 --> 00:49:55.200
And then when the user actually
interacts with the

1247
00:49:55.200 --> 00:49:57.780
extension and needs that new
permission, I can ask them

1248
00:49:57.780 --> 00:50:00.390
then, when it's really quite
relevant to the way that

1249
00:50:00.390 --> 00:50:01.996
they're working.

1250
00:50:01.996 --> 00:50:02.840
AUDIENCE: Thanks.

1251
00:50:02.840 --> 00:50:04.090
MIKE WEST: Thank you.

1252
00:50:04.090 --> 00:50:06.360
1253
00:50:06.360 --> 00:50:06.855
Go ahead.

1254
00:50:06.855 --> 00:50:08.340
OK, one more.

1255
00:50:08.340 --> 00:50:09.830
Two more.

1256
00:50:09.830 --> 00:50:12.170
AUDIENCE: Hi, I work
at Genentech.

1257
00:50:12.170 --> 00:50:17.360
And we are trying to deploy
Chrome for Business for all of

1258
00:50:17.360 --> 00:50:20.140
our employees at Roche
and Genentech.

1259
00:50:20.140 --> 00:50:20.970
I was wondering--

1260
00:50:20.970 --> 00:50:21.950
and we also have--

1261
00:50:21.950 --> 00:50:25.630
currently, we just use the
consumer Chrome browser and

1262
00:50:25.630 --> 00:50:27.840
build extensions on it.

1263
00:50:27.840 --> 00:50:33.200
Are there any limitations to
using Chrome for business as

1264
00:50:33.200 --> 00:50:35.420
far as building extensions
goes?

1265
00:50:35.420 --> 00:50:38.760
Or is it just the exact same
sort of functionality?

1266
00:50:38.760 --> 00:50:42.420
MIKE WEST: You actually have
a really good mechanism for

1267
00:50:42.420 --> 00:50:44.440
deploying Chrome inside
of Enterprise.

1268
00:50:44.440 --> 00:50:46.500
So it's very Enterprise ready.

1269
00:50:46.500 --> 00:50:48.820
You can deploy it as an SI
package and deal with

1270
00:50:48.820 --> 00:50:51.390
corporate policies via,
you know, like Active

1271
00:50:51.390 --> 00:50:52.610
Directory or something.

1272
00:50:52.610 --> 00:50:55.170
Via Active Directory you can
actually set a list of

1273
00:50:55.170 --> 00:50:58.290
extensions that should be auto
installed or that are banned

1274
00:50:58.290 --> 00:51:00.430
within the context of
an organization.

1275
00:51:00.430 --> 00:51:03.370
So, by using group policy in
the same way that your IT

1276
00:51:03.370 --> 00:51:06.970
department is probably quite
familiar with, they'll be able

1277
00:51:06.970 --> 00:51:11.180
to deploy Chrome locally and
actually deal in a very

1278
00:51:11.180 --> 00:51:13.140
detailed manner with the
extensions that are

1279
00:51:13.140 --> 00:51:15.940
pre-installed and also the
extensions that aren't allowed

1280
00:51:15.940 --> 00:51:17.006
to be installed.

1281
00:51:17.006 --> 00:51:17.450
AUDIENCE: OK.

1282
00:51:17.450 --> 00:51:18.490
Thank you.

1283
00:51:18.490 --> 00:51:19.740
MIKE WEST: Thank you.

1284
00:51:19.740 --> 00:51:21.830
1285
00:51:21.830 --> 00:51:22.210
Great.

1286
00:51:22.210 --> 00:51:23.240
Thank you very much
for your time.

1287
00:51:23.240 --> 00:51:26.000
If you have any questions later
on, I'll be at office

1288
00:51:26.000 --> 00:51:28.380
hours pretty much
all the time.

1289
00:51:28.380 --> 00:51:29.670
So just come hang out.

1290
00:51:29.670 --> 00:51:31.930
We'd be happy to answer any
questions that you have.

1291
00:51:31.930 --> 00:51:33.180
Thank you very much.

1292
00:51:33.180 --> 00:51:35.395
